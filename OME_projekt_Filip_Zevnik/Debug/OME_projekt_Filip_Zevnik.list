
OME_projekt_Filip_Zevnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c094  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0006d270  0800c278  0800c278  0001c278  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080794e8  080794e8  00090084  2**0
                  CONTENTS
  4 .ARM          00000000  080794e8  080794e8  00090084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080794e8  080794e8  00090084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080794e8  080794e8  000894e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080794ec  080794ec  000894ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080794f0  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001de18  20000084  08079574  00090084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001de9c  08079574  0009de9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00090084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000362e9  00000000  00000000  000900b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000067f6  00000000  00000000  000c639d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000255f1  00000000  00000000  000ccb93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002060  00000000  00000000  000f2188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029a8  00000000  00000000  000f41e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003306f  00000000  00000000  000f6b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00033798  00000000  00000000  00129bff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132305  00000000  00000000  0015d397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0028f69c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006bb8  00000000  00000000  0028f6ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c25c 	.word	0x0800c25c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000088 	.word	0x20000088
 800021c:	0800c25c 	.word	0x0800c25c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <NVIC_EncodePriority>:
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c98:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c9c:	f1c0 0c07 	rsb	ip, r0, #7
 8000ca0:	f1bc 0f04 	cmp.w	ip, #4
 8000ca4:	bf28      	it	cs
 8000ca6:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000caa:	1d03      	adds	r3, r0, #4
 8000cac:	2b06      	cmp	r3, #6
 8000cae:	d90c      	bls.n	8000cca <NVIC_EncodePriority+0x32>
 8000cb0:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb6:	fa00 fc0c 	lsl.w	ip, r0, ip
 8000cba:	ea21 010c 	bic.w	r1, r1, ip
 8000cbe:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	4098      	lsls	r0, r3
 8000cc2:	ea22 0000 	bic.w	r0, r2, r0
         );
}
 8000cc6:	4308      	orrs	r0, r1
 8000cc8:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e7f1      	b.n	8000cb2 <NVIC_EncodePriority+0x1a>
	...

08000cd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cd4:	b08d      	sub	sp, #52	; 0x34
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cd6:	2400      	movs	r4, #0
 8000cd8:	9406      	str	r4, [sp, #24]
 8000cda:	9407      	str	r4, [sp, #28]
 8000cdc:	9408      	str	r4, [sp, #32]
 8000cde:	9409      	str	r4, [sp, #36]	; 0x24
 8000ce0:	940a      	str	r4, [sp, #40]	; 0x28
 8000ce2:	940b      	str	r4, [sp, #44]	; 0x2c
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ce4:	4b7f      	ldr	r3, [pc, #508]	; (8000ee4 <MX_GPIO_Init+0x214>)
 8000ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce8:	f042 0204 	orr.w	r2, r2, #4
 8000cec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cf0:	f002 0204 	and.w	r2, r2, #4
 8000cf4:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000cf6:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cf8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cfa:	f042 0220 	orr.w	r2, r2, #32
 8000cfe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d02:	f002 0220 	and.w	r2, r2, #32
 8000d06:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 8000d08:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d0c:	f042 0210 	orr.w	r2, r2, #16
 8000d10:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d14:	f002 0210 	and.w	r2, r2, #16
 8000d18:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000d1a:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d1c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d1e:	f042 0202 	orr.w	r2, r2, #2
 8000d22:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d26:	f002 0202 	and.w	r2, r2, #2
 8000d2a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000d2c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d30:	f042 0208 	orr.w	r2, r2, #8
 8000d34:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d38:	f002 0208 	and.w	r2, r2, #8
 8000d3c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000d3e:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d46:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000d50:	9b00      	ldr	r3, [sp, #0]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000d52:	4f65      	ldr	r7, [pc, #404]	; (8000ee8 <MX_GPIO_Init+0x218>)
 8000d54:	f04f 0808 	mov.w	r8, #8
 8000d58:	f8c7 8028 	str.w	r8, [r7, #40]	; 0x28
 8000d5c:	2310      	movs	r3, #16
 8000d5e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d60:	2320      	movs	r3, #32
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d64:	4e61      	ldr	r6, [pc, #388]	; (8000eec <MX_GPIO_Init+0x21c>)
 8000d66:	2501      	movs	r5, #1
 8000d68:	62b5      	str	r5, [r6, #40]	; 0x28
 8000d6a:	f04f 0902 	mov.w	r9, #2
 8000d6e:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8000d72:	f04f 0a04 	mov.w	sl, #4
 8000d76:	f8c6 a028 	str.w	sl, [r6, #40]	; 0x28
 8000d7a:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
 8000d7e:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8000d82:	f8df b170 	ldr.w	fp, [pc, #368]	; 8000ef4 <MX_GPIO_Init+0x224>
 8000d86:	f8cb 8028 	str.w	r8, [fp, #40]	; 0x28
 8000d8a:	4b59      	ldr	r3, [pc, #356]	; (8000ef0 <MX_GPIO_Init+0x220>)
 8000d8c:	f8c3 9028 	str.w	r9, [r3, #40]	; 0x28

	/**/
	LL_GPIO_ResetOutputPin(GPIOE, LL_GPIO_PIN_1);

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d94:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d96:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d98:	a906      	add	r1, sp, #24
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f003 fe78 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000da0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000da4:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000da6:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000da8:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	a906      	add	r1, sp, #24
 8000dac:	4630      	mov	r0, r6
 8000dae:	f003 fe6f 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000db6:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000db8:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dba:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	a906      	add	r1, sp, #24
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	f003 fe66 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000dc4:	f8cd 8018 	str.w	r8, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dc8:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dca:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dcc:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dce:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dd0:	a906      	add	r1, sp, #24
 8000dd2:	4638      	mov	r0, r7
 8000dd4:	f003 fe5c 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000dd8:	2310      	movs	r3, #16
 8000dda:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ddc:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000dde:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000de0:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de2:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de4:	a906      	add	r1, sp, #24
 8000de6:	4638      	mov	r0, r7
 8000de8:	f003 fe52 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000dec:	2320      	movs	r3, #32
 8000dee:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000df0:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000df2:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df4:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df6:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000df8:	a906      	add	r1, sp, #24
 8000dfa:	4638      	mov	r0, r7
 8000dfc:	f003 fe48 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e00:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e02:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e04:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e06:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e08:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	a906      	add	r1, sp, #24
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f003 fe3f 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e12:	f8cd 9018 	str.w	r9, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e16:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e18:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e1a:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e1c:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1e:	a906      	add	r1, sp, #24
 8000e20:	4630      	mov	r0, r6
 8000e22:	f003 fe35 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000e26:	f8cd a018 	str.w	sl, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e2a:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e2c:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e2e:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e30:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e32:	a906      	add	r1, sp, #24
 8000e34:	4630      	mov	r0, r6
 8000e36:	f003 fe2b 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000e3a:	f8cd 8018 	str.w	r8, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e3e:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e40:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e42:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e44:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e46:	a906      	add	r1, sp, #24
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f003 fe21 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000e4e:	f8cd a018 	str.w	sl, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e52:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e54:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e56:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e58:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e5a:	a906      	add	r1, sp, #24
 8000e5c:	4638      	mov	r0, r7
 8000e5e:	f003 fe17 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e62:	9506      	str	r5, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e64:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e66:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e68:	f506 5680 	add.w	r6, r6, #4096	; 0x1000
 8000e6c:	a906      	add	r1, sp, #24
 8000e6e:	4630      	mov	r0, r6
 8000e70:	f003 fe0e 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e74:	f8cd 9018 	str.w	r9, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e78:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e7a:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e7c:	a906      	add	r1, sp, #24
 8000e7e:	4630      	mov	r0, r6
 8000e80:	f003 fe06 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e84:	2740      	movs	r7, #64	; 0x40
 8000e86:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e88:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e8a:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e8c:	a906      	add	r1, sp, #24
 8000e8e:	4630      	mov	r0, r6
 8000e90:	f003 fdfe 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e9a:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e9c:	950a      	str	r5, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e9e:	a906      	add	r1, sp, #24
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	f003 fdf5 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000ea6:	f8cd 8018 	str.w	r8, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eaa:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eac:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eae:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eb0:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eb2:	a906      	add	r1, sp, #24
 8000eb4:	4658      	mov	r0, fp
 8000eb6:	f003 fdeb 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000eba:	9706      	str	r7, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ebc:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ebe:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec0:	a906      	add	r1, sp, #24
 8000ec2:	4658      	mov	r0, fp
 8000ec4:	f003 fde4 	bl	8004a90 <LL_GPIO_Init>

	/**/
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000ec8:	f8cd 9018 	str.w	r9, [sp, #24]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ecc:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ece:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ed0:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ed2:	940a      	str	r4, [sp, #40]	; 0x28
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed4:	a906      	add	r1, sp, #24
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <MX_GPIO_Init+0x220>)
 8000ed8:	f003 fdda 	bl	8004a90 <LL_GPIO_Init>

}
 8000edc:	b00d      	add	sp, #52	; 0x34
 8000ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	48001400 	.word	0x48001400
 8000eec:	48000800 	.word	0x48000800
 8000ef0:	48001000 	.word	0x48001000
 8000ef4:	48000c00 	.word	0x48000c00

08000ef8 <MX_TIM6_Init>:
static void MX_TIM6_Init(void) {
 8000ef8:	b510      	push	{r4, lr}
 8000efa:	b086      	sub	sp, #24
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000efc:	2400      	movs	r4, #0
 8000efe:	9401      	str	r4, [sp, #4]
 8000f00:	9402      	str	r4, [sp, #8]
 8000f02:	9403      	str	r4, [sp, #12]
 8000f04:	9404      	str	r4, [sp, #16]
 8000f06:	9405      	str	r4, [sp, #20]
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_TIM6_Init+0x7c>)
 8000f0a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f0c:	f042 0210 	orr.w	r2, r2, #16
 8000f10:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000f1a:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b16      	ldr	r3, [pc, #88]	; (8000f78 <MX_TIM6_Init+0x80>)
 8000f1e:	68d8      	ldr	r0, [r3, #12]
	NVIC_SetPriority(TIM6_DAC_IRQn,
 8000f20:	4622      	mov	r2, r4
 8000f22:	210f      	movs	r1, #15
 8000f24:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8000f28:	f7ff feb6 	bl	8000c98 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	0100      	lsls	r0, r0, #4
 8000f2e:	b2c0      	uxtb	r0, r0
 8000f30:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <MX_TIM6_Init+0x84>)
 8000f32:	f883 0336 	strb.w	r0, [r3, #822]	; 0x336
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000f3a:	605a      	str	r2, [r3, #4]
	TIM_InitStruct.Prescaler = 144;
 8000f3c:	2390      	movs	r3, #144	; 0x90
 8000f3e:	f8ad 3004 	strh.w	r3, [sp, #4]
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000f42:	9402      	str	r4, [sp, #8]
	TIM_InitStruct.Autoreload = 49999;
 8000f44:	f24c 334f 	movw	r3, #49999	; 0xc34f
 8000f48:	9303      	str	r3, [sp, #12]
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8000f4a:	4c0d      	ldr	r4, [pc, #52]	; (8000f80 <MX_TIM6_Init+0x88>)
 8000f4c:	a901      	add	r1, sp, #4
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f004 f96a 	bl	8005228 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000f54:	6823      	ldr	r3, [r4, #0]
 8000f56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f5a:	6023      	str	r3, [r4, #0]
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000f5c:	6863      	ldr	r3, [r4, #4]
 8000f5e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8000f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f66:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000f68:	68a3      	ldr	r3, [r4, #8]
 8000f6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f6e:	60a3      	str	r3, [r4, #8]
}
 8000f70:	b006      	add	sp, #24
 8000f72:	bd10      	pop	{r4, pc}
 8000f74:	40021000 	.word	0x40021000
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	e000e100 	.word	0xe000e100
 8000f80:	40001000 	.word	0x40001000

08000f84 <MX_TIM4_Init>:
static void MX_TIM4_Init(void) {
 8000f84:	b570      	push	{r4, r5, r6, lr}
 8000f86:	b096      	sub	sp, #88	; 0x58
	LL_TIM_InitTypeDef TIM_InitStruct = { 0 };
 8000f88:	2400      	movs	r4, #0
 8000f8a:	9411      	str	r4, [sp, #68]	; 0x44
 8000f8c:	9412      	str	r4, [sp, #72]	; 0x48
 8000f8e:	9413      	str	r4, [sp, #76]	; 0x4c
 8000f90:	9414      	str	r4, [sp, #80]	; 0x50
 8000f92:	9415      	str	r4, [sp, #84]	; 0x54
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = { 0 };
 8000f94:	2220      	movs	r2, #32
 8000f96:	4621      	mov	r1, r4
 8000f98:	a809      	add	r0, sp, #36	; 0x24
 8000f9a:	f007 fdc7 	bl	8008b2c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000f9e:	9403      	str	r4, [sp, #12]
 8000fa0:	9404      	str	r4, [sp, #16]
 8000fa2:	9405      	str	r4, [sp, #20]
 8000fa4:	9406      	str	r4, [sp, #24]
 8000fa6:	9407      	str	r4, [sp, #28]
 8000fa8:	9408      	str	r4, [sp, #32]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000faa:	4e2c      	ldr	r6, [pc, #176]	; (800105c <MX_TIM4_Init+0xd8>)
 8000fac:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000fae:	f043 0304 	orr.w	r3, r3, #4
 8000fb2:	65b3      	str	r3, [r6, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fb4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8000fbc:	9b02      	ldr	r3, [sp, #8]
	TIM_InitStruct.Prescaler = 1440;
 8000fbe:	f44f 63b4 	mov.w	r3, #1440	; 0x5a0
 8000fc2:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	TIM_InitStruct.Autoreload = 99;
 8000fc6:	2363      	movs	r3, #99	; 0x63
 8000fc8:	9313      	str	r3, [sp, #76]	; 0x4c
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 8000fca:	4d25      	ldr	r5, [pc, #148]	; (8001060 <MX_TIM4_Init+0xdc>)
 8000fcc:	a911      	add	r1, sp, #68	; 0x44
 8000fce:	4628      	mov	r0, r5
 8000fd0:	f004 f92a 	bl	8005228 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000fd4:	682b      	ldr	r3, [r5, #0]
 8000fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000fda:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000fdc:	68ab      	ldr	r3, [r5, #8]
 8000fde:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000fe2:	f023 0307 	bic.w	r3, r3, #7
 8000fe6:	60ab      	str	r3, [r5, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8000fe8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fec:	f8d2 3818 	ldr.w	r3, [r2, #2072]	; 0x818
 8000ff0:	f043 0308 	orr.w	r3, r3, #8
 8000ff4:	f8c2 3818 	str.w	r3, [r2, #2072]	; 0x818
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000ff8:	2360      	movs	r3, #96	; 0x60
 8000ffa:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000ffc:	940a      	str	r4, [sp, #40]	; 0x28
	TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000ffe:	940b      	str	r4, [sp, #44]	; 0x2c
	TIM_OC_InitStruct.CompareValue = 0;
 8001000:	940c      	str	r4, [sp, #48]	; 0x30
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001002:	940d      	str	r4, [sp, #52]	; 0x34
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001004:	aa09      	add	r2, sp, #36	; 0x24
 8001006:	2101      	movs	r1, #1
 8001008:	4628      	mov	r0, r5
 800100a:	f004 f97d 	bl	8005308 <LL_TIM_OC_Init>
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <MX_TIM4_Init+0xe0>)
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001010:	6813      	ldr	r3, [r2, #0]
 8001012:	f023 0304 	bic.w	r3, r3, #4
 8001016:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001018:	686b      	ldr	r3, [r5, #4]
 800101a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800101e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001022:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001024:	68ab      	ldr	r3, [r5, #8]
 8001026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800102a:	60ab      	str	r3, [r5, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800102c:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64f3      	str	r3, [r6, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001034:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800103c:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800103e:	2340      	movs	r3, #64	; 0x40
 8001040:	9303      	str	r3, [sp, #12]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001042:	2302      	movs	r3, #2
 8001044:	9304      	str	r3, [sp, #16]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001046:	9405      	str	r4, [sp, #20]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001048:	9406      	str	r4, [sp, #24]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800104a:	9407      	str	r4, [sp, #28]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800104c:	9308      	str	r3, [sp, #32]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104e:	a903      	add	r1, sp, #12
 8001050:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_TIM4_Init+0xe4>)
 8001052:	f003 fd1d 	bl	8004a90 <LL_GPIO_Init>
}
 8001056:	b016      	add	sp, #88	; 0x58
 8001058:	bd70      	pop	{r4, r5, r6, pc}
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	40000800 	.word	0x40000800
 8001064:	40000818 	.word	0x40000818
 8001068:	48000400 	.word	0x48000400

0800106c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	// Check which version of the timer triggered this callback and toggle LED
	if (htim == &htim2) {
 800106c:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800106e:	4283      	cmp	r3, r0
 8001070:	d000      	beq.n	8001074 <HAL_TIM_PeriodElapsedCallback+0x8>
			else if (sound_select == 3)
				TIM5->CCR2 = sample4[sound_counter];
			sound_counter++;
		}
	}
}
 8001072:	4770      	bx	lr
		if (sound_counter < sound_limit) {
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800107a:	6812      	ldr	r2, [r2, #0]
 800107c:	4293      	cmp	r3, r2
 800107e:	daf8      	bge.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x6>
			if (sound_select == 0)
 8001080:	4a12      	ldr	r2, [pc, #72]	; (80010cc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001082:	6812      	ldr	r2, [r2, #0]
 8001084:	b93a      	cbnz	r2, 8001096 <HAL_TIM_PeriodElapsedCallback+0x2a>
				TIM5->CCR2 = sample1[sound_counter];
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001088:	5cd1      	ldrb	r1, [r2, r3]
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 800108c:	6391      	str	r1, [r2, #56]	; 0x38
			sound_counter++;
 800108e:	3301      	adds	r3, #1
 8001090:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	e7ed      	b.n	8001072 <HAL_TIM_PeriodElapsedCallback+0x6>
			else if (sound_select == 1)
 8001096:	2a01      	cmp	r2, #1
 8001098:	d008      	beq.n	80010ac <HAL_TIM_PeriodElapsedCallback+0x40>
			else if (sound_select == 2)
 800109a:	2a02      	cmp	r2, #2
 800109c:	d00b      	beq.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x4a>
			else if (sound_select == 3)
 800109e:	2a03      	cmp	r2, #3
 80010a0:	d1f5      	bne.n	800108e <HAL_TIM_PeriodElapsedCallback+0x22>
				TIM5->CCR2 = sample4[sound_counter];
 80010a2:	4a0d      	ldr	r2, [pc, #52]	; (80010d8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80010a4:	5cd1      	ldrb	r1, [r2, r3]
 80010a6:	4a0b      	ldr	r2, [pc, #44]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010a8:	6391      	str	r1, [r2, #56]	; 0x38
 80010aa:	e7f0      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x22>
				TIM5->CCR2 = sample2[sound_counter];
 80010ac:	4a0b      	ldr	r2, [pc, #44]	; (80010dc <HAL_TIM_PeriodElapsedCallback+0x70>)
 80010ae:	5cd1      	ldrb	r1, [r2, r3]
 80010b0:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010b2:	6391      	str	r1, [r2, #56]	; 0x38
 80010b4:	e7eb      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x22>
				TIM5->CCR2 = sample3[sound_counter];
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80010b8:	5cd1      	ldrb	r1, [r2, r3]
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80010bc:	6391      	str	r1, [r2, #56]	; 0x38
 80010be:	e7e6      	b.n	800108e <HAL_TIM_PeriodElapsedCallback+0x22>
 80010c0:	200002fc 	.word	0x200002fc
 80010c4:	2001d084 	.word	0x2001d084
 80010c8:	2001d088 	.word	0x2001d088
 80010cc:	2001d08c 	.word	0x2001d08c
 80010d0:	0800c2d0 	.word	0x0800c2d0
 80010d4:	40000c00 	.word	0x40000c00
 80010d8:	0800e990 	.word	0x0800e990
 80010dc:	0800cf5c 	.word	0x0800cf5c
 80010e0:	0800db04 	.word	0x0800db04

080010e4 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010e4:	b672      	cpsid	i
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80010e6:	e7fe      	b.n	80010e6 <Error_Handler+0x2>

080010e8 <MX_USART3_UART_Init>:
static void MX_USART3_UART_Init(void) {
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b0a7      	sub	sp, #156	; 0x9c
	LL_USART_InitTypeDef USART_InitStruct = { 0 };
 80010ec:	2220      	movs	r2, #32
 80010ee:	2100      	movs	r1, #0
 80010f0:	a81e      	add	r0, sp, #120	; 0x78
 80010f2:	f007 fd1b 	bl	8008b2c <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80010f6:	2100      	movs	r1, #0
 80010f8:	9118      	str	r1, [sp, #96]	; 0x60
 80010fa:	9119      	str	r1, [sp, #100]	; 0x64
 80010fc:	911a      	str	r1, [sp, #104]	; 0x68
 80010fe:	911b      	str	r1, [sp, #108]	; 0x6c
 8001100:	911c      	str	r1, [sp, #112]	; 0x70
 8001102:	911d      	str	r1, [sp, #116]	; 0x74
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8001104:	2254      	movs	r2, #84	; 0x54
 8001106:	a803      	add	r0, sp, #12
 8001108:	f007 fd10 	bl	8008b2c <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800110c:	2304      	movs	r3, #4
 800110e:	9303      	str	r3, [sp, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8001110:	a803      	add	r0, sp, #12
 8001112:	f002 fac5 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8001116:	2800      	cmp	r0, #0
 8001118:	d17e      	bne.n	8001218 <MX_USART3_UART_Init+0x130>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800111a:	4b40      	ldr	r3, [pc, #256]	; (800121c <MX_USART3_UART_Init+0x134>)
 800111c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800111e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001122:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001124:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001126:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800112a:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800112c:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800112e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001130:	f042 0202 	orr.w	r2, r2, #2
 8001134:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800113e:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8001140:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001144:	9318      	str	r3, [sp, #96]	; 0x60
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001146:	2702      	movs	r7, #2
 8001148:	9719      	str	r7, [sp, #100]	; 0x64
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800114a:	2400      	movs	r4, #0
 800114c:	941a      	str	r4, [sp, #104]	; 0x68
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800114e:	941b      	str	r4, [sp, #108]	; 0x6c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001150:	941c      	str	r4, [sp, #112]	; 0x70
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001152:	2607      	movs	r6, #7
 8001154:	961d      	str	r6, [sp, #116]	; 0x74
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001156:	4d32      	ldr	r5, [pc, #200]	; (8001220 <MX_USART3_UART_Init+0x138>)
 8001158:	a918      	add	r1, sp, #96	; 0x60
 800115a:	4628      	mov	r0, r5
 800115c:	f003 fc98 	bl	8004a90 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8001160:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001164:	9318      	str	r3, [sp, #96]	; 0x60
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001166:	9719      	str	r7, [sp, #100]	; 0x64
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001168:	941a      	str	r4, [sp, #104]	; 0x68
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800116a:	941b      	str	r4, [sp, #108]	; 0x6c
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800116c:	941c      	str	r4, [sp, #112]	; 0x70
	GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800116e:	961d      	str	r6, [sp, #116]	; 0x74
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001170:	a918      	add	r1, sp, #96	; 0x60
 8001172:	4628      	mov	r0, r5
 8001174:	f003 fc8c 	bl	8004a90 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001178:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_USART3_UART_Init+0x13c>)
 800117a:	68d8      	ldr	r0, [r3, #12]
	NVIC_SetPriority(USART3_IRQn,
 800117c:	4622      	mov	r2, r4
 800117e:	4621      	mov	r1, r4
 8001180:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8001184:	f7ff fd88 	bl	8000c98 <NVIC_EncodePriority>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	0100      	lsls	r0, r0, #4
 800118a:	b2c0      	uxtb	r0, r0
 800118c:	4b26      	ldr	r3, [pc, #152]	; (8001228 <MX_USART3_UART_Init+0x140>)
 800118e:	f883 0327 	strb.w	r0, [r3, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	605a      	str	r2, [r3, #4]
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8001196:	941e      	str	r4, [sp, #120]	; 0x78
	USART_InitStruct.BaudRate = 115200;
 8001198:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800119c:	931f      	str	r3, [sp, #124]	; 0x7c
	USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800119e:	9420      	str	r4, [sp, #128]	; 0x80
	USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80011a0:	9421      	str	r4, [sp, #132]	; 0x84
	USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80011a2:	9422      	str	r4, [sp, #136]	; 0x88
	USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80011a4:	230c      	movs	r3, #12
 80011a6:	9323      	str	r3, [sp, #140]	; 0x8c
	USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80011a8:	9424      	str	r4, [sp, #144]	; 0x90
	USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80011aa:	9425      	str	r4, [sp, #148]	; 0x94
	LL_USART_Init(USART3, &USART_InitStruct);
 80011ac:	a91e      	add	r1, sp, #120	; 0x78
 80011ae:	481f      	ldr	r0, [pc, #124]	; (800122c <MX_USART3_UART_Init+0x144>)
 80011b0:	f004 f8d4 	bl	800535c <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 80011b4:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <MX_USART3_UART_Init+0x148>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011b6:	e853 2f00 	ldrex	r2, [r3]
 80011ba:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011be:	e843 2100 	strex	r1, r2, [r3]
 80011c2:	2900      	cmp	r1, #0
 80011c4:	d1f6      	bne.n	80011b4 <MX_USART3_UART_Init+0xcc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011c6:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 80011ca:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ce:	e843 2100 	strex	r1, r2, [r3]
 80011d2:	2900      	cmp	r1, #0
 80011d4:	d1f7      	bne.n	80011c6 <MX_USART3_UART_Init+0xde>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_USART3_UART_Init+0x144>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80011de:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80011e6:	609a      	str	r2, [r3, #8]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80011f0:	689a      	ldr	r2, [r3, #8]
 80011f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011f6:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	f042 0201 	orr.w	r2, r2, #1
 80011fe:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8001200:	4b0a      	ldr	r3, [pc, #40]	; (800122c <MX_USART3_UART_Init+0x144>)
 8001202:	69db      	ldr	r3, [r3, #28]
 8001204:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8001208:	d0fa      	beq.n	8001200 <MX_USART3_UART_Init+0x118>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_USART3_UART_Init+0x144>)
 800120c:	69db      	ldr	r3, [r3, #28]
 800120e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001212:	d0f5      	beq.n	8001200 <MX_USART3_UART_Init+0x118>
}
 8001214:	b027      	add	sp, #156	; 0x9c
 8001216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		Error_Handler();
 8001218:	f7ff ff64 	bl	80010e4 <Error_Handler>
 800121c:	40021000 	.word	0x40021000
 8001220:	48000400 	.word	0x48000400
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	e000e100 	.word	0xe000e100
 800122c:	40004800 	.word	0x40004800
 8001230:	40004808 	.word	0x40004808

08001234 <MX_FMC_Init>:
static void MX_FMC_Init(void) {
 8001234:	b510      	push	{r4, lr}
 8001236:	b088      	sub	sp, #32
	FMC_NORSRAM_TimingTypeDef Timing = { 0 };
 8001238:	2220      	movs	r2, #32
 800123a:	2100      	movs	r1, #0
 800123c:	4668      	mov	r0, sp
 800123e:	f007 fc75 	bl	8008b2c <memset>
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001242:	4817      	ldr	r0, [pc, #92]	; (80012a0 <MX_FMC_Init+0x6c>)
 8001244:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8001248:	6003      	str	r3, [r0, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800124a:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800124e:	6043      	str	r3, [r0, #4]
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001250:	2200      	movs	r2, #0
 8001252:	6082      	str	r2, [r0, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001254:	60c2      	str	r2, [r0, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001256:	6102      	str	r2, [r0, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001258:	2110      	movs	r1, #16
 800125a:	6141      	str	r1, [r0, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800125c:	6182      	str	r2, [r0, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800125e:	61c2      	str	r2, [r0, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001260:	6202      	str	r2, [r0, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001262:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001266:	6243      	str	r3, [r0, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001268:	6282      	str	r2, [r0, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800126a:	62c2      	str	r2, [r0, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800126c:	6302      	str	r2, [r0, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800126e:	6342      	str	r2, [r0, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001270:	6382      	str	r2, [r0, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001272:	63c2      	str	r2, [r0, #60]	; 0x3c
	hsram1.Init.NBLSetupTime = 0;
 8001274:	6442      	str	r2, [r0, #68]	; 0x44
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001276:	6402      	str	r2, [r0, #64]	; 0x40
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 8001278:	f880 2048 	strb.w	r2, [r0, #72]	; 0x48
	Timing.AddressSetupTime = 1;
 800127c:	2301      	movs	r3, #1
 800127e:	9300      	str	r3, [sp, #0]
	Timing.AddressHoldTime = 15;
 8001280:	240f      	movs	r4, #15
 8001282:	9401      	str	r4, [sp, #4]
	Timing.DataSetupTime = 1;
 8001284:	9302      	str	r3, [sp, #8]
	Timing.DataHoldTime = 1;
 8001286:	9303      	str	r3, [sp, #12]
	Timing.BusTurnAroundDuration = 1;
 8001288:	9304      	str	r3, [sp, #16]
	Timing.CLKDivision = 16;
 800128a:	9105      	str	r1, [sp, #20]
	Timing.DataLatency = 17;
 800128c:	2311      	movs	r3, #17
 800128e:	9306      	str	r3, [sp, #24]
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK) {
 8001290:	4669      	mov	r1, sp
 8001292:	f002 fc35 	bl	8003b00 <HAL_SRAM_Init>
 8001296:	b908      	cbnz	r0, 800129c <MX_FMC_Init+0x68>
}
 8001298:	b008      	add	sp, #32
 800129a:	bd10      	pop	{r4, pc}
		Error_Handler();
 800129c:	f7ff ff22 	bl	80010e4 <Error_Handler>
 80012a0:	20000258 	.word	0x20000258

080012a4 <MX_DMA_Init>:
static void MX_DMA_Init(void) {
 80012a4:	b500      	push	{lr}
 80012a6:	b083      	sub	sp, #12
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80012a8:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_DMA_Init+0x80>)
 80012aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ac:	f042 0204 	orr.w	r2, r2, #4
 80012b0:	649a      	str	r2, [r3, #72]	; 0x48
 80012b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012b4:	f002 0204 	and.w	r2, r2, #4
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	9a00      	ldr	r2, [sp, #0]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80012bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	649a      	str	r2, [r3, #72]	; 0x48
 80012c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	9b01      	ldr	r3, [sp, #4]
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 80012ce:	4816      	ldr	r0, [pc, #88]	; (8001328 <MX_DMA_Init+0x84>)
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_DMA_Init+0x88>)
 80012d2:	6003      	str	r3, [r0, #0]
	hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 80012d4:	2300      	movs	r3, #0
 80012d6:	6043      	str	r3, [r0, #4]
	hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012dc:	6082      	str	r2, [r0, #8]
	hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 80012de:	2240      	movs	r2, #64	; 0x40
 80012e0:	60c2      	str	r2, [r0, #12]
	hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
 80012e2:	6103      	str	r3, [r0, #16]
	hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment =
 80012e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e8:	6142      	str	r2, [r0, #20]
	hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	6182      	str	r2, [r0, #24]
	hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 80012f0:	61c3      	str	r3, [r0, #28]
	hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 80012f2:	6203      	str	r3, [r0, #32]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK) {
 80012f4:	f001 fb64 	bl	80029c0 <HAL_DMA_Init>
 80012f8:	b990      	cbnz	r0, 8001320 <MX_DMA_Init+0x7c>
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	4611      	mov	r1, r2
 80012fe:	200b      	movs	r0, #11
 8001300:	f001 faaa 	bl	8002858 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001304:	200b      	movs	r0, #11
 8001306:	f001 fadf 	bl	80028c8 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	4611      	mov	r1, r2
 800130e:	200c      	movs	r0, #12
 8001310:	f001 faa2 	bl	8002858 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001314:	200c      	movs	r0, #12
 8001316:	f001 fad7 	bl	80028c8 <HAL_NVIC_EnableIRQ>
}
 800131a:	b003      	add	sp, #12
 800131c:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001320:	f7ff fee0 	bl	80010e4 <Error_Handler>
 8001324:	40021000 	.word	0x40021000
 8001328:	20000194 	.word	0x20000194
 800132c:	4002001c 	.word	0x4002001c

08001330 <MX_SPI1_Init>:
static void MX_SPI1_Init(void) {
 8001330:	b508      	push	{r3, lr}
	hspi1.Instance = SPI1;
 8001332:	480f      	ldr	r0, [pc, #60]	; (8001370 <MX_SPI1_Init+0x40>)
 8001334:	4b0f      	ldr	r3, [pc, #60]	; (8001374 <MX_SPI1_Init+0x44>)
 8001336:	6003      	str	r3, [r0, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001338:	f44f 7382 	mov.w	r3, #260	; 0x104
 800133c:	6043      	str	r3, [r0, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800133e:	2300      	movs	r3, #0
 8001340:	6083      	str	r3, [r0, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001342:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001346:	60c2      	str	r2, [r0, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001348:	6103      	str	r3, [r0, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800134a:	6143      	str	r3, [r0, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800134c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001350:	6182      	str	r2, [r0, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001352:	2228      	movs	r2, #40	; 0x28
 8001354:	61c2      	str	r2, [r0, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001356:	6203      	str	r3, [r0, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001358:	6243      	str	r3, [r0, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135a:	6283      	str	r3, [r0, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800135c:	2207      	movs	r2, #7
 800135e:	62c2      	str	r2, [r0, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001360:	6303      	str	r3, [r0, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001362:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001364:	f002 fb58 	bl	8003a18 <HAL_SPI_Init>
 8001368:	b900      	cbnz	r0, 800136c <MX_SPI1_Init+0x3c>
}
 800136a:	bd08      	pop	{r3, pc}
		Error_Handler();
 800136c:	f7ff feba 	bl	80010e4 <Error_Handler>
 8001370:	200001f4 	.word	0x200001f4
 8001374:	40013000 	.word	0x40013000

08001378 <MX_CORDIC_Init>:
static void MX_CORDIC_Init(void) {
 8001378:	b508      	push	{r3, lr}
	hcordic.Instance = CORDIC;
 800137a:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_CORDIC_Init+0x14>)
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <MX_CORDIC_Init+0x18>)
 800137e:	6003      	str	r3, [r0, #0]
	if (HAL_CORDIC_Init(&hcordic) != HAL_OK) {
 8001380:	f001 fa40 	bl	8002804 <HAL_CORDIC_Init>
 8001384:	b900      	cbnz	r0, 8001388 <MX_CORDIC_Init+0x10>
}
 8001386:	bd08      	pop	{r3, pc}
		Error_Handler();
 8001388:	f7ff feac 	bl	80010e4 <Error_Handler>
 800138c:	2000010c 	.word	0x2000010c
 8001390:	40020c00 	.word	0x40020c00

08001394 <MX_TIM1_Init>:
static void MX_TIM1_Init(void) {
 8001394:	b500      	push	{lr}
 8001396:	b089      	sub	sp, #36	; 0x24
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001398:	2300      	movs	r3, #0
 800139a:	9304      	str	r3, [sp, #16]
 800139c:	9305      	str	r3, [sp, #20]
 800139e:	9306      	str	r3, [sp, #24]
 80013a0:	9307      	str	r3, [sp, #28]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	9303      	str	r3, [sp, #12]
	htim1.Instance = TIM1;
 80013a8:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM1_Init+0x68>)
 80013aa:	4a15      	ldr	r2, [pc, #84]	; (8001400 <MX_TIM1_Init+0x6c>)
 80013ac:	6002      	str	r2, [r0, #0]
	htim1.Init.Prescaler = 0;
 80013ae:	6043      	str	r3, [r0, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b0:	6083      	str	r3, [r0, #8]
	htim1.Init.Period = 9999;
 80013b2:	f242 720f 	movw	r2, #9999	; 0x270f
 80013b6:	60c2      	str	r2, [r0, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	6103      	str	r3, [r0, #16]
	htim1.Init.RepetitionCounter = 0;
 80013ba:	6143      	str	r3, [r0, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013bc:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80013be:	f002 ff77 	bl	80042b0 <HAL_TIM_Base_Init>
 80013c2:	b9a0      	cbnz	r0, 80013ee <MX_TIM1_Init+0x5a>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	9304      	str	r3, [sp, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80013ca:	a904      	add	r1, sp, #16
 80013cc:	480b      	ldr	r0, [pc, #44]	; (80013fc <MX_TIM1_Init+0x68>)
 80013ce:	f003 f8c7 	bl	8004560 <HAL_TIM_ConfigClockSource>
 80013d2:	b970      	cbnz	r0, 80013f2 <MX_TIM1_Init+0x5e>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013d4:	2320      	movs	r3, #32
 80013d6:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013d8:	2300      	movs	r3, #0
 80013da:	9302      	str	r3, [sp, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013dc:	9303      	str	r3, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80013de:	a901      	add	r1, sp, #4
 80013e0:	4806      	ldr	r0, [pc, #24]	; (80013fc <MX_TIM1_Init+0x68>)
 80013e2:	f003 fa2f 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 80013e6:	b930      	cbnz	r0, 80013f6 <MX_TIM1_Init+0x62>
}
 80013e8:	b009      	add	sp, #36	; 0x24
 80013ea:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 80013ee:	f7ff fe79 	bl	80010e4 <Error_Handler>
		Error_Handler();
 80013f2:	f7ff fe77 	bl	80010e4 <Error_Handler>
		Error_Handler();
 80013f6:	f7ff fe75 	bl	80010e4 <Error_Handler>
 80013fa:	bf00      	nop
 80013fc:	200002b0 	.word	0x200002b0
 8001400:	40012c00 	.word	0x40012c00

08001404 <MX_TIM5_Init>:
static void MX_TIM5_Init(void) {
 8001404:	b500      	push	{lr}
 8001406:	b08f      	sub	sp, #60	; 0x3c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001408:	2300      	movs	r3, #0
 800140a:	930a      	str	r3, [sp, #40]	; 0x28
 800140c:	930b      	str	r3, [sp, #44]	; 0x2c
 800140e:	930c      	str	r3, [sp, #48]	; 0x30
 8001410:	930d      	str	r3, [sp, #52]	; 0x34
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001412:	9307      	str	r3, [sp, #28]
 8001414:	9308      	str	r3, [sp, #32]
 8001416:	9309      	str	r3, [sp, #36]	; 0x24
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001418:	9300      	str	r3, [sp, #0]
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	9303      	str	r3, [sp, #12]
 8001420:	9304      	str	r3, [sp, #16]
 8001422:	9305      	str	r3, [sp, #20]
 8001424:	9306      	str	r3, [sp, #24]
	htim5.Instance = TIM5;
 8001426:	481e      	ldr	r0, [pc, #120]	; (80014a0 <MX_TIM5_Init+0x9c>)
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <MX_TIM5_Init+0xa0>)
 800142a:	6002      	str	r2, [r0, #0]
	htim5.Init.Prescaler = 1;
 800142c:	2201      	movs	r2, #1
 800142e:	6042      	str	r2, [r0, #4]
	htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	6083      	str	r3, [r0, #8]
	htim5.Init.Period = 255;
 8001432:	22ff      	movs	r2, #255	; 0xff
 8001434:	60c2      	str	r2, [r0, #12]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	6103      	str	r3, [r0, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 800143a:	f002 ff39 	bl	80042b0 <HAL_TIM_Base_Init>
 800143e:	bb28      	cbnz	r0, 800148c <MX_TIM5_Init+0x88>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	930a      	str	r3, [sp, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8001446:	a90a      	add	r1, sp, #40	; 0x28
 8001448:	4815      	ldr	r0, [pc, #84]	; (80014a0 <MX_TIM5_Init+0x9c>)
 800144a:	f003 f889 	bl	8004560 <HAL_TIM_ConfigClockSource>
 800144e:	b9f8      	cbnz	r0, 8001490 <MX_TIM5_Init+0x8c>
	if (HAL_TIM_PWM_Init(&htim5) != HAL_OK) {
 8001450:	4813      	ldr	r0, [pc, #76]	; (80014a0 <MX_TIM5_Init+0x9c>)
 8001452:	f002 ff5d 	bl	8004310 <HAL_TIM_PWM_Init>
 8001456:	b9e8      	cbnz	r0, 8001494 <MX_TIM5_Init+0x90>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001458:	2300      	movs	r3, #0
 800145a:	9307      	str	r3, [sp, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145c:	9309      	str	r3, [sp, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig)
 800145e:	a907      	add	r1, sp, #28
 8001460:	480f      	ldr	r0, [pc, #60]	; (80014a0 <MX_TIM5_Init+0x9c>)
 8001462:	f003 f9ef 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 8001466:	b9b8      	cbnz	r0, 8001498 <MX_TIM5_Init+0x94>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001468:	2360      	movs	r3, #96	; 0x60
 800146a:	9300      	str	r3, [sp, #0]
	sConfigOC.Pulse = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	9301      	str	r3, [sp, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001470:	9302      	str	r3, [sp, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001472:	9304      	str	r3, [sp, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2)
 8001474:	2204      	movs	r2, #4
 8001476:	4669      	mov	r1, sp
 8001478:	4809      	ldr	r0, [pc, #36]	; (80014a0 <MX_TIM5_Init+0x9c>)
 800147a:	f002 ffc7 	bl	800440c <HAL_TIM_PWM_ConfigChannel>
 800147e:	b968      	cbnz	r0, 800149c <MX_TIM5_Init+0x98>
	HAL_TIM_MspPostInit(&htim5);
 8001480:	4807      	ldr	r0, [pc, #28]	; (80014a0 <MX_TIM5_Init+0x9c>)
 8001482:	f000 fa91 	bl	80019a8 <HAL_TIM_MspPostInit>
}
 8001486:	b00f      	add	sp, #60	; 0x3c
 8001488:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800148c:	f7ff fe2a 	bl	80010e4 <Error_Handler>
		Error_Handler();
 8001490:	f7ff fe28 	bl	80010e4 <Error_Handler>
		Error_Handler();
 8001494:	f7ff fe26 	bl	80010e4 <Error_Handler>
		Error_Handler();
 8001498:	f7ff fe24 	bl	80010e4 <Error_Handler>
		Error_Handler();
 800149c:	f7ff fe22 	bl	80010e4 <Error_Handler>
 80014a0:	20000348 	.word	0x20000348
 80014a4:	40000c00 	.word	0x40000c00

080014a8 <MX_TIM2_Init>:
static void MX_TIM2_Init(void) {
 80014a8:	b500      	push	{lr}
 80014aa:	b089      	sub	sp, #36	; 0x24
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80014ac:	2300      	movs	r3, #0
 80014ae:	9304      	str	r3, [sp, #16]
 80014b0:	9305      	str	r3, [sp, #20]
 80014b2:	9306      	str	r3, [sp, #24]
 80014b4:	9307      	str	r3, [sp, #28]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80014b6:	9301      	str	r3, [sp, #4]
 80014b8:	9302      	str	r3, [sp, #8]
 80014ba:	9303      	str	r3, [sp, #12]
	htim2.Instance = TIM2;
 80014bc:	4813      	ldr	r0, [pc, #76]	; (800150c <MX_TIM2_Init+0x64>)
 80014be:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014c2:	6002      	str	r2, [r0, #0]
	htim2.Init.Prescaler = 1;
 80014c4:	2201      	movs	r2, #1
 80014c6:	6042      	str	r2, [r0, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	6083      	str	r3, [r0, #8]
	htim2.Init.Period = 10652;
 80014ca:	f642 129c 	movw	r2, #10652	; 0x299c
 80014ce:	60c2      	str	r2, [r0, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d0:	6103      	str	r3, [r0, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80014d4:	f002 feec 	bl	80042b0 <HAL_TIM_Base_Init>
 80014d8:	b990      	cbnz	r0, 8001500 <MX_TIM2_Init+0x58>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014de:	9304      	str	r3, [sp, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80014e0:	a904      	add	r1, sp, #16
 80014e2:	480a      	ldr	r0, [pc, #40]	; (800150c <MX_TIM2_Init+0x64>)
 80014e4:	f003 f83c 	bl	8004560 <HAL_TIM_ConfigClockSource>
 80014e8:	b960      	cbnz	r0, 8001504 <MX_TIM2_Init+0x5c>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	9301      	str	r3, [sp, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	9303      	str	r3, [sp, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80014f0:	a901      	add	r1, sp, #4
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM2_Init+0x64>)
 80014f4:	f003 f9a6 	bl	8004844 <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	b930      	cbnz	r0, 8001508 <MX_TIM2_Init+0x60>
}
 80014fa:	b009      	add	sp, #36	; 0x24
 80014fc:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001500:	f7ff fdf0 	bl	80010e4 <Error_Handler>
		Error_Handler();
 8001504:	f7ff fdee 	bl	80010e4 <Error_Handler>
		Error_Handler();
 8001508:	f7ff fdec 	bl	80010e4 <Error_Handler>
 800150c:	200002fc 	.word	0x200002fc

08001510 <MX_ADC4_Init>:
static void MX_ADC4_Init(void) {
 8001510:	b500      	push	{lr}
 8001512:	b089      	sub	sp, #36	; 0x24
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001514:	2220      	movs	r2, #32
 8001516:	2100      	movs	r1, #0
 8001518:	4668      	mov	r0, sp
 800151a:	f007 fb07 	bl	8008b2c <memset>
	hadc4.Instance = ADC4;
 800151e:	4822      	ldr	r0, [pc, #136]	; (80015a8 <MX_ADC4_Init+0x98>)
 8001520:	4b22      	ldr	r3, [pc, #136]	; (80015ac <MX_ADC4_Init+0x9c>)
 8001522:	6003      	str	r3, [r0, #0]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001524:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001528:	6043      	str	r3, [r0, #4]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800152a:	2300      	movs	r3, #0
 800152c:	6083      	str	r3, [r0, #8]
	hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152e:	60c3      	str	r3, [r0, #12]
	hadc4.Init.GainCompensation = 0;
 8001530:	6103      	str	r3, [r0, #16]
	hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001532:	2201      	movs	r2, #1
 8001534:	6142      	str	r2, [r0, #20]
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001536:	2104      	movs	r1, #4
 8001538:	6181      	str	r1, [r0, #24]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 800153a:	7703      	strb	r3, [r0, #28]
	hadc4.Init.ContinuousConvMode = DISABLE;
 800153c:	7743      	strb	r3, [r0, #29]
	hadc4.Init.NbrOfConversion = 2;
 800153e:	2102      	movs	r1, #2
 8001540:	6201      	str	r1, [r0, #32]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001542:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001546:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 800154a:	62c1      	str	r1, [r0, #44]	; 0x2c
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800154c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001550:	6301      	str	r1, [r0, #48]	; 0x30
	hadc4.Init.DMAContinuousRequests = ENABLE;
 8001552:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001556:	63c3      	str	r3, [r0, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 8001558:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	if (HAL_ADC_Init(&hadc4) != HAL_OK) {
 800155c:	f000 fb88 	bl	8001c70 <HAL_ADC_Init>
 8001560:	b9e0      	cbnz	r0, 800159c <MX_ADC4_Init+0x8c>
	sConfig.Channel = ADC_CHANNEL_4;
 8001562:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <MX_ADC4_Init+0xa0>)
 8001564:	9300      	str	r3, [sp, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001566:	2306      	movs	r3, #6
 8001568:	9301      	str	r3, [sp, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800156a:	2307      	movs	r3, #7
 800156c:	9302      	str	r3, [sp, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800156e:	237f      	movs	r3, #127	; 0x7f
 8001570:	9303      	str	r3, [sp, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001572:	2304      	movs	r3, #4
 8001574:	9304      	str	r3, [sp, #16]
	sConfig.Offset = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	9305      	str	r3, [sp, #20]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK) {
 800157a:	4669      	mov	r1, sp
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <MX_ADC4_Init+0x98>)
 800157e:	f000 fd25 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8001582:	b968      	cbnz	r0, 80015a0 <MX_ADC4_Init+0x90>
	sConfig.Channel = ADC_CHANNEL_5;
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <MX_ADC4_Init+0xa4>)
 8001586:	9300      	str	r3, [sp, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001588:	230c      	movs	r3, #12
 800158a:	9301      	str	r3, [sp, #4]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK) {
 800158c:	4669      	mov	r1, sp
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <MX_ADC4_Init+0x98>)
 8001590:	f000 fd1c 	bl	8001fcc <HAL_ADC_ConfigChannel>
 8001594:	b930      	cbnz	r0, 80015a4 <MX_ADC4_Init+0x94>
}
 8001596:	b009      	add	sp, #36	; 0x24
 8001598:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 800159c:	f7ff fda2 	bl	80010e4 <Error_Handler>
		Error_Handler();
 80015a0:	f7ff fda0 	bl	80010e4 <Error_Handler>
		Error_Handler();
 80015a4:	f7ff fd9e 	bl	80010e4 <Error_Handler>
 80015a8:	200000a0 	.word	0x200000a0
 80015ac:	50000500 	.word	0x50000500
 80015b0:	10c00010 	.word	0x10c00010
 80015b4:	14f00020 	.word	0x14f00020

080015b8 <SystemClock_Config>:
void SystemClock_Config(void) {
 80015b8:	b500      	push	{lr}
 80015ba:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80015bc:	2238      	movs	r2, #56	; 0x38
 80015be:	2100      	movs	r1, #0
 80015c0:	a806      	add	r0, sp, #24
 80015c2:	f007 fab3 	bl	8008b2c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80015c6:	2000      	movs	r0, #0
 80015c8:	9001      	str	r0, [sp, #4]
 80015ca:	9002      	str	r0, [sp, #8]
 80015cc:	9003      	str	r0, [sp, #12]
 80015ce:	9004      	str	r0, [sp, #16]
 80015d0:	9005      	str	r0, [sp, #20]
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015d2:	f001 fbf7 	bl	8002dc4 <HAL_PWREx_ControlVoltageScaling>
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d6:	2302      	movs	r3, #2
 80015d8:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015de:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015e0:	2240      	movs	r2, #64	; 0x40
 80015e2:	920a      	str	r2, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e4:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e6:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015e8:	2204      	movs	r2, #4
 80015ea:	920f      	str	r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80015ec:	2255      	movs	r2, #85	; 0x55
 80015ee:	9210      	str	r2, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f0:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 80015f2:	2206      	movs	r2, #6
 80015f4:	9212      	str	r2, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f6:	9313      	str	r3, [sp, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80015f8:	a806      	add	r0, sp, #24
 80015fa:	f001 fc9d 	bl	8002f38 <HAL_RCC_OscConfig>
 80015fe:	b980      	cbnz	r0, 8001622 <SystemClock_Config+0x6a>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001600:	230f      	movs	r3, #15
 8001602:	9301      	str	r3, [sp, #4]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001604:	2303      	movs	r3, #3
 8001606:	9302      	str	r3, [sp, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	9303      	str	r3, [sp, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800160c:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160e:	9305      	str	r3, [sp, #20]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8001610:	2104      	movs	r1, #4
 8001612:	eb0d 0001 	add.w	r0, sp, r1
 8001616:	f001 ff47 	bl	80034a8 <HAL_RCC_ClockConfig>
 800161a:	b920      	cbnz	r0, 8001626 <SystemClock_Config+0x6e>
}
 800161c:	b015      	add	sp, #84	; 0x54
 800161e:	f85d fb04 	ldr.w	pc, [sp], #4
		Error_Handler();
 8001622:	f7ff fd5f 	bl	80010e4 <Error_Handler>
		Error_Handler();
 8001626:	f7ff fd5d 	bl	80010e4 <Error_Handler>
	...

0800162c <main>:
int main(void) {
 800162c:	b500      	push	{lr}
 800162e:	b083      	sub	sp, #12
	HAL_Init();
 8001630:	f000 fae8 	bl	8001c04 <HAL_Init>
	SystemClock_Config();
 8001634:	f7ff ffc0 	bl	80015b8 <SystemClock_Config>
	MX_GPIO_Init();
 8001638:	f7ff fb4a 	bl	8000cd0 <MX_GPIO_Init>
	MX_USART3_UART_Init();
 800163c:	f7ff fd54 	bl	80010e8 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 8001640:	f7ff fc5a 	bl	8000ef8 <MX_TIM6_Init>
	MX_TIM4_Init();
 8001644:	f7ff fc9e 	bl	8000f84 <MX_TIM4_Init>
	MX_FMC_Init();
 8001648:	f7ff fdf4 	bl	8001234 <MX_FMC_Init>
	MX_DMA_Init();
 800164c:	f7ff fe2a 	bl	80012a4 <MX_DMA_Init>
	MX_SPI1_Init();
 8001650:	f7ff fe6e 	bl	8001330 <MX_SPI1_Init>
	MX_CORDIC_Init();
 8001654:	f7ff fe90 	bl	8001378 <MX_CORDIC_Init>
	MX_TIM1_Init();
 8001658:	f7ff fe9c 	bl	8001394 <MX_TIM1_Init>
	MX_TIM5_Init();
 800165c:	f7ff fed2 	bl	8001404 <MX_TIM5_Init>
	MX_TIM2_Init();
 8001660:	f7ff ff22 	bl	80014a8 <MX_TIM2_Init>
	MX_ADC4_Init();
 8001664:	f7ff ff54 	bl	8001510 <MX_ADC4_Init>
	LED_init();
 8001668:	f003 ff92 	bl	8005590 <LED_init>
	KBD_init();
 800166c:	f004 f8ec 	bl	8005848 <KBD_init>
	SCI_init();
 8001670:	f003 ffb2 	bl	80055d8 <SCI_init>
	PSERV_init();
 8001674:	f004 fd34 	bl	80060e0 <PSERV_init>
	PSERV_enable();
 8001678:	f004 fd3e 	bl	80060f8 <PSERV_enable>
	JOY_init(&hadc4, &htim1);
 800167c:	491b      	ldr	r1, [pc, #108]	; (80016ec <main+0xc0>)
 800167e:	481c      	ldr	r0, [pc, #112]	; (80016f0 <main+0xc4>)
 8001680:	f004 f86e 	bl	8005760 <JOY_init>
	LCD_Init();
 8001684:	f004 f9f4 	bl	8005a70 <LCD_Init>
	LCD_uGUI_init();
 8001688:	f004 fa02 	bl	8005a90 <LCD_uGUI_init>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800168c:	2104      	movs	r1, #4
 800168e:	4819      	ldr	r0, [pc, #100]	; (80016f4 <main+0xc8>)
 8001690:	f003 f820 	bl	80046d4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(&htim2);
 8001694:	4818      	ldr	r0, [pc, #96]	; (80016f8 <main+0xcc>)
 8001696:	f002 fc3d 	bl	8003f14 <HAL_TIM_Base_Start_IT>
	init();
 800169a:	f005 f929 	bl	80068f0 <init>
	TIMUT_stopwatch_set_time_mark(&sw);
 800169e:	4668      	mov	r0, sp
 80016a0:	f006 ff68 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
		if (TIMUT_stopwatch_has_X_ms_passed(&sw, 30)) {
 80016a4:	211e      	movs	r1, #30
 80016a6:	4668      	mov	r0, sp
 80016a8:	f006 ff72 	bl	8008590 <TIMUT_stopwatch_has_X_ms_passed>
 80016ac:	2800      	cmp	r0, #0
 80016ae:	d0f9      	beq.n	80016a4 <main+0x78>
		TIMUT_stopwatch_set_time_mark(&sw);
 80016b0:	4668      	mov	r0, sp
 80016b2:	f006 ff5f 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
			drawMap(&hcordic);
 80016b6:	4811      	ldr	r0, [pc, #68]	; (80016fc <main+0xd0>)
 80016b8:	f005 fc5e 	bl	8006f78 <drawMap>
			shoot();
 80016bc:	f005 fb4a 	bl	8006d54 <shoot>
			drawSprites();
 80016c0:	f006 fad6 	bl	8007c70 <drawSprites>
			drawGun();
 80016c4:	f005 fbcc 	bl	8006e60 <drawGun>
			drawMiniMap();
 80016c8:	f004 fc5c 	bl	8005f84 <drawMiniMap>
			ILI9341_SetDisplayWindow(40, 0, 240, 240);
 80016cc:	23f0      	movs	r3, #240	; 0xf0
 80016ce:	461a      	mov	r2, r3
 80016d0:	2100      	movs	r1, #0
 80016d2:	2028      	movs	r0, #40	; 0x28
 80016d4:	f004 faca 	bl	8005c6c <ILI9341_SetDisplayWindow>
			ILI9341_SendData(pixels, 57600);
 80016d8:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 80016dc:	4808      	ldr	r0, [pc, #32]	; (8001700 <main+0xd4>)
 80016de:	f004 fa45 	bl	8005b6c <ILI9341_SendData>
			TIMUT_stopwatch_set_time_mark(&sw);
 80016e2:	4668      	mov	r0, sp
 80016e4:	f006 ff46 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
 80016e8:	e7dc      	b.n	80016a4 <main+0x78>
 80016ea:	bf00      	nop
 80016ec:	200002b0 	.word	0x200002b0
 80016f0:	200000a0 	.word	0x200000a0
 80016f4:	20000348 	.word	0x20000348
 80016f8:	200002fc 	.word	0x200002fc
 80016fc:	2000010c 	.word	0x2000010c
 8001700:	20000e78 	.word	0x20000e78

08001704 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001706:	b087      	sub	sp, #28
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001708:	2300      	movs	r3, #0
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9302      	str	r3, [sp, #8]
 800170e:	9303      	str	r3, [sp, #12]
 8001710:	9304      	str	r3, [sp, #16]
 8001712:	9305      	str	r3, [sp, #20]
  if (FMC_Initialized) {
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <HAL_FMC_MspInit+0x7c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b10b      	cbz	r3, 800171e <HAL_FMC_MspInit+0x1a>
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800171a:	b007      	add	sp, #28
 800171c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  FMC_Initialized = 1;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_FMC_MspInit+0x7c>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <HAL_FMC_MspInit+0x80>)
 8001726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001728:	f042 0201 	orr.w	r2, r2, #1
 800172c:	651a      	str	r2, [r3, #80]	; 0x50
 800172e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001730:	f003 0301 	and.w	r3, r3, #1
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001738:	f64f 7380 	movw	r3, #65408	; 0xff80
 800173c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2602      	movs	r6, #2
 8001740:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2503      	movs	r5, #3
 8001744:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001746:	240c      	movs	r4, #12
 8001748:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800174a:	a901      	add	r1, sp, #4
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <HAL_FMC_MspInit+0x84>)
 800174e:	f001 fa4f 	bl	8002bf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001752:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001756:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2700      	movs	r7, #0
 800175c:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001760:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001762:	a901      	add	r1, sp, #4
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <HAL_FMC_MspInit+0x88>)
 8001766:	f001 fa43 	bl	8002bf0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800176a:	2320      	movs	r3, #32
 800176c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	9602      	str	r6, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001774:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001776:	a901      	add	r1, sp, #4
 8001778:	4805      	ldr	r0, [pc, #20]	; (8001790 <HAL_FMC_MspInit+0x8c>)
 800177a:	f001 fa39 	bl	8002bf0 <HAL_GPIO_Init>
 800177e:	e7cc      	b.n	800171a <HAL_FMC_MspInit+0x16>
 8001780:	20000394 	.word	0x20000394
 8001784:	40021000 	.word	0x40021000
 8001788:	48001000 	.word	0x48001000
 800178c:	48000c00 	.word	0x48000c00
 8001790:	48001800 	.word	0x48001800

08001794 <HAL_MspInit>:
{
 8001794:	b500      	push	{lr}
 8001796:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	4b0b      	ldr	r3, [pc, #44]	; (80017c8 <HAL_MspInit+0x34>)
 800179a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800179c:	f042 0201 	orr.w	r2, r2, #1
 80017a0:	661a      	str	r2, [r3, #96]	; 0x60
 80017a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017a4:	f002 0201 	and.w	r2, r2, #1
 80017a8:	9200      	str	r2, [sp, #0]
 80017aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017b2:	659a      	str	r2, [r3, #88]	; 0x58
 80017b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();
 80017be:	f001 fb87 	bl	8002ed0 <HAL_PWREx_DisableUCPDDeadBattery>
}
 80017c2:	b003      	add	sp, #12
 80017c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80017c8:	40021000 	.word	0x40021000

080017cc <HAL_ADC_MspInit>:
{
 80017cc:	b530      	push	{r4, r5, lr}
 80017ce:	b09d      	sub	sp, #116	; 0x74
 80017d0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d2:	2100      	movs	r1, #0
 80017d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80017d6:	9118      	str	r1, [sp, #96]	; 0x60
 80017d8:	9119      	str	r1, [sp, #100]	; 0x64
 80017da:	911a      	str	r1, [sp, #104]	; 0x68
 80017dc:	911b      	str	r1, [sp, #108]	; 0x6c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017de:	2254      	movs	r2, #84	; 0x54
 80017e0:	a802      	add	r0, sp, #8
 80017e2:	f007 f9a3 	bl	8008b2c <memset>
  if(hadc->Instance==ADC4)
 80017e6:	6822      	ldr	r2, [r4, #0]
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <HAL_ADC_MspInit+0xb8>)
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d001      	beq.n	80017f2 <HAL_ADC_MspInit+0x26>
}
 80017ee:	b01d      	add	sp, #116	; 0x74
 80017f0:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80017f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f6:	9302      	str	r3, [sp, #8]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80017f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80017fc:	9314      	str	r3, [sp, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017fe:	a802      	add	r0, sp, #8
 8001800:	f001 ff4e 	bl	80036a0 <HAL_RCCEx_PeriphCLKConfig>
 8001804:	2800      	cmp	r0, #0
 8001806:	d136      	bne.n	8001876 <HAL_ADC_MspInit+0xaa>
    __HAL_RCC_ADC345_CLK_ENABLE();
 8001808:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_ADC_MspInit+0xbc>)
 800180a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800180c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001810:	64da      	str	r2, [r3, #76]	; 0x4c
 8001812:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001814:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001818:	9200      	str	r2, [sp, #0]
 800181a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800181e:	f042 0202 	orr.w	r2, r2, #2
 8001822:	64da      	str	r2, [r3, #76]	; 0x4c
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	9301      	str	r3, [sp, #4]
 800182c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800182e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001832:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001834:	2303      	movs	r3, #3
 8001836:	9318      	str	r3, [sp, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2500      	movs	r5, #0
 800183a:	9519      	str	r5, [sp, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183c:	a917      	add	r1, sp, #92	; 0x5c
 800183e:	4813      	ldr	r0, [pc, #76]	; (800188c <HAL_ADC_MspInit+0xc0>)
 8001840:	f001 f9d6 	bl	8002bf0 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel1;
 8001844:	4812      	ldr	r0, [pc, #72]	; (8001890 <HAL_ADC_MspInit+0xc4>)
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_ADC_MspInit+0xc8>)
 8001848:	6003      	str	r3, [r0, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800184a:	2326      	movs	r3, #38	; 0x26
 800184c:	6043      	str	r3, [r0, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800184e:	6085      	str	r5, [r0, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	60c5      	str	r5, [r0, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	6103      	str	r3, [r0, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001856:	f44f 7380 	mov.w	r3, #256	; 0x100
 800185a:	6143      	str	r3, [r0, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800185c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001860:	6183      	str	r3, [r0, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001862:	2320      	movs	r3, #32
 8001864:	61c3      	str	r3, [r0, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001866:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001868:	f001 f8aa 	bl	80029c0 <HAL_DMA_Init>
 800186c:	b930      	cbnz	r0, 800187c <HAL_ADC_MspInit+0xb0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800186e:	4b08      	ldr	r3, [pc, #32]	; (8001890 <HAL_ADC_MspInit+0xc4>)
 8001870:	6563      	str	r3, [r4, #84]	; 0x54
 8001872:	629c      	str	r4, [r3, #40]	; 0x28
}
 8001874:	e7bb      	b.n	80017ee <HAL_ADC_MspInit+0x22>
      Error_Handler();
 8001876:	f7ff fc35 	bl	80010e4 <Error_Handler>
 800187a:	e7c5      	b.n	8001808 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 800187c:	f7ff fc32 	bl	80010e4 <Error_Handler>
 8001880:	e7f5      	b.n	800186e <HAL_ADC_MspInit+0xa2>
 8001882:	bf00      	nop
 8001884:	50000500 	.word	0x50000500
 8001888:	40021000 	.word	0x40021000
 800188c:	48000400 	.word	0x48000400
 8001890:	20000134 	.word	0x20000134
 8001894:	40020008 	.word	0x40020008

08001898 <HAL_CORDIC_MspInit>:
  if(hcordic->Instance==CORDIC)
 8001898:	6802      	ldr	r2, [r0, #0]
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_CORDIC_MspInit+0x28>)
 800189c:	429a      	cmp	r2, r3
 800189e:	d000      	beq.n	80018a2 <HAL_CORDIC_MspInit+0xa>
 80018a0:	4770      	bx	lr
{
 80018a2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80018a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80018a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018aa:	f042 0208 	orr.w	r2, r2, #8
 80018ae:	649a      	str	r2, [r3, #72]	; 0x48
 80018b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b2:	f003 0308 	and.w	r3, r3, #8
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	9b01      	ldr	r3, [sp, #4]
}
 80018ba:	b002      	add	sp, #8
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40020c00 	.word	0x40020c00

080018c4 <HAL_SPI_MspInit>:
{
 80018c4:	b500      	push	{lr}
 80018c6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c8:	2300      	movs	r3, #0
 80018ca:	9303      	str	r3, [sp, #12]
 80018cc:	9304      	str	r3, [sp, #16]
 80018ce:	9305      	str	r3, [sp, #20]
 80018d0:	9306      	str	r3, [sp, #24]
 80018d2:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 80018d4:	6802      	ldr	r2, [r0, #0]
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_SPI_MspInit+0x5c>)
 80018d8:	429a      	cmp	r2, r3
 80018da:	d002      	beq.n	80018e2 <HAL_SPI_MspInit+0x1e>
}
 80018dc:	b009      	add	sp, #36	; 0x24
 80018de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018e2:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
 80018e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80018ec:	661a      	str	r2, [r3, #96]	; 0x60
 80018ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018f4:	9201      	str	r2, [sp, #4]
 80018f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800190a:	231c      	movs	r3, #28
 800190c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001912:	2305      	movs	r3, #5
 8001914:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001916:	a903      	add	r1, sp, #12
 8001918:	4802      	ldr	r0, [pc, #8]	; (8001924 <HAL_SPI_MspInit+0x60>)
 800191a:	f001 f969 	bl	8002bf0 <HAL_GPIO_Init>
}
 800191e:	e7dd      	b.n	80018dc <HAL_SPI_MspInit+0x18>
 8001920:	40013000 	.word	0x40013000
 8001924:	48001800 	.word	0x48001800

08001928 <HAL_TIM_Base_MspInit>:
{
 8001928:	b500      	push	{lr}
 800192a:	b085      	sub	sp, #20
  if(htim_base->Instance==TIM1)
 800192c:	6803      	ldr	r3, [r0, #0]
 800192e:	4a1b      	ldr	r2, [pc, #108]	; (800199c <HAL_TIM_Base_MspInit+0x74>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d008      	beq.n	8001946 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM2)
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001938:	d010      	beq.n	800195c <HAL_TIM_Base_MspInit+0x34>
  else if(htim_base->Instance==TIM5)
 800193a:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_TIM_Base_MspInit+0x78>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d021      	beq.n	8001984 <HAL_TIM_Base_MspInit+0x5c>
}
 8001940:	b005      	add	sp, #20
 8001942:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_TIM_Base_MspInit+0x7c>)
 8001948:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800194a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194e:	661a      	str	r2, [r3, #96]	; 0x60
 8001950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	9b01      	ldr	r3, [sp, #4]
 800195a:	e7f1      	b.n	8001940 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800195c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001960:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001962:	f042 0201 	orr.w	r2, r2, #1
 8001966:	659a      	str	r2, [r3, #88]	; 0x58
 8001968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	9302      	str	r3, [sp, #8]
 8001970:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	4611      	mov	r1, r2
 8001976:	201c      	movs	r0, #28
 8001978:	f000 ff6e 	bl	8002858 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800197c:	201c      	movs	r0, #28
 800197e:	f000 ffa3 	bl	80028c8 <HAL_NVIC_EnableIRQ>
 8001982:	e7dd      	b.n	8001940 <HAL_TIM_Base_MspInit+0x18>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <HAL_TIM_Base_MspInit+0x7c>)
 8001986:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001988:	f042 0208 	orr.w	r2, r2, #8
 800198c:	659a      	str	r2, [r3, #88]	; 0x58
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	9303      	str	r3, [sp, #12]
 8001996:	9b03      	ldr	r3, [sp, #12]
}
 8001998:	e7d2      	b.n	8001940 <HAL_TIM_Base_MspInit+0x18>
 800199a:	bf00      	nop
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40000c00 	.word	0x40000c00
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_TIM_MspPostInit>:
{
 80019a8:	b500      	push	{lr}
 80019aa:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	2300      	movs	r3, #0
 80019ae:	9301      	str	r3, [sp, #4]
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	9303      	str	r3, [sp, #12]
 80019b4:	9304      	str	r3, [sp, #16]
 80019b6:	9305      	str	r3, [sp, #20]
  if(htim->Instance==TIM5)
 80019b8:	6802      	ldr	r2, [r0, #0]
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_TIM_MspPostInit+0x4c>)
 80019bc:	429a      	cmp	r2, r3
 80019be:	d002      	beq.n	80019c6 <HAL_TIM_MspPostInit+0x1e>
}
 80019c0:	b007      	add	sp, #28
 80019c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019c6:	f503 3301 	add.w	r3, r3, #132096	; 0x20400
 80019ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019cc:	f042 0220 	orr.w	r2, r2, #32
 80019d0:	64da      	str	r2, [r3, #76]	; 0x4c
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	f003 0320 	and.w	r3, r3, #32
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM5;
 80019e4:	2306      	movs	r3, #6
 80019e6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019e8:	a901      	add	r1, sp, #4
 80019ea:	4803      	ldr	r0, [pc, #12]	; (80019f8 <HAL_TIM_MspPostInit+0x50>)
 80019ec:	f001 f900 	bl	8002bf0 <HAL_GPIO_Init>
}
 80019f0:	e7e6      	b.n	80019c0 <HAL_TIM_MspPostInit+0x18>
 80019f2:	bf00      	nop
 80019f4:	40000c00 	.word	0x40000c00
 80019f8:	48001400 	.word	0x48001400

080019fc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80019fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80019fe:	f7ff fe81 	bl	8001704 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a02:	bd08      	pop	{r3, pc}

08001a04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler>

08001a06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler>

08001a08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler>

08001a0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <BusFault_Handler>

08001a0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <UsageFault_Handler>

08001a0e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a0e:	4770      	bx	lr

08001a10 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a10:	4770      	bx	lr

08001a12 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a16:	f000 f905 	bl	8001c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1a:	bd08      	pop	{r3, pc}

08001a1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a1c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001a1e:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA1_Channel1_IRQHandler+0xc>)
 8001a20:	f001 f884 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a24:	bd08      	pop	{r3, pc}
 8001a26:	bf00      	nop
 8001a28:	20000134 	.word	0x20000134

08001a2c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001a2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 8001a2e:	4802      	ldr	r0, [pc, #8]	; (8001a38 <DMA1_Channel2_IRQHandler+0xc>)
 8001a30:	f001 f87c 	bl	8002b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001a34:	bd08      	pop	{r3, pc}
 8001a36:	bf00      	nop
 8001a38:	20000194 	.word	0x20000194

08001a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a3c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a3e:	4802      	ldr	r0, [pc, #8]	; (8001a48 <TIM2_IRQHandler+0xc>)
 8001a40:	f002 fab7 	bl	8003fb2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a44:	bd08      	pop	{r3, pc}
 8001a46:	bf00      	nop
 8001a48:	200002fc 	.word	0x200002fc

08001a4c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001a4c:	b508      	push	{r3, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001a4e:	4b0c      	ldr	r3, [pc, #48]	; (8001a80 <USART3_IRQHandler+0x34>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f013 0f20 	tst.w	r3, #32
 8001a56:	d006      	beq.n	8001a66 <USART3_IRQHandler+0x1a>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8001a58:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <USART3_IRQHandler+0x34>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	f013 0f20 	tst.w	r3, #32
 8001a60:	d001      	beq.n	8001a66 <USART3_IRQHandler+0x1a>
			if( LL_USART_IsActiveFlag_RXNE_RXFNE(USART3) )	// postavljena zastavica RXNE?
			{
				// Če je ta specifi�?na prekinitev omogo�?ena in �?e je postavljena zastavica tega specifi�?nega
				// prekinitvenega dogodka, potem se odzovemo s klicem ustrezne "callback" rutine.

				SCI_receive_char_Callback();
 8001a62:	f003 fe07 	bl	8005674 <SCI_receive_char_Callback>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001a66:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <USART3_IRQHandler+0x34>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a6e:	d006      	beq.n	8001a7e <USART3_IRQHandler+0x32>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8001a70:	4b03      	ldr	r3, [pc, #12]	; (8001a80 <USART3_IRQHandler+0x34>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a78:	d001      	beq.n	8001a7e <USART3_IRQHandler+0x32>
			if( LL_USART_IsActiveFlag_TXE_TXFNF(USART3) )		// postavljena zastavica TXE?
			{
				// Če je ta specifi�?na prekinitev omogo�?ena in �?e je postavljena zastavica tega specifi�?nega
				// prekinitvenega dogodka, potem se odzovemo s klicem ustrezne "callback" rutine.

				SCI_transmit_char_Callback();
 8001a7a:	f003 fe09 	bl	8005690 <SCI_transmit_char_Callback>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a7e:	bd08      	pop	{r3, pc}
 8001a80:	40004800 	.word	0x40004800

08001a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a84:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <TIM6_DAC_IRQHandler+0x24>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f013 0f02 	tst.w	r3, #2
 8001a8e:	d10a      	bne.n	8001aa6 <TIM6_DAC_IRQHandler+0x22>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <TIM6_DAC_IRQHandler+0x24>)
 8001a92:	691b      	ldr	r3, [r3, #16]
 8001a94:	f013 0f01 	tst.w	r3, #1
 8001a98:	d005      	beq.n	8001aa6 <TIM6_DAC_IRQHandler+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <TIM6_DAC_IRQHandler+0x24>)
 8001a9c:	f06f 0201 	mvn.w	r2, #1
 8001aa0:	611a      	str	r2, [r3, #16]
	if(LL_TIM_IsEnabledUpdateEvent(TIM6))
	{
		if(LL_TIM_IsActiveFlag_UPDATE(TIM6))	// postavljena zastavica RXNE?
		{
			LL_TIM_ClearFlag_UPDATE(TIM6);
			PSERV_run_services_Callback();
 8001aa2:	f004 fb33 	bl	800610c <PSERV_run_services_Callback>
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001aa6:	bd08      	pop	{r3, pc}
 8001aa8:	40001000 	.word	0x40001000

08001aac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001aac:	2001      	movs	r0, #1
 8001aae:	4770      	bx	lr

08001ab0 <_kill>:

int _kill(int pid, int sig)
{
 8001ab0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ab2:	f007 f803 	bl	8008abc <__errno>
 8001ab6:	2316      	movs	r3, #22
 8001ab8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001aba:	f04f 30ff 	mov.w	r0, #4294967295
 8001abe:	bd08      	pop	{r3, pc}

08001ac0 <_exit>:

void _exit (int status)
{
 8001ac0:	b508      	push	{r3, lr}
	_kill(status, -1);
 8001ac2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac6:	f7ff fff3 	bl	8001ab0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001aca:	e7fe      	b.n	8001aca <_exit+0xa>

08001acc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001acc:	b570      	push	{r4, r5, r6, lr}
 8001ace:	460c      	mov	r4, r1
 8001ad0:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	e006      	b.n	8001ae4 <_read+0x18>
	{
		*ptr++ = __io_getchar();
 8001ad6:	f3af 8000 	nop.w
 8001ada:	4621      	mov	r1, r4
 8001adc:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae0:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 8001ae2:	460c      	mov	r4, r1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae4:	42b5      	cmp	r5, r6
 8001ae6:	dbf6      	blt.n	8001ad6 <_read+0xa>
	}

return len;
}
 8001ae8:	4630      	mov	r0, r6
 8001aea:	bd70      	pop	{r4, r5, r6, pc}

08001aec <_close>:
}

int _close(int file)
{
	return -1;
}
 8001aec:	f04f 30ff 	mov.w	r0, #4294967295
 8001af0:	4770      	bx	lr

08001af2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af6:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001af8:	2000      	movs	r0, #0
 8001afa:	4770      	bx	lr

08001afc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001afc:	2001      	movs	r0, #1
 8001afe:	4770      	bx	lr

08001b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b00:	2000      	movs	r0, #0
 8001b02:	4770      	bx	lr

08001b04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b04:	b510      	push	{r4, lr}
 8001b06:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <_sbrk+0x38>)
 8001b0a:	490d      	ldr	r1, [pc, #52]	; (8001b40 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <_sbrk+0x40>)
 8001b0e:	6800      	ldr	r0, [r0, #0]
 8001b10:	b140      	cbz	r0, 8001b24 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b12:	480c      	ldr	r0, [pc, #48]	; (8001b44 <_sbrk+0x40>)
 8001b14:	6800      	ldr	r0, [r0, #0]
 8001b16:	4403      	add	r3, r0
 8001b18:	1a52      	subs	r2, r2, r1
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d806      	bhi.n	8001b2c <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001b1e:	4a09      	ldr	r2, [pc, #36]	; (8001b44 <_sbrk+0x40>)
 8001b20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001b22:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001b24:	4807      	ldr	r0, [pc, #28]	; (8001b44 <_sbrk+0x40>)
 8001b26:	4c08      	ldr	r4, [pc, #32]	; (8001b48 <_sbrk+0x44>)
 8001b28:	6004      	str	r4, [r0, #0]
 8001b2a:	e7f2      	b.n	8001b12 <_sbrk+0xe>
    errno = ENOMEM;
 8001b2c:	f006 ffc6 	bl	8008abc <__errno>
 8001b30:	230c      	movs	r3, #12
 8001b32:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	e7f3      	b.n	8001b22 <_sbrk+0x1e>
 8001b3a:	bf00      	nop
 8001b3c:	20020000 	.word	0x20020000
 8001b40:	00000400 	.word	0x00000400
 8001b44:	20000398 	.word	0x20000398
 8001b48:	2001dea0 	.word	0x2001dea0

08001b4c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b4c:	4a03      	ldr	r2, [pc, #12]	; (8001b5c <SystemInit+0x10>)
 8001b4e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001b52:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b56:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b60:	480d      	ldr	r0, [pc, #52]	; (8001b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b64:	480d      	ldr	r0, [pc, #52]	; (8001b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b66:	490e      	ldr	r1, [pc, #56]	; (8001ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b68:	4a0e      	ldr	r2, [pc, #56]	; (8001ba4 <LoopForever+0xe>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b7c:	4c0b      	ldr	r4, [pc, #44]	; (8001bac <LoopForever+0x16>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8a:	f7ff ffdf 	bl	8001b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b8e:	f006 ff9b 	bl	8008ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b92:	f7ff fd4b 	bl	800162c <main>

08001b96 <LoopForever>:

LoopForever:
    b LoopForever
 8001b96:	e7fe      	b.n	8001b96 <LoopForever>
  ldr   r0, =_estack
 8001b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001ba4:	080794f0 	.word	0x080794f0
  ldr r2, =_sbss
 8001ba8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001bac:	2001de9c 	.word	0x2001de9c

08001bb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb0:	e7fe      	b.n	8001bb0 <ADC1_2_IRQHandler>
	...

08001bb4 <HAL_InitTick>:
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8001bb4:	4b10      	ldr	r3, [pc, #64]	; (8001bf8 <HAL_InitTick+0x44>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	b90b      	cbnz	r3, 8001bbe <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001bba:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001bbc:	4770      	bx	lr
{
 8001bbe:	b510      	push	{r4, lr}
 8001bc0:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001bc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	4a0c      	ldr	r2, [pc, #48]	; (8001bfc <HAL_InitTick+0x48>)
 8001bcc:	6810      	ldr	r0, [r2, #0]
 8001bce:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bd2:	f000 fe87 	bl	80028e4 <HAL_SYSTICK_Config>
 8001bd6:	b968      	cbnz	r0, 8001bf4 <HAL_InitTick+0x40>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd8:	2c0f      	cmp	r4, #15
 8001bda:	d901      	bls.n	8001be0 <HAL_InitTick+0x2c>
        status = HAL_ERROR;
 8001bdc:	2001      	movs	r0, #1
 8001bde:	e00a      	b.n	8001bf6 <HAL_InitTick+0x42>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be0:	2200      	movs	r2, #0
 8001be2:	4621      	mov	r1, r4
 8001be4:	f04f 30ff 	mov.w	r0, #4294967295
 8001be8:	f000 fe36 	bl	8002858 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bec:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_InitTick+0x4c>)
 8001bee:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8001bf0:	2000      	movs	r0, #0
 8001bf2:	e000      	b.n	8001bf6 <HAL_InitTick+0x42>
      status = HAL_ERROR;
 8001bf4:	2001      	movs	r0, #1
}
 8001bf6:	bd10      	pop	{r4, pc}
 8001bf8:	20000004 	.word	0x20000004
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000008 	.word	0x20000008

08001c04 <HAL_Init>:
{
 8001c04:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c06:	2003      	movs	r0, #3
 8001c08:	f000 fe14 	bl	8002834 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c0c:	200e      	movs	r0, #14
 8001c0e:	f7ff ffd1 	bl	8001bb4 <HAL_InitTick>
 8001c12:	b110      	cbz	r0, 8001c1a <HAL_Init+0x16>
    status = HAL_ERROR;
 8001c14:	2401      	movs	r4, #1
}
 8001c16:	4620      	mov	r0, r4
 8001c18:	bd10      	pop	{r4, pc}
 8001c1a:	4604      	mov	r4, r0
    HAL_MspInit();
 8001c1c:	f7ff fdba 	bl	8001794 <HAL_MspInit>
 8001c20:	e7f9      	b.n	8001c16 <HAL_Init+0x12>
	...

08001c24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c24:	4a03      	ldr	r2, [pc, #12]	; (8001c34 <HAL_IncTick+0x10>)
 8001c26:	6813      	ldr	r3, [r2, #0]
 8001c28:	4903      	ldr	r1, [pc, #12]	; (8001c38 <HAL_IncTick+0x14>)
 8001c2a:	6809      	ldr	r1, [r1, #0]
 8001c2c:	440b      	add	r3, r1
 8001c2e:	6013      	str	r3, [r2, #0]
}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	2000039c 	.word	0x2000039c
 8001c38:	20000004 	.word	0x20000004

08001c3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c3c:	4b01      	ldr	r3, [pc, #4]	; (8001c44 <HAL_GetTick+0x8>)
 8001c3e:	6818      	ldr	r0, [r3, #0]
}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000039c 	.word	0x2000039c

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b538      	push	{r3, r4, r5, lr}
 8001c4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff fff6 	bl	8001c3c <HAL_GetTick>
 8001c50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c52:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001c56:	d002      	beq.n	8001c5e <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c58:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <HAL_Delay+0x24>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c5e:	f7ff ffed 	bl	8001c3c <HAL_GetTick>
 8001c62:	1b40      	subs	r0, r0, r5
 8001c64:	42a0      	cmp	r0, r4
 8001c66:	d3fa      	bcc.n	8001c5e <HAL_Delay+0x16>
  {
  }
}
 8001c68:	bd38      	pop	{r3, r4, r5, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000004 	.word	0x20000004

08001c70 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c70:	b530      	push	{r4, r5, lr}
 8001c72:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c78:	2800      	cmp	r0, #0
 8001c7a:	f000 8138 	beq.w	8001eee <HAL_ADC_Init+0x27e>
 8001c7e:	4604      	mov	r4, r0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c80:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001c82:	b313      	cbz	r3, 8001cca <HAL_ADC_Init+0x5a>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c84:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001c8c:	d005      	beq.n	8001c9a <HAL_ADC_Init+0x2a>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	f022 4220 	bic.w	r2, r2, #2684354560	; 0xa0000000
 8001c94:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8001c98:	609a      	str	r2, [r3, #8]
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c9a:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c9c:	6893      	ldr	r3, [r2, #8]
 8001c9e:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ca2:	d11f      	bne.n	8001ce4 <HAL_ADC_Init+0x74>
  MODIFY_REG(ADCx->CR,
 8001ca4:	6893      	ldr	r3, [r2, #8]
 8001ca6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001caa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb2:	6093      	str	r3, [r2, #8]
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cb4:	4b8f      	ldr	r3, [pc, #572]	; (8001ef4 <HAL_ADC_Init+0x284>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	099b      	lsrs	r3, r3, #6
 8001cba:	4a8f      	ldr	r2, [pc, #572]	; (8001ef8 <HAL_ADC_Init+0x288>)
 8001cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc0:	099b      	lsrs	r3, r3, #6
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001cc8:	e009      	b.n	8001cde <HAL_ADC_Init+0x6e>
    HAL_ADC_MspInit(hadc);
 8001cca:	f7ff fd7f 	bl	80017cc <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001cce:	2300      	movs	r3, #0
 8001cd0:	6623      	str	r3, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001cd2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8001cd6:	e7d5      	b.n	8001c84 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 8001cd8:	9b01      	ldr	r3, [sp, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001cde:	9b01      	ldr	r3, [sp, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1f9      	bne.n	8001cd8 <HAL_ADC_Init+0x68>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ce4:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001ce6:	6893      	ldr	r3, [r2, #8]
 8001ce8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001cec:	d13d      	bne.n	8001d6a <HAL_ADC_Init+0xfa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001cf0:	f043 0310 	orr.w	r3, r3, #16
 8001cf4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6623      	str	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d00:	6893      	ldr	r3, [r2, #8]
 8001d02:	f013 0304 	ands.w	r3, r3, #4
 8001d06:	d000      	beq.n	8001d0a <HAL_ADC_Init+0x9a>
 8001d08:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d0a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001d0c:	f011 0f10 	tst.w	r1, #16
 8001d10:	f040 80e6 	bne.w	8001ee0 <HAL_ADC_Init+0x270>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f040 80e3 	bne.w	8001ee0 <HAL_ADC_Init+0x270>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d1c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d20:	f043 0302 	orr.w	r3, r3, #2
 8001d24:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d26:	6893      	ldr	r3, [r2, #8]
 8001d28:	f013 0f01 	tst.w	r3, #1
 8001d2c:	d13e      	bne.n	8001dac <HAL_ADC_Init+0x13c>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d2e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001d32:	d01c      	beq.n	8001d6e <HAL_ADC_Init+0xfe>
 8001d34:	4b71      	ldr	r3, [pc, #452]	; (8001efc <HAL_ADC_Init+0x28c>)
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d019      	beq.n	8001d6e <HAL_ADC_Init+0xfe>
 8001d3a:	4b71      	ldr	r3, [pc, #452]	; (8001f00 <HAL_ADC_Init+0x290>)
 8001d3c:	6899      	ldr	r1, [r3, #8]
 8001d3e:	f011 0101 	ands.w	r1, r1, #1
 8001d42:	d000      	beq.n	8001d46 <HAL_ADC_Init+0xd6>
 8001d44:	2101      	movs	r1, #1
 8001d46:	4b6f      	ldr	r3, [pc, #444]	; (8001f04 <HAL_ADC_Init+0x294>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f013 0301 	ands.w	r3, r3, #1
 8001d4e:	d000      	beq.n	8001d52 <HAL_ADC_Init+0xe2>
 8001d50:	2301      	movs	r3, #1
 8001d52:	430b      	orrs	r3, r1
 8001d54:	496c      	ldr	r1, [pc, #432]	; (8001f08 <HAL_ADC_Init+0x298>)
 8001d56:	6889      	ldr	r1, [r1, #8]
 8001d58:	f011 0101 	ands.w	r1, r1, #1
 8001d5c:	d000      	beq.n	8001d60 <HAL_ADC_Init+0xf0>
 8001d5e:	2101      	movs	r1, #1
 8001d60:	430b      	orrs	r3, r1
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	e012      	b.n	8001d90 <HAL_ADC_Init+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	e7c8      	b.n	8001d00 <HAL_ADC_Init+0x90>
 8001d6e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	f013 0301 	ands.w	r3, r3, #1
 8001d78:	d000      	beq.n	8001d7c <HAL_ADC_Init+0x10c>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	495f      	ldr	r1, [pc, #380]	; (8001efc <HAL_ADC_Init+0x28c>)
 8001d7e:	6889      	ldr	r1, [r1, #8]
 8001d80:	f011 0101 	ands.w	r1, r1, #1
 8001d84:	d000      	beq.n	8001d88 <HAL_ADC_Init+0x118>
 8001d86:	2101      	movs	r1, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	bf0c      	ite	eq
 8001d8c:	2301      	moveq	r3, #1
 8001d8e:	2300      	movne	r3, #0
 8001d90:	b163      	cbz	r3, 8001dac <HAL_ADC_Init+0x13c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d92:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001d96:	d072      	beq.n	8001e7e <HAL_ADC_Init+0x20e>
 8001d98:	4b58      	ldr	r3, [pc, #352]	; (8001efc <HAL_ADC_Init+0x28c>)
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d06d      	beq.n	8001e7a <HAL_ADC_Init+0x20a>
 8001d9e:	495b      	ldr	r1, [pc, #364]	; (8001f0c <HAL_ADC_Init+0x29c>)
 8001da0:	6863      	ldr	r3, [r4, #4]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001da2:	688a      	ldr	r2, [r1, #8]
 8001da4:	f422 127c 	bic.w	r2, r2, #4128768	; 0x3f0000
 8001da8:	4313      	orrs	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dac:	7f62      	ldrb	r2, [r4, #29]
                hadc->Init.Overrun                                                     |
 8001dae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db0:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
                hadc->Init.DataAlign                                                   |
 8001db4:	68e2      	ldr	r2, [r4, #12]
                hadc->Init.Overrun                                                     |
 8001db6:	4313      	orrs	r3, r2
                hadc->Init.Resolution                                                  |
 8001db8:	68a2      	ldr	r2, [r4, #8]
                hadc->Init.DataAlign                                                   |
 8001dba:	4313      	orrs	r3, r2
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dbc:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc4:	2a01      	cmp	r2, #1
 8001dc6:	d05c      	beq.n	8001e82 <HAL_ADC_Init+0x212>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dca:	b122      	cbz	r2, 8001dd6 <HAL_ADC_Init+0x166>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dcc:	f402 7278 	and.w	r2, r2, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001dd0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001dd2:	430a      	orrs	r2, r1
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dd4:	4313      	orrs	r3, r2
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dd6:	6821      	ldr	r1, [r4, #0]
 8001dd8:	68cd      	ldr	r5, [r1, #12]
 8001dda:	4a4d      	ldr	r2, [pc, #308]	; (8001f10 <HAL_ADC_Init+0x2a0>)
 8001ddc:	402a      	ands	r2, r5
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001de2:	6822      	ldr	r2, [r4, #0]
 8001de4:	6913      	ldr	r3, [r2, #16]
 8001de6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001dec:	430b      	orrs	r3, r1
 8001dee:	6113      	str	r3, [r2, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001df0:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001df2:	688b      	ldr	r3, [r1, #8]
 8001df4:	f013 0304 	ands.w	r3, r3, #4
 8001df8:	d000      	beq.n	8001dfc <HAL_ADC_Init+0x18c>
 8001dfa:	2301      	movs	r3, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dfc:	688a      	ldr	r2, [r1, #8]
 8001dfe:	f012 0208 	ands.w	r2, r2, #8
 8001e02:	d000      	beq.n	8001e06 <HAL_ADC_Init+0x196>
 8001e04:	2201      	movs	r2, #1
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e06:	bb4b      	cbnz	r3, 8001e5c <HAL_ADC_Init+0x1ec>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e08:	bb42      	cbnz	r2, 8001e5c <HAL_ADC_Init+0x1ec>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e0a:	7f22      	ldrb	r2, [r4, #28]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e0c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8001e10:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e12:	ea43 3282 	orr.w	r2, r3, r2, lsl #14

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e16:	68cb      	ldr	r3, [r1, #12]
 8001e18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e1c:	f023 0302 	bic.w	r3, r3, #2
 8001e20:	4313      	orrs	r3, r2
 8001e22:	60cb      	str	r3, [r1, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e24:	6923      	ldr	r3, [r4, #16]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d030      	beq.n	8001e8c <HAL_ADC_Init+0x21c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e2a:	6822      	ldr	r2, [r4, #0]
 8001e2c:	6913      	ldr	r3, [r2, #16]
 8001e2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e32:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e34:	6822      	ldr	r2, [r4, #0]
 8001e36:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001e3a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e42:	6921      	ldr	r1, [r4, #16]
 8001e44:	430b      	orrs	r3, r1
 8001e46:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e4a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d02b      	beq.n	8001eaa <HAL_ADC_Init+0x23a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e52:	6822      	ldr	r2, [r4, #0]
 8001e54:	6913      	ldr	r3, [r2, #16]
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e5c:	6963      	ldr	r3, [r4, #20]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d035      	beq.n	8001ece <HAL_ADC_Init+0x25e>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e62:	6822      	ldr	r2, [r4, #0]
 8001e64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001e66:	f023 030f 	bic.w	r3, r3, #15
 8001e6a:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e6c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e6e:	f023 0303 	bic.w	r3, r3, #3
 8001e72:	f043 0301 	orr.w	r3, r3, #1
 8001e76:	65e3      	str	r3, [r4, #92]	; 0x5c
 8001e78:	e037      	b.n	8001eea <HAL_ADC_Init+0x27a>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e7a:	4926      	ldr	r1, [pc, #152]	; (8001f14 <HAL_ADC_Init+0x2a4>)
 8001e7c:	e790      	b.n	8001da0 <HAL_ADC_Init+0x130>
 8001e7e:	4925      	ldr	r1, [pc, #148]	; (8001f14 <HAL_ADC_Init+0x2a4>)
 8001e80:	e78e      	b.n	8001da0 <HAL_ADC_Init+0x130>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e82:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001e84:	3a01      	subs	r2, #1
 8001e86:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001e8a:	e79d      	b.n	8001dc8 <HAL_ADC_Init+0x158>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e8c:	6822      	ldr	r2, [r4, #0]
 8001e8e:	6913      	ldr	r3, [r2, #16]
 8001e90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e94:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001e96:	6822      	ldr	r2, [r4, #0]
 8001e98:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001e9c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ea4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001ea8:	e7cf      	b.n	8001e4a <HAL_ADC_Init+0x1da>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eaa:	6821      	ldr	r1, [r4, #0]
 8001eac:	690b      	ldr	r3, [r1, #16]
 8001eae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001eb2:	f023 0304 	bic.w	r3, r3, #4
 8001eb6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8001eb8:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8001eba:	432a      	orrs	r2, r5
 8001ebc:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001ebe:	432a      	orrs	r2, r5
 8001ec0:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8001ec2:	432a      	orrs	r2, r5
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	610b      	str	r3, [r1, #16]
 8001ecc:	e7c6      	b.n	8001e5c <HAL_ADC_Init+0x1ec>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ece:	6821      	ldr	r1, [r4, #0]
 8001ed0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001ed2:	f023 030f 	bic.w	r3, r3, #15
 8001ed6:	6a22      	ldr	r2, [r4, #32]
 8001ed8:	3a01      	subs	r2, #1
 8001eda:	4313      	orrs	r3, r2
 8001edc:	630b      	str	r3, [r1, #48]	; 0x30
 8001ede:	e7c5      	b.n	8001e6c <HAL_ADC_Init+0x1fc>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ee0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001ee2:	f043 0310 	orr.w	r3, r3, #16
 8001ee6:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ee8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001eea:	b003      	add	sp, #12
 8001eec:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001eee:	2001      	movs	r0, #1
 8001ef0:	e7fb      	b.n	8001eea <HAL_ADC_Init+0x27a>
 8001ef2:	bf00      	nop
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	053e2d63 	.word	0x053e2d63
 8001efc:	50000100 	.word	0x50000100
 8001f00:	50000400 	.word	0x50000400
 8001f04:	50000500 	.word	0x50000500
 8001f08:	50000600 	.word	0x50000600
 8001f0c:	50000700 	.word	0x50000700
 8001f10:	fff04007 	.word	0xfff04007
 8001f14:	50000300 	.word	0x50000300

08001f18 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f18:	4770      	bx	lr

08001f1a <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f1a:	4770      	bx	lr

08001f1c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f1e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001f20:	f7ff fffb 	bl	8001f1a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f24:	bd08      	pop	{r3, pc}

08001f26 <HAL_ADC_ErrorCallback>:
}
 8001f26:	4770      	bx	lr

08001f28 <ADC_DMAConvCplt>:
{
 8001f28:	b508      	push	{r3, lr}
 8001f2a:	4603      	mov	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f2c:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001f2e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f30:	f012 0f50 	tst.w	r2, #80	; 0x50
 8001f34:	d130      	bne.n	8001f98 <ADC_DMAConvCplt+0x70>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f36:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f3c:	65c3      	str	r3, [r0, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001f3e:	6803      	ldr	r3, [r0, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	f012 0f08 	tst.w	r2, #8
 8001f46:	d014      	beq.n	8001f72 <ADC_DMAConvCplt+0x4a>
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001f4e:	d120      	bne.n	8001f92 <ADC_DMAConvCplt+0x6a>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001f56:	d11c      	bne.n	8001f92 <ADC_DMAConvCplt+0x6a>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f58:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f5e:	65c3      	str	r3, [r0, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f60:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f62:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001f66:	d114      	bne.n	8001f92 <ADC_DMAConvCplt+0x6a>
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f68:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	65c3      	str	r3, [r0, #92]	; 0x5c
 8001f70:	e00f      	b.n	8001f92 <ADC_DMAConvCplt+0x6a>
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	f013 0f02 	tst.w	r3, #2
 8001f78:	d10b      	bne.n	8001f92 <ADC_DMAConvCplt+0x6a>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f7a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f80:	65c3      	str	r3, [r0, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001f82:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f84:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001f88:	d103      	bne.n	8001f92 <ADC_DMAConvCplt+0x6a>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f8a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	65c3      	str	r3, [r0, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001f92:	f7ff ffc1 	bl	8001f18 <HAL_ADC_ConvCpltCallback>
}
 8001f96:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001f98:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001f9a:	f012 0f10 	tst.w	r2, #16
 8001f9e:	d104      	bne.n	8001faa <ADC_DMAConvCplt+0x82>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fa0:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8001fa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	4790      	blx	r2
}
 8001fa8:	e7f5      	b.n	8001f96 <ADC_DMAConvCplt+0x6e>
      HAL_ADC_ErrorCallback(hadc);
 8001faa:	f7ff ffbc 	bl	8001f26 <HAL_ADC_ErrorCallback>
 8001fae:	e7f2      	b.n	8001f96 <ADC_DMAConvCplt+0x6e>

08001fb0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001fb0:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fb2:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001fb4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001fb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fba:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001fbc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001fbe:	f043 0304 	orr.w	r3, r3, #4
 8001fc2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001fc4:	f7ff ffaf 	bl	8001f26 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001fc8:	bd08      	pop	{r3, pc}
	...

08001fcc <HAL_ADC_ConfigChannel>:
{
 8001fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fce:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001fd4:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8001fd8:	2a01      	cmp	r2, #1
 8001fda:	f000 8284 	beq.w	80024e6 <HAL_ADC_ConfigChannel+0x51a>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fe6:	6805      	ldr	r5, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fe8:	68a8      	ldr	r0, [r5, #8]
 8001fea:	f010 0f04 	tst.w	r0, #4
 8001fee:	d009      	beq.n	8002004 <HAL_ADC_ConfigChannel+0x38>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ff0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff2:	f042 0220 	orr.w	r2, r2, #32
 8001ff6:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001ff8:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8002000:	b003      	add	sp, #12
 8002002:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002004:	684c      	ldr	r4, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002006:	3530      	adds	r5, #48	; 0x30
 8002008:	0a22      	lsrs	r2, r4, #8
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	f002 020c 	and.w	r2, r2, #12
  MODIFY_REG(*preg,
 8002010:	58a8      	ldr	r0, [r5, r2]
 8002012:	f004 0e1f 	and.w	lr, r4, #31
 8002016:	241f      	movs	r4, #31
 8002018:	fa04 f40e 	lsl.w	r4, r4, lr
 800201c:	ea20 0004 	bic.w	r0, r0, r4
 8002020:	680c      	ldr	r4, [r1, #0]
 8002022:	f3c4 6c84 	ubfx	ip, r4, #26, #5
 8002026:	fa0c fc0e 	lsl.w	ip, ip, lr
 800202a:	ea40 000c 	orr.w	r0, r0, ip
 800202e:	50a8      	str	r0, [r5, r2]
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002030:	6818      	ldr	r0, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002032:	6882      	ldr	r2, [r0, #8]
 8002034:	f012 0204 	ands.w	r2, r2, #4
 8002038:	d000      	beq.n	800203c <HAL_ADC_ConfigChannel+0x70>
 800203a:	2201      	movs	r2, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800203c:	6884      	ldr	r4, [r0, #8]
 800203e:	f014 0408 	ands.w	r4, r4, #8
 8002042:	d000      	beq.n	8002046 <HAL_ADC_ConfigChannel+0x7a>
 8002044:	2401      	movs	r4, #1
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002046:	2a00      	cmp	r2, #0
 8002048:	d150      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x120>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800204a:	2c00      	cmp	r4, #0
 800204c:	d14e      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x120>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800204e:	688f      	ldr	r7, [r1, #8]
 8002050:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 8002054:	f000 8086 	beq.w	8002164 <HAL_ADC_ConfigChannel+0x198>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002058:	680e      	ldr	r6, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800205a:	3014      	adds	r0, #20
 800205c:	0e72      	lsrs	r2, r6, #25
 800205e:	0092      	lsls	r2, r2, #2
 8002060:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002064:	5885      	ldr	r5, [r0, r2]
 8002066:	f3c6 5e04 	ubfx	lr, r6, #20, #5
 800206a:	f04f 0c07 	mov.w	ip, #7
 800206e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002072:	ea25 0c0c 	bic.w	ip, r5, ip
 8002076:	fa07 f50e 	lsl.w	r5, r7, lr
 800207a:	ea4c 0505 	orr.w	r5, ip, r5
 800207e:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002080:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002082:	6942      	ldr	r2, [r0, #20]
 8002084:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002088:	6142      	str	r2, [r0, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800208a:	694d      	ldr	r5, [r1, #20]
 800208c:	6818      	ldr	r0, [r3, #0]
 800208e:	68c2      	ldr	r2, [r0, #12]
 8002090:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002094:	0052      	lsls	r2, r2, #1
 8002096:	fa05 f202 	lsl.w	r2, r5, r2
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800209a:	690e      	ldr	r6, [r1, #16]
 800209c:	2e04      	cmp	r6, #4
 800209e:	d079      	beq.n	8002194 <HAL_ADC_ConfigChannel+0x1c8>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020a0:	3060      	adds	r0, #96	; 0x60
  MODIFY_REG(*preg,
 80020a2:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80020a6:	4dae      	ldr	r5, [pc, #696]	; (8002360 <HAL_ADC_ConfigChannel+0x394>)
 80020a8:	403d      	ands	r5, r7
 80020aa:	680f      	ldr	r7, [r1, #0]
 80020ac:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 80020b0:	433a      	orrs	r2, r7
 80020b2:	4315      	orrs	r5, r2
 80020b4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80020b8:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	690e      	ldr	r6, [r1, #16]
 80020c0:	6988      	ldr	r0, [r1, #24]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c2:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80020c4:	f852 5026 	ldr.w	r5, [r2, r6, lsl #2]
 80020c8:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80020cc:	4328      	orrs	r0, r5
 80020ce:	f842 0026 	str.w	r0, [r2, r6, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	690d      	ldr	r5, [r1, #16]
 80020d6:	7f08      	ldrb	r0, [r1, #28]
 80020d8:	2801      	cmp	r0, #1
 80020da:	d058      	beq.n	800218e <HAL_ADC_ConfigChannel+0x1c2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020dc:	3260      	adds	r2, #96	; 0x60
  MODIFY_REG(*preg,
 80020de:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80020e2:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80020e6:	4304      	orrs	r4, r0
 80020e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020ec:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ee:	6890      	ldr	r0, [r2, #8]
 80020f0:	f010 0f01 	tst.w	r0, #1
 80020f4:	d112      	bne.n	800211c <HAL_ADC_ConfigChannel+0x150>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020f6:	6808      	ldr	r0, [r1, #0]
 80020f8:	68cd      	ldr	r5, [r1, #12]
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80020fa:	4c9a      	ldr	r4, [pc, #616]	; (8002364 <HAL_ADC_ConfigChannel+0x398>)
 80020fc:	42a5      	cmp	r5, r4
 80020fe:	f000 80b1 	beq.w	8002264 <HAL_ADC_ConfigChannel+0x298>
    CLEAR_BIT(ADCx->DIFSEL,
 8002102:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002106:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800210a:	ea24 0000 	bic.w	r0, r4, r0
 800210e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002112:	68c8      	ldr	r0, [r1, #12]
 8002114:	4a93      	ldr	r2, [pc, #588]	; (8002364 <HAL_ADC_ConfigChannel+0x398>)
 8002116:	4290      	cmp	r0, r2
 8002118:	f000 80ac 	beq.w	8002274 <HAL_ADC_ConfigChannel+0x2a8>
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800211c:	680a      	ldr	r2, [r1, #0]
 800211e:	4992      	ldr	r1, [pc, #584]	; (8002368 <HAL_ADC_ConfigChannel+0x39c>)
 8002120:	420a      	tst	r2, r1
 8002122:	f000 81da 	beq.w	80024da <HAL_ADC_ConfigChannel+0x50e>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002126:	6819      	ldr	r1, [r3, #0]
 8002128:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800212c:	f000 8173 	beq.w	8002416 <HAL_ADC_ConfigChannel+0x44a>
 8002130:	488e      	ldr	r0, [pc, #568]	; (800236c <HAL_ADC_ConfigChannel+0x3a0>)
 8002132:	4281      	cmp	r1, r0
 8002134:	f000 816c 	beq.w	8002410 <HAL_ADC_ConfigChannel+0x444>
 8002138:	488d      	ldr	r0, [pc, #564]	; (8002370 <HAL_ADC_ConfigChannel+0x3a4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800213a:	6880      	ldr	r0, [r0, #8]
 800213c:	f000 74e0 	and.w	r4, r0, #29360128	; 0x1c00000
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002140:	4d8c      	ldr	r5, [pc, #560]	; (8002374 <HAL_ADC_ConfigChannel+0x3a8>)
 8002142:	42aa      	cmp	r2, r5
 8002144:	f000 8169 	beq.w	800241a <HAL_ADC_ConfigChannel+0x44e>
 8002148:	4d8b      	ldr	r5, [pc, #556]	; (8002378 <HAL_ADC_ConfigChannel+0x3ac>)
 800214a:	42aa      	cmp	r2, r5
 800214c:	f000 8165 	beq.w	800241a <HAL_ADC_ConfigChannel+0x44e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002150:	4d8a      	ldr	r5, [pc, #552]	; (800237c <HAL_ADC_ConfigChannel+0x3b0>)
 8002152:	42aa      	cmp	r2, r5
 8002154:	f000 8194 	beq.w	8002480 <HAL_ADC_ConfigChannel+0x4b4>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002158:	4d89      	ldr	r5, [pc, #548]	; (8002380 <HAL_ADC_ConfigChannel+0x3b4>)
 800215a:	42aa      	cmp	r2, r5
 800215c:	f000 81a8 	beq.w	80024b0 <HAL_ADC_ConfigChannel+0x4e4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002160:	2000      	movs	r0, #0
 8002162:	e74a      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002164:	680d      	ldr	r5, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002166:	3014      	adds	r0, #20
 8002168:	0e6a      	lsrs	r2, r5, #25
 800216a:	0092      	lsls	r2, r2, #2
 800216c:	f002 0204 	and.w	r2, r2, #4
  MODIFY_REG(*preg,
 8002170:	5886      	ldr	r6, [r0, r2]
 8002172:	f3c5 5504 	ubfx	r5, r5, #20, #5
 8002176:	2707      	movs	r7, #7
 8002178:	fa07 f505 	lsl.w	r5, r7, r5
 800217c:	ea26 0505 	bic.w	r5, r6, r5
 8002180:	5085      	str	r5, [r0, r2]
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002182:	6818      	ldr	r0, [r3, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002184:	6942      	ldr	r2, [r0, #20]
 8002186:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800218a:	6142      	str	r2, [r0, #20]
}
 800218c:	e77d      	b.n	800208a <HAL_ADC_ConfigChannel+0xbe>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800218e:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8002192:	e7a3      	b.n	80020dc <HAL_ADC_ConfigChannel+0x110>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002194:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002196:	6e04      	ldr	r4, [r0, #96]	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002198:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800219c:	680a      	ldr	r2, [r1, #0]
 800219e:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80021a2:	bb85      	cbnz	r5, 8002206 <HAL_ADC_ConfigChannel+0x23a>
 80021a4:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021a8:	4294      	cmp	r4, r2
 80021aa:	d034      	beq.n	8002216 <HAL_ADC_ConfigChannel+0x24a>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021ac:	681c      	ldr	r4, [r3, #0]
 80021ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80021b0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80021b2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021b6:	680a      	ldr	r2, [r1, #0]
 80021b8:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80021bc:	bb85      	cbnz	r5, 8002220 <HAL_ADC_ConfigChannel+0x254>
 80021be:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021c2:	4290      	cmp	r0, r2
 80021c4:	d034      	beq.n	8002230 <HAL_ADC_ConfigChannel+0x264>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021c6:	681c      	ldr	r4, [r3, #0]
 80021c8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80021ca:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80021cc:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021d0:	680a      	ldr	r2, [r1, #0]
 80021d2:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80021d6:	bb85      	cbnz	r5, 800223a <HAL_ADC_ConfigChannel+0x26e>
 80021d8:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021dc:	4290      	cmp	r0, r2
 80021de:	d034      	beq.n	800224a <HAL_ADC_ConfigChannel+0x27e>
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021e0:	681c      	ldr	r4, [r3, #0]
 80021e2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80021e4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80021e6:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ea:	680a      	ldr	r2, [r1, #0]
 80021ec:	f3c2 0512 	ubfx	r5, r2, #0, #19
 80021f0:	bb85      	cbnz	r5, 8002254 <HAL_ADC_ConfigChannel+0x288>
 80021f2:	f3c2 6284 	ubfx	r2, r2, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021f6:	4290      	cmp	r0, r2
 80021f8:	f47f af78 	bne.w	80020ec <HAL_ADC_ConfigChannel+0x120>
  MODIFY_REG(*preg,
 80021fc:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80021fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002202:	66e2      	str	r2, [r4, #108]	; 0x6c
}
 8002204:	e772      	b.n	80020ec <HAL_ADC_ConfigChannel+0x120>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800220a:	b112      	cbz	r2, 8002212 <HAL_ADC_ConfigChannel+0x246>
  return __builtin_clz(value);
 800220c:	fab2 f282 	clz	r2, r2
 8002210:	e7ca      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1dc>
    return 32U;
 8002212:	2220      	movs	r2, #32
 8002214:	e7c8      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(*preg,
 8002216:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002218:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800221c:	6602      	str	r2, [r0, #96]	; 0x60
}
 800221e:	e7c5      	b.n	80021ac <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002224:	b112      	cbz	r2, 800222c <HAL_ADC_ConfigChannel+0x260>
  return __builtin_clz(value);
 8002226:	fab2 f282 	clz	r2, r2
 800222a:	e7ca      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1f6>
    return 32U;
 800222c:	2220      	movs	r2, #32
 800222e:	e7c8      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1f6>
  MODIFY_REG(*preg,
 8002230:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002232:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002236:	6662      	str	r2, [r4, #100]	; 0x64
}
 8002238:	e7c5      	b.n	80021c6 <HAL_ADC_ConfigChannel+0x1fa>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800223e:	b112      	cbz	r2, 8002246 <HAL_ADC_ConfigChannel+0x27a>
  return __builtin_clz(value);
 8002240:	fab2 f282 	clz	r2, r2
 8002244:	e7ca      	b.n	80021dc <HAL_ADC_ConfigChannel+0x210>
    return 32U;
 8002246:	2220      	movs	r2, #32
 8002248:	e7c8      	b.n	80021dc <HAL_ADC_ConfigChannel+0x210>
  MODIFY_REG(*preg,
 800224a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 800224c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002250:	66a2      	str	r2, [r4, #104]	; 0x68
}
 8002252:	e7c5      	b.n	80021e0 <HAL_ADC_ConfigChannel+0x214>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002254:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002258:	b112      	cbz	r2, 8002260 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	e7ca      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x22a>
    return 32U;
 8002260:	2220      	movs	r2, #32
 8002262:	e7c8      	b.n	80021f6 <HAL_ADC_ConfigChannel+0x22a>
    SET_BIT(ADCx->DIFSEL,
 8002264:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8002268:	f3c0 0012 	ubfx	r0, r0, #0, #19
 800226c:	4320      	orrs	r0, r4
 800226e:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8002272:	e74e      	b.n	8002112 <HAL_ADC_ConfigChannel+0x146>
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002274:	681c      	ldr	r4, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002276:	680a      	ldr	r2, [r1, #0]
 8002278:	f3c2 0512 	ubfx	r5, r2, #0, #19
 800227c:	2d00      	cmp	r5, #0
 800227e:	d138      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x326>
 8002280:	0e90      	lsrs	r0, r2, #26
 8002282:	3001      	adds	r0, #1
 8002284:	f000 001f 	and.w	r0, r0, #31
 8002288:	2809      	cmp	r0, #9
 800228a:	bf8c      	ite	hi
 800228c:	2000      	movhi	r0, #0
 800228e:	2001      	movls	r0, #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002290:	2800      	cmp	r0, #0
 8002292:	d077      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x3b8>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002294:	2d00      	cmp	r5, #0
 8002296:	d13b      	bne.n	8002310 <HAL_ADC_ConfigChannel+0x344>
 8002298:	0e90      	lsrs	r0, r2, #26
 800229a:	3001      	adds	r0, #1
 800229c:	0680      	lsls	r0, r0, #26
 800229e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80022a2:	2d00      	cmp	r5, #0
 80022a4:	d140      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x35c>
 80022a6:	0e96      	lsrs	r6, r2, #26
 80022a8:	3601      	adds	r6, #1
 80022aa:	f006 071f 	and.w	r7, r6, #31
 80022ae:	2601      	movs	r6, #1
 80022b0:	40be      	lsls	r6, r7
 80022b2:	4330      	orrs	r0, r6
 80022b4:	2d00      	cmp	r5, #0
 80022b6:	d145      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x378>
 80022b8:	0e92      	lsrs	r2, r2, #26
 80022ba:	3201      	adds	r2, #1
 80022bc:	f002 021f 	and.w	r2, r2, #31
 80022c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80022c4:	0512      	lsls	r2, r2, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c6:	4302      	orrs	r2, r0
 80022c8:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80022ca:	f104 0614 	add.w	r6, r4, #20
 80022ce:	0e55      	lsrs	r5, r2, #25
 80022d0:	00ad      	lsls	r5, r5, #2
 80022d2:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 80022d6:	5974      	ldr	r4, [r6, r5]
 80022d8:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80022dc:	f04f 0c07 	mov.w	ip, #7
 80022e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80022e4:	ea24 0c0c 	bic.w	ip, r4, ip
 80022e8:	4090      	lsls	r0, r2
 80022ea:	ea4c 0000 	orr.w	r0, ip, r0
 80022ee:	5170      	str	r0, [r6, r5]
}
 80022f0:	e714      	b.n	800211c <HAL_ADC_ConfigChannel+0x150>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80022f6:	b148      	cbz	r0, 800230c <HAL_ADC_ConfigChannel+0x340>
  return __builtin_clz(value);
 80022f8:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022fc:	3001      	adds	r0, #1
 80022fe:	f000 001f 	and.w	r0, r0, #31
 8002302:	2809      	cmp	r0, #9
 8002304:	bf8c      	ite	hi
 8002306:	2000      	movhi	r0, #0
 8002308:	2001      	movls	r0, #1
 800230a:	e7c1      	b.n	8002290 <HAL_ADC_ConfigChannel+0x2c4>
    return 32U;
 800230c:	2020      	movs	r0, #32
 800230e:	e7f5      	b.n	80022fc <HAL_ADC_ConfigChannel+0x330>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 8002314:	b130      	cbz	r0, 8002324 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002316:	fab0 f080 	clz	r0, r0
 800231a:	3001      	adds	r0, #1
 800231c:	0680      	lsls	r0, r0, #26
 800231e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002322:	e7be      	b.n	80022a2 <HAL_ADC_ConfigChannel+0x2d6>
    return 32U;
 8002324:	2020      	movs	r0, #32
 8002326:	e7f8      	b.n	800231a <HAL_ADC_ConfigChannel+0x34e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002328:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800232c:	b146      	cbz	r6, 8002340 <HAL_ADC_ConfigChannel+0x374>
  return __builtin_clz(value);
 800232e:	fab6 f686 	clz	r6, r6
 8002332:	3601      	adds	r6, #1
 8002334:	f006 061f 	and.w	r6, r6, #31
 8002338:	2701      	movs	r7, #1
 800233a:	fa07 f606 	lsl.w	r6, r7, r6
 800233e:	e7b8      	b.n	80022b2 <HAL_ADC_ConfigChannel+0x2e6>
    return 32U;
 8002340:	2620      	movs	r6, #32
 8002342:	e7f6      	b.n	8002332 <HAL_ADC_ConfigChannel+0x366>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002344:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8002348:	b142      	cbz	r2, 800235c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	3201      	adds	r2, #1
 8002350:	f002 021f 	and.w	r2, r2, #31
 8002354:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002358:	0512      	lsls	r2, r2, #20
 800235a:	e7b4      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 800235c:	2220      	movs	r2, #32
 800235e:	e7f6      	b.n	800234e <HAL_ADC_ConfigChannel+0x382>
 8002360:	03fff000 	.word	0x03fff000
 8002364:	407f0000 	.word	0x407f0000
 8002368:	80080000 	.word	0x80080000
 800236c:	50000100 	.word	0x50000100
 8002370:	50000700 	.word	0x50000700
 8002374:	c3210000 	.word	0xc3210000
 8002378:	90c00010 	.word	0x90c00010
 800237c:	c7520000 	.word	0xc7520000
 8002380:	cb840000 	.word	0xcb840000
 8002384:	b9cd      	cbnz	r5, 80023ba <HAL_ADC_ConfigChannel+0x3ee>
 8002386:	0e90      	lsrs	r0, r2, #26
 8002388:	3001      	adds	r0, #1
 800238a:	0680      	lsls	r0, r0, #26
 800238c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 8002390:	b9fd      	cbnz	r5, 80023d2 <HAL_ADC_ConfigChannel+0x406>
 8002392:	0e96      	lsrs	r6, r2, #26
 8002394:	3601      	adds	r6, #1
 8002396:	f006 071f 	and.w	r7, r6, #31
 800239a:	2601      	movs	r6, #1
 800239c:	40be      	lsls	r6, r7
 800239e:	4330      	orrs	r0, r6
 80023a0:	bb2d      	cbnz	r5, 80023ee <HAL_ADC_ConfigChannel+0x422>
 80023a2:	0e92      	lsrs	r2, r2, #26
 80023a4:	3201      	adds	r2, #1
 80023a6:	f002 021f 	and.w	r2, r2, #31
 80023aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80023ae:	3a1e      	subs	r2, #30
 80023b0:	0512      	lsls	r2, r2, #20
 80023b2:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023b6:	4302      	orrs	r2, r0
 80023b8:	e786      	b.n	80022c8 <HAL_ADC_ConfigChannel+0x2fc>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	fa92 f0a2 	rbit	r0, r2
  if (value == 0U)
 80023be:	b130      	cbz	r0, 80023ce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 80023c0:	fab0 f080 	clz	r0, r0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c4:	3001      	adds	r0, #1
 80023c6:	0680      	lsls	r0, r0, #26
 80023c8:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
 80023cc:	e7e0      	b.n	8002390 <HAL_ADC_ConfigChannel+0x3c4>
    return 32U;
 80023ce:	2020      	movs	r0, #32
 80023d0:	e7f8      	b.n	80023c4 <HAL_ADC_ConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80023d6:	b146      	cbz	r6, 80023ea <HAL_ADC_ConfigChannel+0x41e>
  return __builtin_clz(value);
 80023d8:	fab6 f686 	clz	r6, r6
 80023dc:	3601      	adds	r6, #1
 80023de:	f006 061f 	and.w	r6, r6, #31
 80023e2:	2701      	movs	r7, #1
 80023e4:	fa07 f606 	lsl.w	r6, r7, r6
 80023e8:	e7d9      	b.n	800239e <HAL_ADC_ConfigChannel+0x3d2>
    return 32U;
 80023ea:	2620      	movs	r6, #32
 80023ec:	e7f6      	b.n	80023dc <HAL_ADC_ConfigChannel+0x410>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ee:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80023f2:	b15a      	cbz	r2, 800240c <HAL_ADC_ConfigChannel+0x440>
  return __builtin_clz(value);
 80023f4:	fab2 f282 	clz	r2, r2
 80023f8:	3201      	adds	r2, #1
 80023fa:	f002 021f 	and.w	r2, r2, #31
 80023fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002402:	3a1e      	subs	r2, #30
 8002404:	0512      	lsls	r2, r2, #20
 8002406:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800240a:	e7d4      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x3ea>
    return 32U;
 800240c:	2220      	movs	r2, #32
 800240e:	e7f3      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x42c>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002410:	f500 7000 	add.w	r0, r0, #512	; 0x200
 8002414:	e691      	b.n	800213a <HAL_ADC_ConfigChannel+0x16e>
 8002416:	4835      	ldr	r0, [pc, #212]	; (80024ec <HAL_ADC_ConfigChannel+0x520>)
 8002418:	e68f      	b.n	800213a <HAL_ADC_ConfigChannel+0x16e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800241a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 800241e:	f47f ae97 	bne.w	8002150 <HAL_ADC_ConfigChannel+0x184>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002422:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002426:	d004      	beq.n	8002432 <HAL_ADC_ConfigChannel+0x466>
 8002428:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <HAL_ADC_ConfigChannel+0x524>)
 800242a:	4291      	cmp	r1, r2
 800242c:	d001      	beq.n	8002432 <HAL_ADC_ConfigChannel+0x466>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800242e:	2000      	movs	r0, #0
 8002430:	e5e3      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002432:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 8002436:	d019      	beq.n	800246c <HAL_ADC_ConfigChannel+0x4a0>
 8002438:	4a2e      	ldr	r2, [pc, #184]	; (80024f4 <HAL_ADC_ConfigChannel+0x528>)
 800243a:	4291      	cmp	r1, r2
 800243c:	d014      	beq.n	8002468 <HAL_ADC_ConfigChannel+0x49c>
 800243e:	492e      	ldr	r1, [pc, #184]	; (80024f8 <HAL_ADC_ConfigChannel+0x52c>)
 8002440:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002444:	688a      	ldr	r2, [r1, #8]
 8002446:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800244a:	4314      	orrs	r4, r2
 800244c:	608c      	str	r4, [r1, #8]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800244e:	4a2b      	ldr	r2, [pc, #172]	; (80024fc <HAL_ADC_ConfigChannel+0x530>)
 8002450:	6812      	ldr	r2, [r2, #0]
 8002452:	0992      	lsrs	r2, r2, #6
 8002454:	492a      	ldr	r1, [pc, #168]	; (8002500 <HAL_ADC_ConfigChannel+0x534>)
 8002456:	fba1 1202 	umull	r1, r2, r1, r2
 800245a:	0992      	lsrs	r2, r2, #6
 800245c:	3201      	adds	r2, #1
 800245e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002462:	0092      	lsls	r2, r2, #2
 8002464:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002466:	e006      	b.n	8002476 <HAL_ADC_ConfigChannel+0x4aa>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002468:	4920      	ldr	r1, [pc, #128]	; (80024ec <HAL_ADC_ConfigChannel+0x520>)
 800246a:	e7e9      	b.n	8002440 <HAL_ADC_ConfigChannel+0x474>
 800246c:	491f      	ldr	r1, [pc, #124]	; (80024ec <HAL_ADC_ConfigChannel+0x520>)
 800246e:	e7e7      	b.n	8002440 <HAL_ADC_ConfigChannel+0x474>
            wait_loop_index--;
 8002470:	9a01      	ldr	r2, [sp, #4]
 8002472:	3a01      	subs	r2, #1
 8002474:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8002476:	9a01      	ldr	r2, [sp, #4]
 8002478:	2a00      	cmp	r2, #0
 800247a:	d1f9      	bne.n	8002470 <HAL_ADC_ConfigChannel+0x4a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800247c:	2000      	movs	r0, #0
 800247e:	e5bc      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002480:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8002484:	f47f ae68 	bne.w	8002158 <HAL_ADC_ConfigChannel+0x18c>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002488:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 800248c:	d00e      	beq.n	80024ac <HAL_ADC_ConfigChannel+0x4e0>
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <HAL_ADC_ConfigChannel+0x528>)
 8002490:	4291      	cmp	r1, r2
 8002492:	d009      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0x4dc>
 8002494:	4918      	ldr	r1, [pc, #96]	; (80024f8 <HAL_ADC_ConfigChannel+0x52c>)
 8002496:	f044 7480 	orr.w	r4, r4, #16777216	; 0x1000000
 800249a:	688a      	ldr	r2, [r1, #8]
 800249c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80024a0:	4314      	orrs	r4, r2
 80024a2:	608c      	str	r4, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024a4:	2000      	movs	r0, #0
}
 80024a6:	e5a8      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024a8:	4910      	ldr	r1, [pc, #64]	; (80024ec <HAL_ADC_ConfigChannel+0x520>)
 80024aa:	e7f4      	b.n	8002496 <HAL_ADC_ConfigChannel+0x4ca>
 80024ac:	490f      	ldr	r1, [pc, #60]	; (80024ec <HAL_ADC_ConfigChannel+0x520>)
 80024ae:	e7f2      	b.n	8002496 <HAL_ADC_ConfigChannel+0x4ca>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024b0:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80024b4:	d113      	bne.n	80024de <HAL_ADC_ConfigChannel+0x512>
        if (ADC_VREFINT_INSTANCE(hadc))
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <HAL_ADC_ConfigChannel+0x528>)
 80024b8:	4291      	cmp	r1, r2
 80024ba:	d012      	beq.n	80024e2 <HAL_ADC_ConfigChannel+0x516>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024bc:	f1b1 4fa0 	cmp.w	r1, #1342177280	; 0x50000000
 80024c0:	d009      	beq.n	80024d6 <HAL_ADC_ConfigChannel+0x50a>
 80024c2:	480d      	ldr	r0, [pc, #52]	; (80024f8 <HAL_ADC_ConfigChannel+0x52c>)
 80024c4:	f444 0280 	orr.w	r2, r4, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024c8:	6881      	ldr	r1, [r0, #8]
 80024ca:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80024ce:	430a      	orrs	r2, r1
 80024d0:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024d2:	2000      	movs	r0, #0
}
 80024d4:	e591      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_ADC_ConfigChannel+0x520>)
 80024d8:	e7f4      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x4f8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024da:	2000      	movs	r0, #0
 80024dc:	e58d      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
 80024de:	2000      	movs	r0, #0
 80024e0:	e58b      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
 80024e2:	2000      	movs	r0, #0
 80024e4:	e589      	b.n	8001ffa <HAL_ADC_ConfigChannel+0x2e>
  __HAL_LOCK(hadc);
 80024e6:	2002      	movs	r0, #2
 80024e8:	e58a      	b.n	8002000 <HAL_ADC_ConfigChannel+0x34>
 80024ea:	bf00      	nop
 80024ec:	50000300 	.word	0x50000300
 80024f0:	50000600 	.word	0x50000600
 80024f4:	50000100 	.word	0x50000100
 80024f8:	50000700 	.word	0x50000700
 80024fc:	20000000 	.word	0x20000000
 8002500:	053e2d63 	.word	0x053e2d63

08002504 <ADC_Enable>:
{
 8002504:	b538      	push	{r3, r4, r5, lr}
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002506:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	f012 0f01 	tst.w	r2, #1
 800250e:	d140      	bne.n	8002592 <ADC_Enable+0x8e>
 8002510:	4604      	mov	r4, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002512:	6899      	ldr	r1, [r3, #8]
 8002514:	4a20      	ldr	r2, [pc, #128]	; (8002598 <ADC_Enable+0x94>)
 8002516:	4211      	tst	r1, r2
 8002518:	d009      	beq.n	800252e <ADC_Enable+0x2a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	65c3      	str	r3, [r0, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002524:	f043 0301 	orr.w	r3, r3, #1
 8002528:	6603      	str	r3, [r0, #96]	; 0x60
      return HAL_ERROR;
 800252a:	2001      	movs	r0, #1
 800252c:	e032      	b.n	8002594 <ADC_Enable+0x90>
  MODIFY_REG(ADCx->CR,
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002534:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002538:	f042 0201 	orr.w	r2, r2, #1
 800253c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800253e:	f7ff fb7d 	bl	8001c3c <HAL_GetTick>
 8002542:	4605      	mov	r5, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	f012 0f01 	tst.w	r2, #1
 800254c:	d11f      	bne.n	800258e <ADC_Enable+0x8a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	f012 0f01 	tst.w	r2, #1
 8002554:	d107      	bne.n	8002566 <ADC_Enable+0x62>
  MODIFY_REG(ADCx->CR,
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800255c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002560:	f042 0201 	orr.w	r2, r2, #1
 8002564:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002566:	f7ff fb69 	bl	8001c3c <HAL_GetTick>
 800256a:	1b43      	subs	r3, r0, r5
 800256c:	2b02      	cmp	r3, #2
 800256e:	d9e9      	bls.n	8002544 <ADC_Enable+0x40>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f013 0f01 	tst.w	r3, #1
 8002578:	d1e4      	bne.n	8002544 <ADC_Enable+0x40>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800257c:	f043 0310 	orr.w	r3, r3, #16
 8002580:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002582:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 800258a:	2001      	movs	r0, #1
 800258c:	e002      	b.n	8002594 <ADC_Enable+0x90>
  return HAL_OK;
 800258e:	2000      	movs	r0, #0
 8002590:	e000      	b.n	8002594 <ADC_Enable+0x90>
 8002592:	2000      	movs	r0, #0
}
 8002594:	bd38      	pop	{r3, r4, r5, pc}
 8002596:	bf00      	nop
 8002598:	8000003f 	.word	0x8000003f

0800259c <HAL_ADC_Start_DMA>:
{
 800259c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025a0:	4604      	mov	r4, r0
 80025a2:	460f      	mov	r7, r1
 80025a4:	4690      	mov	r8, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025a6:	6800      	ldr	r0, [r0, #0]
 80025a8:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
 80025ac:	d021      	beq.n	80025f2 <HAL_ADC_Start_DMA+0x56>
 80025ae:	4b42      	ldr	r3, [pc, #264]	; (80026b8 <HAL_ADC_Start_DMA+0x11c>)
 80025b0:	4298      	cmp	r0, r3
 80025b2:	d01b      	beq.n	80025ec <HAL_ADC_Start_DMA+0x50>
 80025b4:	4b41      	ldr	r3, [pc, #260]	; (80026bc <HAL_ADC_Start_DMA+0x120>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80025b6:	689e      	ldr	r6, [r3, #8]
 80025b8:	f006 061f 	and.w	r6, r6, #31
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025bc:	6885      	ldr	r5, [r0, #8]
 80025be:	f015 0f04 	tst.w	r5, #4
 80025c2:	d174      	bne.n	80026ae <HAL_ADC_Start_DMA+0x112>
    __HAL_LOCK(hadc);
 80025c4:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d073      	beq.n	80026b4 <HAL_ADC_Start_DMA+0x118>
 80025cc:	2301      	movs	r3, #1
 80025ce:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80025d2:	4b3b      	ldr	r3, [pc, #236]	; (80026c0 <HAL_ADC_Start_DMA+0x124>)
 80025d4:	4298      	cmp	r0, r3
 80025d6:	d00e      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025d8:	b16e      	cbz	r6, 80025f6 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025da:	2e05      	cmp	r6, #5
 80025dc:	d00b      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x5a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025de:	2e09      	cmp	r6, #9
 80025e0:	d009      	beq.n	80025f6 <HAL_ADC_Start_DMA+0x5a>
      __HAL_UNLOCK(hadc);
 80025e2:	2300      	movs	r3, #0
 80025e4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 80025e8:	2001      	movs	r0, #1
 80025ea:	e061      	b.n	80026b0 <HAL_ADC_Start_DMA+0x114>
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ec:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80025f0:	e7e1      	b.n	80025b6 <HAL_ADC_Start_DMA+0x1a>
 80025f2:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <HAL_ADC_Start_DMA+0x128>)
 80025f4:	e7df      	b.n	80025b6 <HAL_ADC_Start_DMA+0x1a>
      tmp_hal_status = ADC_Enable(hadc);
 80025f6:	4620      	mov	r0, r4
 80025f8:	f7ff ff84 	bl	8002504 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80025fc:	2800      	cmp	r0, #0
 80025fe:	d152      	bne.n	80026a6 <HAL_ADC_Start_DMA+0x10a>
        ADC_STATE_CLR_SET(hadc->State,
 8002600:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002602:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002606:	f023 0301 	bic.w	r3, r3, #1
 800260a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002610:	6823      	ldr	r3, [r4, #0]
 8002612:	4a29      	ldr	r2, [pc, #164]	; (80026b8 <HAL_ADC_Start_DMA+0x11c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d040      	beq.n	800269a <HAL_ADC_Start_DMA+0xfe>
 8002618:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800261c:	4293      	cmp	r3, r2
 800261e:	d039      	beq.n	8002694 <HAL_ADC_Start_DMA+0xf8>
 8002620:	461a      	mov	r2, r3
 8002622:	4293      	cmp	r3, r2
 8002624:	d000      	beq.n	8002628 <HAL_ADC_Start_DMA+0x8c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002626:	b91e      	cbnz	r6, 8002630 <HAL_ADC_Start_DMA+0x94>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002628:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800262a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800262e:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002630:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002632:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002636:	d033      	beq.n	80026a0 <HAL_ADC_Start_DMA+0x104>
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002638:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800263a:	f023 0306 	bic.w	r3, r3, #6
 800263e:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002640:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002642:	4a21      	ldr	r2, [pc, #132]	; (80026c8 <HAL_ADC_Start_DMA+0x12c>)
 8002644:	62da      	str	r2, [r3, #44]	; 0x2c
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002646:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002648:	4a20      	ldr	r2, [pc, #128]	; (80026cc <HAL_ADC_Start_DMA+0x130>)
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800264c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800264e:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <HAL_ADC_Start_DMA+0x134>)
 8002650:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	221c      	movs	r2, #28
 8002656:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hadc);
 8002658:	2300      	movs	r3, #0
 800265a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800265e:	6822      	ldr	r2, [r4, #0]
 8002660:	6853      	ldr	r3, [r2, #4]
 8002662:	f043 0310 	orr.w	r3, r3, #16
 8002666:	6053      	str	r3, [r2, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002668:	6822      	ldr	r2, [r4, #0]
 800266a:	68d3      	ldr	r3, [r2, #12]
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	60d3      	str	r3, [r2, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002672:	6821      	ldr	r1, [r4, #0]
 8002674:	4643      	mov	r3, r8
 8002676:	463a      	mov	r2, r7
 8002678:	3140      	adds	r1, #64	; 0x40
 800267a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800267c:	f000 fa0c 	bl	8002a98 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002680:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8002682:	6893      	ldr	r3, [r2, #8]
 8002684:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002688:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800268c:	f043 0304 	orr.w	r3, r3, #4
 8002690:	6093      	str	r3, [r2, #8]
}
 8002692:	e00d      	b.n	80026b0 <HAL_ADC_Start_DMA+0x114>
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002694:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8002698:	e7c3      	b.n	8002622 <HAL_ADC_Start_DMA+0x86>
 800269a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800269e:	e7c0      	b.n	8002622 <HAL_ADC_Start_DMA+0x86>
          ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	2300      	movs	r3, #0
 80026a2:	6623      	str	r3, [r4, #96]	; 0x60
 80026a4:	e7cc      	b.n	8002640 <HAL_ADC_Start_DMA+0xa4>
        __HAL_UNLOCK(hadc);
 80026a6:	2300      	movs	r3, #0
 80026a8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80026ac:	e000      	b.n	80026b0 <HAL_ADC_Start_DMA+0x114>
    tmp_hal_status = HAL_BUSY;
 80026ae:	2002      	movs	r0, #2
}
 80026b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_LOCK(hadc);
 80026b4:	2002      	movs	r0, #2
 80026b6:	e7fb      	b.n	80026b0 <HAL_ADC_Start_DMA+0x114>
 80026b8:	50000100 	.word	0x50000100
 80026bc:	50000700 	.word	0x50000700
 80026c0:	50000600 	.word	0x50000600
 80026c4:	50000300 	.word	0x50000300
 80026c8:	08001f29 	.word	0x08001f29
 80026cc:	08001f1d 	.word	0x08001f1d
 80026d0:	08001fb1 	.word	0x08001fb1

080026d4 <ADC_Disable>:
{
 80026d4:	b538      	push	{r3, r4, r5, lr}
 80026d6:	4604      	mov	r4, r0
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80026d8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80026da:	6893      	ldr	r3, [r2, #8]
 80026dc:	f013 0302 	ands.w	r3, r3, #2
 80026e0:	d000      	beq.n	80026e4 <ADC_Disable+0x10>
 80026e2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026e4:	6891      	ldr	r1, [r2, #8]
 80026e6:	f011 0f01 	tst.w	r1, #1
 80026ea:	d039      	beq.n	8002760 <ADC_Disable+0x8c>
      && (tmp_adc_is_disable_on_going == 0UL)
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d139      	bne.n	8002764 <ADC_Disable+0x90>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80026f0:	6893      	ldr	r3, [r2, #8]
 80026f2:	f003 030d 	and.w	r3, r3, #13
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d009      	beq.n	800270e <ADC_Disable+0x3a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80026fc:	f043 0310 	orr.w	r3, r3, #16
 8002700:	65e3      	str	r3, [r4, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002702:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_ERROR;
 800270a:	2001      	movs	r0, #1
 800270c:	e029      	b.n	8002762 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 800270e:	6893      	ldr	r3, [r2, #8]
 8002710:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002714:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002718:	f043 0302 	orr.w	r3, r3, #2
 800271c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800271e:	6823      	ldr	r3, [r4, #0]
 8002720:	2203      	movs	r2, #3
 8002722:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002724:	f7ff fa8a 	bl	8001c3c <HAL_GetTick>
 8002728:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800272a:	6823      	ldr	r3, [r4, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f013 0f01 	tst.w	r3, #1
 8002732:	d013      	beq.n	800275c <ADC_Disable+0x88>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002734:	f7ff fa82 	bl	8001c3c <HAL_GetTick>
 8002738:	1b40      	subs	r0, r0, r5
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f5      	bls.n	800272a <ADC_Disable+0x56>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f013 0f01 	tst.w	r3, #1
 8002746:	d0f0      	beq.n	800272a <ADC_Disable+0x56>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002748:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800274a:	f043 0310 	orr.w	r3, r3, #16
 800274e:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002752:	f043 0301 	orr.w	r3, r3, #1
 8002756:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 8002758:	2001      	movs	r0, #1
 800275a:	e002      	b.n	8002762 <ADC_Disable+0x8e>
  return HAL_OK;
 800275c:	2000      	movs	r0, #0
 800275e:	e000      	b.n	8002762 <ADC_Disable+0x8e>
 8002760:	2000      	movs	r0, #0
}
 8002762:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8002764:	2000      	movs	r0, #0
 8002766:	e7fc      	b.n	8002762 <ADC_Disable+0x8e>

08002768 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002768:	b530      	push	{r4, r5, lr}
 800276a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800276c:	2300      	movs	r3, #0
 800276e:	9301      	str	r3, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002770:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8002774:	2b01      	cmp	r3, #1
 8002776:	d041      	beq.n	80027fc <HAL_ADCEx_Calibration_Start+0x94>
 8002778:	4604      	mov	r4, r0
 800277a:	460d      	mov	r5, r1
 800277c:	2301      	movs	r3, #1
 800277e:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002782:	f7ff ffa7 	bl	80026d4 <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002786:	bb80      	cbnz	r0, 80027ea <HAL_ADCEx_Calibration_Start+0x82>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002788:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800278a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800278e:	f023 0302 	bic.w	r3, r3, #2
 8002792:	f043 0302 	orr.w	r3, r3, #2
 8002796:	65e3      	str	r3, [r4, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002798:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800279a:	6893      	ldr	r3, [r2, #8]
 800279c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80027a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027a4:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 80027a8:	432b      	orrs	r3, r5
 80027aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80027ae:	6093      	str	r3, [r2, #8]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80027b0:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	db06      	blt.n	80027c6 <HAL_ADCEx_Calibration_Start+0x5e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80027c4:	e015      	b.n	80027f2 <HAL_ADCEx_Calibration_Start+0x8a>
      wait_loop_index++;
 80027c6:	9b01      	ldr	r3, [sp, #4]
 80027c8:	3301      	adds	r3, #1
 80027ca:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80027cc:	9a01      	ldr	r2, [sp, #4]
 80027ce:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <HAL_ADCEx_Calibration_Start+0x98>)
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d9ed      	bls.n	80027b0 <HAL_ADCEx_Calibration_Start+0x48>
        ADC_STATE_CLR_SET(hadc->State,
 80027d4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027d6:	f023 0312 	bic.w	r3, r3, #18
 80027da:	f043 0310 	orr.w	r3, r3, #16
 80027de:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 80027e0:	2300      	movs	r3, #0
 80027e2:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80027e6:	2001      	movs	r0, #1
 80027e8:	e006      	b.n	80027f8 <HAL_ADCEx_Calibration_Start+0x90>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ea:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80027ec:	f043 0310 	orr.w	r3, r3, #16
 80027f0:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027f2:	2300      	movs	r3, #0
 80027f4:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80027f8:	b003      	add	sp, #12
 80027fa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hadc);
 80027fc:	2002      	movs	r0, #2
 80027fe:	e7fb      	b.n	80027f8 <HAL_ADCEx_Calibration_Start+0x90>
 8002800:	0004de01 	.word	0x0004de01

08002804 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8002804:	b1a0      	cbz	r0, 8002830 <HAL_CORDIC_Init+0x2c>
{
 8002806:	b510      	push	{r4, lr}
 8002808:	4604      	mov	r4, r0

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800280a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800280e:	b153      	cbz	r3, 8002826 <HAL_CORDIC_Init+0x22>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8002810:	2000      	movs	r0, #0
 8002812:	6260      	str	r0, [r4, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8002814:	6060      	str	r0, [r4, #4]
  hcordic->pOutBuff = NULL;
 8002816:	60a0      	str	r0, [r4, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8002818:	60e0      	str	r0, [r4, #12]
  hcordic->NbCalcToGet = 0U;
 800281a:	6120      	str	r0, [r4, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800281c:	6160      	str	r0, [r4, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800281e:	2301      	movs	r3, #1
 8002820:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 8002824:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8002826:	f880 3020 	strb.w	r3, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800282a:	f7ff f835 	bl	8001898 <HAL_CORDIC_MspInit>
 800282e:	e7ef      	b.n	8002810 <HAL_CORDIC_Init+0xc>
    return HAL_ERROR;
 8002830:	2001      	movs	r0, #1
}
 8002832:	4770      	bx	lr

08002834 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002836:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002838:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002840:	0200      	lsls	r0, r0, #8
 8002842:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002846:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002850:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002852:	4770      	bx	lr
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_NVIC_SetPriority+0x68>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002862:	f1c3 0c07 	rsb	ip, r3, #7
 8002866:	f1bc 0f04 	cmp.w	ip, #4
 800286a:	bf28      	it	cs
 800286c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002870:	f103 0e04 	add.w	lr, r3, #4
 8002874:	f1be 0f06 	cmp.w	lr, #6
 8002878:	d918      	bls.n	80028ac <HAL_NVIC_SetPriority+0x54>
 800287a:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800287c:	f04f 3eff 	mov.w	lr, #4294967295
 8002880:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002884:	ea21 010c 	bic.w	r1, r1, ip
 8002888:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288a:	fa0e f303 	lsl.w	r3, lr, r3
 800288e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002892:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8002894:	2800      	cmp	r0, #0
 8002896:	db0b      	blt.n	80028b0 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002898:	0109      	lsls	r1, r1, #4
 800289a:	b2c9      	uxtb	r1, r1
 800289c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80028a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80028a4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80028a8:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ac:	2300      	movs	r3, #0
 80028ae:	e7e5      	b.n	800287c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028b0:	f000 000f 	and.w	r0, r0, #15
 80028b4:	0109      	lsls	r1, r1, #4
 80028b6:	b2c9      	uxtb	r1, r1
 80028b8:	4b02      	ldr	r3, [pc, #8]	; (80028c4 <HAL_NVIC_SetPriority+0x6c>)
 80028ba:	5419      	strb	r1, [r3, r0]
 80028bc:	e7f4      	b.n	80028a8 <HAL_NVIC_SetPriority+0x50>
 80028be:	bf00      	nop
 80028c0:	e000ed00 	.word	0xe000ed00
 80028c4:	e000ed14 	.word	0xe000ed14

080028c8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80028c8:	2800      	cmp	r0, #0
 80028ca:	db07      	blt.n	80028dc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028cc:	f000 021f 	and.w	r2, r0, #31
 80028d0:	0940      	lsrs	r0, r0, #5
 80028d2:	2301      	movs	r3, #1
 80028d4:	4093      	lsls	r3, r2
 80028d6:	4a02      	ldr	r2, [pc, #8]	; (80028e0 <HAL_NVIC_EnableIRQ+0x18>)
 80028d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	e000e100 	.word	0xe000e100

080028e4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e4:	3801      	subs	r0, #1
 80028e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80028ea:	d20b      	bcs.n	8002904 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ec:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80028f0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <HAL_SYSTICK_Config+0x24>)
 80028f4:	21f0      	movs	r1, #240	; 0xf0
 80028f6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fa:	2000      	movs	r0, #0
 80028fc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fe:	2207      	movs	r2, #7
 8002900:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002902:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002904:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800290c:	b430      	push	{r4, r5}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800290e:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 8002910:	6d05      	ldr	r5, [r0, #80]	; 0x50
 8002912:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002914:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002916:	b114      	cbz	r4, 800291e <DMA_SetConfig+0x12>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002918:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800291a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800291c:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800291e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002920:	f004 0c1f 	and.w	ip, r4, #31
 8002924:	2401      	movs	r4, #1
 8002926:	fa04 f40c 	lsl.w	r4, r4, ip
 800292a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800292c:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800292e:	6804      	ldr	r4, [r0, #0]
 8002930:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002932:	6883      	ldr	r3, [r0, #8]
 8002934:	2b10      	cmp	r3, #16
 8002936:	d005      	beq.n	8002944 <DMA_SetConfig+0x38>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002938:	6803      	ldr	r3, [r0, #0]
 800293a:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800293c:	6803      	ldr	r3, [r0, #0]
 800293e:	60da      	str	r2, [r3, #12]
  }
}
 8002940:	bc30      	pop	{r4, r5}
 8002942:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002944:	6803      	ldr	r3, [r0, #0]
 8002946:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002948:	6803      	ldr	r3, [r0, #0]
 800294a:	60d9      	str	r1, [r3, #12]
 800294c:	e7f8      	b.n	8002940 <DMA_SetConfig+0x34>
	...

08002950 <DMA_CalcDMAMUXChannelBaseAndMask>:
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002950:	6803      	ldr	r3, [r0, #0]
 8002952:	4a0c      	ldr	r2, [pc, #48]	; (8002984 <DMA_CalcDMAMUXChannelBaseAndMask+0x34>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d813      	bhi.n	8002980 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002958:	490b      	ldr	r1, [pc, #44]	; (8002988 <DMA_CalcDMAMUXChannelBaseAndMask+0x38>)
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3b08      	subs	r3, #8
 800295e:	4a0b      	ldr	r2, [pc, #44]	; (800298c <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002964:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002966:	f022 0203 	bic.w	r2, r2, #3
 800296a:	440a      	add	r2, r1
 800296c:	6482      	str	r2, [r0, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800296e:	4a08      	ldr	r2, [pc, #32]	; (8002990 <DMA_CalcDMAMUXChannelBaseAndMask+0x40>)
 8002970:	64c2      	str	r2, [r0, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002972:	f3c3 1304 	ubfx	r3, r3, #4, #5
 8002976:	2201      	movs	r2, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	6503      	str	r3, [r0, #80]	; 0x50
}
 800297e:	4770      	bx	lr
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002980:	4904      	ldr	r1, [pc, #16]	; (8002994 <DMA_CalcDMAMUXChannelBaseAndMask+0x44>)
 8002982:	e7ea      	b.n	800295a <DMA_CalcDMAMUXChannelBaseAndMask+0xa>
 8002984:	40020407 	.word	0x40020407
 8002988:	40020800 	.word	0x40020800
 800298c:	cccccccd 	.word	0xcccccccd
 8002990:	40020880 	.word	0x40020880
 8002994:	40020820 	.word	0x40020820

08002998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002998:	7903      	ldrb	r3, [r0, #4]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800299a:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x20>)
 800299c:	441a      	add	r2, r3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80029a2:	4a06      	ldr	r2, [pc, #24]	; (80029bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80029a4:	6582      	str	r2, [r0, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2201      	movs	r2, #1
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	1000823f 	.word	0x1000823f
 80029bc:	40020940 	.word	0x40020940

080029c0 <HAL_DMA_Init>:
  if (hdma == NULL)
 80029c0:	2800      	cmp	r0, #0
 80029c2:	d05b      	beq.n	8002a7c <HAL_DMA_Init+0xbc>
{
 80029c4:	b510      	push	{r4, lr}
 80029c6:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80029c8:	6801      	ldr	r1, [r0, #0]
 80029ca:	4b2d      	ldr	r3, [pc, #180]	; (8002a80 <HAL_DMA_Init+0xc0>)
 80029cc:	4299      	cmp	r1, r3
 80029ce:	d83d      	bhi.n	8002a4c <HAL_DMA_Init+0x8c>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_DMA_Init+0xc4>)
 80029d2:	440b      	add	r3, r1
 80029d4:	4a2c      	ldr	r2, [pc, #176]	; (8002a88 <HAL_DMA_Init+0xc8>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	091b      	lsrs	r3, r3, #4
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80029e0:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_DMA_Init+0xcc>)
 80029e2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  tmp = hdma->Instance->CCR;
 80029ea:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029ec:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80029f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmp |=  hdma->Init.Direction        |
 80029f4:	68a3      	ldr	r3, [r4, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f6:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Direction        |
 80029f8:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fa:	6920      	ldr	r0, [r4, #16]
 80029fc:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fe:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a00:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a02:	69a0      	ldr	r0, [r4, #24]
 8002a04:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a08:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0a:	6a20      	ldr	r0, [r4, #32]
 8002a0c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8002a0e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;
 8002a10:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a12:	4620      	mov	r0, r4
 8002a14:	f7ff ff9c 	bl	8002950 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a18:	68a3      	ldr	r3, [r4, #8]
 8002a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a1e:	d020      	beq.n	8002a62 <HAL_DMA_Init+0xa2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002a22:	7922      	ldrb	r2, [r4, #4]
 8002a24:	601a      	str	r2, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a26:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002a28:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002a2a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002a2c:	6863      	ldr	r3, [r4, #4]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	2b03      	cmp	r3, #3
 8002a32:	d919      	bls.n	8002a68 <HAL_DMA_Init+0xa8>
    hdma->DMAmuxRequestGen = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a38:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a3a:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a3c:	2000      	movs	r0, #0
 8002a3e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  hdma->Lock = HAL_UNLOCKED;
 8002a46:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002a4a:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002a4c:	4b10      	ldr	r3, [pc, #64]	; (8002a90 <HAL_DMA_Init+0xd0>)
 8002a4e:	440b      	add	r3, r1
 8002a50:	4a0d      	ldr	r2, [pc, #52]	; (8002a88 <HAL_DMA_Init+0xc8>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <HAL_DMA_Init+0xd4>)
 8002a5e:	6403      	str	r3, [r0, #64]	; 0x40
 8002a60:	e7c0      	b.n	80029e4 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a62:	2300      	movs	r3, #0
 8002a64:	6063      	str	r3, [r4, #4]
 8002a66:	e7db      	b.n	8002a20 <HAL_DMA_Init+0x60>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a68:	4620      	mov	r0, r4
 8002a6a:	f7ff ff95 	bl	8002998 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a6e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002a70:	2200      	movs	r2, #0
 8002a72:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a74:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002a76:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	e7df      	b.n	8002a3c <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 8002a7c:	2001      	movs	r0, #1
}
 8002a7e:	4770      	bx	lr
 8002a80:	40020407 	.word	0x40020407
 8002a84:	bffdfff8 	.word	0xbffdfff8
 8002a88:	cccccccd 	.word	0xcccccccd
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	bffdfbf8 	.word	0xbffdfbf8
 8002a94:	40020400 	.word	0x40020400

08002a98 <HAL_DMA_Start_IT>:
{
 8002a98:	b538      	push	{r3, r4, r5, lr}
 8002a9a:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002a9c:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002aa0:	2801      	cmp	r0, #1
 8002aa2:	d041      	beq.n	8002b28 <HAL_DMA_Start_IT+0x90>
 8002aa4:	2001      	movs	r0, #1
 8002aa6:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 8002aaa:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002aae:	b2c0      	uxtb	r0, r0
 8002ab0:	2801      	cmp	r0, #1
 8002ab2:	d004      	beq.n	8002abe <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_BUSY;
 8002aba:	2002      	movs	r0, #2
}
 8002abc:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002abe:	2002      	movs	r0, #2
 8002ac0:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002ac8:	6825      	ldr	r5, [r4, #0]
 8002aca:	6828      	ldr	r0, [r5, #0]
 8002acc:	f020 0001 	bic.w	r0, r0, #1
 8002ad0:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	f7ff ff1a 	bl	800290c <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002ad8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ada:	b1d3      	cbz	r3, 8002b12 <HAL_DMA_Start_IT+0x7a>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002adc:	6822      	ldr	r2, [r4, #0]
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f043 030e 	orr.w	r3, r3, #14
 8002ae4:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ae6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8002aee:	d003      	beq.n	8002af8 <HAL_DMA_Start_IT+0x60>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af6:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002af8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002afa:	b11b      	cbz	r3, 8002b04 <HAL_DMA_Start_IT+0x6c>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b02:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002b04:	6822      	ldr	r2, [r4, #0]
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2000      	movs	r0, #0
 8002b10:	e7d4      	b.n	8002abc <HAL_DMA_Start_IT+0x24>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b12:	6822      	ldr	r2, [r4, #0]
 8002b14:	6813      	ldr	r3, [r2, #0]
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b1c:	6822      	ldr	r2, [r4, #0]
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	f043 030a 	orr.w	r3, r3, #10
 8002b24:	6013      	str	r3, [r2, #0]
 8002b26:	e7de      	b.n	8002ae6 <HAL_DMA_Start_IT+0x4e>
  __HAL_LOCK(hdma);
 8002b28:	2002      	movs	r0, #2
 8002b2a:	e7c7      	b.n	8002abc <HAL_DMA_Start_IT+0x24>

08002b2c <HAL_DMA_IRQHandler>:
{
 8002b2c:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002b2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002b30:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002b32:	6804      	ldr	r4, [r0, #0]
 8002b34:	6825      	ldr	r5, [r4, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002b36:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b38:	f003 031f 	and.w	r3, r3, #31
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	420a      	tst	r2, r1
 8002b42:	d015      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x44>
 8002b44:	f015 0f04 	tst.w	r5, #4
 8002b48:	d012      	beq.n	8002b70 <HAL_DMA_IRQHandler+0x44>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b4a:	6823      	ldr	r3, [r4, #0]
 8002b4c:	f013 0f20 	tst.w	r3, #32
 8002b50:	d103      	bne.n	8002b5a <HAL_DMA_IRQHandler+0x2e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	f023 0304 	bic.w	r3, r3, #4
 8002b58:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b5a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002b62:	2304      	movs	r3, #4
 8002b64:	4093      	lsls	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002b68:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002b6a:	b103      	cbz	r3, 8002b6e <HAL_DMA_IRQHandler+0x42>
      hdma->XferHalfCpltCallback(hdma);
 8002b6c:	4798      	blx	r3
}
 8002b6e:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002b70:	2202      	movs	r2, #2
 8002b72:	409a      	lsls	r2, r3
 8002b74:	420a      	tst	r2, r1
 8002b76:	d01c      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x86>
           && (0U != (source_it & DMA_IT_TC)))
 8002b78:	f015 0f02 	tst.w	r5, #2
 8002b7c:	d019      	beq.n	8002bb2 <HAL_DMA_IRQHandler+0x86>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	f013 0f20 	tst.w	r3, #32
 8002b84:	d106      	bne.n	8002b94 <HAL_DMA_IRQHandler+0x68>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	f023 030a 	bic.w	r3, r3, #10
 8002b8c:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b94:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002b96:	f003 021f 	and.w	r2, r3, #31
 8002b9a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	4093      	lsls	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
    __HAL_UNLOCK(hdma);
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002ba8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0df      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x42>
      hdma->XferCpltCallback(hdma);
 8002bae:	4798      	blx	r3
 8002bb0:	e7dd      	b.n	8002b6e <HAL_DMA_IRQHandler+0x42>
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	420b      	tst	r3, r1
 8002bba:	d0d8      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x42>
           && (0U != (source_it & DMA_IT_TE)))
 8002bbc:	f015 0f08 	tst.w	r5, #8
 8002bc0:	d0d5      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	f023 030e 	bic.w	r3, r3, #14
 8002bc8:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002bcc:	f003 031f 	and.w	r3, r3, #31
 8002bd0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bda:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002be0:	2300      	movs	r3, #0
 8002be2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002be6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0c0      	beq.n	8002b6e <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002bec:	4798      	blx	r3
  return;
 8002bee:	e7be      	b.n	8002b6e <HAL_DMA_IRQHandler+0x42>

08002bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bf2:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8002bf4:	2300      	movs	r3, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002bf6:	e062      	b.n	8002cbe <HAL_GPIO_Init+0xce>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf8:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002bfa:	005e      	lsls	r6, r3, #1
 8002bfc:	2403      	movs	r4, #3
 8002bfe:	40b4      	lsls	r4, r6
 8002c00:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c04:	68cc      	ldr	r4, [r1, #12]
 8002c06:	40b4      	lsls	r4, r6
 8002c08:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002c0a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c0c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c0e:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c12:	684c      	ldr	r4, [r1, #4]
 8002c14:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002c18:	409c      	lsls	r4, r3
 8002c1a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8002c1e:	6044      	str	r4, [r0, #4]
 8002c20:	e05e      	b.n	8002ce0 <HAL_GPIO_Init+0xf0>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c22:	08dd      	lsrs	r5, r3, #3
 8002c24:	3508      	adds	r5, #8
 8002c26:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002c2a:	f003 0407 	and.w	r4, r3, #7
 8002c2e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8002c32:	240f      	movs	r4, #15
 8002c34:	fa04 f40c 	lsl.w	r4, r4, ip
 8002c38:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002c3c:	690c      	ldr	r4, [r1, #16]
 8002c3e:	fa04 f40c 	lsl.w	r4, r4, ip
 8002c42:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002c46:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002c4a:	e060      	b.n	8002d0e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c4c:	2405      	movs	r4, #5
 8002c4e:	e000      	b.n	8002c52 <HAL_GPIO_Init+0x62>
 8002c50:	2400      	movs	r4, #0
 8002c52:	fa04 f40e 	lsl.w	r4, r4, lr
 8002c56:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c58:	f10c 0c02 	add.w	ip, ip, #2
 8002c5c:	4d55      	ldr	r5, [pc, #340]	; (8002db4 <HAL_GPIO_Init+0x1c4>)
 8002c5e:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c62:	4c55      	ldr	r4, [pc, #340]	; (8002db8 <HAL_GPIO_Init+0x1c8>)
 8002c64:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8002c66:	43d4      	mvns	r4, r2
 8002c68:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6c:	684f      	ldr	r7, [r1, #4]
 8002c6e:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8002c72:	d001      	beq.n	8002c78 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002c74:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002c78:	4d4f      	ldr	r5, [pc, #316]	; (8002db8 <HAL_GPIO_Init+0x1c8>)
 8002c7a:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR1;
 8002c7c:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8002c7e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c82:	684f      	ldr	r7, [r1, #4]
 8002c84:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
 8002c88:	d001      	beq.n	8002c8e <HAL_GPIO_Init+0x9e>
        {
          temp |= iocurrent;
 8002c8a:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002c8e:	4d4a      	ldr	r5, [pc, #296]	; (8002db8 <HAL_GPIO_Init+0x1c8>)
 8002c90:	60ee      	str	r6, [r5, #12]

        temp = EXTI->EMR1;
 8002c92:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002c94:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c98:	684f      	ldr	r7, [r1, #4]
 8002c9a:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8002c9e:	d001      	beq.n	8002ca4 <HAL_GPIO_Init+0xb4>
        {
          temp |= iocurrent;
 8002ca0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR1 = temp;
 8002ca4:	4d44      	ldr	r5, [pc, #272]	; (8002db8 <HAL_GPIO_Init+0x1c8>)
 8002ca6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002ca8:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8002caa:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cac:	684e      	ldr	r6, [r1, #4]
 8002cae:	f416 3f80 	tst.w	r6, #65536	; 0x10000
 8002cb2:	d001      	beq.n	8002cb8 <HAL_GPIO_Init+0xc8>
        {
          temp |= iocurrent;
 8002cb4:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->IMR1 = temp;
 8002cb8:	4a3f      	ldr	r2, [pc, #252]	; (8002db8 <HAL_GPIO_Init+0x1c8>)
 8002cba:	6014      	str	r4, [r2, #0]
      }
    }

    position++;
 8002cbc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cbe:	680a      	ldr	r2, [r1, #0]
 8002cc0:	fa32 f403 	lsrs.w	r4, r2, r3
 8002cc4:	d074      	beq.n	8002db0 <HAL_GPIO_Init+0x1c0>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cc6:	f04f 0c01 	mov.w	ip, #1
 8002cca:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002cce:	ea1c 0202 	ands.w	r2, ip, r2
 8002cd2:	d0f3      	beq.n	8002cbc <HAL_GPIO_Init+0xcc>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cd4:	684c      	ldr	r4, [r1, #4]
 8002cd6:	f004 0403 	and.w	r4, r4, #3
 8002cda:	3c01      	subs	r4, #1
 8002cdc:	2c01      	cmp	r4, #1
 8002cde:	d98b      	bls.n	8002bf8 <HAL_GPIO_Init+0x8>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce0:	684c      	ldr	r4, [r1, #4]
 8002ce2:	f004 0403 	and.w	r4, r4, #3
 8002ce6:	2c03      	cmp	r4, #3
 8002ce8:	d00c      	beq.n	8002d04 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8002cea:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cec:	005d      	lsls	r5, r3, #1
 8002cee:	f04f 0c03 	mov.w	ip, #3
 8002cf2:	fa0c fc05 	lsl.w	ip, ip, r5
 8002cf6:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cfa:	688c      	ldr	r4, [r1, #8]
 8002cfc:	40ac      	lsls	r4, r5
 8002cfe:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002d02:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d04:	684c      	ldr	r4, [r1, #4]
 8002d06:	f004 0403 	and.w	r4, r4, #3
 8002d0a:	2c02      	cmp	r4, #2
 8002d0c:	d089      	beq.n	8002c22 <HAL_GPIO_Init+0x32>
      temp = GPIOx->MODER;
 8002d0e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002d10:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002d14:	f04f 0c03 	mov.w	ip, #3
 8002d18:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002d1c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d20:	684c      	ldr	r4, [r1, #4]
 8002d22:	f004 0403 	and.w	r4, r4, #3
 8002d26:	fa04 f40e 	lsl.w	r4, r4, lr
 8002d2a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002d2e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d30:	684c      	ldr	r4, [r1, #4]
 8002d32:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002d36:	d0c1      	beq.n	8002cbc <HAL_GPIO_Init+0xcc>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d38:	4c20      	ldr	r4, [pc, #128]	; (8002dbc <HAL_GPIO_Init+0x1cc>)
 8002d3a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8002d3c:	f045 0501 	orr.w	r5, r5, #1
 8002d40:	6625      	str	r5, [r4, #96]	; 0x60
 8002d42:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8002d44:	f004 0401 	and.w	r4, r4, #1
 8002d48:	9401      	str	r4, [sp, #4]
 8002d4a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002d4c:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002d50:	f10c 0502 	add.w	r5, ip, #2
 8002d54:	4c17      	ldr	r4, [pc, #92]	; (8002db4 <HAL_GPIO_Init+0x1c4>)
 8002d56:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002d5a:	f003 0403 	and.w	r4, r3, #3
 8002d5e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002d62:	240f      	movs	r4, #15
 8002d64:	fa04 f40e 	lsl.w	r4, r4, lr
 8002d68:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002d6c:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002d70:	f43f af6e 	beq.w	8002c50 <HAL_GPIO_Init+0x60>
 8002d74:	4c12      	ldr	r4, [pc, #72]	; (8002dc0 <HAL_GPIO_Init+0x1d0>)
 8002d76:	42a0      	cmp	r0, r4
 8002d78:	d012      	beq.n	8002da0 <HAL_GPIO_Init+0x1b0>
 8002d7a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d7e:	42a0      	cmp	r0, r4
 8002d80:	d010      	beq.n	8002da4 <HAL_GPIO_Init+0x1b4>
 8002d82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d86:	42a0      	cmp	r0, r4
 8002d88:	d00e      	beq.n	8002da8 <HAL_GPIO_Init+0x1b8>
 8002d8a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d8e:	42a0      	cmp	r0, r4
 8002d90:	d00c      	beq.n	8002dac <HAL_GPIO_Init+0x1bc>
 8002d92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002d96:	42a0      	cmp	r0, r4
 8002d98:	f43f af58 	beq.w	8002c4c <HAL_GPIO_Init+0x5c>
 8002d9c:	2406      	movs	r4, #6
 8002d9e:	e758      	b.n	8002c52 <HAL_GPIO_Init+0x62>
 8002da0:	2401      	movs	r4, #1
 8002da2:	e756      	b.n	8002c52 <HAL_GPIO_Init+0x62>
 8002da4:	2402      	movs	r4, #2
 8002da6:	e754      	b.n	8002c52 <HAL_GPIO_Init+0x62>
 8002da8:	2403      	movs	r4, #3
 8002daa:	e752      	b.n	8002c52 <HAL_GPIO_Init+0x62>
 8002dac:	2404      	movs	r4, #4
 8002dae:	e750      	b.n	8002c52 <HAL_GPIO_Init+0x62>
  }
}
 8002db0:	b003      	add	sp, #12
 8002db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002db4:	40010000 	.word	0x40010000
 8002db8:	40010400 	.word	0x40010400
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	48000400 	.word	0x48000400

08002dc4 <HAL_PWREx_ControlVoltageScaling>:
{
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d136      	bne.n	8002e36 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002dc8:	4b3e      	ldr	r3, [pc, #248]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dd4:	d008      	beq.n	8002de8 <HAL_PWREx_ControlVoltageScaling+0x24>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002dd6:	4a3b      	ldr	r2, [pc, #236]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002dd8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002de4:	2000      	movs	r0, #0
 8002de6:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002de8:	4a36      	ldr	r2, [pc, #216]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002dea:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002df6:	6813      	ldr	r3, [r2, #0]
 8002df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e00:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	2232      	movs	r2, #50	; 0x32
 8002e08:	fb02 f303 	mul.w	r3, r2, r3
 8002e0c:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e12:	0c9b      	lsrs	r3, r3, #18
 8002e14:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e16:	e000      	b.n	8002e1a <HAL_PWREx_ControlVoltageScaling+0x56>
        wait_loop_index--;
 8002e18:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e1c:	6952      	ldr	r2, [r2, #20]
 8002e1e:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002e22:	d001      	beq.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x64>
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1f7      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x54>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e28:	4b26      	ldr	r3, [pc, #152]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002e30:	d144      	bne.n	8002ebc <HAL_PWREx_ControlVoltageScaling+0xf8>
  return HAL_OK;
 8002e32:	2000      	movs	r0, #0
 8002e34:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e36:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002e3a:	d008      	beq.n	8002e4e <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e3c:	4a21      	ldr	r2, [pc, #132]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e3e:	6813      	ldr	r3, [r2, #0]
 8002e40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e48:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e5a:	d008      	beq.n	8002e6e <HAL_PWREx_ControlVoltageScaling+0xaa>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e5e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002e62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e66:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  return HAL_OK;
 8002e6a:	2000      	movs	r0, #0
 8002e6c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002e70:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e7c:	6813      	ldr	r3, [r2, #0]
 8002e7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e86:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <HAL_PWREx_ControlVoltageScaling+0x104>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2232      	movs	r2, #50	; 0x32
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a0e      	ldr	r2, [pc, #56]	; (8002ecc <HAL_PWREx_ControlVoltageScaling+0x108>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	0c9b      	lsrs	r3, r3, #18
 8002e9a:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e9c:	e000      	b.n	8002ea0 <HAL_PWREx_ControlVoltageScaling+0xdc>
        wait_loop_index--;
 8002e9e:	3b01      	subs	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ea0:	4a08      	ldr	r2, [pc, #32]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002ea2:	6952      	ldr	r2, [r2, #20]
 8002ea4:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002ea8:	d001      	beq.n	8002eae <HAL_PWREx_ControlVoltageScaling+0xea>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1f7      	bne.n	8002e9e <HAL_PWREx_ControlVoltageScaling+0xda>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002eae:	4b05      	ldr	r3, [pc, #20]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0x100>)
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002eb6:	d103      	bne.n	8002ec0 <HAL_PWREx_ControlVoltageScaling+0xfc>
  return HAL_OK;
 8002eb8:	2000      	movs	r0, #0
 8002eba:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002ebc:	2003      	movs	r0, #3
 8002ebe:	4770      	bx	lr
        return HAL_TIMEOUT;
 8002ec0:	2003      	movs	r0, #3
}
 8002ec2:	4770      	bx	lr
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	431bde83 	.word	0x431bde83

08002ed0 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ed0:	4a02      	ldr	r2, [pc, #8]	; (8002edc <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002ed2:	6893      	ldr	r3, [r2, #8]
 8002ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed8:	6093      	str	r3, [r2, #8]
}
 8002eda:	4770      	bx	lr
 8002edc:	40007000 	.word	0x40007000

08002ee0 <RCC_GetSysClockFreqFromPLLSource>:
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee0:	4b12      	ldr	r3, [pc, #72]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	f002 0203 	and.w	r2, r2, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ee8:	68d8      	ldr	r0, [r3, #12]
 8002eea:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8002eee:	1c43      	adds	r3, r0, #1

  switch (pllsource)
 8002ef0:	2a03      	cmp	r2, #3
 8002ef2:	d011      	beq.n	8002f18 <RCC_GetSysClockFreqFromPLLSource+0x38>
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ef4:	480e      	ldr	r0, [pc, #56]	; (8002f30 <RCC_GetSysClockFreqFromPLLSource+0x50>)
 8002ef6:	fbb0 f0f3 	udiv	r0, r0, r3
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002f02:	fb03 f000 	mul.w	r0, r3, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f06:	4b09      	ldr	r3, [pc, #36]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8002f0e:	3301      	adds	r3, #1
 8002f10:	005b      	lsls	r3, r3, #1
  sysclockfreq = pllvco/pllr;

  return sysclockfreq;
}
 8002f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f16:	4770      	bx	lr
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002f18:	4806      	ldr	r0, [pc, #24]	; (8002f34 <RCC_GetSysClockFreqFromPLLSource+0x54>)
 8002f1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f1e:	4b03      	ldr	r3, [pc, #12]	; (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x4c>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f3c3 2306 	ubfx	r3, r3, #8, #7
 8002f26:	fb03 f000 	mul.w	r0, r3, r0
    break;
 8002f2a:	e7ec      	b.n	8002f06 <RCC_GetSysClockFreqFromPLLSource+0x26>
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	00f42400 	.word	0x00f42400
 8002f34:	007a1200 	.word	0x007a1200

08002f38 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8002f38:	2800      	cmp	r0, #0
 8002f3a:	f000 8254 	beq.w	80033e6 <HAL_RCC_OscConfig+0x4ae>
{
 8002f3e:	b570      	push	{r4, r5, r6, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f44:	6803      	ldr	r3, [r0, #0]
 8002f46:	f013 0f01 	tst.w	r3, #1
 8002f4a:	d037      	beq.n	8002fbc <HAL_RCC_OscConfig+0x84>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4c:	4aa4      	ldr	r2, [pc, #656]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002f4e:	6893      	ldr	r3, [r2, #8]
 8002f50:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f54:	68d2      	ldr	r2, [r2, #12]
 8002f56:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d023      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x6e>
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d023      	beq.n	8002faa <HAL_RCC_OscConfig+0x72>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f62:	6863      	ldr	r3, [r4, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d04e      	beq.n	8003008 <HAL_RCC_OscConfig+0xd0>
 8002f6a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f6e:	d051      	beq.n	8003014 <HAL_RCC_OscConfig+0xdc>
 8002f70:	4b9b      	ldr	r3, [pc, #620]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002f78:	601a      	str	r2, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f80:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d052      	beq.n	800302e <HAL_RCC_OscConfig+0xf6>
        tickstart = HAL_GetTick();
 8002f88:	f7fe fe58 	bl	8001c3c <HAL_GetTick>
 8002f8c:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8e:	4b94      	ldr	r3, [pc, #592]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002f96:	d111      	bne.n	8002fbc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f98:	f7fe fe50 	bl	8001c3c <HAL_GetTick>
 8002f9c:	1b40      	subs	r0, r0, r5
 8002f9e:	2864      	cmp	r0, #100	; 0x64
 8002fa0:	d9f5      	bls.n	8002f8e <HAL_RCC_OscConfig+0x56>
            return HAL_TIMEOUT;
 8002fa2:	2003      	movs	r0, #3
 8002fa4:	e228      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fa6:	2a03      	cmp	r2, #3
 8002fa8:	d1d9      	bne.n	8002f5e <HAL_RCC_OscConfig+0x26>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002faa:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002fb2:	d003      	beq.n	8002fbc <HAL_RCC_OscConfig+0x84>
 8002fb4:	6863      	ldr	r3, [r4, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8217 	beq.w	80033ea <HAL_RCC_OscConfig+0x4b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fbc:	6823      	ldr	r3, [r4, #0]
 8002fbe:	f013 0f02 	tst.w	r3, #2
 8002fc2:	d05d      	beq.n	8003080 <HAL_RCC_OscConfig+0x148>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fc4:	4a86      	ldr	r2, [pc, #536]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002fc6:	6893      	ldr	r3, [r2, #8]
 8002fc8:	f003 030c 	and.w	r3, r3, #12
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fcc:	68d2      	ldr	r2, [r2, #12]
 8002fce:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d03a      	beq.n	800304c <HAL_RCC_OscConfig+0x114>
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d03a      	beq.n	8003050 <HAL_RCC_OscConfig+0x118>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fda:	68e3      	ldr	r3, [r4, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d075      	beq.n	80030cc <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8002fe0:	4a7f      	ldr	r2, [pc, #508]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002fe2:	6813      	ldr	r3, [r2, #0]
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002fea:	f7fe fe27 	bl	8001c3c <HAL_GetTick>
 8002fee:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	4b7b      	ldr	r3, [pc, #492]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002ff8:	d15f      	bne.n	80030ba <HAL_RCC_OscConfig+0x182>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fe1f 	bl	8001c3c <HAL_GetTick>
 8002ffe:	1b40      	subs	r0, r0, r5
 8003000:	2802      	cmp	r0, #2
 8003002:	d9f5      	bls.n	8002ff0 <HAL_RCC_OscConfig+0xb8>
            return HAL_TIMEOUT;
 8003004:	2003      	movs	r0, #3
 8003006:	e1f7      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003008:	4a75      	ldr	r2, [pc, #468]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 800300a:	6813      	ldr	r3, [r2, #0]
 800300c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	e7b6      	b.n	8002f82 <HAL_RCC_OscConfig+0x4a>
 8003014:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003018:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	e7a9      	b.n	8002f82 <HAL_RCC_OscConfig+0x4a>
        tickstart = HAL_GetTick();
 800302e:	f7fe fe05 	bl	8001c3c <HAL_GetTick>
 8003032:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003034:	4b6a      	ldr	r3, [pc, #424]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800303c:	d0be      	beq.n	8002fbc <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800303e:	f7fe fdfd 	bl	8001c3c <HAL_GetTick>
 8003042:	1b40      	subs	r0, r0, r5
 8003044:	2864      	cmp	r0, #100	; 0x64
 8003046:	d9f5      	bls.n	8003034 <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
 8003048:	2003      	movs	r0, #3
 800304a:	e1d5      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800304c:	2a02      	cmp	r2, #2
 800304e:	d1c2      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x9e>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003050:	4b63      	ldr	r3, [pc, #396]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003058:	d003      	beq.n	8003062 <HAL_RCC_OscConfig+0x12a>
 800305a:	68e3      	ldr	r3, [r4, #12]
 800305c:	2b00      	cmp	r3, #0
 800305e:	f000 81c6 	beq.w	80033ee <HAL_RCC_OscConfig+0x4b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4a5f      	ldr	r2, [pc, #380]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8003064:	6853      	ldr	r3, [r2, #4]
 8003066:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800306a:	6921      	ldr	r1, [r4, #16]
 800306c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8003070:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003072:	4b5c      	ldr	r3, [pc, #368]	; (80031e4 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	6818      	ldr	r0, [r3, #0]
 8003076:	f7fe fd9d 	bl	8001bb4 <HAL_InitTick>
 800307a:	2800      	cmp	r0, #0
 800307c:	f040 81b9 	bne.w	80033f2 <HAL_RCC_OscConfig+0x4ba>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	f013 0f08 	tst.w	r3, #8
 8003086:	d04c      	beq.n	8003122 <HAL_RCC_OscConfig+0x1ea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003088:	6963      	ldr	r3, [r4, #20]
 800308a:	b39b      	cbz	r3, 80030f4 <HAL_RCC_OscConfig+0x1bc>
      __HAL_RCC_LSI_ENABLE();
 800308c:	4a54      	ldr	r2, [pc, #336]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 800308e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 800309a:	f7fe fdcf 	bl	8001c3c <HAL_GetTick>
 800309e:	4605      	mov	r5, r0
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030a0:	4b4f      	ldr	r3, [pc, #316]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 80030a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a6:	f013 0f02 	tst.w	r3, #2
 80030aa:	d13a      	bne.n	8003122 <HAL_RCC_OscConfig+0x1ea>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030ac:	f7fe fdc6 	bl	8001c3c <HAL_GetTick>
 80030b0:	1b40      	subs	r0, r0, r5
 80030b2:	2802      	cmp	r0, #2
 80030b4:	d9f4      	bls.n	80030a0 <HAL_RCC_OscConfig+0x168>
          return HAL_TIMEOUT;
 80030b6:	2003      	movs	r0, #3
 80030b8:	e19e      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4a49      	ldr	r2, [pc, #292]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 80030bc:	6853      	ldr	r3, [r2, #4]
 80030be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030c2:	6921      	ldr	r1, [r4, #16]
 80030c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80030c8:	6053      	str	r3, [r2, #4]
 80030ca:	e7d9      	b.n	8003080 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 80030cc:	4a44      	ldr	r2, [pc, #272]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80030d6:	f7fe fdb1 	bl	8001c3c <HAL_GetTick>
 80030da:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030dc:	4b40      	ldr	r3, [pc, #256]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80030e4:	d0cc      	beq.n	8003080 <HAL_RCC_OscConfig+0x148>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe fda9 	bl	8001c3c <HAL_GetTick>
 80030ea:	1b40      	subs	r0, r0, r5
 80030ec:	2802      	cmp	r0, #2
 80030ee:	d9f5      	bls.n	80030dc <HAL_RCC_OscConfig+0x1a4>
            return HAL_TIMEOUT;
 80030f0:	2003      	movs	r0, #3
 80030f2:	e181      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_LSI_DISABLE();
 80030f4:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 80030f6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80030fa:	f023 0301 	bic.w	r3, r3, #1
 80030fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003102:	f7fe fd9b 	bl	8001c3c <HAL_GetTick>
 8003106:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	4b35      	ldr	r3, [pc, #212]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	f013 0f02 	tst.w	r3, #2
 8003112:	d006      	beq.n	8003122 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe fd92 	bl	8001c3c <HAL_GetTick>
 8003118:	1b40      	subs	r0, r0, r5
 800311a:	2802      	cmp	r0, #2
 800311c:	d9f4      	bls.n	8003108 <HAL_RCC_OscConfig+0x1d0>
          return HAL_TIMEOUT;
 800311e:	2003      	movs	r0, #3
 8003120:	e16a      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	f013 0f04 	tst.w	r3, #4
 8003128:	f000 8081 	beq.w	800322e <HAL_RCC_OscConfig+0x2f6>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800312c:	4b2c      	ldr	r3, [pc, #176]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 800312e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003130:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8003134:	d136      	bne.n	80031a4 <HAL_RCC_OscConfig+0x26c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	4b2a      	ldr	r3, [pc, #168]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8003138:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800313a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800313e:	659a      	str	r2, [r3, #88]	; 0x58
 8003140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800314a:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314c:	4b26      	ldr	r3, [pc, #152]	; (80031e8 <HAL_RCC_OscConfig+0x2b0>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003154:	d028      	beq.n	80031a8 <HAL_RCC_OscConfig+0x270>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003156:	68a3      	ldr	r3, [r4, #8]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d039      	beq.n	80031d0 <HAL_RCC_OscConfig+0x298>
 800315c:	2b05      	cmp	r3, #5
 800315e:	d045      	beq.n	80031ec <HAL_RCC_OscConfig+0x2b4>
 8003160:	4b1f      	ldr	r3, [pc, #124]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8003162:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003166:	f022 0201 	bic.w	r2, r2, #1
 800316a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800316e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800317a:	68a3      	ldr	r3, [r4, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d043      	beq.n	8003208 <HAL_RCC_OscConfig+0x2d0>
      tickstart = HAL_GetTick();
 8003180:	f7fe fd5c 	bl	8001c3c <HAL_GetTick>
 8003184:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 8003188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318c:	f013 0f02 	tst.w	r3, #2
 8003190:	d14c      	bne.n	800322c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fd53 	bl	8001c3c <HAL_GetTick>
 8003196:	1b80      	subs	r0, r0, r6
 8003198:	f241 3388 	movw	r3, #5000	; 0x1388
 800319c:	4298      	cmp	r0, r3
 800319e:	d9f2      	bls.n	8003186 <HAL_RCC_OscConfig+0x24e>
          return HAL_TIMEOUT;
 80031a0:	2003      	movs	r0, #3
 80031a2:	e129      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	2500      	movs	r5, #0
 80031a6:	e7d1      	b.n	800314c <HAL_RCC_OscConfig+0x214>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031a8:	4a0f      	ldr	r2, [pc, #60]	; (80031e8 <HAL_RCC_OscConfig+0x2b0>)
 80031aa:	6813      	ldr	r3, [r2, #0]
 80031ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031b0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80031b2:	f7fe fd43 	bl	8001c3c <HAL_GetTick>
 80031b6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_OscConfig+0x2b0>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f413 7f80 	tst.w	r3, #256	; 0x100
 80031c0:	d1c9      	bne.n	8003156 <HAL_RCC_OscConfig+0x21e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fe fd3b 	bl	8001c3c <HAL_GetTick>
 80031c6:	1b80      	subs	r0, r0, r6
 80031c8:	2802      	cmp	r0, #2
 80031ca:	d9f5      	bls.n	80031b8 <HAL_RCC_OscConfig+0x280>
          return HAL_TIMEOUT;
 80031cc:	2003      	movs	r0, #3
 80031ce:	e113      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031d0:	4a03      	ldr	r2, [pc, #12]	; (80031e0 <HAL_RCC_OscConfig+0x2a8>)
 80031d2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80031d6:	f043 0301 	orr.w	r3, r3, #1
 80031da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031de:	e7cc      	b.n	800317a <HAL_RCC_OscConfig+0x242>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	20000008 	.word	0x20000008
 80031e8:	40007000 	.word	0x40007000
 80031ec:	4b8a      	ldr	r3, [pc, #552]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 80031ee:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031f2:	f042 0204 	orr.w	r2, r2, #4
 80031f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80031fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80031fe:	f042 0201 	orr.w	r2, r2, #1
 8003202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003206:	e7b8      	b.n	800317a <HAL_RCC_OscConfig+0x242>
      tickstart = HAL_GetTick();
 8003208:	f7fe fd18 	bl	8001c3c <HAL_GetTick>
 800320c:	4606      	mov	r6, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800320e:	4b82      	ldr	r3, [pc, #520]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f013 0f02 	tst.w	r3, #2
 8003218:	d008      	beq.n	800322c <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fd0f 	bl	8001c3c <HAL_GetTick>
 800321e:	1b80      	subs	r0, r0, r6
 8003220:	f241 3388 	movw	r3, #5000	; 0x1388
 8003224:	4298      	cmp	r0, r3
 8003226:	d9f2      	bls.n	800320e <HAL_RCC_OscConfig+0x2d6>
          return HAL_TIMEOUT;
 8003228:	2003      	movs	r0, #3
 800322a:	e0e5      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
    if (pwrclkchanged == SET)
 800322c:	b9e5      	cbnz	r5, 8003268 <HAL_RCC_OscConfig+0x330>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800322e:	6823      	ldr	r3, [r4, #0]
 8003230:	f013 0f20 	tst.w	r3, #32
 8003234:	d035      	beq.n	80032a2 <HAL_RCC_OscConfig+0x36a>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003236:	69a3      	ldr	r3, [r4, #24]
 8003238:	b1e3      	cbz	r3, 8003274 <HAL_RCC_OscConfig+0x33c>
      __HAL_RCC_HSI48_ENABLE();
 800323a:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 800323c:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 8003240:	f043 0301 	orr.w	r3, r3, #1
 8003244:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003248:	f7fe fcf8 	bl	8001c3c <HAL_GetTick>
 800324c:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 8003250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003254:	f013 0f02 	tst.w	r3, #2
 8003258:	d123      	bne.n	80032a2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800325a:	f7fe fcef 	bl	8001c3c <HAL_GetTick>
 800325e:	1b40      	subs	r0, r0, r5
 8003260:	2802      	cmp	r0, #2
 8003262:	d9f4      	bls.n	800324e <HAL_RCC_OscConfig+0x316>
          return HAL_TIMEOUT;
 8003264:	2003      	movs	r0, #3
 8003266:	e0c7      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003268:	4a6b      	ldr	r2, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 800326a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800326c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
 8003272:	e7dc      	b.n	800322e <HAL_RCC_OscConfig+0x2f6>
      __HAL_RCC_HSI48_DISABLE();
 8003274:	4a68      	ldr	r2, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 8003276:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
      tickstart = HAL_GetTick();
 8003282:	f7fe fcdb 	bl	8001c3c <HAL_GetTick>
 8003286:	4605      	mov	r5, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003288:	4b63      	ldr	r3, [pc, #396]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 800328a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328e:	f013 0f02 	tst.w	r3, #2
 8003292:	d006      	beq.n	80032a2 <HAL_RCC_OscConfig+0x36a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003294:	f7fe fcd2 	bl	8001c3c <HAL_GetTick>
 8003298:	1b40      	subs	r0, r0, r5
 800329a:	2802      	cmp	r0, #2
 800329c:	d9f4      	bls.n	8003288 <HAL_RCC_OscConfig+0x350>
          return HAL_TIMEOUT;
 800329e:	2003      	movs	r0, #3
 80032a0:	e0aa      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032a2:	69e3      	ldr	r3, [r4, #28]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80a6 	beq.w	80033f6 <HAL_RCC_OscConfig+0x4be>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032aa:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 80032ac:	6892      	ldr	r2, [r2, #8]
 80032ae:	f002 020c 	and.w	r2, r2, #12
 80032b2:	2a0c      	cmp	r2, #12
 80032b4:	d069      	beq.n	800338a <HAL_RCC_OscConfig+0x452>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d01d      	beq.n	80032f6 <HAL_RCC_OscConfig+0x3be>
        __HAL_RCC_PLL_DISABLE();
 80032ba:	4b57      	ldr	r3, [pc, #348]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80032c2:	601a      	str	r2, [r3, #0]
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	f022 0203 	bic.w	r2, r2, #3
 80032ca:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80032cc:	68da      	ldr	r2, [r3, #12]
 80032ce:	f022 7288 	bic.w	r2, r2, #17825792	; 0x1100000
 80032d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80032d6:	60da      	str	r2, [r3, #12]
        tickstart = HAL_GetTick();
 80032d8:	f7fe fcb0 	bl	8001c3c <HAL_GetTick>
 80032dc:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80032e6:	d04e      	beq.n	8003386 <HAL_RCC_OscConfig+0x44e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fe fca8 	bl	8001c3c <HAL_GetTick>
 80032ec:	1b00      	subs	r0, r0, r4
 80032ee:	2802      	cmp	r0, #2
 80032f0:	d9f5      	bls.n	80032de <HAL_RCC_OscConfig+0x3a6>
            return HAL_TIMEOUT;
 80032f2:	2003      	movs	r0, #3
 80032f4:	e080      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_DISABLE();
 80032f6:	4a48      	ldr	r2, [pc, #288]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 80032f8:	6813      	ldr	r3, [r2, #0]
 80032fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003300:	f7fe fc9c 	bl	8001c3c <HAL_GetTick>
 8003304:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003306:	4b44      	ldr	r3, [pc, #272]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800330e:	d006      	beq.n	800331e <HAL_RCC_OscConfig+0x3e6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fe fc94 	bl	8001c3c <HAL_GetTick>
 8003314:	1b40      	subs	r0, r0, r5
 8003316:	2802      	cmp	r0, #2
 8003318:	d9f5      	bls.n	8003306 <HAL_RCC_OscConfig+0x3ce>
            return HAL_TIMEOUT;
 800331a:	2003      	movs	r0, #3
 800331c:	e06c      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800331e:	4a3e      	ldr	r2, [pc, #248]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 8003320:	68d3      	ldr	r3, [r2, #12]
 8003322:	493e      	ldr	r1, [pc, #248]	; (800341c <HAL_RCC_OscConfig+0x4e4>)
 8003324:	4019      	ands	r1, r3
 8003326:	6a23      	ldr	r3, [r4, #32]
 8003328:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800332a:	3801      	subs	r0, #1
 800332c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8003330:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003332:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8003336:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003338:	0840      	lsrs	r0, r0, #1
 800333a:	3801      	subs	r0, #1
 800333c:	ea43 5340 	orr.w	r3, r3, r0, lsl #21
 8003340:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8003342:	0840      	lsrs	r0, r0, #1
 8003344:	3801      	subs	r0, #1
 8003346:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 800334a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800334c:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
 8003350:	430b      	orrs	r3, r1
 8003352:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8003354:	6813      	ldr	r3, [r2, #0]
 8003356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335a:	6013      	str	r3, [r2, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800335c:	68d3      	ldr	r3, [r2, #12]
 800335e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003362:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003364:	f7fe fc6a 	bl	8001c3c <HAL_GetTick>
 8003368:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800336a:	4b2b      	ldr	r3, [pc, #172]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x44a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003374:	f7fe fc62 	bl	8001c3c <HAL_GetTick>
 8003378:	1b00      	subs	r0, r0, r4
 800337a:	2802      	cmp	r0, #2
 800337c:	d9f5      	bls.n	800336a <HAL_RCC_OscConfig+0x432>
            return HAL_TIMEOUT;
 800337e:	2003      	movs	r0, #3
 8003380:	e03a      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 8003382:	2000      	movs	r0, #0
 8003384:	e038      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 8003386:	2000      	movs	r0, #0
 8003388:	e036      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338a:	2b01      	cmp	r3, #1
 800338c:	d036      	beq.n	80033fc <HAL_RCC_OscConfig+0x4c4>
      temp_pllckcfg = RCC->PLLCFGR;
 800338e:	4b22      	ldr	r3, [pc, #136]	; (8003418 <HAL_RCC_OscConfig+0x4e0>)
 8003390:	68db      	ldr	r3, [r3, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	f003 0103 	and.w	r1, r3, #3
 8003396:	6a22      	ldr	r2, [r4, #32]
 8003398:	4291      	cmp	r1, r2
 800339a:	d131      	bne.n	8003400 <HAL_RCC_OscConfig+0x4c8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033a2:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a4:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80033a8:	d12c      	bne.n	8003404 <HAL_RCC_OscConfig+0x4cc>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80033b4:	d128      	bne.n	8003408 <HAL_RCC_OscConfig+0x4d0>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033b6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033ba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033bc:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80033c0:	d124      	bne.n	800340c <HAL_RCC_OscConfig+0x4d4>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c2:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80033c6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80033c8:	0852      	lsrs	r2, r2, #1
 80033ca:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033cc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80033d0:	d11e      	bne.n	8003410 <HAL_RCC_OscConfig+0x4d8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033d2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80033d6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80033d8:	0852      	lsrs	r2, r2, #1
 80033da:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033dc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80033e0:	d118      	bne.n	8003414 <HAL_RCC_OscConfig+0x4dc>
  return HAL_OK;
 80033e2:	2000      	movs	r0, #0
 80033e4:	e008      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
    return HAL_ERROR;
 80033e6:	2001      	movs	r0, #1
}
 80033e8:	4770      	bx	lr
        return HAL_ERROR;
 80033ea:	2001      	movs	r0, #1
 80033ec:	e004      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 80033ee:	2001      	movs	r0, #1
 80033f0:	e002      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
          return HAL_ERROR;
 80033f2:	2001      	movs	r0, #1
 80033f4:	e000      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
  return HAL_OK;
 80033f6:	2000      	movs	r0, #0
}
 80033f8:	b002      	add	sp, #8
 80033fa:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80033fc:	2001      	movs	r0, #1
 80033fe:	e7fb      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
        return HAL_ERROR;
 8003400:	2001      	movs	r0, #1
 8003402:	e7f9      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 8003404:	2001      	movs	r0, #1
 8003406:	e7f7      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 8003408:	2001      	movs	r0, #1
 800340a:	e7f5      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 800340c:	2001      	movs	r0, #1
 800340e:	e7f3      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 8003410:	2001      	movs	r0, #1
 8003412:	e7f1      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 8003414:	2001      	movs	r0, #1
 8003416:	e7ef      	b.n	80033f8 <HAL_RCC_OscConfig+0x4c0>
 8003418:	40021000 	.word	0x40021000
 800341c:	019f800c 	.word	0x019f800c

08003420 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003420:	4b1e      	ldr	r3, [pc, #120]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f003 030c 	and.w	r3, r3, #12
 8003428:	2b04      	cmp	r3, #4
 800342a:	d033      	beq.n	8003494 <HAL_RCC_GetSysClockFreq+0x74>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800342c:	4b1b      	ldr	r3, [pc, #108]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d02f      	beq.n	8003498 <HAL_RCC_GetSysClockFreq+0x78>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f003 030c 	and.w	r3, r3, #12
 8003440:	2b0c      	cmp	r3, #12
 8003442:	d001      	beq.n	8003448 <HAL_RCC_GetSysClockFreq+0x28>
    sysclockfreq = 0U;
 8003444:	2000      	movs	r0, #0
}
 8003446:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	f002 0203 	and.w	r2, r2, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003450:	68d8      	ldr	r0, [r3, #12]
 8003452:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8003456:	1c43      	adds	r3, r0, #1
    switch (pllsource)
 8003458:	2a03      	cmp	r2, #3
 800345a:	d011      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x60>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345c:	4810      	ldr	r0, [pc, #64]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x80>)
 800345e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800346a:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800346e:	4b0b      	ldr	r3, [pc, #44]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8003476:	3301      	adds	r3, #1
 8003478:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800347a:	fbb0 f0f3 	udiv	r0, r0, r3
 800347e:	4770      	bx	lr
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003480:	4808      	ldr	r0, [pc, #32]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x84>)
 8003482:	fbb0 f0f3 	udiv	r0, r0, r3
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_GetSysClockFreq+0x7c>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f3c3 2306 	ubfx	r3, r3, #8, #7
 800348e:	fb03 f000 	mul.w	r0, r3, r0
      break;
 8003492:	e7ec      	b.n	800346e <HAL_RCC_GetSysClockFreq+0x4e>
    sysclockfreq = HSI_VALUE;
 8003494:	4802      	ldr	r0, [pc, #8]	; (80034a0 <HAL_RCC_GetSysClockFreq+0x80>)
 8003496:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <HAL_RCC_GetSysClockFreq+0x84>)
 800349a:	4770      	bx	lr
 800349c:	40021000 	.word	0x40021000
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	007a1200 	.word	0x007a1200

080034a8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80034a8:	2800      	cmp	r0, #0
 80034aa:	f000 80e6 	beq.w	800367a <HAL_RCC_ClockConfig+0x1d2>
{
 80034ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b0:	460c      	mov	r4, r1
 80034b2:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034b4:	4b74      	ldr	r3, [pc, #464]	; (8003688 <HAL_RCC_ClockConfig+0x1e0>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	428b      	cmp	r3, r1
 80034be:	d20b      	bcs.n	80034d8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034c0:	4a71      	ldr	r2, [pc, #452]	; (8003688 <HAL_RCC_ClockConfig+0x1e0>)
 80034c2:	6813      	ldr	r3, [r2, #0]
 80034c4:	f023 030f 	bic.w	r3, r3, #15
 80034c8:	430b      	orrs	r3, r1
 80034ca:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	428b      	cmp	r3, r1
 80034d4:	f040 80d3 	bne.w	800367e <HAL_RCC_ClockConfig+0x1d6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034d8:	682e      	ldr	r6, [r5, #0]
 80034da:	f016 0601 	ands.w	r6, r6, #1
 80034de:	d05f      	beq.n	80035a0 <HAL_RCC_ClockConfig+0xf8>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034e0:	686b      	ldr	r3, [r5, #4]
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d02f      	beq.n	8003546 <HAL_RCC_ClockConfig+0x9e>
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d04d      	beq.n	8003586 <HAL_RCC_ClockConfig+0xde>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	4b68      	ldr	r3, [pc, #416]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80034f2:	f000 80c6 	beq.w	8003682 <HAL_RCC_ClockConfig+0x1da>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034f6:	f7ff ff93 	bl	8003420 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80034fa:	4b65      	ldr	r3, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1e8>)
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d94d      	bls.n	800359c <HAL_RCC_ClockConfig+0xf4>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003500:	4a62      	ldr	r2, [pc, #392]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003502:	6893      	ldr	r3, [r2, #8]
 8003504:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800350c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800350e:	2680      	movs	r6, #128	; 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003510:	4a5e      	ldr	r2, [pc, #376]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003512:	6893      	ldr	r3, [r2, #8]
 8003514:	f023 0303 	bic.w	r3, r3, #3
 8003518:	6869      	ldr	r1, [r5, #4]
 800351a:	430b      	orrs	r3, r1
 800351c:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 800351e:	f7fe fb8d 	bl	8001c3c <HAL_GetTick>
 8003522:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003524:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 030c 	and.w	r3, r3, #12
 800352c:	686a      	ldr	r2, [r5, #4]
 800352e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003532:	d035      	beq.n	80035a0 <HAL_RCC_ClockConfig+0xf8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003534:	f7fe fb82 	bl	8001c3c <HAL_GetTick>
 8003538:	1bc0      	subs	r0, r0, r7
 800353a:	f241 3388 	movw	r3, #5000	; 0x1388
 800353e:	4298      	cmp	r0, r3
 8003540:	d9f0      	bls.n	8003524 <HAL_RCC_ClockConfig+0x7c>
        return HAL_TIMEOUT;
 8003542:	2003      	movs	r0, #3
 8003544:	e078      	b.n	8003638 <HAL_RCC_ClockConfig+0x190>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	4b51      	ldr	r3, [pc, #324]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0xac>
        return HAL_ERROR;
 8003550:	2001      	movs	r0, #1
 8003552:	e071      	b.n	8003638 <HAL_RCC_ClockConfig+0x190>
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003554:	f7ff fcc4 	bl	8002ee0 <RCC_GetSysClockFreqFromPLLSource>
      if(pllfreq > 80000000U)
 8003558:	4b4d      	ldr	r3, [pc, #308]	; (8003690 <HAL_RCC_ClockConfig+0x1e8>)
 800355a:	4298      	cmp	r0, r3
 800355c:	d91a      	bls.n	8003594 <HAL_RCC_ClockConfig+0xec>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800355e:	4b4b      	ldr	r3, [pc, #300]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8003566:	d005      	beq.n	8003574 <HAL_RCC_ClockConfig+0xcc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003568:	682e      	ldr	r6, [r5, #0]
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800356a:	f016 0602 	ands.w	r6, r6, #2
 800356e:	d0cf      	beq.n	8003510 <HAL_RCC_ClockConfig+0x68>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003570:	68ab      	ldr	r3, [r5, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003572:	b98b      	cbnz	r3, 8003598 <HAL_RCC_ClockConfig+0xf0>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003574:	4a45      	ldr	r2, [pc, #276]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003576:	6893      	ldr	r3, [r2, #8]
 8003578:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800357c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003580:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003582:	2680      	movs	r6, #128	; 0x80
 8003584:	e7c4      	b.n	8003510 <HAL_RCC_ClockConfig+0x68>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003586:	4b41      	ldr	r3, [pc, #260]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800358e:	d1b2      	bne.n	80034f6 <HAL_RCC_ClockConfig+0x4e>
          return HAL_ERROR;
 8003590:	2001      	movs	r0, #1
 8003592:	e051      	b.n	8003638 <HAL_RCC_ClockConfig+0x190>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003594:	2600      	movs	r6, #0
 8003596:	e7bb      	b.n	8003510 <HAL_RCC_ClockConfig+0x68>
 8003598:	2600      	movs	r6, #0
 800359a:	e7b9      	b.n	8003510 <HAL_RCC_ClockConfig+0x68>
 800359c:	2600      	movs	r6, #0
 800359e:	e7b7      	b.n	8003510 <HAL_RCC_ClockConfig+0x68>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a0:	682b      	ldr	r3, [r5, #0]
 80035a2:	f013 0f02 	tst.w	r3, #2
 80035a6:	d048      	beq.n	800363a <HAL_RCC_ClockConfig+0x192>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a8:	f013 0f04 	tst.w	r3, #4
 80035ac:	d004      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x110>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035ae:	4a37      	ldr	r2, [pc, #220]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 80035b0:	6893      	ldr	r3, [r2, #8]
 80035b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035b6:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	682b      	ldr	r3, [r5, #0]
 80035ba:	f013 0f08 	tst.w	r3, #8
 80035be:	d006      	beq.n	80035ce <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80035c0:	4a32      	ldr	r2, [pc, #200]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 80035c2:	6893      	ldr	r3, [r2, #8]
 80035c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80035c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035cc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035ce:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 80035d0:	6893      	ldr	r3, [r2, #8]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d6:	68a9      	ldr	r1, [r5, #8]
 80035d8:	430b      	orrs	r3, r1
 80035da:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035dc:	4b2a      	ldr	r3, [pc, #168]	; (8003688 <HAL_RCC_ClockConfig+0x1e0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 030f 	and.w	r3, r3, #15
 80035e4:	42a3      	cmp	r3, r4
 80035e6:	d830      	bhi.n	800364a <HAL_RCC_ClockConfig+0x1a2>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	682b      	ldr	r3, [r5, #0]
 80035ea:	f013 0f04 	tst.w	r3, #4
 80035ee:	d006      	beq.n	80035fe <HAL_RCC_ClockConfig+0x156>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035f0:	4a26      	ldr	r2, [pc, #152]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 80035f2:	6893      	ldr	r3, [r2, #8]
 80035f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80035f8:	68e9      	ldr	r1, [r5, #12]
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fe:	682b      	ldr	r3, [r5, #0]
 8003600:	f013 0f08 	tst.w	r3, #8
 8003604:	d007      	beq.n	8003616 <HAL_RCC_ClockConfig+0x16e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003608:	6893      	ldr	r3, [r2, #8]
 800360a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800360e:	6929      	ldr	r1, [r5, #16]
 8003610:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003614:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003616:	f7ff ff03 	bl	8003420 <HAL_RCC_GetSysClockFreq>
 800361a:	4b1c      	ldr	r3, [pc, #112]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003622:	4a1c      	ldr	r2, [pc, #112]	; (8003694 <HAL_RCC_ClockConfig+0x1ec>)
 8003624:	5cd3      	ldrb	r3, [r2, r3]
 8003626:	f003 031f 	and.w	r3, r3, #31
 800362a:	40d8      	lsrs	r0, r3
 800362c:	4b1a      	ldr	r3, [pc, #104]	; (8003698 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <HAL_RCC_ClockConfig+0x1f4>)
 8003632:	6818      	ldr	r0, [r3, #0]
 8003634:	f7fe fabe 	bl	8001bb4 <HAL_InitTick>
}
 8003638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(hpre == RCC_SYSCLK_DIV2)
 800363a:	2e80      	cmp	r6, #128	; 0x80
 800363c:	d1ce      	bne.n	80035dc <HAL_RCC_ClockConfig+0x134>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800363e:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_RCC_ClockConfig+0x1e4>)
 8003640:	6893      	ldr	r3, [r2, #8]
 8003642:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003646:	6093      	str	r3, [r2, #8]
 8003648:	e7c8      	b.n	80035dc <HAL_RCC_ClockConfig+0x134>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_RCC_ClockConfig+0x1e0>)
 800364c:	6813      	ldr	r3, [r2, #0]
 800364e:	f023 030f 	bic.w	r3, r3, #15
 8003652:	4323      	orrs	r3, r4
 8003654:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003656:	f7fe faf1 	bl	8001c3c <HAL_GetTick>
 800365a:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365c:	4b0a      	ldr	r3, [pc, #40]	; (8003688 <HAL_RCC_ClockConfig+0x1e0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 030f 	and.w	r3, r3, #15
 8003664:	42a3      	cmp	r3, r4
 8003666:	d0bf      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x140>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003668:	f7fe fae8 	bl	8001c3c <HAL_GetTick>
 800366c:	1b80      	subs	r0, r0, r6
 800366e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003672:	4298      	cmp	r0, r3
 8003674:	d9f2      	bls.n	800365c <HAL_RCC_ClockConfig+0x1b4>
        return HAL_TIMEOUT;
 8003676:	2003      	movs	r0, #3
 8003678:	e7de      	b.n	8003638 <HAL_RCC_ClockConfig+0x190>
    return HAL_ERROR;
 800367a:	2001      	movs	r0, #1
}
 800367c:	4770      	bx	lr
      return HAL_ERROR;
 800367e:	2001      	movs	r0, #1
 8003680:	e7da      	b.n	8003638 <HAL_RCC_ClockConfig+0x190>
          return HAL_ERROR;
 8003682:	2001      	movs	r0, #1
 8003684:	e7d8      	b.n	8003638 <HAL_RCC_ClockConfig+0x190>
 8003686:	bf00      	nop
 8003688:	40022000 	.word	0x40022000
 800368c:	40021000 	.word	0x40021000
 8003690:	04c4b400 	.word	0x04c4b400
 8003694:	0800c278 	.word	0x0800c278
 8003698:	20000000 	.word	0x20000000
 800369c:	20000008 	.word	0x20000008

080036a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036a2:	b083      	sub	sp, #12
 80036a4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80036a6:	6803      	ldr	r3, [r0, #0]
 80036a8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80036ac:	d06e      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0xec>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ae:	4b35      	ldr	r3, [pc, #212]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80036b6:	d11e      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036b8:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80036ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80036bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80036c0:	659a      	str	r2, [r3, #88]	; 0x58
 80036c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c8:	9301      	str	r3, [sp, #4]
 80036ca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80036cc:	2601      	movs	r6, #1
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036ce:	4a2e      	ldr	r2, [pc, #184]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036d0:	6813      	ldr	r3, [r2, #0]
 80036d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036d8:	f7fe fab0 	bl	8001c3c <HAL_GetTick>
 80036dc:	4605      	mov	r5, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036de:	4b2a      	ldr	r3, [pc, #168]	; (8003788 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80036e6:	d108      	bne.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e8:	f7fe faa8 	bl	8001c3c <HAL_GetTick>
 80036ec:	1b40      	subs	r0, r0, r5
 80036ee:	2802      	cmp	r0, #2
 80036f0:	d9f5      	bls.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x3e>
      {
        ret = HAL_TIMEOUT;
 80036f2:	2503      	movs	r5, #3
 80036f4:	e002      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    FlagStatus       pwrclkchanged = RESET;
 80036f6:	2600      	movs	r6, #0
 80036f8:	e7e9      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x2e>
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80036fa:	2500      	movs	r5, #0
        break;
      }
    }

    if(ret == HAL_OK)
 80036fc:	bb45      	cbnz	r5, 8003750 <HAL_RCCEx_PeriphCLKConfig+0xb0>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036fe:	4b21      	ldr	r3, [pc, #132]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003704:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003708:	d015      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x96>
 800370a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800370c:	429a      	cmp	r2, r3
 800370e:	d012      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x96>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003710:	4a1c      	ldr	r2, [pc, #112]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003712:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800371a:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800371e:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003722:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003726:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800372a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800372e:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003736:	f013 0f01 	tst.w	r3, #1
 800373a:	d110      	bne.n	800375e <HAL_RCCEx_PeriphCLKConfig+0xbe>
            break;
          }
        }
      }
      
      if(ret == HAL_OK)
 800373c:	b945      	cbnz	r5, 8003750 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373e:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003740:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800374a:	430b      	orrs	r3, r1
 800374c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003750:	b1ee      	cbz	r6, 800378e <HAL_RCCEx_PeriphCLKConfig+0xee>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003752:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003754:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003756:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375a:	6593      	str	r3, [r2, #88]	; 0x58
 800375c:	e017      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xee>
        tickstart = HAL_GetTick();
 800375e:	f7fe fa6d 	bl	8001c3c <HAL_GetTick>
 8003762:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003764:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8003766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376a:	f013 0f02 	tst.w	r3, #2
 800376e:	d1e5      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x9c>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003770:	f7fe fa64 	bl	8001c3c <HAL_GetTick>
 8003774:	1bc0      	subs	r0, r0, r7
 8003776:	f241 3388 	movw	r3, #5000	; 0x1388
 800377a:	4298      	cmp	r0, r3
 800377c:	d9f2      	bls.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0xc4>
            ret = HAL_TIMEOUT;
 800377e:	2503      	movs	r5, #3
 8003780:	e7dc      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8003782:	bf00      	nop
 8003784:	40021000 	.word	0x40021000
 8003788:	40007000 	.word	0x40007000
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800378c:	2500      	movs	r5, #0
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378e:	6823      	ldr	r3, [r4, #0]
 8003790:	f013 0f01 	tst.w	r3, #1
 8003794:	d008      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003796:	4a9f      	ldr	r2, [pc, #636]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003798:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800379c:	f023 0303 	bic.w	r3, r3, #3
 80037a0:	6861      	ldr	r1, [r4, #4]
 80037a2:	430b      	orrs	r3, r1
 80037a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	f013 0f02 	tst.w	r3, #2
 80037ae:	d008      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b0:	4a98      	ldr	r2, [pc, #608]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037b6:	f023 030c 	bic.w	r3, r3, #12
 80037ba:	68a1      	ldr	r1, [r4, #8]
 80037bc:	430b      	orrs	r3, r1
 80037be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	f013 0f04 	tst.w	r3, #4
 80037c8:	d008      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80037ca:	4a92      	ldr	r2, [pc, #584]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037cc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037d0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80037d4:	68e1      	ldr	r1, [r4, #12]
 80037d6:	430b      	orrs	r3, r1
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80037dc:	6823      	ldr	r3, [r4, #0]
 80037de:	f013 0f08 	tst.w	r3, #8
 80037e2:	d008      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80037e4:	4a8b      	ldr	r2, [pc, #556]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80037e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80037ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80037ee:	6921      	ldr	r1, [r4, #16]
 80037f0:	430b      	orrs	r3, r1
 80037f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	f013 0f10 	tst.w	r3, #16
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037fe:	4a85      	ldr	r2, [pc, #532]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003800:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	6961      	ldr	r1, [r4, #20]
 800380a:	430b      	orrs	r3, r1
 800380c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	f013 0f20 	tst.w	r3, #32
 8003816:	d008      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003818:	4a7e      	ldr	r2, [pc, #504]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800381a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800381e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003822:	69a1      	ldr	r1, [r4, #24]
 8003824:	430b      	orrs	r3, r1
 8003826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003830:	d008      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003832:	4a78      	ldr	r2, [pc, #480]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003834:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003838:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800383c:	69e1      	ldr	r1, [r4, #28]
 800383e:	430b      	orrs	r3, r1
 8003840:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003844:	6823      	ldr	r3, [r4, #0]
 8003846:	f013 0f80 	tst.w	r3, #128	; 0x80
 800384a:	d008      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384c:	4a71      	ldr	r2, [pc, #452]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800384e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003852:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003856:	6a21      	ldr	r1, [r4, #32]
 8003858:	430b      	orrs	r3, r1
 800385a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800385e:	6823      	ldr	r3, [r4, #0]
 8003860:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003864:	d008      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003866:	4a6b      	ldr	r2, [pc, #428]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003868:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800386c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003870:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003872:	430b      	orrs	r3, r1
 8003874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003878:	6823      	ldr	r3, [r4, #0]
 800387a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800387e:	d008      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003880:	4a64      	ldr	r2, [pc, #400]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003882:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8003886:	f023 0303 	bic.w	r3, r3, #3
 800388a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800388c:	430b      	orrs	r3, r1
 800388e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003892:	6823      	ldr	r3, [r4, #0]
 8003894:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003898:	d008      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x20c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389a:	4a5e      	ldr	r2, [pc, #376]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800389c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038a0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80038a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80038a6:	430b      	orrs	r3, r1
 80038a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80038b2:	d00c      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038b4:	4a57      	ldr	r2, [pc, #348]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038b6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038ba:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038be:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80038c0:	430b      	orrs	r3, r1
 80038c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80038c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038cc:	d079      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x322>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80038ce:	6823      	ldr	r3, [r4, #0]
 80038d0:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80038d4:	d00c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80038d6:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038d8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80038e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80038e2:	430b      	orrs	r3, r1
 80038e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80038e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80038ee:	d06d      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80038f6:	d00c      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038f8:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80038fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80038fe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8003902:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003904:	430b      	orrs	r3, r1
 8003906:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800390a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800390c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003910:	d061      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x336>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003912:	6823      	ldr	r3, [r4, #0]
 8003914:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8003918:	d00c      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800391a:	4a3e      	ldr	r2, [pc, #248]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800391c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003920:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003924:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003926:	430b      	orrs	r3, r1
 8003928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800392c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800392e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003932:	d055      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003934:	6823      	ldr	r3, [r4, #0]
 8003936:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 800393a:	d00c      	beq.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800393c:	4a35      	ldr	r2, [pc, #212]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800393e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003942:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003946:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8003948:	430b      	orrs	r3, r1
 800394a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800394e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003954:	d049      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800395c:	d00c      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800395e:	4a2d      	ldr	r2, [pc, #180]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003960:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003964:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003968:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800396a:	430b      	orrs	r3, r1
 800396c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003970:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003976:	d03d      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x354>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003978:	6823      	ldr	r3, [r4, #0]
 800397a:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800397e:	d00c      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003980:	4a24      	ldr	r2, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003982:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003986:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800398a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800398c:	430b      	orrs	r3, r1
 800398e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003992:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003998:	d031      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x35e>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80039a0:	d00c      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80039a4:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80039a8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039ac:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80039ae:	430b      	orrs	r3, r1
 80039b0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80039b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80039b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039ba:	d025      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x368>
  }

#endif /* QUADSPI */

  return status;
}
 80039bc:	4628      	mov	r0, r5
 80039be:	b003      	add	sp, #12
 80039c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c2:	68d3      	ldr	r3, [r2, #12]
 80039c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039c8:	60d3      	str	r3, [r2, #12]
 80039ca:	e780      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x22e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039cc:	68d3      	ldr	r3, [r2, #12]
 80039ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039d2:	60d3      	str	r3, [r2, #12]
 80039d4:	e78c      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039d6:	68d3      	ldr	r3, [r2, #12]
 80039d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039dc:	60d3      	str	r3, [r2, #12]
 80039de:	e798      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x272>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039e0:	68d3      	ldr	r3, [r2, #12]
 80039e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039e6:	60d3      	str	r3, [r2, #12]
 80039e8:	e7a4      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x294>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039ea:	68d3      	ldr	r3, [r2, #12]
 80039ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80039f0:	60d3      	str	r3, [r2, #12]
 80039f2:	e7b0      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039f4:	68d3      	ldr	r3, [r2, #12]
 80039f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039fa:	60d3      	str	r3, [r2, #12]
 80039fc:	e7bc      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80039fe:	68d3      	ldr	r3, [r2, #12]
 8003a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a04:	60d3      	str	r3, [r2, #12]
 8003a06:	e7c8      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003a08:	68d3      	ldr	r3, [r2, #12]
 8003a0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a0e:	60d3      	str	r3, [r2, #12]
 8003a10:	e7d4      	b.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8003a12:	bf00      	nop
 8003a14:	40021000 	.word	0x40021000

08003a18 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d06f      	beq.n	8003afc <HAL_SPI_Init+0xe4>
{
 8003a1c:	b510      	push	{r4, lr}
 8003a1e:	4604      	mov	r4, r0
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a20:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003a22:	b933      	cbnz	r3, 8003a32 <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a24:	6843      	ldr	r3, [r0, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d005      	beq.n	8003a38 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61c3      	str	r3, [r0, #28]
 8003a30:	e002      	b.n	8003a38 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a36:	6143      	str	r3, [r0, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a38:	2300      	movs	r3, #0
 8003a3a:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d052      	beq.n	8003aea <HAL_SPI_Init+0xd2>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a44:	2302      	movs	r3, #2
 8003a46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a4a:	6822      	ldr	r2, [r4, #0]
 8003a4c:	6813      	ldr	r3, [r2, #0]
 8003a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a52:	6013      	str	r3, [r2, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a54:	68e3      	ldr	r3, [r4, #12]
 8003a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a5a:	d94c      	bls.n	8003af6 <HAL_SPI_Init+0xde>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a5c:	2200      	movs	r2, #0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a62:	d004      	beq.n	8003a6e <HAL_SPI_Init+0x56>
 8003a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a68:	d001      	beq.n	8003a6e <HAL_SPI_Init+0x56>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	62a3      	str	r3, [r4, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a6e:	6863      	ldr	r3, [r4, #4]
 8003a70:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003a74:	68a1      	ldr	r1, [r4, #8]
 8003a76:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	6921      	ldr	r1, [r4, #16]
 8003a7e:	f001 0102 	and.w	r1, r1, #2
 8003a82:	430b      	orrs	r3, r1
 8003a84:	6961      	ldr	r1, [r4, #20]
 8003a86:	f001 0101 	and.w	r1, r1, #1
 8003a8a:	430b      	orrs	r3, r1
 8003a8c:	69a1      	ldr	r1, [r4, #24]
 8003a8e:	f401 7100 	and.w	r1, r1, #512	; 0x200
 8003a92:	430b      	orrs	r3, r1
 8003a94:	69e1      	ldr	r1, [r4, #28]
 8003a96:	f001 0138 	and.w	r1, r1, #56	; 0x38
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	6a21      	ldr	r1, [r4, #32]
 8003a9e:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003aa6:	f401 5100 	and.w	r1, r1, #8192	; 0x2000
 8003aaa:	6820      	ldr	r0, [r4, #0]
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6003      	str	r3, [r0, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ab0:	8b63      	ldrh	r3, [r4, #26]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ab8:	f001 0110 	and.w	r1, r1, #16
 8003abc:	430b      	orrs	r3, r1
 8003abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ac0:	f001 0108 	and.w	r1, r1, #8
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	68e1      	ldr	r1, [r4, #12]
 8003ac8:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 8003acc:	430b      	orrs	r3, r1
 8003ace:	6821      	ldr	r1, [r4, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	69d3      	ldr	r3, [r2, #28]
 8003ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003adc:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ade:	2000      	movs	r0, #0
 8003ae0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
}
 8003ae8:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 8003aea:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003aee:	4620      	mov	r0, r4
 8003af0:	f7fd fee8 	bl	80018c4 <HAL_SPI_MspInit>
 8003af4:	e7a6      	b.n	8003a44 <HAL_SPI_Init+0x2c>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003af6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003afa:	e7b0      	b.n	8003a5e <HAL_SPI_Init+0x46>
    return HAL_ERROR;
 8003afc:	2001      	movs	r0, #1
}
 8003afe:	4770      	bx	lr

08003b00 <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003b00:	b340      	cbz	r0, 8003b54 <HAL_SRAM_Init+0x54>
{
 8003b02:	b570      	push	{r4, r5, r6, lr}
 8003b04:	460e      	mov	r6, r1
 8003b06:	4615      	mov	r5, r2
 8003b08:	4604      	mov	r4, r0
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003b0a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003b0e:	b1e3      	cbz	r3, 8003b4a <HAL_SRAM_Init+0x4a>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003b10:	4621      	mov	r1, r4
 8003b12:	f851 0b08 	ldr.w	r0, [r1], #8
 8003b16:	f000 fef3 	bl	8004900 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003b1a:	68a2      	ldr	r2, [r4, #8]
 8003b1c:	4631      	mov	r1, r6
 8003b1e:	6820      	ldr	r0, [r4, #0]
 8003b20:	f000 ff5e 	bl	80049e0 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003b24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b26:	68a2      	ldr	r2, [r4, #8]
 8003b28:	4629      	mov	r1, r5
 8003b2a:	6860      	ldr	r0, [r4, #4]
 8003b2c:	f000 ff8b 	bl	8004a46 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8003b30:	6822      	ldr	r2, [r4, #0]
 8003b32:	68a1      	ldr	r1, [r4, #8]
 8003b34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8003b46:	2000      	movs	r0, #0
}
 8003b48:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 8003b4a:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 8003b4e:	f7fd ff55 	bl	80019fc <HAL_SRAM_MspInit>
 8003b52:	e7dd      	b.n	8003b10 <HAL_SRAM_Init+0x10>
    return HAL_ERROR;
 8003b54:	2001      	movs	r0, #1
}
 8003b56:	4770      	bx	lr

08003b58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b58:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b5a:	6a03      	ldr	r3, [r0, #32]
 8003b5c:	f023 0301 	bic.w	r3, r3, #1
 8003b60:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b62:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	6845      	ldr	r5, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b66:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b68:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b6c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b70:	680c      	ldr	r4, [r1, #0]
 8003b72:	4322      	orrs	r2, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b74:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b78:	688c      	ldr	r4, [r1, #8]
 8003b7a:	4323      	orrs	r3, r4

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b7c:	4c21      	ldr	r4, [pc, #132]	; (8003c04 <TIM_OC1_SetConfig+0xac>)
 8003b7e:	42a0      	cmp	r0, r4
 8003b80:	d013      	beq.n	8003baa <TIM_OC1_SetConfig+0x52>
 8003b82:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003b86:	42a0      	cmp	r0, r4
 8003b88:	d00f      	beq.n	8003baa <TIM_OC1_SetConfig+0x52>
 8003b8a:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003b8e:	42a0      	cmp	r0, r4
 8003b90:	d00b      	beq.n	8003baa <TIM_OC1_SetConfig+0x52>
 8003b92:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b96:	42a0      	cmp	r0, r4
 8003b98:	d007      	beq.n	8003baa <TIM_OC1_SetConfig+0x52>
 8003b9a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003b9e:	42a0      	cmp	r0, r4
 8003ba0:	d003      	beq.n	8003baa <TIM_OC1_SetConfig+0x52>
 8003ba2:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003ba6:	42a0      	cmp	r0, r4
 8003ba8:	d105      	bne.n	8003bb6 <TIM_OC1_SetConfig+0x5e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003baa:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003bae:	68cc      	ldr	r4, [r1, #12]
 8003bb0:	4323      	orrs	r3, r4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	4c13      	ldr	r4, [pc, #76]	; (8003c04 <TIM_OC1_SetConfig+0xac>)
 8003bb8:	42a0      	cmp	r0, r4
 8003bba:	d013      	beq.n	8003be4 <TIM_OC1_SetConfig+0x8c>
 8003bbc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003bc0:	42a0      	cmp	r0, r4
 8003bc2:	d00f      	beq.n	8003be4 <TIM_OC1_SetConfig+0x8c>
 8003bc4:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8003bc8:	42a0      	cmp	r0, r4
 8003bca:	d00b      	beq.n	8003be4 <TIM_OC1_SetConfig+0x8c>
 8003bcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003bd0:	42a0      	cmp	r0, r4
 8003bd2:	d007      	beq.n	8003be4 <TIM_OC1_SetConfig+0x8c>
 8003bd4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003bd8:	42a0      	cmp	r0, r4
 8003bda:	d003      	beq.n	8003be4 <TIM_OC1_SetConfig+0x8c>
 8003bdc:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003be0:	42a0      	cmp	r0, r4
 8003be2:	d107      	bne.n	8003bf4 <TIM_OC1_SetConfig+0x9c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003be4:	f425 7c40 	bic.w	ip, r5, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003be8:	694c      	ldr	r4, [r1, #20]
 8003bea:	ea44 0c0c 	orr.w	ip, r4, ip
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bee:	698d      	ldr	r5, [r1, #24]
 8003bf0:	ea45 050c 	orr.w	r5, r5, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf4:	6045      	str	r5, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf6:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bf8:	684a      	ldr	r2, [r1, #4]
 8003bfa:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	6203      	str	r3, [r0, #32]
}
 8003bfe:	bc30      	pop	{r4, r5}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00

08003c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c0a:	6a03      	ldr	r3, [r0, #32]
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c10:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c14:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c16:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c18:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003c1c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c20:	680d      	ldr	r5, [r1, #0]
 8003c22:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c28:	688d      	ldr	r5, [r1, #8]
 8003c2a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c2e:	4d1c      	ldr	r5, [pc, #112]	; (8003ca0 <TIM_OC3_SetConfig+0x98>)
 8003c30:	42a8      	cmp	r0, r5
 8003c32:	d007      	beq.n	8003c44 <TIM_OC3_SetConfig+0x3c>
 8003c34:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c38:	42a8      	cmp	r0, r5
 8003c3a:	d003      	beq.n	8003c44 <TIM_OC3_SetConfig+0x3c>
 8003c3c:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8003c40:	42a8      	cmp	r0, r5
 8003c42:	d106      	bne.n	8003c52 <TIM_OC3_SetConfig+0x4a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c48:	68cd      	ldr	r5, [r1, #12]
 8003c4a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c4e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c52:	4d13      	ldr	r5, [pc, #76]	; (8003ca0 <TIM_OC3_SetConfig+0x98>)
 8003c54:	42a8      	cmp	r0, r5
 8003c56:	d013      	beq.n	8003c80 <TIM_OC3_SetConfig+0x78>
 8003c58:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c5c:	42a8      	cmp	r0, r5
 8003c5e:	d00f      	beq.n	8003c80 <TIM_OC3_SetConfig+0x78>
 8003c60:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003c64:	42a8      	cmp	r0, r5
 8003c66:	d00b      	beq.n	8003c80 <TIM_OC3_SetConfig+0x78>
 8003c68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c6c:	42a8      	cmp	r0, r5
 8003c6e:	d007      	beq.n	8003c80 <TIM_OC3_SetConfig+0x78>
 8003c70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003c74:	42a8      	cmp	r0, r5
 8003c76:	d003      	beq.n	8003c80 <TIM_OC3_SetConfig+0x78>
 8003c78:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003c7c:	42a8      	cmp	r0, r5
 8003c7e:	d107      	bne.n	8003c90 <TIM_OC3_SetConfig+0x88>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c80:	f424 5c40 	bic.w	ip, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c84:	694c      	ldr	r4, [r1, #20]
 8003c86:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c8a:	698c      	ldr	r4, [r1, #24]
 8003c8c:	ea4c 1404 	orr.w	r4, ip, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c90:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c92:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c94:	684a      	ldr	r2, [r1, #4]
 8003c96:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c98:	6203      	str	r3, [r0, #32]
}
 8003c9a:	bc30      	pop	{r4, r5}
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40012c00 	.word	0x40012c00

08003ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ca4:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ca6:	6a03      	ldr	r3, [r0, #32]
 8003ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cac:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cae:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cb2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003cb4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003cb8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	680d      	ldr	r5, [r1, #0]
 8003cbe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003cc2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003cc6:	688d      	ldr	r5, [r1, #8]
 8003cc8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003ccc:	4d1b      	ldr	r5, [pc, #108]	; (8003d3c <TIM_OC4_SetConfig+0x98>)
 8003cce:	42a8      	cmp	r0, r5
 8003cd0:	d007      	beq.n	8003ce2 <TIM_OC4_SetConfig+0x3e>
 8003cd2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003cd6:	42a8      	cmp	r0, r5
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC4_SetConfig+0x3e>
 8003cda:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8003cde:	42a8      	cmp	r0, r5
 8003ce0:	d106      	bne.n	8003cf0 <TIM_OC4_SetConfig+0x4c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ce2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003ce6:	68cd      	ldr	r5, [r1, #12]
 8003ce8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003cec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cf0:	4d12      	ldr	r5, [pc, #72]	; (8003d3c <TIM_OC4_SetConfig+0x98>)
 8003cf2:	42a8      	cmp	r0, r5
 8003cf4:	d013      	beq.n	8003d1e <TIM_OC4_SetConfig+0x7a>
 8003cf6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003cfa:	42a8      	cmp	r0, r5
 8003cfc:	d00f      	beq.n	8003d1e <TIM_OC4_SetConfig+0x7a>
 8003cfe:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003d02:	42a8      	cmp	r0, r5
 8003d04:	d00b      	beq.n	8003d1e <TIM_OC4_SetConfig+0x7a>
 8003d06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d0a:	42a8      	cmp	r0, r5
 8003d0c:	d007      	beq.n	8003d1e <TIM_OC4_SetConfig+0x7a>
 8003d0e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d12:	42a8      	cmp	r0, r5
 8003d14:	d003      	beq.n	8003d1e <TIM_OC4_SetConfig+0x7a>
 8003d16:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003d1a:	42a8      	cmp	r0, r5
 8003d1c:	d107      	bne.n	8003d2e <TIM_OC4_SetConfig+0x8a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003d1e:	f424 4c40 	bic.w	ip, r4, #49152	; 0xc000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d22:	694c      	ldr	r4, [r1, #20]
 8003d24:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003d28:	698c      	ldr	r4, [r1, #24]
 8003d2a:	ea4c 1484 	orr.w	r4, ip, r4, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d30:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d32:	684a      	ldr	r2, [r1, #4]
 8003d34:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d36:	6203      	str	r3, [r0, #32]
}
 8003d38:	bc30      	pop	{r4, r5}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00

08003d40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003d40:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003d42:	6a03      	ldr	r3, [r0, #32]
 8003d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d48:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d4c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003d4e:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003d50:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003d54:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d58:	680d      	ldr	r5, [r1, #0]
 8003d5a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003d60:	688d      	ldr	r5, [r1, #8]
 8003d62:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d66:	4d11      	ldr	r5, [pc, #68]	; (8003dac <TIM_OC5_SetConfig+0x6c>)
 8003d68:	42a8      	cmp	r0, r5
 8003d6a:	d013      	beq.n	8003d94 <TIM_OC5_SetConfig+0x54>
 8003d6c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003d70:	42a8      	cmp	r0, r5
 8003d72:	d00f      	beq.n	8003d94 <TIM_OC5_SetConfig+0x54>
 8003d74:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003d78:	42a8      	cmp	r0, r5
 8003d7a:	d00b      	beq.n	8003d94 <TIM_OC5_SetConfig+0x54>
 8003d7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d80:	42a8      	cmp	r0, r5
 8003d82:	d007      	beq.n	8003d94 <TIM_OC5_SetConfig+0x54>
 8003d84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d88:	42a8      	cmp	r0, r5
 8003d8a:	d003      	beq.n	8003d94 <TIM_OC5_SetConfig+0x54>
 8003d8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003d90:	42a8      	cmp	r0, r5
 8003d92:	d104      	bne.n	8003d9e <TIM_OC5_SetConfig+0x5e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003d94:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003d98:	694d      	ldr	r5, [r1, #20]
 8003d9a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003da0:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003da2:	684a      	ldr	r2, [r1, #4]
 8003da4:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003da6:	6203      	str	r3, [r0, #32]
}
 8003da8:	bc30      	pop	{r4, r5}
 8003daa:	4770      	bx	lr
 8003dac:	40012c00 	.word	0x40012c00

08003db0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003db0:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003db2:	6a03      	ldr	r3, [r0, #32]
 8003db4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003db8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dba:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dbe:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003dc0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8003dc4:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc8:	680d      	ldr	r5, [r1, #0]
 8003dca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003dce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003dd2:	688d      	ldr	r5, [r1, #8]
 8003dd4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dd8:	4d11      	ldr	r5, [pc, #68]	; (8003e20 <TIM_OC6_SetConfig+0x70>)
 8003dda:	42a8      	cmp	r0, r5
 8003ddc:	d013      	beq.n	8003e06 <TIM_OC6_SetConfig+0x56>
 8003dde:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003de2:	42a8      	cmp	r0, r5
 8003de4:	d00f      	beq.n	8003e06 <TIM_OC6_SetConfig+0x56>
 8003de6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8003dea:	42a8      	cmp	r0, r5
 8003dec:	d00b      	beq.n	8003e06 <TIM_OC6_SetConfig+0x56>
 8003dee:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003df2:	42a8      	cmp	r0, r5
 8003df4:	d007      	beq.n	8003e06 <TIM_OC6_SetConfig+0x56>
 8003df6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003dfa:	42a8      	cmp	r0, r5
 8003dfc:	d003      	beq.n	8003e06 <TIM_OC6_SetConfig+0x56>
 8003dfe:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8003e02:	42a8      	cmp	r0, r5
 8003e04:	d104      	bne.n	8003e10 <TIM_OC6_SetConfig+0x60>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003e06:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003e0a:	694d      	ldr	r5, [r1, #20]
 8003e0c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e10:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e12:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003e14:	684a      	ldr	r2, [r1, #4]
 8003e16:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e18:	6203      	str	r3, [r0, #32]
}
 8003e1a:	bc30      	pop	{r4, r5}
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	40012c00 	.word	0x40012c00

08003e24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e24:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e26:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e28:	6a04      	ldr	r4, [r0, #32]
 8003e2a:	f024 0401 	bic.w	r4, r4, #1
 8003e2e:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e30:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e32:	f024 0cf0 	bic.w	ip, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e36:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3a:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8003e3e:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e40:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e42:	6203      	str	r3, [r0, #32]
}
 8003e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4a:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4c:	6a04      	ldr	r4, [r0, #32]
 8003e4e:	f024 0410 	bic.w	r4, r4, #16
 8003e52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e54:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8003e56:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e58:	f424 4c70 	bic.w	ip, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e5c:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e60:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e64:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e68:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003e6a:	6203      	str	r3, [r0, #32]
}
 8003e6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e72:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e74:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e82:	6083      	str	r3, [r0, #8]
}
 8003e84:	4770      	bx	lr
	...

08003e88 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d135      	bne.n	8003efe <HAL_TIM_Base_Start+0x76>
  htim->State = HAL_TIM_STATE_BUSY;
 8003e92:	2302      	movs	r3, #2
 8003e94:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e98:	6803      	ldr	r3, [r0, #0]
 8003e9a:	4a1c      	ldr	r2, [pc, #112]	; (8003f0c <HAL_TIM_Base_Start+0x84>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d020      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003ea6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d019      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003eae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d015      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003eb6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d011      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003ebe:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00d      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003ec6:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
 8003ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d005      	beq.n	8003ee2 <HAL_TIM_Base_Start+0x5a>
    __HAL_TIM_ENABLE(htim);
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	f042 0201 	orr.w	r2, r2, #1
 8003edc:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003ede:	2000      	movs	r0, #0
 8003ee0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee2:	6899      	ldr	r1, [r3, #8]
 8003ee4:	4a0a      	ldr	r2, [pc, #40]	; (8003f10 <HAL_TIM_Base_Start+0x88>)
 8003ee6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ee8:	2a06      	cmp	r2, #6
 8003eea:	d00a      	beq.n	8003f02 <HAL_TIM_Base_Start+0x7a>
 8003eec:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003ef0:	d009      	beq.n	8003f06 <HAL_TIM_Base_Start+0x7e>
      __HAL_TIM_ENABLE(htim);
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	f042 0201 	orr.w	r2, r2, #1
 8003ef8:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003efa:	2000      	movs	r0, #0
 8003efc:	4770      	bx	lr
    return HAL_ERROR;
 8003efe:	2001      	movs	r0, #1
 8003f00:	4770      	bx	lr
  return HAL_OK;
 8003f02:	2000      	movs	r0, #0
 8003f04:	4770      	bx	lr
 8003f06:	2000      	movs	r0, #0
}
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	40012c00 	.word	0x40012c00
 8003f10:	00010007 	.word	0x00010007

08003f14 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003f14:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d13a      	bne.n	8003f94 <HAL_TIM_Base_Start_IT+0x80>
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1e:	2302      	movs	r3, #2
 8003f20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f24:	6802      	ldr	r2, [r0, #0]
 8003f26:	68d3      	ldr	r3, [r2, #12]
 8003f28:	f043 0301 	orr.w	r3, r3, #1
 8003f2c:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f2e:	6803      	ldr	r3, [r0, #0]
 8003f30:	4a1b      	ldr	r2, [pc, #108]	; (8003fa0 <HAL_TIM_Base_Start_IT+0x8c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d020      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3a:	d01d      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f3c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d019      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f44:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d015      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d011      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f54:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00d      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f5c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d009      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
 8003f64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d005      	beq.n	8003f78 <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f74:	2000      	movs	r0, #0
 8003f76:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f78:	6899      	ldr	r1, [r3, #8]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	; (8003fa4 <HAL_TIM_Base_Start_IT+0x90>)
 8003f7c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f7e:	2a06      	cmp	r2, #6
 8003f80:	d00a      	beq.n	8003f98 <HAL_TIM_Base_Start_IT+0x84>
 8003f82:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003f86:	d009      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x88>
      __HAL_TIM_ENABLE(htim);
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	f042 0201 	orr.w	r2, r2, #1
 8003f8e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003f90:	2000      	movs	r0, #0
 8003f92:	4770      	bx	lr
    return HAL_ERROR;
 8003f94:	2001      	movs	r0, #1
 8003f96:	4770      	bx	lr
  return HAL_OK;
 8003f98:	2000      	movs	r0, #0
 8003f9a:	4770      	bx	lr
 8003f9c:	2000      	movs	r0, #0
}
 8003f9e:	4770      	bx	lr
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	00010007 	.word	0x00010007

08003fa8 <HAL_TIM_PWM_MspInit>:
}
 8003fa8:	4770      	bx	lr

08003faa <HAL_TIM_OC_DelayElapsedCallback>:
}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_IC_CaptureCallback>:
}
 8003fac:	4770      	bx	lr

08003fae <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8003fae:	4770      	bx	lr

08003fb0 <HAL_TIM_TriggerCallback>:
}
 8003fb0:	4770      	bx	lr

08003fb2 <HAL_TIM_IRQHandler>:
{
 8003fb2:	b510      	push	{r4, lr}
 8003fb4:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fb6:	6803      	ldr	r3, [r0, #0]
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	f012 0f02 	tst.w	r2, #2
 8003fbe:	d012      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x34>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fc0:	68da      	ldr	r2, [r3, #12]
 8003fc2:	f012 0f02 	tst.w	r2, #2
 8003fc6:	d00e      	beq.n	8003fe6 <HAL_TIM_IRQHandler+0x34>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fc8:	f06f 0202 	mvn.w	r2, #2
 8003fcc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fce:	2301      	movs	r3, #1
 8003fd0:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fd2:	6803      	ldr	r3, [r0, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f013 0f03 	tst.w	r3, #3
 8003fda:	f000 809f 	beq.w	800411c <HAL_TIM_IRQHandler+0x16a>
          HAL_TIM_IC_CaptureCallback(htim);
 8003fde:	f7ff ffe5 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fe6:	6823      	ldr	r3, [r4, #0]
 8003fe8:	691a      	ldr	r2, [r3, #16]
 8003fea:	f012 0f04 	tst.w	r2, #4
 8003fee:	d013      	beq.n	8004018 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	f012 0f04 	tst.w	r2, #4
 8003ff6:	d00f      	beq.n	8004018 <HAL_TIM_IRQHandler+0x66>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ff8:	f06f 0204 	mvn.w	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	2302      	movs	r3, #2
 8004000:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f413 7f40 	tst.w	r3, #768	; 0x300
 800400a:	f000 808d 	beq.w	8004128 <HAL_TIM_IRQHandler+0x176>
        HAL_TIM_IC_CaptureCallback(htim);
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff ffcc 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004014:	2300      	movs	r3, #0
 8004016:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	f012 0f08 	tst.w	r2, #8
 8004020:	d012      	beq.n	8004048 <HAL_TIM_IRQHandler+0x96>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004022:	68da      	ldr	r2, [r3, #12]
 8004024:	f012 0f08 	tst.w	r2, #8
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_IRQHandler+0x96>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800402a:	f06f 0208 	mvn.w	r2, #8
 800402e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004030:	2304      	movs	r3, #4
 8004032:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004034:	6823      	ldr	r3, [r4, #0]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f013 0f03 	tst.w	r3, #3
 800403c:	d07b      	beq.n	8004136 <HAL_TIM_IRQHandler+0x184>
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	4620      	mov	r0, r4
 8004040:	f7ff ffb4 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004044:	2300      	movs	r3, #0
 8004046:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	f012 0f10 	tst.w	r2, #16
 8004050:	d012      	beq.n	8004078 <HAL_TIM_IRQHandler+0xc6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	f012 0f10 	tst.w	r2, #16
 8004058:	d00e      	beq.n	8004078 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405a:	f06f 0210 	mvn.w	r2, #16
 800405e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004060:	2308      	movs	r3, #8
 8004062:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	69db      	ldr	r3, [r3, #28]
 8004068:	f413 7f40 	tst.w	r3, #768	; 0x300
 800406c:	d06a      	beq.n	8004144 <HAL_TIM_IRQHandler+0x192>
        HAL_TIM_IC_CaptureCallback(htim);
 800406e:	4620      	mov	r0, r4
 8004070:	f7ff ff9c 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004074:	2300      	movs	r3, #0
 8004076:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004078:	6823      	ldr	r3, [r4, #0]
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	f012 0f01 	tst.w	r2, #1
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0xd8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	f012 0f01 	tst.w	r2, #1
 8004088:	d163      	bne.n	8004152 <HAL_TIM_IRQHandler+0x1a0>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004092:	d003      	beq.n	800409c <HAL_TIM_IRQHandler+0xea>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004094:	68da      	ldr	r2, [r3, #12]
 8004096:	f012 0f80 	tst.w	r2, #128	; 0x80
 800409a:	d161      	bne.n	8004160 <HAL_TIM_IRQHandler+0x1ae>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800409c:	6823      	ldr	r3, [r4, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	f412 7f80 	tst.w	r2, #256	; 0x100
 80040a4:	d003      	beq.n	80040ae <HAL_TIM_IRQHandler+0xfc>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80040ac:	d15f      	bne.n	800416e <HAL_TIM_IRQHandler+0x1bc>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ae:	6823      	ldr	r3, [r4, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040b6:	d003      	beq.n	80040c0 <HAL_TIM_IRQHandler+0x10e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	f012 0f40 	tst.w	r2, #64	; 0x40
 80040be:	d15d      	bne.n	800417c <HAL_TIM_IRQHandler+0x1ca>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040c0:	6823      	ldr	r3, [r4, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	f012 0f20 	tst.w	r2, #32
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x120>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	f012 0f20 	tst.w	r2, #32
 80040d0:	d15b      	bne.n	800418a <HAL_TIM_IRQHandler+0x1d8>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80040da:	d003      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x132>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80040dc:	68da      	ldr	r2, [r3, #12]
 80040de:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
 80040e2:	d159      	bne.n	8004198 <HAL_TIM_IRQHandler+0x1e6>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80040e4:	6823      	ldr	r3, [r4, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80040ec:	d003      	beq.n	80040f6 <HAL_TIM_IRQHandler+0x144>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80040ee:	68da      	ldr	r2, [r3, #12]
 80040f0:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
 80040f4:	d157      	bne.n	80041a6 <HAL_TIM_IRQHandler+0x1f4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	691a      	ldr	r2, [r3, #16]
 80040fa:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80040fe:	d003      	beq.n	8004108 <HAL_TIM_IRQHandler+0x156>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8004106:	d155      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x202>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8004110:	d003      	beq.n	800411a <HAL_TIM_IRQHandler+0x168>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
 8004118:	d153      	bne.n	80041c2 <HAL_TIM_IRQHandler+0x210>
}
 800411a:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800411c:	f7ff ff45 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004120:	4620      	mov	r0, r4
 8004122:	f7ff ff44 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
 8004126:	e75c      	b.n	8003fe2 <HAL_TIM_IRQHandler+0x30>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004128:	4620      	mov	r0, r4
 800412a:	f7ff ff3e 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800412e:	4620      	mov	r0, r4
 8004130:	f7ff ff3d 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
 8004134:	e76e      	b.n	8004014 <HAL_TIM_IRQHandler+0x62>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	4620      	mov	r0, r4
 8004138:	f7ff ff37 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	4620      	mov	r0, r4
 800413e:	f7ff ff36 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
 8004142:	e77f      	b.n	8004044 <HAL_TIM_IRQHandler+0x92>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004144:	4620      	mov	r0, r4
 8004146:	f7ff ff30 	bl	8003faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414a:	4620      	mov	r0, r4
 800414c:	f7ff ff2f 	bl	8003fae <HAL_TIM_PWM_PulseFinishedCallback>
 8004150:	e790      	b.n	8004074 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004152:	f06f 0201 	mvn.w	r2, #1
 8004156:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004158:	4620      	mov	r0, r4
 800415a:	f7fc ff87 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
 800415e:	e794      	b.n	800408a <HAL_TIM_IRQHandler+0xd8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004164:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8004166:	4620      	mov	r0, r4
 8004168:	f000 fbc3 	bl	80048f2 <HAL_TIMEx_BreakCallback>
 800416c:	e796      	b.n	800409c <HAL_TIM_IRQHandler+0xea>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800416e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004172:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8004174:	4620      	mov	r0, r4
 8004176:	f000 fbbd 	bl	80048f4 <HAL_TIMEx_Break2Callback>
 800417a:	e798      	b.n	80040ae <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800417c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004180:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004182:	4620      	mov	r0, r4
 8004184:	f7ff ff14 	bl	8003fb0 <HAL_TIM_TriggerCallback>
 8004188:	e79a      	b.n	80040c0 <HAL_TIM_IRQHandler+0x10e>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800418a:	f06f 0220 	mvn.w	r2, #32
 800418e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004190:	4620      	mov	r0, r4
 8004192:	f000 fbad 	bl	80048f0 <HAL_TIMEx_CommutCallback>
 8004196:	e79c      	b.n	80040d2 <HAL_TIM_IRQHandler+0x120>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004198:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800419c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_EncoderIndexCallback(htim);
 800419e:	4620      	mov	r0, r4
 80041a0:	f000 fba9 	bl	80048f6 <HAL_TIMEx_EncoderIndexCallback>
 80041a4:	e79e      	b.n	80040e4 <HAL_TIM_IRQHandler+0x132>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80041a6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80041aa:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041ac:	4620      	mov	r0, r4
 80041ae:	f000 fba3 	bl	80048f8 <HAL_TIMEx_DirectionChangeCallback>
 80041b2:	e7a0      	b.n	80040f6 <HAL_TIM_IRQHandler+0x144>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80041b4:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80041b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_IndexErrorCallback(htim);
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 fb9d 	bl	80048fa <HAL_TIMEx_IndexErrorCallback>
 80041c0:	e7a2      	b.n	8004108 <HAL_TIM_IRQHandler+0x156>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80041c2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80041c6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_TransitionErrorCallback(htim);
 80041c8:	4620      	mov	r0, r4
 80041ca:	f000 fb97 	bl	80048fc <HAL_TIMEx_TransitionErrorCallback>
}
 80041ce:	e7a4      	b.n	800411a <HAL_TIM_IRQHandler+0x168>

080041d0 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80041d0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d2:	4a36      	ldr	r2, [pc, #216]	; (80042ac <TIM_Base_SetConfig+0xdc>)
 80041d4:	4290      	cmp	r0, r2
 80041d6:	d016      	beq.n	8004206 <TIM_Base_SetConfig+0x36>
 80041d8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80041dc:	d013      	beq.n	8004206 <TIM_Base_SetConfig+0x36>
 80041de:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041e2:	4290      	cmp	r0, r2
 80041e4:	d00f      	beq.n	8004206 <TIM_Base_SetConfig+0x36>
 80041e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ea:	4290      	cmp	r0, r2
 80041ec:	d00b      	beq.n	8004206 <TIM_Base_SetConfig+0x36>
 80041ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041f2:	4290      	cmp	r0, r2
 80041f4:	d007      	beq.n	8004206 <TIM_Base_SetConfig+0x36>
 80041f6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80041fa:	4290      	cmp	r0, r2
 80041fc:	d003      	beq.n	8004206 <TIM_Base_SetConfig+0x36>
 80041fe:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8004202:	4290      	cmp	r0, r2
 8004204:	d103      	bne.n	800420e <TIM_Base_SetConfig+0x3e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800420a:	684a      	ldr	r2, [r1, #4]
 800420c:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420e:	4a27      	ldr	r2, [pc, #156]	; (80042ac <TIM_Base_SetConfig+0xdc>)
 8004210:	4290      	cmp	r0, r2
 8004212:	d022      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004214:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004218:	d01f      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800421a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800421e:	4290      	cmp	r0, r2
 8004220:	d01b      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004222:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004226:	4290      	cmp	r0, r2
 8004228:	d017      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800422a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800422e:	4290      	cmp	r0, r2
 8004230:	d013      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004232:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004236:	4290      	cmp	r0, r2
 8004238:	d00f      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800423a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800423e:	4290      	cmp	r0, r2
 8004240:	d00b      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004242:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004246:	4290      	cmp	r0, r2
 8004248:	d007      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 800424a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800424e:	4290      	cmp	r0, r2
 8004250:	d003      	beq.n	800425a <TIM_Base_SetConfig+0x8a>
 8004252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004256:	4290      	cmp	r0, r2
 8004258:	d103      	bne.n	8004262 <TIM_Base_SetConfig+0x92>
    tmpcr1 &= ~TIM_CR1_CKD;
 800425a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	68ca      	ldr	r2, [r1, #12]
 8004260:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004266:	694a      	ldr	r2, [r1, #20]
 8004268:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800426a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	688b      	ldr	r3, [r1, #8]
 800426e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004270:	680b      	ldr	r3, [r1, #0]
 8004272:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004274:	4b0d      	ldr	r3, [pc, #52]	; (80042ac <TIM_Base_SetConfig+0xdc>)
 8004276:	4298      	cmp	r0, r3
 8004278:	d013      	beq.n	80042a2 <TIM_Base_SetConfig+0xd2>
 800427a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427e:	4298      	cmp	r0, r3
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0xd2>
 8004282:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8004286:	4298      	cmp	r0, r3
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0xd2>
 800428a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800428e:	4298      	cmp	r0, r3
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0xd2>
 8004292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004296:	4298      	cmp	r0, r3
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0xd2>
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	4298      	cmp	r0, r3
 80042a0:	d101      	bne.n	80042a6 <TIM_Base_SetConfig+0xd6>
    TIMx->RCR = Structure->RepetitionCounter;
 80042a2:	690b      	ldr	r3, [r1, #16]
 80042a4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80042a6:	2301      	movs	r3, #1
 80042a8:	6143      	str	r3, [r0, #20]
}
 80042aa:	4770      	bx	lr
 80042ac:	40012c00 	.word	0x40012c00

080042b0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80042b0:	b360      	cbz	r0, 800430c <HAL_TIM_Base_Init+0x5c>
{
 80042b2:	b510      	push	{r4, lr}
 80042b4:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80042ba:	b313      	cbz	r3, 8004302 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 80042bc:	2302      	movs	r3, #2
 80042be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c2:	4621      	mov	r1, r4
 80042c4:	f851 0b04 	ldr.w	r0, [r1], #4
 80042c8:	f7ff ff82 	bl	80041d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80042d6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80042da:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80042de:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80042e2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80042ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80042f6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80042fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80042fe:	2000      	movs	r0, #0
}
 8004300:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004302:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004306:	f7fd fb0f 	bl	8001928 <HAL_TIM_Base_MspInit>
 800430a:	e7d7      	b.n	80042bc <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 800430c:	2001      	movs	r0, #1
}
 800430e:	4770      	bx	lr

08004310 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004310:	b360      	cbz	r0, 800436c <HAL_TIM_PWM_Init+0x5c>
{
 8004312:	b510      	push	{r4, lr}
 8004314:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004316:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800431a:	b313      	cbz	r3, 8004362 <HAL_TIM_PWM_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	2302      	movs	r3, #2
 800431e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004322:	4621      	mov	r1, r4
 8004324:	f851 0b04 	ldr.w	r0, [r1], #4
 8004328:	f7ff ff52 	bl	80041d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	2301      	movs	r3, #1
 800432e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004336:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800433a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800433e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004346:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800434e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004352:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004356:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800435a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800435e:	2000      	movs	r0, #0
}
 8004360:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004362:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004366:	f7ff fe1f 	bl	8003fa8 <HAL_TIM_PWM_MspInit>
 800436a:	e7d7      	b.n	800431c <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 800436c:	2001      	movs	r0, #1
}
 800436e:	4770      	bx	lr

08004370 <TIM_OC2_SetConfig>:
{
 8004370:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004372:	6a03      	ldr	r3, [r0, #32]
 8004374:	f023 0310 	bic.w	r3, r3, #16
 8004378:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800437a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800437c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800437e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004380:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004384:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004388:	680d      	ldr	r5, [r1, #0]
 800438a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 800438e:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004392:	688d      	ldr	r5, [r1, #8]
 8004394:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004398:	4d1b      	ldr	r5, [pc, #108]	; (8004408 <TIM_OC2_SetConfig+0x98>)
 800439a:	42a8      	cmp	r0, r5
 800439c:	d007      	beq.n	80043ae <TIM_OC2_SetConfig+0x3e>
 800439e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043a2:	42a8      	cmp	r0, r5
 80043a4:	d003      	beq.n	80043ae <TIM_OC2_SetConfig+0x3e>
 80043a6:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 80043aa:	42a8      	cmp	r0, r5
 80043ac:	d106      	bne.n	80043bc <TIM_OC2_SetConfig+0x4c>
    tmpccer &= ~TIM_CCER_CC2NP;
 80043ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043b2:	68cd      	ldr	r5, [r1, #12]
 80043b4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043bc:	4d12      	ldr	r5, [pc, #72]	; (8004408 <TIM_OC2_SetConfig+0x98>)
 80043be:	42a8      	cmp	r0, r5
 80043c0:	d013      	beq.n	80043ea <TIM_OC2_SetConfig+0x7a>
 80043c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043c6:	42a8      	cmp	r0, r5
 80043c8:	d00f      	beq.n	80043ea <TIM_OC2_SetConfig+0x7a>
 80043ca:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80043ce:	42a8      	cmp	r0, r5
 80043d0:	d00b      	beq.n	80043ea <TIM_OC2_SetConfig+0x7a>
 80043d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043d6:	42a8      	cmp	r0, r5
 80043d8:	d007      	beq.n	80043ea <TIM_OC2_SetConfig+0x7a>
 80043da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043de:	42a8      	cmp	r0, r5
 80043e0:	d003      	beq.n	80043ea <TIM_OC2_SetConfig+0x7a>
 80043e2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043e6:	42a8      	cmp	r0, r5
 80043e8:	d107      	bne.n	80043fa <TIM_OC2_SetConfig+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043ea:	f424 6c40 	bic.w	ip, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043ee:	694c      	ldr	r4, [r1, #20]
 80043f0:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043f4:	698c      	ldr	r4, [r1, #24]
 80043f6:	ea4c 0484 	orr.w	r4, ip, r4, lsl #2
  TIMx->CR2 = tmpcr2;
 80043fa:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80043fc:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80043fe:	684a      	ldr	r2, [r1, #4]
 8004400:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004402:	6203      	str	r3, [r0, #32]
}
 8004404:	bc30      	pop	{r4, r5}
 8004406:	4770      	bx	lr
 8004408:	40012c00 	.word	0x40012c00

0800440c <HAL_TIM_PWM_ConfigChannel>:
{
 800440c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800440e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004412:	2b01      	cmp	r3, #1
 8004414:	f000 8095 	beq.w	8004542 <HAL_TIM_PWM_ConfigChannel+0x136>
 8004418:	4604      	mov	r4, r0
 800441a:	460d      	mov	r5, r1
 800441c:	2301      	movs	r3, #1
 800441e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004422:	2a14      	cmp	r2, #20
 8004424:	f200 8088 	bhi.w	8004538 <HAL_TIM_PWM_ConfigChannel+0x12c>
 8004428:	e8df f002 	tbb	[pc, r2]
 800442c:	8686860b 	.word	0x8686860b
 8004430:	8686861f 	.word	0x8686861f
 8004434:	86868634 	.word	0x86868634
 8004438:	86868648 	.word	0x86868648
 800443c:	8686865d 	.word	0x8686865d
 8004440:	71          	.byte	0x71
 8004441:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004442:	6800      	ldr	r0, [r0, #0]
 8004444:	f7ff fb88 	bl	8003b58 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004448:	6822      	ldr	r2, [r4, #0]
 800444a:	6993      	ldr	r3, [r2, #24]
 800444c:	f043 0308 	orr.w	r3, r3, #8
 8004450:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004452:	6822      	ldr	r2, [r4, #0]
 8004454:	6993      	ldr	r3, [r2, #24]
 8004456:	f023 0304 	bic.w	r3, r3, #4
 800445a:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800445c:	6822      	ldr	r2, [r4, #0]
 800445e:	6993      	ldr	r3, [r2, #24]
 8004460:	6929      	ldr	r1, [r5, #16]
 8004462:	430b      	orrs	r3, r1
 8004464:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004466:	2000      	movs	r0, #0
      break;
 8004468:	e067      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800446a:	6800      	ldr	r0, [r0, #0]
 800446c:	f7ff ff80 	bl	8004370 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004470:	6822      	ldr	r2, [r4, #0]
 8004472:	6993      	ldr	r3, [r2, #24]
 8004474:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004478:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800447a:	6822      	ldr	r2, [r4, #0]
 800447c:	6993      	ldr	r3, [r2, #24]
 800447e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004482:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004484:	6822      	ldr	r2, [r4, #0]
 8004486:	6993      	ldr	r3, [r2, #24]
 8004488:	6929      	ldr	r1, [r5, #16]
 800448a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800448e:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004490:	2000      	movs	r0, #0
      break;
 8004492:	e052      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004494:	6800      	ldr	r0, [r0, #0]
 8004496:	f7ff fbb7 	bl	8003c08 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800449a:	6822      	ldr	r2, [r4, #0]
 800449c:	69d3      	ldr	r3, [r2, #28]
 800449e:	f043 0308 	orr.w	r3, r3, #8
 80044a2:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044a4:	6822      	ldr	r2, [r4, #0]
 80044a6:	69d3      	ldr	r3, [r2, #28]
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044ae:	6822      	ldr	r2, [r4, #0]
 80044b0:	69d3      	ldr	r3, [r2, #28]
 80044b2:	6929      	ldr	r1, [r5, #16]
 80044b4:	430b      	orrs	r3, r1
 80044b6:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2000      	movs	r0, #0
      break;
 80044ba:	e03e      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044bc:	6800      	ldr	r0, [r0, #0]
 80044be:	f7ff fbf1 	bl	8003ca4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044c2:	6822      	ldr	r2, [r4, #0]
 80044c4:	69d3      	ldr	r3, [r2, #28]
 80044c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80044ca:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044cc:	6822      	ldr	r2, [r4, #0]
 80044ce:	69d3      	ldr	r3, [r2, #28]
 80044d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044d4:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	69d3      	ldr	r3, [r2, #28]
 80044da:	6929      	ldr	r1, [r5, #16]
 80044dc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80044e0:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 80044e2:	2000      	movs	r0, #0
      break;
 80044e4:	e029      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044e6:	6800      	ldr	r0, [r0, #0]
 80044e8:	f7ff fc2a 	bl	8003d40 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044f0:	f043 0308 	orr.w	r3, r3, #8
 80044f4:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80044f6:	6822      	ldr	r2, [r4, #0]
 80044f8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80044fa:	f023 0304 	bic.w	r3, r3, #4
 80044fe:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004500:	6822      	ldr	r2, [r4, #0]
 8004502:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004504:	6929      	ldr	r1, [r5, #16]
 8004506:	430b      	orrs	r3, r1
 8004508:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 800450a:	2000      	movs	r0, #0
      break;
 800450c:	e015      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x12e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800450e:	6800      	ldr	r0, [r0, #0]
 8004510:	f7ff fc4e 	bl	8003db0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004514:	6822      	ldr	r2, [r4, #0]
 8004516:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004518:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800451c:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800451e:	6822      	ldr	r2, [r4, #0]
 8004520:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8004522:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004526:	6513      	str	r3, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004528:	6822      	ldr	r2, [r4, #0]
 800452a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800452c:	6929      	ldr	r1, [r5, #16]
 800452e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004532:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;
 8004534:	2000      	movs	r0, #0
      break;
 8004536:	e000      	b.n	800453a <HAL_TIM_PWM_ConfigChannel+0x12e>
  switch (Channel)
 8004538:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800453a:	2300      	movs	r3, #0
 800453c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004540:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004542:	2002      	movs	r0, #2
 8004544:	e7fc      	b.n	8004540 <HAL_TIM_PWM_ConfigChannel+0x134>

08004546 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004546:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004548:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800454a:	f424 4c7f 	bic.w	ip, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800454e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004552:	430a      	orrs	r2, r1
 8004554:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004558:	6082      	str	r2, [r0, #8]
}
 800455a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004560:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004564:	2b01      	cmp	r3, #1
 8004566:	f000 809b 	beq.w	80046a0 <HAL_TIM_ConfigClockSource+0x140>
{
 800456a:	b510      	push	{r4, lr}
 800456c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800456e:	2301      	movs	r3, #1
 8004570:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004574:	2302      	movs	r3, #2
 8004576:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800457a:	6802      	ldr	r2, [r0, #0]
 800457c:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800457e:	4b49      	ldr	r3, [pc, #292]	; (80046a4 <HAL_TIM_ConfigClockSource+0x144>)
 8004580:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8004582:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8004584:	680b      	ldr	r3, [r1, #0]
 8004586:	2b70      	cmp	r3, #112	; 0x70
 8004588:	d061      	beq.n	800464e <HAL_TIM_ConfigClockSource+0xee>
 800458a:	d831      	bhi.n	80045f0 <HAL_TIM_ConfigClockSource+0x90>
 800458c:	2b50      	cmp	r3, #80	; 0x50
 800458e:	d078      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x122>
 8004590:	d90c      	bls.n	80045ac <HAL_TIM_ConfigClockSource+0x4c>
 8004592:	2b60      	cmp	r3, #96	; 0x60
 8004594:	d12a      	bne.n	80045ec <HAL_TIM_ConfigClockSource+0x8c>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004596:	68ca      	ldr	r2, [r1, #12]
 8004598:	6849      	ldr	r1, [r1, #4]
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	f7ff fc55 	bl	8003e4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045a0:	2160      	movs	r1, #96	; 0x60
 80045a2:	6820      	ldr	r0, [r4, #0]
 80045a4:	f7ff fc65 	bl	8003e72 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045a8:	2000      	movs	r0, #0
      break;
 80045aa:	e038      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80045ac:	2b40      	cmp	r3, #64	; 0x40
 80045ae:	d10a      	bne.n	80045c6 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045b0:	68ca      	ldr	r2, [r1, #12]
 80045b2:	6849      	ldr	r1, [r1, #4]
 80045b4:	6820      	ldr	r0, [r4, #0]
 80045b6:	f7ff fc35 	bl	8003e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045ba:	2140      	movs	r1, #64	; 0x40
 80045bc:	6820      	ldr	r0, [r4, #0]
 80045be:	f7ff fc58 	bl	8003e72 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045c2:	2000      	movs	r0, #0
      break;
 80045c4:	e02b      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80045c6:	d867      	bhi.n	8004698 <HAL_TIM_ConfigClockSource+0x138>
 80045c8:	2b20      	cmp	r3, #32
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
 80045cc:	d903      	bls.n	80045d6 <HAL_TIM_ConfigClockSource+0x76>
 80045ce:	2b30      	cmp	r3, #48	; 0x30
 80045d0:	d004      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 80045d2:	2001      	movs	r0, #1
 80045d4:	e023      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80045d6:	b10b      	cbz	r3, 80045dc <HAL_TIM_ConfigClockSource+0x7c>
 80045d8:	2b10      	cmp	r3, #16
 80045da:	d105      	bne.n	80045e8 <HAL_TIM_ConfigClockSource+0x88>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045dc:	4619      	mov	r1, r3
 80045de:	6820      	ldr	r0, [r4, #0]
 80045e0:	f7ff fc47 	bl	8003e72 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80045e4:	2000      	movs	r0, #0
      break;
 80045e6:	e01a      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 80045e8:	2001      	movs	r0, #1
 80045ea:	e018      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
 80045ec:	2001      	movs	r0, #1
 80045ee:	e016      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80045f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045f4:	d038      	beq.n	8004668 <HAL_TIM_ConfigClockSource+0x108>
 80045f6:	d90e      	bls.n	8004616 <HAL_TIM_ConfigClockSource+0xb6>
 80045f8:	4a2b      	ldr	r2, [pc, #172]	; (80046a8 <HAL_TIM_ConfigClockSource+0x148>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d0ee      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
 80045fe:	d915      	bls.n	800462c <HAL_TIM_ConfigClockSource+0xcc>
 8004600:	4a2a      	ldr	r2, [pc, #168]	; (80046ac <HAL_TIM_ConfigClockSource+0x14c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d0ea      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
 8004606:	3210      	adds	r2, #16
 8004608:	4293      	cmp	r3, r2
 800460a:	d0e7      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
 800460c:	3a20      	subs	r2, #32
 800460e:	4293      	cmp	r3, r2
 8004610:	d0e4      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 8004612:	2001      	movs	r0, #1
 8004614:	e003      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8004616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461a:	d13f      	bne.n	800469c <HAL_TIM_ConfigClockSource+0x13c>
 800461c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800461e:	2301      	movs	r3, #1
 8004620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004624:	2300      	movs	r3, #0
 8004626:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800462a:	bd10      	pop	{r4, pc}
  switch (sClockSourceConfig->ClockSource)
 800462c:	3a20      	subs	r2, #32
 800462e:	4293      	cmp	r3, r2
 8004630:	d0d4      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
 8004632:	d904      	bls.n	800463e <HAL_TIM_ConfigClockSource+0xde>
 8004634:	4a1e      	ldr	r2, [pc, #120]	; (80046b0 <HAL_TIM_ConfigClockSource+0x150>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d0d0      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800463a:	2001      	movs	r0, #1
 800463c:	e7ef      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 800463e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004642:	d0cb      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
 8004644:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004648:	d0c8      	beq.n	80045dc <HAL_TIM_ConfigClockSource+0x7c>
      status = HAL_ERROR;
 800464a:	2001      	movs	r0, #1
 800464c:	e7e7      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 800464e:	68cb      	ldr	r3, [r1, #12]
 8004650:	684a      	ldr	r2, [r1, #4]
 8004652:	6889      	ldr	r1, [r1, #8]
 8004654:	6820      	ldr	r0, [r4, #0]
 8004656:	f7ff ff76 	bl	8004546 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800465a:	6822      	ldr	r2, [r4, #0]
 800465c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800465e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004662:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004664:	2000      	movs	r0, #0
      break;
 8004666:	e7da      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_ETR_SetConfig(htim->Instance,
 8004668:	68cb      	ldr	r3, [r1, #12]
 800466a:	684a      	ldr	r2, [r1, #4]
 800466c:	6889      	ldr	r1, [r1, #8]
 800466e:	6820      	ldr	r0, [r4, #0]
 8004670:	f7ff ff69 	bl	8004546 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004674:	6822      	ldr	r2, [r4, #0]
 8004676:	6893      	ldr	r3, [r2, #8]
 8004678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800467c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800467e:	2000      	movs	r0, #0
      break;
 8004680:	e7cd      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004682:	68ca      	ldr	r2, [r1, #12]
 8004684:	6849      	ldr	r1, [r1, #4]
 8004686:	6820      	ldr	r0, [r4, #0]
 8004688:	f7ff fbcc 	bl	8003e24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800468c:	2150      	movs	r1, #80	; 0x50
 800468e:	6820      	ldr	r0, [r4, #0]
 8004690:	f7ff fbef 	bl	8003e72 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004694:	2000      	movs	r0, #0
      break;
 8004696:	e7c2      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
      status = HAL_ERROR;
 8004698:	2001      	movs	r0, #1
 800469a:	e7c0      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
 800469c:	2001      	movs	r0, #1
 800469e:	e7be      	b.n	800461e <HAL_TIM_ConfigClockSource+0xbe>
  __HAL_LOCK(htim);
 80046a0:	2002      	movs	r0, #2
}
 80046a2:	4770      	bx	lr
 80046a4:	ffce0088 	.word	0xffce0088
 80046a8:	00100040 	.word	0x00100040
 80046ac:	00100060 	.word	0x00100060
 80046b0:	00100030 	.word	0x00100030

080046b4 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046b4:	f001 011f 	and.w	r1, r1, #31
 80046b8:	2301      	movs	r3, #1
 80046ba:	fa03 fc01 	lsl.w	ip, r3, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046be:	6a03      	ldr	r3, [r0, #32]
 80046c0:	ea23 030c 	bic.w	r3, r3, ip
 80046c4:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046c6:	6a03      	ldr	r3, [r0, #32]
 80046c8:	fa02 f101 	lsl.w	r1, r2, r1
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6203      	str	r3, [r0, #32]
}
 80046d0:	4770      	bx	lr
	...

080046d4 <HAL_TIM_PWM_Start>:
{
 80046d4:	b510      	push	{r4, lr}
 80046d6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046d8:	4608      	mov	r0, r1
 80046da:	2900      	cmp	r1, #0
 80046dc:	d153      	bne.n	8004786 <HAL_TIM_PWM_Start+0xb2>
 80046de:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3b01      	subs	r3, #1
 80046e6:	bf18      	it	ne
 80046e8:	2301      	movne	r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 80a0 	bne.w	8004830 <HAL_TIM_PWM_Start+0x15c>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d173      	bne.n	80047dc <HAL_TIM_PWM_Start+0x108>
 80046f4:	2302      	movs	r3, #2
 80046f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046fa:	2201      	movs	r2, #1
 80046fc:	4601      	mov	r1, r0
 80046fe:	6820      	ldr	r0, [r4, #0]
 8004700:	f7ff ffd8 	bl	80046b4 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	4a4d      	ldr	r2, [pc, #308]	; (800483c <HAL_TIM_PWM_Start+0x168>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_TIM_PWM_Start+0x60>
 800470c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004710:	4293      	cmp	r3, r2
 8004712:	d00f      	beq.n	8004734 <HAL_TIM_PWM_Start+0x60>
 8004714:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <HAL_TIM_PWM_Start+0x60>
 800471c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <HAL_TIM_PWM_Start+0x60>
 8004724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <HAL_TIM_PWM_Start+0x60>
 800472c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004730:	4293      	cmp	r3, r2
 8004732:	d103      	bne.n	800473c <HAL_TIM_PWM_Start+0x68>
    __HAL_TIM_MOE_ENABLE(htim);
 8004734:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800473a:	645a      	str	r2, [r3, #68]	; 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800473c:	6823      	ldr	r3, [r4, #0]
 800473e:	4a3f      	ldr	r2, [pc, #252]	; (800483c <HAL_TIM_PWM_Start+0x168>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d067      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 8004744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004748:	d064      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 800474a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800474e:	4293      	cmp	r3, r2
 8004750:	d060      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 8004752:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004756:	4293      	cmp	r3, r2
 8004758:	d05c      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 800475a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800475e:	4293      	cmp	r3, r2
 8004760:	d058      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 8004762:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8004766:	4293      	cmp	r3, r2
 8004768:	d054      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 800476a:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800476e:	4293      	cmp	r3, r2
 8004770:	d050      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
 8004772:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004776:	4293      	cmp	r3, r2
 8004778:	d04c      	beq.n	8004814 <HAL_TIM_PWM_Start+0x140>
    __HAL_TIM_ENABLE(htim);
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	f042 0201 	orr.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004782:	2000      	movs	r0, #0
 8004784:	e055      	b.n	8004832 <HAL_TIM_PWM_Start+0x15e>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004786:	2904      	cmp	r1, #4
 8004788:	d00c      	beq.n	80047a4 <HAL_TIM_PWM_Start+0xd0>
 800478a:	2908      	cmp	r1, #8
 800478c:	d011      	beq.n	80047b2 <HAL_TIM_PWM_Start+0xde>
 800478e:	290c      	cmp	r1, #12
 8004790:	d016      	beq.n	80047c0 <HAL_TIM_PWM_Start+0xec>
 8004792:	2910      	cmp	r1, #16
 8004794:	d01b      	beq.n	80047ce <HAL_TIM_PWM_Start+0xfa>
 8004796:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800479a:	b2db      	uxtb	r3, r3
 800479c:	3b01      	subs	r3, #1
 800479e:	bf18      	it	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	e7a2      	b.n	80046ea <HAL_TIM_PWM_Start+0x16>
 80047a4:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	3b01      	subs	r3, #1
 80047ac:	bf18      	it	ne
 80047ae:	2301      	movne	r3, #1
 80047b0:	e79b      	b.n	80046ea <HAL_TIM_PWM_Start+0x16>
 80047b2:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	bf18      	it	ne
 80047bc:	2301      	movne	r3, #1
 80047be:	e794      	b.n	80046ea <HAL_TIM_PWM_Start+0x16>
 80047c0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	3b01      	subs	r3, #1
 80047c8:	bf18      	it	ne
 80047ca:	2301      	movne	r3, #1
 80047cc:	e78d      	b.n	80046ea <HAL_TIM_PWM_Start+0x16>
 80047ce:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	3b01      	subs	r3, #1
 80047d6:	bf18      	it	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	e786      	b.n	80046ea <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047dc:	2804      	cmp	r0, #4
 80047de:	d009      	beq.n	80047f4 <HAL_TIM_PWM_Start+0x120>
 80047e0:	2808      	cmp	r0, #8
 80047e2:	d00b      	beq.n	80047fc <HAL_TIM_PWM_Start+0x128>
 80047e4:	280c      	cmp	r0, #12
 80047e6:	d00d      	beq.n	8004804 <HAL_TIM_PWM_Start+0x130>
 80047e8:	2810      	cmp	r0, #16
 80047ea:	d00f      	beq.n	800480c <HAL_TIM_PWM_Start+0x138>
 80047ec:	2302      	movs	r3, #2
 80047ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047f2:	e782      	b.n	80046fa <HAL_TIM_PWM_Start+0x26>
 80047f4:	2302      	movs	r3, #2
 80047f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80047fa:	e77e      	b.n	80046fa <HAL_TIM_PWM_Start+0x26>
 80047fc:	2302      	movs	r3, #2
 80047fe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004802:	e77a      	b.n	80046fa <HAL_TIM_PWM_Start+0x26>
 8004804:	2302      	movs	r3, #2
 8004806:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800480a:	e776      	b.n	80046fa <HAL_TIM_PWM_Start+0x26>
 800480c:	2302      	movs	r3, #2
 800480e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004812:	e772      	b.n	80046fa <HAL_TIM_PWM_Start+0x26>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004814:	6899      	ldr	r1, [r3, #8]
 8004816:	4a0a      	ldr	r2, [pc, #40]	; (8004840 <HAL_TIM_PWM_Start+0x16c>)
 8004818:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481a:	2a06      	cmp	r2, #6
 800481c:	d00a      	beq.n	8004834 <HAL_TIM_PWM_Start+0x160>
 800481e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004822:	d009      	beq.n	8004838 <HAL_TIM_PWM_Start+0x164>
      __HAL_TIM_ENABLE(htim);
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800482c:	2000      	movs	r0, #0
 800482e:	e000      	b.n	8004832 <HAL_TIM_PWM_Start+0x15e>
    return HAL_ERROR;
 8004830:	2001      	movs	r0, #1
}
 8004832:	bd10      	pop	{r4, pc}
  return HAL_OK;
 8004834:	2000      	movs	r0, #0
 8004836:	e7fc      	b.n	8004832 <HAL_TIM_PWM_Start+0x15e>
 8004838:	2000      	movs	r0, #0
 800483a:	e7fa      	b.n	8004832 <HAL_TIM_PWM_Start+0x15e>
 800483c:	40012c00 	.word	0x40012c00
 8004840:	00010007 	.word	0x00010007

08004844 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004844:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004848:	2b01      	cmp	r3, #1
 800484a:	d04c      	beq.n	80048e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
{
 800484c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800484e:	2301      	movs	r3, #1
 8004850:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004854:	2302      	movs	r3, #2
 8004856:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800485a:	6802      	ldr	r2, [r0, #0]
 800485c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800485e:	6894      	ldr	r4, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004860:	4d22      	ldr	r5, [pc, #136]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004862:	42aa      	cmp	r2, r5
 8004864:	d007      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8004866:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800486a:	42aa      	cmp	r2, r5
 800486c:	d003      	beq.n	8004876 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 800486e:	f505 55e0 	add.w	r5, r5, #7168	; 0x1c00
 8004872:	42aa      	cmp	r2, r5
 8004874:	d103      	bne.n	800487e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004876:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800487a:	684d      	ldr	r5, [r1, #4]
 800487c:	432b      	orrs	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004886:	680d      	ldr	r5, [r1, #0]
 8004888:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800488c:	6803      	ldr	r3, [r0, #0]
 800488e:	4a17      	ldr	r2, [pc, #92]	; (80048ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d01a      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8004894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004898:	d017      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800489a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800489e:	4293      	cmp	r3, r2
 80048a0:	d013      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80048a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d00f      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80048aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00b      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80048b2:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d007      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80048ba:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 80048be:	4293      	cmp	r3, r2
 80048c0:	d003      	beq.n	80048ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80048c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d104      	bne.n	80048d4 <HAL_TIMEx_MasterConfigSynchronization+0x90>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ca:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ce:	688a      	ldr	r2, [r1, #8]
 80048d0:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d2:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d4:	2301      	movs	r3, #1
 80048d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048da:	2300      	movs	r3, #0
 80048dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80048e0:	4618      	mov	r0, r3
}
 80048e2:	bc30      	pop	{r4, r5}
 80048e4:	4770      	bx	lr
  __HAL_LOCK(htim);
 80048e6:	2002      	movs	r0, #2
}
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40012c00 	.word	0x40012c00

080048f0 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f0:	4770      	bx	lr

080048f2 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048f4:	4770      	bx	lr

080048f6 <HAL_TIMEx_EncoderIndexCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80048f6:	4770      	bx	lr

080048f8 <HAL_TIMEx_DirectionChangeCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80048f8:	4770      	bx	lr

080048fa <HAL_TIMEx_IndexErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_TransitionErrorCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80048fc:	4770      	bx	lr
	...

08004900 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8004900:	b430      	push	{r4, r5}
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8004902:	680a      	ldr	r2, [r1, #0]
 8004904:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8004910:	688b      	ldr	r3, [r1, #8]
 8004912:	2b08      	cmp	r3, #8
 8004914:	d036      	beq.n	8004984 <FMC_NORSRAM_Init+0x84>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8004916:	2400      	movs	r4, #0
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8004918:	684a      	ldr	r2, [r1, #4]
  btcr_reg = (flashaccess                   | \
 800491a:	4322      	orrs	r2, r4
              Init->DataAddressMux          | \
 800491c:	4313      	orrs	r3, r2
              Init->MemoryType              | \
              Init->MemoryDataWidth         | \
 800491e:	68ca      	ldr	r2, [r1, #12]
              Init->MemoryType              | \
 8004920:	4313      	orrs	r3, r2
              Init->BurstAccessMode         | \
 8004922:	690a      	ldr	r2, [r1, #16]
              Init->MemoryDataWidth         | \
 8004924:	4313      	orrs	r3, r2
              Init->WaitSignalPolarity      | \
 8004926:	694a      	ldr	r2, [r1, #20]
              Init->BurstAccessMode         | \
 8004928:	4313      	orrs	r3, r2
              Init->WaitSignalActive        | \
 800492a:	698a      	ldr	r2, [r1, #24]
              Init->WaitSignalPolarity      | \
 800492c:	4313      	orrs	r3, r2
              Init->WriteOperation          | \
 800492e:	69ca      	ldr	r2, [r1, #28]
              Init->WaitSignalActive        | \
 8004930:	4313      	orrs	r3, r2
              Init->WaitSignal              | \
 8004932:	6a0a      	ldr	r2, [r1, #32]
              Init->WriteOperation          | \
 8004934:	4313      	orrs	r3, r2
              Init->ExtendedMode            | \
 8004936:	6a4a      	ldr	r2, [r1, #36]	; 0x24
              Init->WaitSignal              | \
 8004938:	4313      	orrs	r3, r2
              Init->AsynchronousWait        | \
 800493a:	6a8a      	ldr	r2, [r1, #40]	; 0x28
              Init->ExtendedMode            | \
 800493c:	4313      	orrs	r3, r2
              Init->WriteBurst);
 800493e:	6aca      	ldr	r2, [r1, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8004940:	4313      	orrs	r3, r2

  btcr_reg |= Init->ContinuousClock;
 8004942:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004944:	4313      	orrs	r3, r2
  btcr_reg |= Init->WriteFifo;
 8004946:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004948:	431a      	orrs	r2, r3
  btcr_reg |= Init->NBLSetupTime;
 800494a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800494c:	431a      	orrs	r2, r3
  btcr_reg |= Init->PageSize;
 800494e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 8004950:	431a      	orrs	r2, r3
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8004952:	680c      	ldr	r4, [r1, #0]
 8004954:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <FMC_NORSRAM_Init+0xdc>)
 800495a:	402b      	ands	r3, r5
 800495c:	4313      	orrs	r3, r2
 800495e:	f840 3024 	str.w	r3, [r0, r4, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004962:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004968:	d00e      	beq.n	8004988 <FMC_NORSRAM_Init+0x88>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800496a:	680b      	ldr	r3, [r1, #0]
 800496c:	b11b      	cbz	r3, 8004976 <FMC_NORSRAM_Init+0x76>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800496e:	6803      	ldr	r3, [r0, #0]
 8004970:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8004972:	4313      	orrs	r3, r2
 8004974:	6003      	str	r3, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8004976:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 800497a:	2b01      	cmp	r3, #1
 800497c:	d00d      	beq.n	800499a <FMC_NORSRAM_Init+0x9a>
        break;
    }
  }

  return HAL_OK;
}
 800497e:	2000      	movs	r0, #0
 8004980:	bc30      	pop	{r4, r5}
 8004982:	4770      	bx	lr
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8004984:	2440      	movs	r4, #64	; 0x40
 8004986:	e7c7      	b.n	8004918 <FMC_NORSRAM_Init+0x18>
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8004988:	680a      	ldr	r2, [r1, #0]
 800498a:	2a00      	cmp	r2, #0
 800498c:	d0ed      	beq.n	800496a <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800498e:	6802      	ldr	r2, [r0, #0]
 8004990:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004994:	4313      	orrs	r3, r2
 8004996:	6003      	str	r3, [r0, #0]
 8004998:	e7e7      	b.n	800496a <FMC_NORSRAM_Init+0x6a>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800499a:	6a03      	ldr	r3, [r0, #32]
 800499c:	0c1b      	lsrs	r3, r3, #16
 800499e:	041b      	lsls	r3, r3, #16
 80049a0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 80049a2:	4313      	orrs	r3, r2
 80049a4:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 80049a6:	680b      	ldr	r3, [r1, #0]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d00c      	beq.n	80049c6 <FMC_NORSRAM_Init+0xc6>
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d00f      	beq.n	80049d0 <FMC_NORSRAM_Init+0xd0>
 80049b0:	b123      	cbz	r3, 80049bc <FMC_NORSRAM_Init+0xbc>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 80049b2:	6a03      	ldr	r3, [r0, #32]
 80049b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049b8:	6203      	str	r3, [r0, #32]
        break;
 80049ba:	e7e0      	b.n	800497e <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 80049bc:	6a03      	ldr	r3, [r0, #32]
 80049be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c2:	6203      	str	r3, [r0, #32]
        break;
 80049c4:	e7db      	b.n	800497e <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 80049c6:	6a03      	ldr	r3, [r0, #32]
 80049c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049cc:	6203      	str	r3, [r0, #32]
        break;
 80049ce:	e7d6      	b.n	800497e <FMC_NORSRAM_Init+0x7e>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 80049d0:	6a03      	ldr	r3, [r0, #32]
 80049d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049d6:	6203      	str	r3, [r0, #32]
        break;
 80049d8:	e7d1      	b.n	800497e <FMC_NORSRAM_Init+0x7e>
 80049da:	bf00      	nop
 80049dc:	ff000480 	.word	0xff000480

080049e0 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80049e0:	b410      	push	{r4}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80049e2:	3201      	adds	r2, #1
 80049e4:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80049e8:	680b      	ldr	r3, [r1, #0]
 80049ea:	684c      	ldr	r4, [r1, #4]
 80049ec:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80049f0:	688c      	ldr	r4, [r1, #8]
 80049f2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 80049f6:	68cc      	ldr	r4, [r1, #12]
 80049f8:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 80049fc:	690c      	ldr	r4, [r1, #16]
 80049fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004a02:	694c      	ldr	r4, [r1, #20]
 8004a04:	f104 3cff 	add.w	ip, r4, #4294967295
 8004a08:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
 8004a0c:	698c      	ldr	r4, [r1, #24]
 8004a0e:	f1a4 0c02 	sub.w	ip, r4, #2
 8004a12:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8004a16:	69cc      	ldr	r4, [r1, #28]
 8004a18:	4323      	orrs	r3, r4
 8004a1a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8004a1e:	6803      	ldr	r3, [r0, #0]
 8004a20:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004a24:	d00b      	beq.n	8004a3e <FMC_NORSRAM_Timing_Init+0x5e>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8004a26:	6843      	ldr	r3, [r0, #4]
 8004a28:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8004a2c:	694a      	ldr	r2, [r1, #20]
 8004a2e:	3a01      	subs	r2, #1
 8004a30:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8004a34:	6843      	ldr	r3, [r0, #4]
 8004a36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	6043      	str	r3, [r0, #4]
  }

  return HAL_OK;
}
 8004a3e:	2000      	movs	r0, #0
 8004a40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8004a46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004a4a:	d005      	beq.n	8004a58 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8004a4c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8004a50:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8004a54:	2000      	movs	r0, #0
 8004a56:	4770      	bx	lr
{
 8004a58:	b410      	push	{r4}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8004a5a:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8004a5e:	f003 6c7f 	and.w	ip, r3, #267386880	; 0xff00000
 8004a62:	680b      	ldr	r3, [r1, #0]
 8004a64:	684c      	ldr	r4, [r1, #4]
 8004a66:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8004a6a:	688c      	ldr	r4, [r1, #8]
 8004a6c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8004a70:	68cc      	ldr	r4, [r1, #12]
 8004a72:	ea43 7384 	orr.w	r3, r3, r4, lsl #30
 8004a76:	69cc      	ldr	r4, [r1, #28]
 8004a78:	4323      	orrs	r3, r4
 8004a7a:	6909      	ldr	r1, [r1, #16]
 8004a7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004a80:	ea4c 0303 	orr.w	r3, ip, r3
 8004a84:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8004a88:	2000      	movs	r0, #0
 8004a8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a90:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004a92:	680a      	ldr	r2, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a94:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004a98:	b112      	cbz	r2, 8004aa0 <LL_GPIO_Init+0x10>
  return __builtin_clz(value);
 8004a9a:	fab2 f282 	clz	r2, r2
 8004a9e:	e04e      	b.n	8004b3e <LL_GPIO_Init+0xae>
    return 32U;
 8004aa0:	2220      	movs	r2, #32

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004aa2:	e04c      	b.n	8004b3e <LL_GPIO_Init+0xae>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004aa4:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8004aa6:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004aac:	b1e4      	cbz	r4, 8004ae8 <LL_GPIO_Init+0x58>
  return __builtin_clz(value);
 8004aae:	fab4 f484 	clz	r4, r4
 8004ab2:	0064      	lsls	r4, r4, #1
 8004ab4:	f04f 0c03 	mov.w	ip, #3
 8004ab8:	fa0c f404 	lsl.w	r4, ip, r4
 8004abc:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac0:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004ac4:	b194      	cbz	r4, 8004aec <LL_GPIO_Init+0x5c>
  return __builtin_clz(value);
 8004ac6:	fab4 f484 	clz	r4, r4
 8004aca:	0064      	lsls	r4, r4, #1
 8004acc:	fa06 f404 	lsl.w	r4, r6, r4
 8004ad0:	432c      	orrs	r4, r5
 8004ad2:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004ad4:	680d      	ldr	r5, [r1, #0]
 8004ad6:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8004ad8:	6844      	ldr	r4, [r0, #4]
 8004ada:	ea24 0405 	bic.w	r4, r4, r5
 8004ade:	fb06 f505 	mul.w	r5, r6, r5
 8004ae2:	432c      	orrs	r4, r5
 8004ae4:	6044      	str	r4, [r0, #4]
}
 8004ae6:	e039      	b.n	8004b5c <LL_GPIO_Init+0xcc>
    return 32U;
 8004ae8:	2420      	movs	r4, #32
 8004aea:	e7e2      	b.n	8004ab2 <LL_GPIO_Init+0x22>
 8004aec:	2420      	movs	r4, #32
 8004aee:	e7ec      	b.n	8004aca <LL_GPIO_Init+0x3a>
 8004af0:	2420      	movs	r4, #32
 8004af2:	e03b      	b.n	8004b6c <LL_GPIO_Init+0xdc>
 8004af4:	2420      	movs	r4, #32
 8004af6:	e046      	b.n	8004b86 <LL_GPIO_Init+0xf6>
 8004af8:	2420      	movs	r4, #32
 8004afa:	e056      	b.n	8004baa <LL_GPIO_Init+0x11a>
 8004afc:	2420      	movs	r4, #32
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004afe:	00a4      	lsls	r4, r4, #2
 8004b00:	fa06 f404 	lsl.w	r4, r6, r4
 8004b04:	432c      	orrs	r4, r5
 8004b06:	6204      	str	r4, [r0, #32]
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004b08:	684e      	ldr	r6, [r1, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004b0a:	6805      	ldr	r5, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0c:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004b10:	2c00      	cmp	r4, #0
 8004b12:	d075      	beq.n	8004c00 <LL_GPIO_Init+0x170>
  return __builtin_clz(value);
 8004b14:	fab4 f484 	clz	r4, r4
 8004b18:	0064      	lsls	r4, r4, #1
 8004b1a:	f04f 0c03 	mov.w	ip, #3
 8004b1e:	fa0c f404 	lsl.w	r4, ip, r4
 8004b22:	ea25 0404 	bic.w	r4, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b26:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d06a      	beq.n	8004c04 <LL_GPIO_Init+0x174>
  return __builtin_clz(value);
 8004b2e:	fab3 f383 	clz	r3, r3
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	fa06 f303 	lsl.w	r3, r6, r3
 8004b38:	4323      	orrs	r3, r4
 8004b3a:	6003      	str	r3, [r0, #0]
    }
    pinpos++;
 8004b3c:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004b3e:	680b      	ldr	r3, [r1, #0]
 8004b40:	fa33 f402 	lsrs.w	r4, r3, r2
 8004b44:	d060      	beq.n	8004c08 <LL_GPIO_Init+0x178>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004b46:	f04f 0c01 	mov.w	ip, #1
 8004b4a:	fa0c fc02 	lsl.w	ip, ip, r2
    if (currentpin != 0x00u)
 8004b4e:	ea1c 0303 	ands.w	r3, ip, r3
 8004b52:	d0f3      	beq.n	8004b3c <LL_GPIO_Init+0xac>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004b54:	684c      	ldr	r4, [r1, #4]
 8004b56:	3c01      	subs	r4, #1
 8004b58:	2c01      	cmp	r4, #1
 8004b5a:	d9a3      	bls.n	8004aa4 <LL_GPIO_Init+0x14>
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004b5c:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004b5e:	68c5      	ldr	r5, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b60:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004b64:	2c00      	cmp	r4, #0
 8004b66:	d0c3      	beq.n	8004af0 <LL_GPIO_Init+0x60>
  return __builtin_clz(value);
 8004b68:	fab4 f484 	clz	r4, r4
 8004b6c:	0064      	lsls	r4, r4, #1
 8004b6e:	f04f 0c03 	mov.w	ip, #3
 8004b72:	fa0c f404 	lsl.w	r4, ip, r4
 8004b76:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004b7e:	2c00      	cmp	r4, #0
 8004b80:	d0b8      	beq.n	8004af4 <LL_GPIO_Init+0x64>
  return __builtin_clz(value);
 8004b82:	fab4 f484 	clz	r4, r4
 8004b86:	0064      	lsls	r4, r4, #1
 8004b88:	fa06 f404 	lsl.w	r4, r6, r4
 8004b8c:	432c      	orrs	r4, r5
 8004b8e:	60c4      	str	r4, [r0, #12]
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004b90:	684c      	ldr	r4, [r1, #4]
 8004b92:	2c02      	cmp	r4, #2
 8004b94:	d1b8      	bne.n	8004b08 <LL_GPIO_Init+0x78>
        if (currentpin < LL_GPIO_PIN_8)
 8004b96:	2bff      	cmp	r3, #255	; 0xff
 8004b98:	d814      	bhi.n	8004bc4 <LL_GPIO_Init+0x134>
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004b9a:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004b9c:	6a05      	ldr	r5, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b9e:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004ba2:	2c00      	cmp	r4, #0
 8004ba4:	d0a8      	beq.n	8004af8 <LL_GPIO_Init+0x68>
  return __builtin_clz(value);
 8004ba6:	fab4 f484 	clz	r4, r4
 8004baa:	00a4      	lsls	r4, r4, #2
 8004bac:	270f      	movs	r7, #15
 8004bae:	fa07 f404 	lsl.w	r4, r7, r4
 8004bb2:	ea25 0504 	bic.w	r5, r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	fa93 f4a3 	rbit	r4, r3
  if (value == 0U)
 8004bba:	2c00      	cmp	r4, #0
 8004bbc:	d09e      	beq.n	8004afc <LL_GPIO_Init+0x6c>
  return __builtin_clz(value);
 8004bbe:	fab4 f484 	clz	r4, r4
 8004bc2:	e79c      	b.n	8004afe <LL_GPIO_Init+0x6e>
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004bc4:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004bc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004bc8:	0a1c      	lsrs	r4, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bca:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004bce:	b19d      	cbz	r5, 8004bf8 <LL_GPIO_Init+0x168>
  return __builtin_clz(value);
 8004bd0:	fab5 f585 	clz	r5, r5
 8004bd4:	00ad      	lsls	r5, r5, #2
 8004bd6:	f04f 0c0f 	mov.w	ip, #15
 8004bda:	fa0c f505 	lsl.w	r5, ip, r5
 8004bde:	ea26 0505 	bic.w	r5, r6, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004be2:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004be6:	b14c      	cbz	r4, 8004bfc <LL_GPIO_Init+0x16c>
  return __builtin_clz(value);
 8004be8:	fab4 f484 	clz	r4, r4
 8004bec:	00a4      	lsls	r4, r4, #2
 8004bee:	fa07 f404 	lsl.w	r4, r7, r4
 8004bf2:	432c      	orrs	r4, r5
 8004bf4:	6244      	str	r4, [r0, #36]	; 0x24
}
 8004bf6:	e787      	b.n	8004b08 <LL_GPIO_Init+0x78>
    return 32U;
 8004bf8:	2520      	movs	r5, #32
 8004bfa:	e7eb      	b.n	8004bd4 <LL_GPIO_Init+0x144>
 8004bfc:	2420      	movs	r4, #32
 8004bfe:	e7f5      	b.n	8004bec <LL_GPIO_Init+0x15c>
 8004c00:	2420      	movs	r4, #32
 8004c02:	e789      	b.n	8004b18 <LL_GPIO_Init+0x88>
 8004c04:	2320      	movs	r3, #32
 8004c06:	e794      	b.n	8004b32 <LL_GPIO_Init+0xa2>
  }
  return (SUCCESS);
}
 8004c08:	2000      	movs	r0, #0
 8004c0a:	bcf0      	pop	{r4, r5, r6, r7}
 8004c0c:	4770      	bx	lr
	...

08004c10 <RCC_GetHCLKClockFreq>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c10:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <RCC_GetHCLKClockFreq+0x14>)
 8004c12:	689b      	ldr	r3, [r3, #8]
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004c14:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c18:	4a03      	ldr	r2, [pc, #12]	; (8004c28 <RCC_GetHCLKClockFreq+0x18>)
 8004c1a:	5cd3      	ldrb	r3, [r2, r3]
 8004c1c:	f003 031f 	and.w	r3, r3, #31
}
 8004c20:	40d8      	lsrs	r0, r3
 8004c22:	4770      	bx	lr
 8004c24:	40021000 	.word	0x40021000
 8004c28:	0800c278 	.word	0x0800c278

08004c2c <RCC_GetPCLK1ClockFreq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004c2c:	4b04      	ldr	r3, [pc, #16]	; (8004c40 <RCC_GetPCLK1ClockFreq+0x14>)
 8004c2e:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004c30:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004c34:	4a03      	ldr	r2, [pc, #12]	; (8004c44 <RCC_GetPCLK1ClockFreq+0x18>)
 8004c36:	5cd3      	ldrb	r3, [r2, r3]
 8004c38:	f003 031f 	and.w	r3, r3, #31
}
 8004c3c:	40d8      	lsrs	r0, r3
 8004c3e:	4770      	bx	lr
 8004c40:	40021000 	.word	0x40021000
 8004c44:	0800c288 	.word	0x0800c288

08004c48 <RCC_GetPCLK2ClockFreq>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <RCC_GetPCLK2ClockFreq+0x14>)
 8004c4a:	689b      	ldr	r3, [r3, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c4c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8004c50:	4a03      	ldr	r2, [pc, #12]	; (8004c60 <RCC_GetPCLK2ClockFreq+0x18>)
 8004c52:	5cd3      	ldrb	r3, [r2, r3]
 8004c54:	f003 031f 	and.w	r3, r3, #31
}
 8004c58:	40d8      	lsrs	r0, r3
 8004c5a:	4770      	bx	lr
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	0800c288 	.word	0x0800c288

08004c64 <RCC_PLL_GetFreqDomain_SYS>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0303 	and.w	r3, r3, #3
  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();

  switch (pllsource)
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d014      	beq.n	8004c9a <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004c70:	480c      	ldr	r0, [pc, #48]	; (8004ca4 <RCC_PLL_GetFreqDomain_SYS+0x40>)
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004c72:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <RCC_PLL_GetFreqDomain_SYS+0x3c>)
 8004c74:	68d3      	ldr	r3, [r2, #12]
 8004c76:	f3c3 2306 	ubfx	r3, r3, #8, #7

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c7a:	fb03 f000 	mul.w	r0, r3, r0
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004c7e:	68d3      	ldr	r3, [r2, #12]
 8004c80:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004c84:	3301      	adds	r3, #1
 8004c86:	fbb0 f0f3 	udiv	r0, r0, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004c8a:	68d3      	ldr	r3, [r2, #12]
 8004c8c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8004c90:	3301      	adds	r3, #1
 8004c92:	005b      	lsls	r3, r3, #1
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004c94:	fbb0 f0f3 	udiv	r0, r0, r3
 8004c98:	4770      	bx	lr
      pllinputfreq = HSE_VALUE;
 8004c9a:	4803      	ldr	r0, [pc, #12]	; (8004ca8 <RCC_PLL_GetFreqDomain_SYS+0x44>)
 8004c9c:	e7e9      	b.n	8004c72 <RCC_PLL_GetFreqDomain_SYS+0xe>
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	007a1200 	.word	0x007a1200

08004cac <RCC_GetSystemClockFreq>:
{
 8004cac:	b508      	push	{r3, lr}
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004cae:	4b07      	ldr	r3, [pc, #28]	; (8004ccc <RCC_GetSystemClockFreq+0x20>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
  switch (LL_RCC_GetSysClkSource())
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d004      	beq.n	8004cc4 <RCC_GetSystemClockFreq+0x18>
 8004cba:	2b0c      	cmp	r3, #12
 8004cbc:	d104      	bne.n	8004cc8 <RCC_GetSystemClockFreq+0x1c>
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004cbe:	f7ff ffd1 	bl	8004c64 <RCC_PLL_GetFreqDomain_SYS>
      break;
 8004cc2:	e002      	b.n	8004cca <RCC_GetSystemClockFreq+0x1e>
      frequency = HSE_VALUE;
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <RCC_GetSystemClockFreq+0x24>)
 8004cc6:	e000      	b.n	8004cca <RCC_GetSystemClockFreq+0x1e>
  switch (LL_RCC_GetSysClkSource())
 8004cc8:	4802      	ldr	r0, [pc, #8]	; (8004cd4 <RCC_GetSystemClockFreq+0x28>)
}
 8004cca:	bd08      	pop	{r3, pc}
 8004ccc:	40021000 	.word	0x40021000
 8004cd0:	007a1200 	.word	0x007a1200
 8004cd4:	00f42400 	.word	0x00f42400

08004cd8 <LL_RCC_GetUSARTClockFreq>:
{
 8004cd8:	b508      	push	{r3, lr}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004cda:	2803      	cmp	r0, #3
 8004cdc:	d005      	beq.n	8004cea <LL_RCC_GetUSARTClockFreq+0x12>
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004cde:	280c      	cmp	r0, #12
 8004ce0:	d02c      	beq.n	8004d3c <LL_RCC_GetUSARTClockFreq+0x64>
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004ce2:	2830      	cmp	r0, #48	; 0x30
 8004ce4:	d053      	beq.n	8004d8e <LL_RCC_GetUSARTClockFreq+0xb6>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004ce6:	2000      	movs	r0, #0
}
 8004ce8:	bd08      	pop	{r3, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004cea:	4b3d      	ldr	r3, [pc, #244]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf0:	4003      	ands	r3, r0
 8004cf2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004cf6:	4b3b      	ldr	r3, [pc, #236]	; (8004de4 <LL_RCC_GetUSARTClockFreq+0x10c>)
 8004cf8:	4298      	cmp	r0, r3
 8004cfa:	d00f      	beq.n	8004d1c <LL_RCC_GetUSARTClockFreq+0x44>
 8004cfc:	f1b0 1f03 	cmp.w	r0, #196611	; 0x30003
 8004d00:	d013      	beq.n	8004d2a <LL_RCC_GetUSARTClockFreq+0x52>
 8004d02:	3b01      	subs	r3, #1
 8004d04:	4298      	cmp	r0, r3
 8004d06:	d006      	beq.n	8004d16 <LL_RCC_GetUSARTClockFreq+0x3e>
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d08:	f7ff ffd0 	bl	8004cac <RCC_GetSystemClockFreq>
 8004d0c:	f7ff ff80 	bl	8004c10 <RCC_GetHCLKClockFreq>
 8004d10:	f7ff ff9a 	bl	8004c48 <RCC_GetPCLK2ClockFreq>
        break;
 8004d14:	e7e8      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 8004d16:	f7ff ffc9 	bl	8004cac <RCC_GetSystemClockFreq>
        break;
 8004d1a:	e7e5      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004d1e:	6818      	ldr	r0, [r3, #0]
 8004d20:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004d24:	d0e0      	beq.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 8004d26:	4830      	ldr	r0, [pc, #192]	; (8004de8 <LL_RCC_GetUSARTClockFreq+0x110>)
 8004d28:	e7de      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d2a:	4b2d      	ldr	r3, [pc, #180]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004d2c:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8004d30:	f010 0002 	ands.w	r0, r0, #2
 8004d34:	d0d8      	beq.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 8004d36:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d3a:	e7d5      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004d3c:	4b28      	ldr	r3, [pc, #160]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d42:	4003      	ands	r3, r0
 8004d44:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004d48:	4b28      	ldr	r3, [pc, #160]	; (8004dec <LL_RCC_GetUSARTClockFreq+0x114>)
 8004d4a:	4298      	cmp	r0, r3
 8004d4c:	d00f      	beq.n	8004d6e <LL_RCC_GetUSARTClockFreq+0x96>
 8004d4e:	f1b0 1f0c 	cmp.w	r0, #786444	; 0xc000c
 8004d52:	d013      	beq.n	8004d7c <LL_RCC_GetUSARTClockFreq+0xa4>
 8004d54:	3b04      	subs	r3, #4
 8004d56:	4298      	cmp	r0, r3
 8004d58:	d006      	beq.n	8004d68 <LL_RCC_GetUSARTClockFreq+0x90>
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004d5a:	f7ff ffa7 	bl	8004cac <RCC_GetSystemClockFreq>
 8004d5e:	f7ff ff57 	bl	8004c10 <RCC_GetHCLKClockFreq>
 8004d62:	f7ff ff63 	bl	8004c2c <RCC_GetPCLK1ClockFreq>
        break;
 8004d66:	e7bf      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
        usart_frequency = RCC_GetSystemClockFreq();
 8004d68:	f7ff ffa0 	bl	8004cac <RCC_GetSystemClockFreq>
        break;
 8004d6c:	e7bc      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004d6e:	4b1c      	ldr	r3, [pc, #112]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004d76:	d0b7      	beq.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = HSI_VALUE;
 8004d78:	481b      	ldr	r0, [pc, #108]	; (8004de8 <LL_RCC_GetUSARTClockFreq+0x110>)
 8004d7a:	e7b5      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004d7c:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004d7e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8004d82:	f010 0002 	ands.w	r0, r0, #2
 8004d86:	d0af      	beq.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = LSE_VALUE;
 8004d88:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004d8c:	e7ac      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d94:	4003      	ands	r3, r0
 8004d96:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004d9a:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <LL_RCC_GetUSARTClockFreq+0x118>)
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	d00f      	beq.n	8004dc0 <LL_RCC_GetUSARTClockFreq+0xe8>
 8004da0:	f1b0 1f30 	cmp.w	r0, #3145776	; 0x300030
 8004da4:	d013      	beq.n	8004dce <LL_RCC_GetUSARTClockFreq+0xf6>
 8004da6:	3b10      	subs	r3, #16
 8004da8:	4298      	cmp	r0, r3
 8004daa:	d006      	beq.n	8004dba <LL_RCC_GetUSARTClockFreq+0xe2>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004dac:	f7ff ff7e 	bl	8004cac <RCC_GetSystemClockFreq>
 8004db0:	f7ff ff2e 	bl	8004c10 <RCC_GetHCLKClockFreq>
 8004db4:	f7ff ff3a 	bl	8004c2c <RCC_GetPCLK1ClockFreq>
          break;
 8004db8:	e796      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
          usart_frequency = RCC_GetSystemClockFreq();
 8004dba:	f7ff ff77 	bl	8004cac <RCC_GetSystemClockFreq>
          break;
 8004dbe:	e793      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004dc0:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004dc8:	d08e      	beq.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = HSI_VALUE;
 8004dca:	4807      	ldr	r0, [pc, #28]	; (8004de8 <LL_RCC_GetUSARTClockFreq+0x110>)
 8004dcc:	e78c      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004dce:	4b04      	ldr	r3, [pc, #16]	; (8004de0 <LL_RCC_GetUSARTClockFreq+0x108>)
 8004dd0:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8004dd4:	f010 0002 	ands.w	r0, r0, #2
 8004dd8:	d086      	beq.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
            usart_frequency = LSE_VALUE;
 8004dda:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return usart_frequency;
 8004dde:	e783      	b.n	8004ce8 <LL_RCC_GetUSARTClockFreq+0x10>
 8004de0:	40021000 	.word	0x40021000
 8004de4:	00030002 	.word	0x00030002
 8004de8:	00f42400 	.word	0x00f42400
 8004dec:	000c0008 	.word	0x000c0008
 8004df0:	00300020 	.word	0x00300020

08004df4 <LL_RCC_GetUARTClockFreq>:
{
 8004df4:	b510      	push	{r4, lr}
 8004df6:	4604      	mov	r4, r0
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004df8:	28c0      	cmp	r0, #192	; 0xc0
 8004dfa:	d004      	beq.n	8004e06 <LL_RCC_GetUARTClockFreq+0x12>
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004dfc:	2000      	movs	r0, #0
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004dfe:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
 8004e02:	d029      	beq.n	8004e58 <LL_RCC_GetUARTClockFreq+0x64>
}
 8004e04:	bd10      	pop	{r4, pc}
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004e06:	4b29      	ldr	r3, [pc, #164]	; (8004eac <LL_RCC_GetUARTClockFreq+0xb8>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	4003      	ands	r3, r0
 8004e0e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004e12:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <LL_RCC_GetUARTClockFreq+0xbc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00f      	beq.n	8004e38 <LL_RCC_GetUARTClockFreq+0x44>
 8004e18:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8004e1c:	d013      	beq.n	8004e46 <LL_RCC_GetUARTClockFreq+0x52>
 8004e1e:	3a40      	subs	r2, #64	; 0x40
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d006      	beq.n	8004e32 <LL_RCC_GetUARTClockFreq+0x3e>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e24:	f7ff ff42 	bl	8004cac <RCC_GetSystemClockFreq>
 8004e28:	f7ff fef2 	bl	8004c10 <RCC_GetHCLKClockFreq>
 8004e2c:	f7ff fefe 	bl	8004c2c <RCC_GetPCLK1ClockFreq>
        break;
 8004e30:	e7e5      	b.n	8004dfe <LL_RCC_GetUARTClockFreq+0xa>
        uart_frequency = RCC_GetSystemClockFreq();
 8004e32:	f7ff ff3b 	bl	8004cac <RCC_GetSystemClockFreq>
        break;
 8004e36:	e7e2      	b.n	8004dfe <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e38:	4b1c      	ldr	r3, [pc, #112]	; (8004eac <LL_RCC_GetUARTClockFreq+0xb8>)
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8004e40:	d0dd      	beq.n	8004dfe <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = HSI_VALUE;
 8004e42:	481c      	ldr	r0, [pc, #112]	; (8004eb4 <LL_RCC_GetUARTClockFreq+0xc0>)
 8004e44:	e7db      	b.n	8004dfe <LL_RCC_GetUARTClockFreq+0xa>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e46:	4b19      	ldr	r3, [pc, #100]	; (8004eac <LL_RCC_GetUARTClockFreq+0xb8>)
 8004e48:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 8004e4c:	f010 0002 	ands.w	r0, r0, #2
 8004e50:	d0d5      	beq.n	8004dfe <LL_RCC_GetUARTClockFreq+0xa>
          uart_frequency = LSE_VALUE;
 8004e52:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e56:	e7d2      	b.n	8004dfe <LL_RCC_GetUARTClockFreq+0xa>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004e58:	4b14      	ldr	r3, [pc, #80]	; (8004eac <LL_RCC_GetUARTClockFreq+0xb8>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	4023      	ands	r3, r4
 8004e60:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004e64:	4b14      	ldr	r3, [pc, #80]	; (8004eb8 <LL_RCC_GetUARTClockFreq+0xc4>)
 8004e66:	429c      	cmp	r4, r3
 8004e68:	d010      	beq.n	8004e8c <LL_RCC_GetUARTClockFreq+0x98>
 8004e6a:	f1b4 2f03 	cmp.w	r4, #50332416	; 0x3000300
 8004e6e:	d014      	beq.n	8004e9a <LL_RCC_GetUARTClockFreq+0xa6>
 8004e70:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e74:	429c      	cmp	r4, r3
 8004e76:	d006      	beq.n	8004e86 <LL_RCC_GetUARTClockFreq+0x92>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e78:	f7ff ff18 	bl	8004cac <RCC_GetSystemClockFreq>
 8004e7c:	f7ff fec8 	bl	8004c10 <RCC_GetHCLKClockFreq>
 8004e80:	f7ff fed4 	bl	8004c2c <RCC_GetPCLK1ClockFreq>
        break;
 8004e84:	e7be      	b.n	8004e04 <LL_RCC_GetUARTClockFreq+0x10>
        uart_frequency = RCC_GetSystemClockFreq();
 8004e86:	f7ff ff11 	bl	8004cac <RCC_GetSystemClockFreq>
        break;
 8004e8a:	e7bb      	b.n	8004e04 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004e8c:	4b07      	ldr	r3, [pc, #28]	; (8004eac <LL_RCC_GetUARTClockFreq+0xb8>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8004e94:	d0b6      	beq.n	8004e04 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = HSI_VALUE;
 8004e96:	4807      	ldr	r0, [pc, #28]	; (8004eb4 <LL_RCC_GetUARTClockFreq+0xc0>)
 8004e98:	e7b4      	b.n	8004e04 <LL_RCC_GetUARTClockFreq+0x10>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004e9a:	4b04      	ldr	r3, [pc, #16]	; (8004eac <LL_RCC_GetUARTClockFreq+0xb8>)
 8004e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea0:	f013 0f02 	tst.w	r3, #2
 8004ea4:	d0ae      	beq.n	8004e04 <LL_RCC_GetUARTClockFreq+0x10>
          uart_frequency = LSE_VALUE;
 8004ea6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  return uart_frequency;
 8004eaa:	e7ab      	b.n	8004e04 <LL_RCC_GetUARTClockFreq+0x10>
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	00c00080 	.word	0x00c00080
 8004eb4:	00f42400 	.word	0x00f42400
 8004eb8:	03000200 	.word	0x03000200

08004ebc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ebc:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004ebe:	6a03      	ldr	r3, [r0, #32]
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004ec6:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ec8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004eca:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8004ecc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004ed0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8004ed4:	680d      	ldr	r5, [r1, #0]
 8004ed6:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004ed8:	f023 0302 	bic.w	r3, r3, #2
 8004edc:	690d      	ldr	r5, [r1, #16]
 8004ede:	432b      	orrs	r3, r5

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004ee0:	f023 0301 	bic.w	r3, r3, #1
 8004ee4:	684d      	ldr	r5, [r1, #4]
 8004ee6:	432b      	orrs	r3, r5

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee8:	4d19      	ldr	r5, [pc, #100]	; (8004f50 <OC1Config+0x94>)
 8004eea:	42a8      	cmp	r0, r5
 8004eec:	d013      	beq.n	8004f16 <OC1Config+0x5a>
 8004eee:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004ef2:	42a8      	cmp	r0, r5
 8004ef4:	d00f      	beq.n	8004f16 <OC1Config+0x5a>
 8004ef6:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004efa:	42a8      	cmp	r0, r5
 8004efc:	d00b      	beq.n	8004f16 <OC1Config+0x5a>
 8004efe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f02:	42a8      	cmp	r0, r5
 8004f04:	d007      	beq.n	8004f16 <OC1Config+0x5a>
 8004f06:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004f0a:	42a8      	cmp	r0, r5
 8004f0c:	d003      	beq.n	8004f16 <OC1Config+0x5a>
 8004f0e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f12:	42a8      	cmp	r0, r5
 8004f14:	d113      	bne.n	8004f3e <OC1Config+0x82>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004f16:	f023 0308 	bic.w	r3, r3, #8
 8004f1a:	694d      	ldr	r5, [r1, #20]
 8004f1c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004f20:	f023 0304 	bic.w	r3, r3, #4
 8004f24:	688d      	ldr	r5, [r1, #8]
 8004f26:	ea43 0385 	orr.w	r3, r3, r5, lsl #2

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004f2a:	f424 7c80 	bic.w	ip, r4, #256	; 0x100
 8004f2e:	698c      	ldr	r4, [r1, #24]
 8004f30:	ea4c 0c04 	orr.w	ip, ip, r4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004f34:	f42c 7c00 	bic.w	ip, ip, #512	; 0x200
 8004f38:	69cc      	ldr	r4, [r1, #28]
 8004f3a:	ea4c 0444 	orr.w	r4, ip, r4, lsl #1
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004f3e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004f40:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004f42:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004f44:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004f46:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8004f48:	2000      	movs	r0, #0
 8004f4a:	bc30      	pop	{r4, r5}
 8004f4c:	4770      	bx	lr
 8004f4e:	bf00      	nop
 8004f50:	40012c00 	.word	0x40012c00

08004f54 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004f54:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004f56:	6a03      	ldr	r3, [r0, #32]
 8004f58:	f023 0310 	bic.w	r3, r3, #16
 8004f5c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004f5e:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004f60:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004f62:	6982      	ldr	r2, [r0, #24]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004f64:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f68:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8004f6c:	680d      	ldr	r5, [r1, #0]
 8004f6e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004f72:	f023 0320 	bic.w	r3, r3, #32
 8004f76:	690d      	ldr	r5, [r1, #16]
 8004f78:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	684d      	ldr	r5, [r1, #4]
 8004f82:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f86:	4d19      	ldr	r5, [pc, #100]	; (8004fec <OC2Config+0x98>)
 8004f88:	42a8      	cmp	r0, r5
 8004f8a:	d013      	beq.n	8004fb4 <OC2Config+0x60>
 8004f8c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004f90:	42a8      	cmp	r0, r5
 8004f92:	d00f      	beq.n	8004fb4 <OC2Config+0x60>
 8004f94:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004f98:	42a8      	cmp	r0, r5
 8004f9a:	d00b      	beq.n	8004fb4 <OC2Config+0x60>
 8004f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004fa0:	42a8      	cmp	r0, r5
 8004fa2:	d007      	beq.n	8004fb4 <OC2Config+0x60>
 8004fa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004fa8:	42a8      	cmp	r0, r5
 8004faa:	d003      	beq.n	8004fb4 <OC2Config+0x60>
 8004fac:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004fb0:	42a8      	cmp	r0, r5
 8004fb2:	d113      	bne.n	8004fdc <OC2Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb8:	694d      	ldr	r5, [r1, #20]
 8004fba:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004fbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fc2:	688d      	ldr	r5, [r1, #8]
 8004fc4:	ea43 1385 	orr.w	r3, r3, r5, lsl #6

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004fc8:	f424 6c80 	bic.w	ip, r4, #1024	; 0x400
 8004fcc:	698c      	ldr	r4, [r1, #24]
 8004fce:	ea4c 0c84 	orr.w	ip, ip, r4, lsl #2

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004fd2:	f42c 6c00 	bic.w	ip, ip, #2048	; 0x800
 8004fd6:	69cc      	ldr	r4, [r1, #28]
 8004fd8:	ea4c 04c4 	orr.w	r4, ip, r4, lsl #3
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004fdc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004fde:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004fe0:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004fe2:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004fe4:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8004fe6:	2000      	movs	r0, #0
 8004fe8:	bc30      	pop	{r4, r5}
 8004fea:	4770      	bx	lr
 8004fec:	40012c00 	.word	0x40012c00

08004ff0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ff0:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004ff2:	6a03      	ldr	r3, [r0, #32]
 8004ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004ffa:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004ffc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004ffe:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8005000:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005004:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8005008:	680d      	ldr	r5, [r1, #0]
 800500a:	432a      	orrs	r2, r5

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800500c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005010:	690d      	ldr	r5, [r1, #16]
 8005012:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005016:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501a:	684d      	ldr	r5, [r1, #4]
 800501c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	4d19      	ldr	r5, [pc, #100]	; (8005088 <OC3Config+0x98>)
 8005022:	42a8      	cmp	r0, r5
 8005024:	d013      	beq.n	800504e <OC3Config+0x5e>
 8005026:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800502a:	42a8      	cmp	r0, r5
 800502c:	d00f      	beq.n	800504e <OC3Config+0x5e>
 800502e:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005032:	42a8      	cmp	r0, r5
 8005034:	d00b      	beq.n	800504e <OC3Config+0x5e>
 8005036:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800503a:	42a8      	cmp	r0, r5
 800503c:	d007      	beq.n	800504e <OC3Config+0x5e>
 800503e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005042:	42a8      	cmp	r0, r5
 8005044:	d003      	beq.n	800504e <OC3Config+0x5e>
 8005046:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800504a:	42a8      	cmp	r0, r5
 800504c:	d113      	bne.n	8005076 <OC3Config+0x86>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800504e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005052:	694d      	ldr	r5, [r1, #20]
 8005054:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8005058:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800505c:	688d      	ldr	r5, [r1, #8]
 800505e:	ea43 2385 	orr.w	r3, r3, r5, lsl #10

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8005062:	f424 5c80 	bic.w	ip, r4, #4096	; 0x1000
 8005066:	698c      	ldr	r4, [r1, #24]
 8005068:	ea4c 1c04 	orr.w	ip, ip, r4, lsl #4

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800506c:	f42c 5c00 	bic.w	ip, ip, #8192	; 0x2000
 8005070:	69cc      	ldr	r4, [r1, #28]
 8005072:	ea4c 1444 	orr.w	r4, ip, r4, lsl #5
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005076:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005078:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800507a:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800507c:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800507e:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 8005080:	2000      	movs	r0, #0
 8005082:	bc30      	pop	{r4, r5}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00

0800508c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800508c:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800508e:	6a03      	ldr	r3, [r0, #32]
 8005090:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005094:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005096:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8005098:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800509a:	69c2      	ldr	r2, [r0, #28]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800509c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80050a0:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80050a4:	680d      	ldr	r5, [r1, #0]
 80050a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80050aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050ae:	690d      	ldr	r5, [r1, #16]
 80050b0:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80050b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b8:	684d      	ldr	r5, [r1, #4]
 80050ba:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050be:	4d19      	ldr	r5, [pc, #100]	; (8005124 <OC4Config+0x98>)
 80050c0:	42a8      	cmp	r0, r5
 80050c2:	d013      	beq.n	80050ec <OC4Config+0x60>
 80050c4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80050c8:	42a8      	cmp	r0, r5
 80050ca:	d00f      	beq.n	80050ec <OC4Config+0x60>
 80050cc:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80050d0:	42a8      	cmp	r0, r5
 80050d2:	d00b      	beq.n	80050ec <OC4Config+0x60>
 80050d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050d8:	42a8      	cmp	r0, r5
 80050da:	d007      	beq.n	80050ec <OC4Config+0x60>
 80050dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80050e0:	42a8      	cmp	r0, r5
 80050e2:	d003      	beq.n	80050ec <OC4Config+0x60>
 80050e4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80050e8:	42a8      	cmp	r0, r5
 80050ea:	d113      	bne.n	8005114 <OC4Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 80050ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80050f0:	694d      	ldr	r5, [r1, #20]
 80050f2:	ea43 3385 	orr.w	r3, r3, r5, lsl #14

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 80050f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fa:	688d      	ldr	r5, [r1, #8]
 80050fc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005100:	f424 4c80 	bic.w	ip, r4, #16384	; 0x4000
 8005104:	698c      	ldr	r4, [r1, #24]
 8005106:	ea4c 1c84 	orr.w	ip, ip, r4, lsl #6

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800510a:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 800510e:	69cc      	ldr	r4, [r1, #28]
 8005110:	ea4c 14c4 	orr.w	r4, ip, r4, lsl #7
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005114:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005116:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005118:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800511a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800511c:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800511e:	2000      	movs	r0, #0
 8005120:	bc30      	pop	{r4, r5}
 8005122:	4770      	bx	lr
 8005124:	40012c00 	.word	0x40012c00

08005128 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005128:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800512a:	6a03      	ldr	r3, [r0, #32]
 800512c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005130:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8005132:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005134:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8005136:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800513a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800513e:	680c      	ldr	r4, [r1, #0]
 8005140:	4322      	orrs	r2, r4

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8005142:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005146:	690c      	ldr	r4, [r1, #16]
 8005148:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800514c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005150:	684c      	ldr	r4, [r1, #4]
 8005152:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	4c13      	ldr	r4, [pc, #76]	; (80051a4 <OC5Config+0x7c>)
 8005158:	42a0      	cmp	r0, r4
 800515a:	d013      	beq.n	8005184 <OC5Config+0x5c>
 800515c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005160:	42a0      	cmp	r0, r4
 8005162:	d00f      	beq.n	8005184 <OC5Config+0x5c>
 8005164:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8005168:	42a0      	cmp	r0, r4
 800516a:	d00b      	beq.n	8005184 <OC5Config+0x5c>
 800516c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005170:	42a0      	cmp	r0, r4
 8005172:	d007      	beq.n	8005184 <OC5Config+0x5c>
 8005174:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005178:	42a0      	cmp	r0, r4
 800517a:	d003      	beq.n	8005184 <OC5Config+0x5c>
 800517c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005180:	42a0      	cmp	r0, r4
 8005182:	d106      	bne.n	8005192 <OC5Config+0x6a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8005184:	6844      	ldr	r4, [r0, #4]
 8005186:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 800518a:	698d      	ldr	r5, [r1, #24]
 800518c:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8005190:	6044      	str	r4, [r0, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005192:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8005194:	68ca      	ldr	r2, [r1, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8005196:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005198:	6482      	str	r2, [r0, #72]	; 0x48

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800519a:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800519c:	2000      	movs	r0, #0
 800519e:	bc30      	pop	{r4, r5}
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00

080051a8 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80051a8:	b430      	push	{r4, r5}
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80051aa:	6a03      	ldr	r3, [r0, #32]
 80051ac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051b0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80051b2:	6a03      	ldr	r3, [r0, #32]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80051b4:	6d02      	ldr	r2, [r0, #80]	; 0x50

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80051b6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80051ba:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80051be:	680c      	ldr	r4, [r1, #0]
 80051c0:	ea42 2204 	orr.w	r2, r2, r4, lsl #8

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80051c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051c8:	690c      	ldr	r4, [r1, #16]
 80051ca:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80051ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80051d2:	684c      	ldr	r4, [r1, #4]
 80051d4:	ea43 5304 	orr.w	r3, r3, r4, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d8:	4c12      	ldr	r4, [pc, #72]	; (8005224 <OC6Config+0x7c>)
 80051da:	42a0      	cmp	r0, r4
 80051dc:	d013      	beq.n	8005206 <OC6Config+0x5e>
 80051de:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80051e2:	42a0      	cmp	r0, r4
 80051e4:	d00f      	beq.n	8005206 <OC6Config+0x5e>
 80051e6:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 80051ea:	42a0      	cmp	r0, r4
 80051ec:	d00b      	beq.n	8005206 <OC6Config+0x5e>
 80051ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051f2:	42a0      	cmp	r0, r4
 80051f4:	d007      	beq.n	8005206 <OC6Config+0x5e>
 80051f6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80051fa:	42a0      	cmp	r0, r4
 80051fc:	d003      	beq.n	8005206 <OC6Config+0x5e>
 80051fe:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005202:	42a0      	cmp	r0, r4
 8005204:	d106      	bne.n	8005214 <OC6Config+0x6c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8005206:	6844      	ldr	r4, [r0, #4]
 8005208:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 800520c:	698d      	ldr	r5, [r1, #24]
 800520e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8005212:	6044      	str	r4, [r0, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005214:	6502      	str	r2, [r0, #80]	; 0x50

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8005216:	68ca      	ldr	r2, [r1, #12]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8005218:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800521a:	6203      	str	r3, [r0, #32]

  return SUCCESS;
}
 800521c:	2000      	movs	r0, #0
 800521e:	bc30      	pop	{r4, r5}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40012c00 	.word	0x40012c00

08005228 <LL_TIM_Init>:
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8005228:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800522a:	4a36      	ldr	r2, [pc, #216]	; (8005304 <LL_TIM_Init+0xdc>)
 800522c:	4290      	cmp	r0, r2
 800522e:	d016      	beq.n	800525e <LL_TIM_Init+0x36>
 8005230:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005234:	d013      	beq.n	800525e <LL_TIM_Init+0x36>
 8005236:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800523a:	4290      	cmp	r0, r2
 800523c:	d00f      	beq.n	800525e <LL_TIM_Init+0x36>
 800523e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005242:	4290      	cmp	r0, r2
 8005244:	d00b      	beq.n	800525e <LL_TIM_Init+0x36>
 8005246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800524a:	4290      	cmp	r0, r2
 800524c:	d007      	beq.n	800525e <LL_TIM_Init+0x36>
 800524e:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8005252:	4290      	cmp	r0, r2
 8005254:	d003      	beq.n	800525e <LL_TIM_Init+0x36>
 8005256:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800525a:	4290      	cmp	r0, r2
 800525c:	d103      	bne.n	8005266 <LL_TIM_Init+0x3e>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	684a      	ldr	r2, [r1, #4]
 8005264:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005266:	4a27      	ldr	r2, [pc, #156]	; (8005304 <LL_TIM_Init+0xdc>)
 8005268:	4290      	cmp	r0, r2
 800526a:	d022      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 800526c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005270:	d01f      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 8005272:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8005276:	4290      	cmp	r0, r2
 8005278:	d01b      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 800527a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800527e:	4290      	cmp	r0, r2
 8005280:	d017      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 8005282:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005286:	4290      	cmp	r0, r2
 8005288:	d013      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 800528a:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800528e:	4290      	cmp	r0, r2
 8005290:	d00f      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 8005292:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8005296:	4290      	cmp	r0, r2
 8005298:	d00b      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 800529a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800529e:	4290      	cmp	r0, r2
 80052a0:	d007      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 80052a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052a6:	4290      	cmp	r0, r2
 80052a8:	d003      	beq.n	80052b2 <LL_TIM_Init+0x8a>
 80052aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ae:	4290      	cmp	r0, r2
 80052b0:	d103      	bne.n	80052ba <LL_TIM_Init+0x92>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80052b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052b6:	68ca      	ldr	r2, [r1, #12]
 80052b8:	4313      	orrs	r3, r2
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80052ba:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80052bc:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 80052be:	62c3      	str	r3, [r0, #44]	; 0x2c
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80052c0:	880b      	ldrh	r3, [r1, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80052c2:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	4b0f      	ldr	r3, [pc, #60]	; (8005304 <LL_TIM_Init+0xdc>)
 80052c6:	4298      	cmp	r0, r3
 80052c8:	d013      	beq.n	80052f2 <LL_TIM_Init+0xca>
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	4298      	cmp	r0, r3
 80052d0:	d00f      	beq.n	80052f2 <LL_TIM_Init+0xca>
 80052d2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80052d6:	4298      	cmp	r0, r3
 80052d8:	d00b      	beq.n	80052f2 <LL_TIM_Init+0xca>
 80052da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052de:	4298      	cmp	r0, r3
 80052e0:	d007      	beq.n	80052f2 <LL_TIM_Init+0xca>
 80052e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052e6:	4298      	cmp	r0, r3
 80052e8:	d003      	beq.n	80052f2 <LL_TIM_Init+0xca>
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	4298      	cmp	r0, r3
 80052f0:	d101      	bne.n	80052f6 <LL_TIM_Init+0xce>
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80052f2:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80052f4:	6303      	str	r3, [r0, #48]	; 0x30
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80052f6:	6943      	ldr	r3, [r0, #20]
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	6143      	str	r3, [r0, #20]
}
 80052fe:	2000      	movs	r0, #0
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40012c00 	.word	0x40012c00

08005308 <LL_TIM_OC_Init>:
{
 8005308:	b508      	push	{r3, lr}
 800530a:	460b      	mov	r3, r1
 800530c:	4611      	mov	r1, r2
  switch (Channel)
 800530e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005312:	d01d      	beq.n	8005350 <LL_TIM_OC_Init+0x48>
 8005314:	d80e      	bhi.n	8005334 <LL_TIM_OC_Init+0x2c>
 8005316:	2b10      	cmp	r3, #16
 8005318:	d017      	beq.n	800534a <LL_TIM_OC_Init+0x42>
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	d102      	bne.n	8005326 <LL_TIM_OC_Init+0x1e>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005320:	f7ff fe66 	bl	8004ff0 <OC3Config>
      break;
 8005324:	e005      	b.n	8005332 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 8005326:	2b01      	cmp	r3, #1
 8005328:	d102      	bne.n	8005330 <LL_TIM_OC_Init+0x28>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800532a:	f7ff fdc7 	bl	8004ebc <OC1Config>
      break;
 800532e:	e000      	b.n	8005332 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 8005330:	2001      	movs	r0, #1
}
 8005332:	bd08      	pop	{r3, pc}
  switch (Channel)
 8005334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005338:	d00d      	beq.n	8005356 <LL_TIM_OC_Init+0x4e>
 800533a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800533e:	d102      	bne.n	8005346 <LL_TIM_OC_Init+0x3e>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8005340:	f7ff ff32 	bl	80051a8 <OC6Config>
      break;
 8005344:	e7f5      	b.n	8005332 <LL_TIM_OC_Init+0x2a>
  switch (Channel)
 8005346:	2001      	movs	r0, #1
 8005348:	e7f3      	b.n	8005332 <LL_TIM_OC_Init+0x2a>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800534a:	f7ff fe03 	bl	8004f54 <OC2Config>
      break;
 800534e:	e7f0      	b.n	8005332 <LL_TIM_OC_Init+0x2a>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005350:	f7ff fe9c 	bl	800508c <OC4Config>
      break;
 8005354:	e7ed      	b.n	8005332 <LL_TIM_OC_Init+0x2a>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8005356:	f7ff fee7 	bl	8005128 <OC5Config>
      break;
 800535a:	e7ea      	b.n	8005332 <LL_TIM_OC_Init+0x2a>

0800535c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800535c:	b538      	push	{r3, r4, r5, lr}
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	f013 0f01 	tst.w	r3, #1
 8005364:	d175      	bne.n	8005452 <LL_USART_Init+0xf6>
 8005366:	4604      	mov	r4, r0
 8005368:	460d      	mov	r5, r1
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800536a:	6803      	ldr	r3, [r0, #0]
 800536c:	4a3a      	ldr	r2, [pc, #232]	; (8005458 <LL_USART_Init+0xfc>)
 800536e:	401a      	ands	r2, r3
 8005370:	688b      	ldr	r3, [r1, #8]
 8005372:	6909      	ldr	r1, [r1, #16]
 8005374:	430b      	orrs	r3, r1
 8005376:	6969      	ldr	r1, [r5, #20]
 8005378:	430b      	orrs	r3, r1
 800537a:	69e9      	ldr	r1, [r5, #28]
 800537c:	430b      	orrs	r3, r1
 800537e:	4313      	orrs	r3, r2
 8005380:	6003      	str	r3, [r0, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005382:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005384:	6842      	ldr	r2, [r0, #4]
 8005386:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800538a:	4313      	orrs	r3, r2
 800538c:	6043      	str	r3, [r0, #4]
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800538e:	69ab      	ldr	r3, [r5, #24]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005390:	6882      	ldr	r2, [r0, #8]
 8005392:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005396:	4313      	orrs	r3, r2
 8005398:	6083      	str	r3, [r0, #8]

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800539a:	4b30      	ldr	r3, [pc, #192]	; (800545c <LL_USART_Init+0x100>)
 800539c:	4298      	cmp	r0, r3
 800539e:	d013      	beq.n	80053c8 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 80053a0:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <LL_USART_Init+0x104>)
 80053a2:	4298      	cmp	r0, r3
 80053a4:	d019      	beq.n	80053da <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 80053a6:	4b2f      	ldr	r3, [pc, #188]	; (8005464 <LL_USART_Init+0x108>)
 80053a8:	4298      	cmp	r0, r3
 80053aa:	d01a      	beq.n	80053e2 <LL_USART_Init+0x86>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 80053ac:	4b2e      	ldr	r3, [pc, #184]	; (8005468 <LL_USART_Init+0x10c>)
 80053ae:	4298      	cmp	r0, r3
 80053b0:	d01b      	beq.n	80053ea <LL_USART_Init+0x8e>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80053b2:	4b2e      	ldr	r3, [pc, #184]	; (800546c <LL_USART_Init+0x110>)
 80053b4:	4298      	cmp	r0, r3
 80053b6:	d01c      	beq.n	80053f2 <LL_USART_Init+0x96>
  ErrorStatus status = ERROR;
 80053b8:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 80053ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80053bc:	f022 020f 	bic.w	r2, r2, #15
 80053c0:	882b      	ldrh	r3, [r5, #0]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80053c8:	2003      	movs	r0, #3
 80053ca:	f7ff fc85 	bl	8004cd8 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80053ce:	2800      	cmp	r0, #0
 80053d0:	d03d      	beq.n	800544e <LL_USART_Init+0xf2>
        && (USART_InitStruct->BaudRate != 0U))
 80053d2:	686a      	ldr	r2, [r5, #4]
 80053d4:	b992      	cbnz	r2, 80053fc <LL_USART_Init+0xa0>
  ErrorStatus status = ERROR;
 80053d6:	2001      	movs	r0, #1
 80053d8:	e7ef      	b.n	80053ba <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80053da:	200c      	movs	r0, #12
 80053dc:	f7ff fc7c 	bl	8004cd8 <LL_RCC_GetUSARTClockFreq>
 80053e0:	e7f5      	b.n	80053ce <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80053e2:	2030      	movs	r0, #48	; 0x30
 80053e4:	f7ff fc78 	bl	8004cd8 <LL_RCC_GetUSARTClockFreq>
 80053e8:	e7f1      	b.n	80053ce <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80053ea:	20c0      	movs	r0, #192	; 0xc0
 80053ec:	f7ff fd02 	bl	8004df4 <LL_RCC_GetUARTClockFreq>
 80053f0:	e7ed      	b.n	80053ce <LL_USART_Init+0x72>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80053f2:	f44f 7040 	mov.w	r0, #768	; 0x300
 80053f6:	f7ff fcfd 	bl	8004df4 <LL_RCC_GetUARTClockFreq>
 80053fa:	e7e8      	b.n	80053ce <LL_USART_Init+0x72>
      LL_USART_SetBaudRate(USARTx,
 80053fc:	682b      	ldr	r3, [r5, #0]
 80053fe:	69e9      	ldr	r1, [r5, #28]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8005400:	2b0b      	cmp	r3, #11
 8005402:	d80f      	bhi.n	8005424 <LL_USART_Init+0xc8>
  else if (BaudRate == 0U)
 8005404:	b172      	cbz	r2, 8005424 <LL_USART_Init+0xc8>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005406:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800540a:	d00d      	beq.n	8005428 <LL_USART_Init+0xcc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800540c:	b2db      	uxtb	r3, r3
 800540e:	4918      	ldr	r1, [pc, #96]	; (8005470 <LL_USART_Init+0x114>)
 8005410:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005414:	fbb0 f3f3 	udiv	r3, r0, r3
 8005418:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800541c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005420:	b29b      	uxth	r3, r3
 8005422:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8005424:	2000      	movs	r0, #0
}
 8005426:	e7c8      	b.n	80053ba <LL_USART_Init+0x5e>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8005428:	b2db      	uxtb	r3, r3
 800542a:	4911      	ldr	r1, [pc, #68]	; (8005470 <LL_USART_Init+0x114>)
 800542c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005430:	fbb0 f0f3 	udiv	r0, r0, r3
 8005434:	0853      	lsrs	r3, r2, #1
 8005436:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800543a:	fbb0 f3f2 	udiv	r3, r0, r2
    brrtemp = usartdiv & 0xFFF0U;
 800543e:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8005442:	401a      	ands	r2, r3
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005444:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005448:	4313      	orrs	r3, r2
    USARTx->BRR = brrtemp;
 800544a:	60e3      	str	r3, [r4, #12]
 800544c:	e7ea      	b.n	8005424 <LL_USART_Init+0xc8>
  ErrorStatus status = ERROR;
 800544e:	2001      	movs	r0, #1
 8005450:	e7b3      	b.n	80053ba <LL_USART_Init+0x5e>
 8005452:	2001      	movs	r0, #1
 8005454:	e7b7      	b.n	80053c6 <LL_USART_Init+0x6a>
 8005456:	bf00      	nop
 8005458:	efff69f3 	.word	0xefff69f3
 800545c:	40013800 	.word	0x40013800
 8005460:	40004400 	.word	0x40004400
 8005464:	40004800 	.word	0x40004800
 8005468:	40004c00 	.word	0x40004c00
 800546c:	40005000 	.word	0x40005000
 8005470:	0800c290 	.word	0x0800c290

08005474 <LED_on>:
{
	// Za prižig LEDice uporabimo sledečo nizko-nivojsko LL funkcijo:
	//
	//		void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
	//
	LL_GPIO_SetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8005474:	4b03      	ldr	r3, [pc, #12]	; (8005484 <LED_on+0x10>)
 8005476:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 800547a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 800547e:	685b      	ldr	r3, [r3, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005480:	6193      	str	r3, [r2, #24]
	// zamenjate z npr. LED3 iz seznama naštevnega tipa; in tako boste s klicem zgornje
	// funkcijo postavili na visoko stanje prav tisti digitalni izhod, ki pripada
	// portu in pinu LEDice LED3.


}
 8005482:	4770      	bx	lr
 8005484:	200003a0 	.word	0x200003a0

08005488 <LED_off>:
// Funkcija LED_on() ugasne tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_off(LEDs_enum_t LEDn)
{
	LL_GPIO_ResetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <LED_off+0x10>)
 800548a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 800548e:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8005492:	685b      	ldr	r3, [r3, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005494:	6293      	str	r3, [r2, #40]	; 0x28
	// DOPOLNI
}
 8005496:	4770      	bx	lr
 8005498:	200003a0 	.word	0x200003a0

0800549c <LED_toggle>:
// Funkcija LED_toggle() invertira stanje tiste LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_toggle( LEDs_enum_t LEDn )
{
	LL_GPIO_TogglePin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 800549c:	4b07      	ldr	r3, [pc, #28]	; (80054bc <LED_toggle+0x20>)
 800549e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 80054a2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 80054a6:	685b      	ldr	r3, [r3, #4]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 80054a8:	6951      	ldr	r1, [r2, #20]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 80054aa:	ea03 0001 	and.w	r0, r3, r1
 80054ae:	ea23 0301 	bic.w	r3, r3, r1
 80054b2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80054b6:	6193      	str	r3, [r2, #24]
	// DOPOLNI
}
 80054b8:	4770      	bx	lr
 80054ba:	bf00      	nop
 80054bc:	200003a0 	.word	0x200003a0

080054c0 <LEDs_on>:
	// Pomožna bitna maska, s katero bomo "brali" vrednosti posameznih bitov
	// vhodnega argumenta "LED_bitmask" od LSB bita proti MSB bitu.
	uint8_t bitmask = 0x01;

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 80054c0:	2300      	movs	r3, #0
	uint8_t bitmask = 0x01;
 80054c2:	2201      	movs	r2, #1
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 80054c4:	e006      	b.n	80054d4 <LEDs_on+0x14>
		}

		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
	}
}
 80054c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ca:	4770      	bx	lr
		bitmask <<= 1;
 80054cc:	0052      	lsls	r2, r2, #1
 80054ce:	b2d2      	uxtb	r2, r2
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 80054d0:	3301      	adds	r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b07      	cmp	r3, #7
 80054d6:	d812      	bhi.n	80054fe <LEDs_on+0x3e>
		if ( LED_bitmask & bitmask )
 80054d8:	4202      	tst	r2, r0
 80054da:	d0f7      	beq.n	80054cc <LEDs_on+0xc>
{
 80054dc:	b410      	push	{r4}
			LL_GPIO_SetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 80054de:	4908      	ldr	r1, [pc, #32]	; (8005500 <LEDs_on+0x40>)
 80054e0:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 80054e4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80054e8:	6849      	ldr	r1, [r1, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80054ea:	61a1      	str	r1, [r4, #24]
		bitmask <<= 1;
 80054ec:	0052      	lsls	r2, r2, #1
 80054ee:	b2d2      	uxtb	r2, r2
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 80054f0:	3301      	adds	r3, #1
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b07      	cmp	r3, #7
 80054f6:	d8e6      	bhi.n	80054c6 <LEDs_on+0x6>
		if ( LED_bitmask & bitmask )
 80054f8:	4202      	tst	r2, r0
 80054fa:	d0f7      	beq.n	80054ec <LEDs_on+0x2c>
 80054fc:	e7ef      	b.n	80054de <LEDs_on+0x1e>
 80054fe:	4770      	bx	lr
 8005500:	200003a0 	.word	0x200003a0

08005504 <LEDs_off>:
	// Pomožna bitna maska, s katero bomo "brali" vrednosti posameznih bitov
		// vhodnega argumenta "LED_bitmask" od LSB bita proti MSB bitu.
		uint8_t bitmask = 0x01;

		// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
		for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8005504:	2300      	movs	r3, #0
		uint8_t bitmask = 0x01;
 8005506:	2201      	movs	r2, #1
		for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8005508:	e006      	b.n	8005518 <LEDs_off+0x14>

			// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
			bitmask <<= 1;
		}
	// DOPOLNI. Reši se na enak način kot LEDs_on().
}
 800550a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550e:	4770      	bx	lr
			bitmask <<= 1;
 8005510:	0052      	lsls	r2, r2, #1
 8005512:	b2d2      	uxtb	r2, r2
		for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8005514:	3301      	adds	r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	2b07      	cmp	r3, #7
 800551a:	d812      	bhi.n	8005542 <LEDs_off+0x3e>
			if ( LED_bitmask & bitmask )
 800551c:	4202      	tst	r2, r0
 800551e:	d0f7      	beq.n	8005510 <LEDs_off+0xc>
{
 8005520:	b410      	push	{r4}
				LL_GPIO_ResetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8005522:	4908      	ldr	r1, [pc, #32]	; (8005544 <LEDs_off+0x40>)
 8005524:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8005528:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800552c:	6849      	ldr	r1, [r1, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 800552e:	62a1      	str	r1, [r4, #40]	; 0x28
			bitmask <<= 1;
 8005530:	0052      	lsls	r2, r2, #1
 8005532:	b2d2      	uxtb	r2, r2
		for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8005534:	3301      	adds	r3, #1
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b07      	cmp	r3, #7
 800553a:	d8e6      	bhi.n	800550a <LEDs_off+0x6>
			if ( LED_bitmask & bitmask )
 800553c:	4202      	tst	r2, r0
 800553e:	d0f7      	beq.n	8005530 <LEDs_off+0x2c>
 8005540:	e7ef      	b.n	8005522 <LEDs_off+0x1e>
 8005542:	4770      	bx	lr
 8005544:	200003a0 	.word	0x200003a0

08005548 <LEDs_write>:
void LEDs_write(uint8_t value)
{
	uint8_t bitmask = 0x01;

	// S "for" zanko se sprehodimo preko vseh LEDic v sistemu.
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8005548:	2300      	movs	r3, #0
	uint8_t bitmask = 0x01;
 800554a:	2201      	movs	r2, #1
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 800554c:	2b07      	cmp	r3, #7
 800554e:	d81b      	bhi.n	8005588 <LEDs_write+0x40>
{
 8005550:	b410      	push	{r4}
 8005552:	e00c      	b.n	800556e <LEDs_write+0x26>

		}
		else
		{
			// sicer pa naj se i-ta LEDica ugasne.
			LL_GPIO_ResetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8005554:	490d      	ldr	r1, [pc, #52]	; (800558c <LEDs_write+0x44>)
 8005556:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 800555a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800555e:	6849      	ldr	r1, [r1, #4]
 8005560:	62a1      	str	r1, [r4, #40]	; 0x28

		}


		// In nato si pripravimo novo pomožno bitno masko za branje naslednjega bita v vhodnem argumentu.
		bitmask <<= 1;
 8005562:	0052      	lsls	r2, r2, #1
 8005564:	b2d2      	uxtb	r2, r2
	for(uint8_t i=0; i < NUM_OF_LEDS; i++)
 8005566:	3301      	adds	r3, #1
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b07      	cmp	r3, #7
 800556c:	d809      	bhi.n	8005582 <LEDs_write+0x3a>
		if (value & bitmask)
 800556e:	4202      	tst	r2, r0
 8005570:	d0f0      	beq.n	8005554 <LEDs_write+0xc>
			LL_GPIO_SetOutputPin( LED_group.LEDs[i].port, LED_group.LEDs[i].pin );
 8005572:	4906      	ldr	r1, [pc, #24]	; (800558c <LEDs_write+0x44>)
 8005574:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
 8005578:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800557c:	6849      	ldr	r1, [r1, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800557e:	61a1      	str	r1, [r4, #24]
}
 8005580:	e7ef      	b.n	8005562 <LEDs_write+0x1a>
	}
}
 8005582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	200003a0 	.word	0x200003a0

08005590 <LED_init>:
{
 8005590:	b510      	push	{r4, lr}
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8005592:	4b0e      	ldr	r3, [pc, #56]	; (80055cc <LED_init+0x3c>)
 8005594:	2004      	movs	r0, #4
 8005596:	6058      	str	r0, [r3, #4]
		LED_group.LEDs[LED0].port = GPIOF;
 8005598:	4a0d      	ldr	r2, [pc, #52]	; (80055d0 <LED_init+0x40>)
 800559a:	601a      	str	r2, [r3, #0]
		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 800559c:	2108      	movs	r1, #8
 800559e:	60d9      	str	r1, [r3, #12]
		LED_group.LEDs[LED1].port = GPIOF;
 80055a0:	609a      	str	r2, [r3, #8]
		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 80055a2:	2410      	movs	r4, #16
 80055a4:	615c      	str	r4, [r3, #20]
		LED_group.LEDs[LED2].port = GPIOF;
 80055a6:	611a      	str	r2, [r3, #16]
		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 80055a8:	2420      	movs	r4, #32
 80055aa:	61dc      	str	r4, [r3, #28]
		LED_group.LEDs[LED3].port = GPIOF;
 80055ac:	619a      	str	r2, [r3, #24]
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 80055ae:	2201      	movs	r2, #1
 80055b0:	625a      	str	r2, [r3, #36]	; 0x24
		LED_group.LEDs[LED4].port = GPIOC;
 80055b2:	4a08      	ldr	r2, [pc, #32]	; (80055d4 <LED_init+0x44>)
 80055b4:	621a      	str	r2, [r3, #32]
		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 80055b6:	2402      	movs	r4, #2
 80055b8:	62dc      	str	r4, [r3, #44]	; 0x2c
		LED_group.LEDs[LED5].port = GPIOC;
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
 80055bc:	6358      	str	r0, [r3, #52]	; 0x34
		LED_group.LEDs[LED6].port = GPIOC;
 80055be:	631a      	str	r2, [r3, #48]	; 0x30
		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
 80055c0:	63d9      	str	r1, [r3, #60]	; 0x3c
		LED_group.LEDs[LED7].port = GPIOC;
 80055c2:	639a      	str	r2, [r3, #56]	; 0x38
		LEDs_write(0x00);
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7ff ffbf 	bl	8005548 <LEDs_write>
}
 80055ca:	bd10      	pop	{r4, pc}
 80055cc:	200003a0 	.word	0x200003a0
 80055d0:	48001400 	.word	0x48001400
 80055d4:	48000800 	.word	0x48000800

080055d8 <SCI_init>:


// Funkcija SCI_init() poskrbi za inicializacijo SCI "handle" strukture SCI
// in modificira dolžino medpomnilnika printf() funkcije.
void SCI_init(void)
{
 80055d8:	b510      	push	{r4, lr}

		// USART vmesnik specificiramo s pred-definiranim makrojem iz LL knjižnice, podobno kot
		// smo to storili za specifikacijo GPIO porta v prejšnjih vajah.

			// DOPOLNI
		SCI.enota = USART3;
 80055da:	4c10      	ldr	r4, [pc, #64]	; (800561c <SCI_init+0x44>)
 80055dc:	4b10      	ldr	r3, [pc, #64]	; (8005620 <SCI_init+0x48>)
 80055de:	6023      	str	r3, [r4, #0]
		// standardni izhod "stdout" s pomočjo printf() funkcije,
		// bomo nastavili na 0. Na ta način dosežemo najboljšo odzivnost
		// printf() funkcije, saj se tako ne čaka, da se medpomnilnik napolne,
		// preden se pošlje sporočilo. Sporočila bodo tako poslana takoj, ko se
		// prejme vsaj en znak.
		setvbuf(stdout, NULL, _IONBF, 0);
 80055e0:	4b10      	ldr	r3, [pc, #64]	; (8005624 <SCI_init+0x4c>)
 80055e2:	6818      	ldr	r0, [r3, #0]
 80055e4:	2300      	movs	r3, #0
 80055e6:	2202      	movs	r2, #2
 80055e8:	4619      	mov	r1, r3
 80055ea:	6880      	ldr	r0, [r0, #8]
 80055ec:	f003 fb12 	bl	8008c14 <setvbuf>
		// s katero specificiramo dolžino medpomnilnika za standardni izhod "stdout" (prvi argument funkcije).
		// Za 3. vhodni parameter uporabimo že pred-definirani makro _IONBF (I/O No Buffer), ki bo povzročil,
		// da se za standardni izhod "stdout" ne uporablja medpomnilnika, temveč
		// se znake takoj pošlje na standardni izhod.

		BUF_init( &SCI_RX_buf_handle, SCI_RX_buffer, SCI_RX_BUF_LEN);	// RX SCI medpomnilnik
 80055f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f4:	490c      	ldr	r1, [pc, #48]	; (8005628 <SCI_init+0x50>)
 80055f6:	480d      	ldr	r0, [pc, #52]	; (800562c <SCI_init+0x54>)
 80055f8:	f000 f874 	bl	80056e4 <BUF_init>
		BUF_init( &SCI_TX_buf_handle, SCI_TX_buffer, SCI_TX_BUF_LEN);	// TX SCI medpomnilnik
 80055fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005600:	490b      	ldr	r1, [pc, #44]	; (8005630 <SCI_init+0x58>)
 8005602:	480c      	ldr	r0, [pc, #48]	; (8005634 <SCI_init+0x5c>)
 8005604:	f000 f86e 	bl	80056e4 <BUF_init>
		LL_USART_EnableIT_RXNE_RXFNE (SCI.enota); //omogoci prekinitev
 8005608:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800560e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005612:	e842 3100 	strex	r1, r3, [r2]
 8005616:	2900      	cmp	r1, #0
 8005618:	d1f7      	bne.n	800560a <SCI_init+0x32>

}
 800561a:	bd10      	pop	{r4, pc}
 800561c:	200003e0 	.word	0x200003e0
 8005620:	40004800 	.word	0x40004800
 8005624:	20000020 	.word	0x20000020
 8005628:	200003fc 	.word	0x200003fc
 800562c:	200003e4 	.word	0x200003e4
 8005630:	20000614 	.word	0x20000614
 8005634:	200005fc 	.word	0x200005fc

08005638 <SCI_send_byte>:
	// S čakanjem v zanki zagotovimo, da lahko USART oddajnik sprejme nov bajt v oddajni register.
	// Za ugotavljanje, ali je že mogoče pisati v oddajni register USART vmesnika, uporabimo ustrezno
	// nizko-nivojsko LL funkcijo za delo z USART-om.

		//	DOPOLNI
	while( LL_USART_IsActiveFlag_TXE_TXFNF(SCI.enota) == 0 );
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <SCI_send_byte+0x10>)
 800563a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8005642:	d0f9      	beq.n	8005638 <SCI_send_byte>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8005644:	6298      	str	r0, [r3, #40]	; 0x28
	// In nato z uporabo USART vmesnika pošljemo en bajt podatkov "data". Za pošiljane podatka preko USART vmesnika
	// prav tako uporabimo ustrezno nizko-nivojsko LL funkcijo.

		//	DOPOLNI
		LL_USART_TransmitData8(SCI.enota, data);
}
 8005646:	4770      	bx	lr
 8005648:	200003e0 	.word	0x200003e0

0800564c <SCI_send_bytes>:

// Funkcija SCI_send_bytes() pošlje zaporedje bajtov preko SCI vmesnika.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes(uint8_t *data, uint32_t size)
{
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	4606      	mov	r6, r0
 8005650:	460d      	mov	r5, r1
	for( int i = 0; i< size; i++ )
 8005652:	2400      	movs	r4, #0
 8005654:	e003      	b.n	800565e <SCI_send_bytes+0x12>
	{
		// DOPOLNI
		SCI_send_byte(*(data+i));
 8005656:	5d30      	ldrb	r0, [r6, r4]
 8005658:	f7ff ffee 	bl	8005638 <SCI_send_byte>
	for( int i = 0; i< size; i++ )
 800565c:	3401      	adds	r4, #1
 800565e:	42ac      	cmp	r4, r5
 8005660:	d3f9      	bcc.n	8005656 <SCI_send_bytes+0xa>
	}
}
 8005662:	bd70      	pop	{r4, r5, r6, pc}

08005664 <_write>:
// redefiniramo _write() funkcijo pravzaprav priredimo uporabo printf() funkcije
// tako, da pošilja sporočila na točno tak način, kakor to sami želimo.
// In mi želimo uporabljati funkcijo printf() tako, da bomo s pomočjo nje
// pošiljali formatirana sporočila preko SCI vmesnika.
int _write(int file, char *ptr, int len)
{
 8005664:	b510      	push	{r4, lr}
 8005666:	4608      	mov	r0, r1
 8005668:	4614      	mov	r4, r2
	// Sedaj pa uporabimo našo SCI sistemsko funkcijo SCI_send_bytes()
	// da z njo pošljemo te podatke, na katere kaže "ptr".
	// Ker naša funkcija SCI_send_bytes() uporablja drugačen tip
	// vhodnih argumentov, je potrebno poskrbeti za eksplicitno
	// pretvorbo med tipi (angl. type-casting).
	SCI_send_bytes( (uint8_t*) ptr, (uint32_t) len);
 800566a:	4611      	mov	r1, r2
 800566c:	f7ff ffee 	bl	800564c <SCI_send_bytes>

	// Funkcija _write() mora vrniti število uspešno poslanih
	// znakov. Tu poenostavimo in privzamemo, da je bilo uspešno
	// poslanih vseh "len" znakov.
	return len;
}
 8005670:	4620      	mov	r0, r4
 8005672:	bd10      	pop	{r4, pc}

08005674 <SCI_receive_char_Callback>:
	}

}

void SCI_receive_char_Callback(void)
{
 8005674:	b508      	push	{r3, lr}

	// Ko preko USART vmesnika prejmemo nov podatek, ga shranimo v sprejemni RX medpomnilnik SCI vmesnika.


	// Najprej z uporabo LL funkcije preberemo novo-sprejeti podatek in ga shranimo v pomožno spremenljivko.
	received_data = LL_USART_ReceiveData8(SCI.enota);
 8005676:	4b04      	ldr	r3, [pc, #16]	; (8005688 <SCI_receive_char_Callback+0x14>)
 8005678:	681b      	ldr	r3, [r3, #0]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800567a:	6a59      	ldr	r1, [r3, #36]	; 0x24

	// Nato pa ta podatek shranimo v sprejemni RX medpomnilnik SCI vmesnika za nadaljno obdelavo kasneje.
	BUF_store_byte( &SCI_RX_buf_handle, received_data );
 800567c:	b2c9      	uxtb	r1, r1
 800567e:	4803      	ldr	r0, [pc, #12]	; (800568c <SCI_receive_char_Callback+0x18>)
 8005680:	f000 f836 	bl	80056f0 <BUF_store_byte>
}
 8005684:	bd08      	pop	{r3, pc}
 8005686:	bf00      	nop
 8005688:	200003e0 	.word	0x200003e0
 800568c:	200003e4 	.word	0x200003e4

08005690 <SCI_transmit_char_Callback>:


void SCI_transmit_char_Callback(void)
{
 8005690:	b500      	push	{lr}
 8005692:	b083      	sub	sp, #12
	buf_rtrn_codes_t	return_code;			// sem shranimo rezultat poskusa branja iz medpomnilnika


	// Najprej poskusimo prebrati naslednji podatek, ki ga želimo poslati.
	// Zapomnimo si "vrnjeno kodo" (angl. return code), ki jo vrne BUF_ funkcija.
	return_code = BUF_get_byte( &SCI_TX_buf_handle, &data_to_transmit );
 8005694:	f10d 0107 	add.w	r1, sp, #7
 8005698:	480c      	ldr	r0, [pc, #48]	; (80056cc <SCI_transmit_char_Callback+0x3c>)
 800569a:	f000 f845 	bl	8005728 <BUF_get_byte>

	// S pomočjo "vrnjene kode" ugotovimo, če sedaj imamo na voljo naslednji podatek za pošiljanje.
	if ( return_code == BUFFER_OK )
 800569e:	b920      	cbnz	r0, 80056aa <SCI_transmit_char_Callback+0x1a>
	{
		// In če je na voljo naslednji podatek, ga kar vpišemo v oddajni podatkovni register
		// USART vmesnika s pomočjo LL funkcije.

		LL_USART_TransmitData8(SCI.enota, data_to_transmit);
 80056a0:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <SCI_transmit_char_Callback+0x40>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
  USARTx->TDR = Value;
 80056a8:	629a      	str	r2, [r3, #40]	; 0x28


	// Po vsakem podatku, ki ga pošljemo, je potrebno preveriti, če smo morda
	// poslali zadnji podatek. To je pomembno, saj moramo v tem primeru ustaviti
	// "avtomatsko" pošiljanje podatkov s pomočjo prekinitev.
	if ( BUF_get_data_size( &SCI_TX_buf_handle ) == 0)
 80056aa:	4808      	ldr	r0, [pc, #32]	; (80056cc <SCI_transmit_char_Callback+0x3c>)
 80056ac:	f000 f856 	bl	800575c <BUF_get_data_size>
 80056b0:	b948      	cbnz	r0, 80056c6 <SCI_transmit_char_Callback+0x36>
		// prekinitve ob sprostitvi oddajnega podatkovnega registra (TXE),
		// saj nimamo več kaj pošiljati. Tako onemogočimo avtomatsko
		// pošiljanje iz oddajnega TX medpomnilnika SCI vmesnika s pomočjo prekinitev.
		// Uporabimo ustrezno LL funkcijo za onemogočitev prekinitve.

		LL_USART_DisableIT_TXE_TXFNF (SCI.enota);
 80056b2:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <SCI_transmit_char_Callback+0x40>)
 80056b4:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80056ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	e842 3100 	strex	r1, r3, [r2]
 80056c2:	2900      	cmp	r1, #0
 80056c4:	d1f7      	bne.n	80056b6 <SCI_transmit_char_Callback+0x26>
	}

}
 80056c6:	b003      	add	sp, #12
 80056c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80056cc:	200005fc 	.word	0x200005fc
 80056d0:	200003e0 	.word	0x200003e0

080056d4 <BUF_flush>:
	BUF_flush(buf_handle);
}


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
 80056d4:	4603      	mov	r3, r0
	buf_handle->front = 0;
 80056d6:	2000      	movs	r0, #0
 80056d8:	60d8      	str	r0, [r3, #12]
	buf_handle->rear = 0;
 80056da:	6098      	str	r0, [r3, #8]
	buf_handle->data_size = 0;
 80056dc:	6118      	str	r0, [r3, #16]
	buf_handle->free_size = buf_handle->length;
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	615a      	str	r2, [r3, #20]

	return BUFFER_OK;
}
 80056e2:	4770      	bx	lr

080056e4 <BUF_init>:
{
 80056e4:	b508      	push	{r3, lr}
	buf_handle->buffer = buffer_ptr;
 80056e6:	6001      	str	r1, [r0, #0]
	buf_handle->length = buf_length;
 80056e8:	6042      	str	r2, [r0, #4]
	BUF_flush(buf_handle);
 80056ea:	f7ff fff3 	bl	80056d4 <BUF_flush>
}
 80056ee:	bd08      	pop	{r3, pc}

080056f0 <BUF_store_byte>:

// Store one byte of data.
buf_rtrn_codes_t BUF_store_byte(buf_handle_t *buf_handle, uint8_t data)
{
	// check if buffer already full
	if (buf_handle->data_size >= buf_handle->length)
 80056f0:	6903      	ldr	r3, [r0, #16]
 80056f2:	6842      	ldr	r2, [r0, #4]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d215      	bcs.n	8005724 <BUF_store_byte+0x34>
		return BUFFER_FULL;	//-> if so, return error
	}
	else
	{
		// check special case: buffer empty
		if (buf_handle->data_size == 0)
 80056f8:	b963      	cbnz	r3, 8005714 <BUF_store_byte+0x24>
		{
			buf_handle->front = 0;
 80056fa:	60c3      	str	r3, [r0, #12]
			buf_handle->rear = 0;
 80056fc:	6083      	str	r3, [r0, #8]
			}
		}


		// by now rear pointer is ready for new data -> store data
		buf_handle->buffer[buf_handle->rear] = data;
 80056fe:	6802      	ldr	r2, [r0, #0]
 8005700:	6883      	ldr	r3, [r0, #8]
 8005702:	54d1      	strb	r1, [r2, r3]

		// update data size and free size
		buf_handle->data_size++;
 8005704:	6903      	ldr	r3, [r0, #16]
 8005706:	3301      	adds	r3, #1
 8005708:	6103      	str	r3, [r0, #16]
		buf_handle->free_size--;
 800570a:	6943      	ldr	r3, [r0, #20]
 800570c:	3b01      	subs	r3, #1
 800570e:	6143      	str	r3, [r0, #20]

		return BUFFER_OK;
 8005710:	2000      	movs	r0, #0
 8005712:	4770      	bx	lr
			buf_handle->rear++;
 8005714:	6883      	ldr	r3, [r0, #8]
 8005716:	3301      	adds	r3, #1
 8005718:	6083      	str	r3, [r0, #8]
			if (buf_handle->rear >= buf_handle->length)
 800571a:	429a      	cmp	r2, r3
 800571c:	d8ef      	bhi.n	80056fe <BUF_store_byte+0xe>
				buf_handle->rear = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	6083      	str	r3, [r0, #8]
 8005722:	e7ec      	b.n	80056fe <BUF_store_byte+0xe>
		return BUFFER_FULL;	//-> if so, return error
 8005724:	2001      	movs	r0, #1
	}

}
 8005726:	4770      	bx	lr

08005728 <BUF_get_byte>:

// Read one byte of data and store it to the given location.
buf_rtrn_codes_t BUF_get_byte(buf_handle_t *buf_handle, uint8_t *data)
{
	// first check if buffer empty
	if (buf_handle->data_size == 0)
 8005728:	6903      	ldr	r3, [r0, #16]
 800572a:	b19b      	cbz	r3, 8005754 <BUF_get_byte+0x2c>
	{
		return BUFFER_EMPTY;	// return error code and exit this function
	}

	// else read and return data from the buffer "front"
	*data = buf_handle->buffer[buf_handle->front];	//Get data from the queue "front"
 800572c:	6802      	ldr	r2, [r0, #0]
 800572e:	68c3      	ldr	r3, [r0, #12]
 8005730:	5cd3      	ldrb	r3, [r2, r3]
 8005732:	700b      	strb	r3, [r1, #0]

	// update data size and free size
	buf_handle->data_size--;
 8005734:	6903      	ldr	r3, [r0, #16]
 8005736:	3b01      	subs	r3, #1
 8005738:	6103      	str	r3, [r0, #16]
	buf_handle->free_size++;
 800573a:	6943      	ldr	r3, [r0, #20]
 800573c:	3301      	adds	r3, #1
 800573e:	6143      	str	r3, [r0, #20]


	// update the "front" value NOT using the modulo arithmetics but
	// using if-then instead because it is faster on uC
	buf_handle->front++;
 8005740:	68c3      	ldr	r3, [r0, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60c3      	str	r3, [r0, #12]

	if (buf_handle->front >= buf_handle->length)
 8005746:	6842      	ldr	r2, [r0, #4]
 8005748:	4293      	cmp	r3, r2
 800574a:	d305      	bcc.n	8005758 <BUF_get_byte+0x30>
	{
		buf_handle->front = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	60c3      	str	r3, [r0, #12]
	}

	return BUFFER_OK;	// return BUFFER_OK error code
 8005750:	4618      	mov	r0, r3
 8005752:	4770      	bx	lr
		return BUFFER_EMPTY;	// return error code and exit this function
 8005754:	2002      	movs	r0, #2
 8005756:	4770      	bx	lr
	return BUFFER_OK;	// return BUFFER_OK error code
 8005758:	2000      	movs	r0, #0

}
 800575a:	4770      	bx	lr

0800575c <BUF_get_data_size>:

// Get the number of bytes currently in the buffer queue.
uint32_t BUF_get_data_size(buf_handle_t *buf_handle)
{
	return buf_handle->data_size;
}
 800575c:	6900      	ldr	r0, [r0, #16]
 800575e:	4770      	bx	lr

08005760 <JOY_init>:
// merjenje signalov "joysticka".
// Mimogrede: inicializacijska funkcija se razlikuje od prejšnjih inicializacijskih funkcij
// v tem, da za vhodna argumenta funkcije prejme kazalce na "handle" strukture, ki so
// potrebne za delo s HAL funkcijami.
void JOY_init(ADC_HandleTypeDef *ADC_handle, TIM_HandleTypeDef *timer_handle)
{
 8005760:	b510      	push	{r4, lr}
		// Definirajte, kako so posamezne tipke povezane na GPIO pine in porte.
		// To storite tako, da pravilno inicializirate "handle" strukturo tipke "joysticka".
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Postopate popolnoma enako, kot smo to storili v primeru tipkovnice.

		joystick.button.port = GPIOC;
 8005762:	4c19      	ldr	r4, [pc, #100]	; (80057c8 <JOY_init+0x68>)
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <JOY_init+0x6c>)
 8005766:	6023      	str	r3, [r4, #0]
		joystick.button.pin =  LL_GPIO_PIN_13;
 8005768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800576c:	6063      	str	r3, [r4, #4]

	// 2. Nastavitev začetnih vrednosti "joystick" sistemskih spremenljivk

		// Začetne vrednosti tipke "joysticka"
		joystick.button.state_old = 0;
 800576e:	2300      	movs	r3, #0
 8005770:	7263      	strb	r3, [r4, #9]
		joystick.button.state_new = 0;
 8005772:	7223      	strb	r3, [r4, #8]


		// Smiselno nastavimo začetne ekstremne vrednosti pozicije "joysticka".
		joystick.position_raw_min[X] = 916;
 8005774:	f44f 7365 	mov.w	r3, #916	; 0x394
 8005778:	8223      	strh	r3, [r4, #16]
		joystick.position_raw_min[Y] = 715;
 800577a:	f240 23cb 	movw	r3, #715	; 0x2cb
 800577e:	8263      	strh	r3, [r4, #18]

		joystick.position_raw_max[X] = 3330;
 8005780:	f640 5302 	movw	r3, #3330	; 0xd02
 8005784:	82a3      	strh	r3, [r4, #20]
		joystick.position_raw_max[Y] = 3311;
 8005786:	f640 43ef 	movw	r3, #3311	; 0xcef
 800578a:	82e3      	strh	r3, [r4, #22]

		joystick.position_raw_range[X] = joystick.position_raw_max[X] - joystick.position_raw_min[X];
 800578c:	f640 136e 	movw	r3, #2414	; 0x96e
 8005790:	8323      	strh	r3, [r4, #24]
		joystick.position_raw_range[Y] = joystick.position_raw_max[Y] - joystick.position_raw_min[Y];
 8005792:	f640 2324 	movw	r3, #2596	; 0xa24
 8005796:	8363      	strh	r3, [r4, #26]

		// Shranimo si kazalce na "handle" strukturi za AD pretvornik in časovnik,
		// ki ju uporabljamo pri implementaciji "joystick" modula.
		// Ti dve infromaciji seveda shranimo v spremenljivki "joystick handle" strukture.
		joystick.ADC = ADC_handle;
 8005798:	6220      	str	r0, [r4, #32]
		joystick.timer = timer_handle;
 800579a:	61e1      	str	r1, [r4, #28]

	// 3. Inicializiramo medpomnilnik za tipke "joysticka"

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 800579c:	2210      	movs	r2, #16
 800579e:	490c      	ldr	r1, [pc, #48]	; (80057d0 <JOY_init+0x70>)
 80057a0:	480c      	ldr	r0, [pc, #48]	; (80057d4 <JOY_init+0x74>)
 80057a2:	f7ff ff9f 	bl	80056e4 <BUF_init>
		// Pri tem uporabljamo funkcije HAL knjižnice.


		// Najprej kalibriramo AD pretvornik, da bodo meritve pozicije "joysticka" bolj točne.
		// Kalibracijo izvedemo za "single-ended" vhodne signale.
		HAL_ADCEx_Calibration_Start( joystick.ADC, ADC_SINGLE_ENDED );
 80057a6:	217f      	movs	r1, #127	; 0x7f
 80057a8:	6a20      	ldr	r0, [r4, #32]
 80057aa:	f7fc ffdd 	bl	8002768 <HAL_ADCEx_Calibration_Start>
		// AD pretovrnik v DMA načinu).
		// To storimo s klicem spodnje HAL funkcije, ki DMA enoti
		// "sporoči", s katerim AD pretvornikom bo delala, na katero mesto v pomnilniku
		// naj shranjuje rezultate AD pretvorbe ter koliko teh rezultatov bo morala prenesti
		// ob vsaki končani AD pretvorbi.
		HAL_ADC_Start_DMA( joystick.ADC, (uint32_t *) joystick.position_raw, 2 );
 80057ae:	2202      	movs	r2, #2
 80057b0:	f104 010c 	add.w	r1, r4, #12
 80057b4:	6a20      	ldr	r0, [r4, #32]
 80057b6:	f7fc fef1 	bl	800259c <HAL_ADC_Start_DMA>


		// Na koncu pa še zaženemo časovnik, ki bo prožil AD pretvorbe.
		// S tem smo pravzaprav sprožili "avtomatsko" merjenje pozicije "joysticka".
		HAL_TIM_Base_Start( joystick.timer );
 80057ba:	69e0      	ldr	r0, [r4, #28]
 80057bc:	f7fe fb64 	bl	8003e88 <HAL_TIM_Base_Start>
	// 5. Počakamo na prvo meritev pozicije "joysticka"

		// Časovnik proži AD pretvorbe vsakih 10 milisekund.
		// Torej je smiselno počakati milisekundo dlje.

	HAL_Delay(11);
 80057c0:	200b      	movs	r0, #11
 80057c2:	f7fc fa41 	bl	8001c48 <HAL_Delay>


}
 80057c6:	bd10      	pop	{r4, pc}
 80057c8:	2000083c 	.word	0x2000083c
 80057cc:	48000800 	.word	0x48000800
 80057d0:	2000082c 	.word	0x2000082c
 80057d4:	20000814 	.word	0x20000814

080057d8 <JOY_get_axis_position>:
// pozicije osi ter ekstremnih vrednosti osi, ki jih hranimo v "handle" strukturi
// "joysticka". Os "joysticka" specificiramo kot vhodni argument funkcije.
// Funkcija mora poskrbeti tudi, da so vrednosti, ki jih vračamo, vedno smiselno
// omejene na interval [0..100].
uint8_t JOY_get_axis_position(joystick_axes_enum_t axis)
{
 80057d8:	b410      	push	{r4}
	int16_t	relative_position;


	// Izračun relativne pozicije osi na procent natančno.
	// Pazite: uporablja se celoštevilska aritmetika! Operacija deljenja vrne celoštevilski količnik brez deleža zaradi ostanka!
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 80057da:	4b19      	ldr	r3, [pc, #100]	; (8005840 <JOY_get_axis_position+0x68>)
 80057dc:	1d02      	adds	r2, r0, #4
 80057de:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80057e2:	8892      	ldrh	r2, [r2, #4]
 80057e4:	f100 0108 	add.w	r1, r0, #8
 80057e8:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 80057ec:	1a54      	subs	r4, r2, r1
 80057ee:	ee06 4a90 	vmov	s13, r4
 80057f2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80057f6:	f100 0c0c 	add.w	ip, r0, #12
 80057fa:	f833 301c 	ldrh.w	r3, [r3, ip, lsl #1]
 80057fe:	ee07 3a10 	vmov	s14, r3
 8005802:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8005806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800580a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8005844 <JOY_get_axis_position+0x6c>
 800580e:	ee67 7a87 	vmul.f32	s15, s15, s14


	// Poskrbimo še, da se vrnjena vrednost nahaja na smiselnem intervalu [0..100].

		// Obravnavamo primer, ko je trenutna meritev pozicije manjša od kalibrirane minimalne vrednosti.
		if ( joystick.position_raw[axis] < joystick.position_raw_min[axis] )
 8005812:	428a      	cmp	r2, r1
 8005814:	d30f      	bcc.n	8005836 <JOY_get_axis_position+0x5e>
 8005816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800581a:	ee17 3a90 	vmov	r3, s15
 800581e:	b21b      	sxth	r3, r3
		{
			return 0 ;
		}

		// Obravnavamo primer, ko je trenutna meritev pozicije večja od kalibrirane maksimalne vrednosti.
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 8005820:	3008      	adds	r0, #8
 8005822:	4907      	ldr	r1, [pc, #28]	; (8005840 <JOY_get_axis_position+0x68>)
 8005824:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8005828:	8881      	ldrh	r1, [r0, #4]
 800582a:	428a      	cmp	r2, r1
 800582c:	d805      	bhi.n	800583a <JOY_get_axis_position+0x62>
		}

		// Ostane le še primer, ko se izračunana relativna pozicija nahaja na intervalu [0..100].
		else
		{
			return relative_position;
 800582e:	b2d8      	uxtb	r0, r3
		}

}
 8005830:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005834:	4770      	bx	lr
			return 0 ;
 8005836:	2000      	movs	r0, #0
 8005838:	e7fa      	b.n	8005830 <JOY_get_axis_position+0x58>
			return 100 ;
 800583a:	2064      	movs	r0, #100	; 0x64
 800583c:	e7f8      	b.n	8005830 <JOY_get_axis_position+0x58>
 800583e:	bf00      	nop
 8005840:	2000083c 	.word	0x2000083c
 8005844:	42c80000 	.word	0x42c80000

08005848 <KBD_init>:

// Funkcija KBD_init() poskrbi, da se pravilno inicializira keyboard_handle_t strukturna spremenljivka.
// Poskrbi tudi za inicializacijo medpomnilnika tipkovnice.
//
void KBD_init(void)
{
 8005848:	b508      	push	{r3, lr}
	// To storite tako, da pravilno inicializirate "handle" strukture posameznih tipk.
	// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.


	// buttons on port G
	keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 800584a:	4b15      	ldr	r3, [pc, #84]	; (80058a0 <KBD_init+0x58>)
 800584c:	2240      	movs	r2, #64	; 0x40
 800584e:	641a      	str	r2, [r3, #64]	; 0x40
	keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 8005850:	4a14      	ldr	r2, [pc, #80]	; (80058a4 <KBD_init+0x5c>)
 8005852:	63da      	str	r2, [r3, #60]	; 0x3c

	keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8 ;
 8005854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005858:	6359      	str	r1, [r3, #52]	; 0x34
	keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 800585a:	631a      	str	r2, [r3, #48]	; 0x30

	keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 800585c:	2101      	movs	r1, #1
 800585e:	61d9      	str	r1, [r3, #28]
	keyboard.buttons[ BTN_UP ].port = GPIOG;
 8005860:	619a      	str	r2, [r3, #24]

	keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8005862:	2102      	movs	r1, #2
 8005864:	6299      	str	r1, [r3, #40]	; 0x28
	keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 8005866:	625a      	str	r2, [r3, #36]	; 0x24

	// DOPOLNI


	// buttons on port C
	keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
 8005868:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800586c:	611a      	str	r2, [r3, #16]
	keyboard.buttons[ BTN_ESC ].port = GPIOC;
 800586e:	4a0e      	ldr	r2, [pc, #56]	; (80058a8 <KBD_init+0x60>)
 8005870:	60da      	str	r2, [r3, #12]

	keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
 8005872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005876:	6059      	str	r1, [r3, #4]
	keyboard.buttons[ BTN_OK ].port = GPIOC;
 8005878:	601a      	str	r2, [r3, #0]

	// 2. Inicializirajte začetne vrednosti "handle" strukture za posamezne tipke v tipkovnici na sistemskem nivoju


	// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
	for(int i=0; i <NUM_OF_BTN; i++)
 800587a:	2300      	movs	r3, #0
 800587c:	e008      	b.n	8005890 <KBD_init+0x48>
		// Ne pozabite, da v "handle" strukturah za posamezne tipke hranimo tudi vrednost prejšnjega
		// in trenutnega stanja tipk! In te vrednosti je potrebno na začetku nastaviti.
		// Smiselno jih je nastaviti na tako vrednost, kot da so tipke na začetku v sproščenem,
		// nestisnjenem stanju. In tu si lahko pomagate s pomožnim naštevnim tipom button_sig_value_t.

		keyboard.buttons[i].state_new = BTN_SIG_VALUE_RELEASED;
 800587e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8005882:	0091      	lsls	r1, r2, #2
 8005884:	4a06      	ldr	r2, [pc, #24]	; (80058a0 <KBD_init+0x58>)
 8005886:	440a      	add	r2, r1
 8005888:	2101      	movs	r1, #1
 800588a:	7251      	strb	r1, [r2, #9]
		keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 800588c:	7211      	strb	r1, [r2, #8]
	for(int i=0; i <NUM_OF_BTN; i++)
 800588e:	440b      	add	r3, r1
 8005890:	2b05      	cmp	r3, #5
 8005892:	ddf4      	ble.n	800587e <KBD_init+0x36>

	// 3. Inicializiramo še medpomnilnik tipkovnice.

	// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
	// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
	BUF_init( &kbd_buf_handle, kbd_buffer, NUM_OF_BTN);
 8005894:	2206      	movs	r2, #6
 8005896:	4905      	ldr	r1, [pc, #20]	; (80058ac <KBD_init+0x64>)
 8005898:	4805      	ldr	r0, [pc, #20]	; (80058b0 <KBD_init+0x68>)
 800589a:	f7ff ff23 	bl	80056e4 <BUF_init>

}
 800589e:	bd08      	pop	{r3, pc}
 80058a0:	20000898 	.word	0x20000898
 80058a4:	48001800 	.word	0x48001800
 80058a8:	48000800 	.word	0x48000800
 80058ac:	20000878 	.word	0x20000878
 80058b0:	20000860 	.word	0x20000860

080058b4 <KBD_scan>:
// Funkcija KBD_scan() prebere trenutno stanje tipk v tipkovnici; ugotovi,
// katere tipke so bile pritisnjene ter shrani to informacijo v medpomnilnik
// tipkovnice, da se bo kasneje lahko sistem odzval na pritisk teh tipk.
//
void KBD_scan(void)
{
 80058b4:	b510      	push	{r4, lr}
	// in ugotovi, ali je bila pritisnjena. Če je bila pritisnjena,
	// shrani to informacijo v medpomnilnik tipkovnice, da se bo
	// kasneje lahko sistem odzval na pritisk te tipke.

	// Sprehodimo se preko vseh "handle" struktur za delo s posameznimi tipkami.
	for(int i=0; i < NUM_OF_BTN; i++)
 80058b6:	2400      	movs	r4, #0
 80058b8:	e002      	b.n	80058c0 <KBD_scan+0xc>
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80058ba:	2301      	movs	r3, #1
 80058bc:	e00f      	b.n	80058de <KBD_scan+0x2a>
 80058be:	3401      	adds	r4, #1
 80058c0:	2c05      	cmp	r4, #5
 80058c2:	dc1c      	bgt.n	80058fe <KBD_scan+0x4a>
	{
		// Znotraj zanke delamo trenutno z i-to tipko. Spremenljivka "i" je pomožni števec zanke.

		// Trenutno, novo stanje tipke postane sedaj staro stanje tipke
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 80058c4:	490e      	ldr	r1, [pc, #56]	; (8005900 <KBD_scan+0x4c>)
 80058c6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80058ca:	009a      	lsls	r2, r3, #2
 80058cc:	188b      	adds	r3, r1, r2
 80058ce:	7a58      	ldrb	r0, [r3, #9]
 80058d0:	7218      	strb	r0, [r3, #8]

		// in novo, trenutno stanje tipke se prebere iz ustreznega digitalne GPIO vhoda.
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 80058d2:	588a      	ldr	r2, [r1, r2]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	6912      	ldr	r2, [r2, #16]
 80058d8:	4393      	bics	r3, r2
 80058da:	d0ee      	beq.n	80058ba <KBD_scan+0x6>
 80058dc:	2300      	movs	r3, #0
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 80058e4:	0091      	lsls	r1, r2, #2
 80058e6:	4a06      	ldr	r2, [pc, #24]	; (8005900 <KBD_scan+0x4c>)
 80058e8:	440a      	add	r2, r1
 80058ea:	7253      	strb	r3, [r2, #9]



		// Sedaj je potrebno preveriti, ali se je za i-to tipko zgodil pritisk. Pri tem si pomagajte s starim in
		// trenutnim stanjem tipke. Pomaga vam lahko tudi pomožni naštevni tip button_sig_value_t.
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e6      	bne.n	80058be <KBD_scan+0xa>
 80058f0:	2801      	cmp	r0, #1
 80058f2:	d1e4      	bne.n	80058be <KBD_scan+0xa>
		{

			// In če zaznamo pritisk i-te tipke, shranimo to informacijo v medpomnilnik tipkovnice.
			// Shranimo seveda kar vrednost elementa naštevnega tipa, ki pripada obravnavani i-ti tipki.
			// In to je seveda kar vrednost pomožne spremenljivke "i". Uporabimo funkcijo BUF_store_byte().
			BUF_store_byte( &kbd_buf_handle, i);
 80058f4:	b2e1      	uxtb	r1, r4
 80058f6:	4803      	ldr	r0, [pc, #12]	; (8005904 <KBD_scan+0x50>)
 80058f8:	f7ff fefa 	bl	80056f0 <BUF_store_byte>
 80058fc:	e7df      	b.n	80058be <KBD_scan+0xa>

		}

	}

}
 80058fe:	bd10      	pop	{r4, pc}
 8005900:	20000898 	.word	0x20000898
 8005904:	20000860 	.word	0x20000860

08005908 <KBD_get_pressed_key>:
// Funkcija KBD_get_pressed_key() iz medpomnilnika tipkovnice vrne
// informacijo o tem, katera je naslednja pritisnjena tipka, na katero
// se še nismo odzvali (tj. je nismo obdelali, "sprocesirali").
//
buttons_enum_t KBD_get_pressed_key(void)
{
 8005908:	b500      	push	{lr}
 800590a:	b083      	sub	sp, #12
	// V nasprotnem primeru sklepamo, da je bilo branje elementa iz
	// medpomnilnika neuspešno, ker je medpomnilnik prazen.


	// Torej poskusimo prebrati nov element iz medpomnilnika in ga shraniti v spremenljivko "pressed_button".
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 800590c:	f10d 0107 	add.w	r1, sp, #7
 8005910:	4805      	ldr	r0, [pc, #20]	; (8005928 <KBD_get_pressed_key+0x20>)
 8005912:	f7ff ff09 	bl	8005728 <BUF_get_byte>
 8005916:	b920      	cbnz	r0, 8005922 <KBD_get_pressed_key+0x1a>
	{
		// Če je bilo branje elementa iz medpomnilnika v spremenljivko "pressed_button"
		// uspešno (tj. vrnjen BUFFER_OK), potem je vrednost, ki jo mora funkcija
		// KBD_get_pressed_key() vrniti kar enaka vrednosti pomožne spremenljivke "pressed_button".

		return pressed_button;
 8005918:	f89d 0007 	ldrb.w	r0, [sp, #7]
		// Funkcija KBD_get_pressed_key() mora vrniti kodo "BTN_NONE".

		return BTN_NONE;
	}

}
 800591c:	b003      	add	sp, #12
 800591e:	f85d fb04 	ldr.w	pc, [sp], #4
		return BTN_NONE;
 8005922:	2007      	movs	r0, #7
 8005924:	e7fa      	b.n	800591c <KBD_get_pressed_key+0x14>
 8005926:	bf00      	nop
 8005928:	20000860 	.word	0x20000860

0800592c <KBD_get_button_state>:
	// je parameter "state_new" za posamezne tipke vedno pravilno določen in smiseln.

	// Torej trenutno stanje tipke vam je že na voljo in je shranjeno v "state_new"
	// parametru ustrezne "handle" strukture tipke.

	return keyboard.buttons[button].state_new;
 800592c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005930:	4b02      	ldr	r3, [pc, #8]	; (800593c <KBD_get_button_state+0x10>)
 8005932:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
 8005936:	7a40      	ldrb	r0, [r0, #9]
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	20000898 	.word	0x20000898

08005940 <KBD_demo_toggle_LEDs_if_buttons_pressed>:
// in se na te pritiske odzove s spremembo stanja ustrezne LEDice ("toggle").
//
// PAZITE: demo funkcija ne izvaja skeniranja tipkovnice! To je potrebno
// izvesti zunaj te funkcije.
void KBD_demo_toggle_LEDs_if_buttons_pressed(void)
{
 8005940:	b508      	push	{r3, lr}

	// Pomožna spremenljivka, kjer bomo hranili informacijo o nazadnje
	// pritisnjeni tipki.
	buttons_enum_t pressed_key;

	KBD_scan();
 8005942:	f7ff ffb7 	bl	80058b4 <KBD_scan>
	// Preberemo, katera tipka je bila pritisnjena nazadnje
	// (uporabite ustrezno KBD_ funkcijo).
	pressed_key = KBD_get_pressed_key() ;
 8005946:	f7ff ffdf 	bl	8005908 <KBD_get_pressed_key>


	// Če je v pomožni spremenljivki informacija o pritisku dejanske tipke,
	while (pressed_key != BTN_NONE)
 800594a:	e004      	b.n	8005956 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x16>
		// spremenimo stanje ustrezne LEDice glede na to, katera tipka
		// je bila pritisnjena.
		switch ( pressed_key )
		{
		case BTN_UP:
			LED_toggle(LED0);
 800594c:	2000      	movs	r0, #0
 800594e:	f7ff fda5 	bl	800549c <LED_toggle>
		}


		// Preberemo, če je bila morda pritisnjena še kaka tipka,
		// ki še ni bila obdelana.
		pressed_key = KBD_get_pressed_key() ;
 8005952:	f7ff ffd9 	bl	8005908 <KBD_get_pressed_key>
	while (pressed_key != BTN_NONE)
 8005956:	2807      	cmp	r0, #7
 8005958:	d024      	beq.n	80059a4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x64>
		switch ( pressed_key )
 800595a:	2805      	cmp	r0, #5
 800595c:	d8f9      	bhi.n	8005952 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x12>
 800595e:	a301      	add	r3, pc, #4	; (adr r3, 8005964 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x24>)
 8005960:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8005964:	0800599d 	.word	0x0800599d
 8005968:	08005995 	.word	0x08005995
 800596c:	0800594d 	.word	0x0800594d
 8005970:	0800597d 	.word	0x0800597d
 8005974:	0800598d 	.word	0x0800598d
 8005978:	08005985 	.word	0x08005985
			LED_toggle(LED1);
 800597c:	2001      	movs	r0, #1
 800597e:	f7ff fd8d 	bl	800549c <LED_toggle>
			break;
 8005982:	e7e6      	b.n	8005952 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x12>
			LED_toggle(LED2);
 8005984:	2002      	movs	r0, #2
 8005986:	f7ff fd89 	bl	800549c <LED_toggle>
			break;
 800598a:	e7e2      	b.n	8005952 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x12>
			LED_toggle(LED3);
 800598c:	2003      	movs	r0, #3
 800598e:	f7ff fd85 	bl	800549c <LED_toggle>
			break;
 8005992:	e7de      	b.n	8005952 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x12>
			LED_toggle(LED4);
 8005994:	2004      	movs	r0, #4
 8005996:	f7ff fd81 	bl	800549c <LED_toggle>
			break;
 800599a:	e7da      	b.n	8005952 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x12>
			LED_toggle(LED5);
 800599c:	2005      	movs	r0, #5
 800599e:	f7ff fd7d 	bl	800549c <LED_toggle>
			break;
 80059a2:	e7d6      	b.n	8005952 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x12>

	}

}
 80059a4:	bd08      	pop	{r3, pc}
 80059a6:	bf00      	nop

080059a8 <UserPixelSetFunction>:
// ------ Definicija dveh temeljnih funkcij za risanje na zaslon -------


// Implementacija funkcije za izris enega samega piksla na zaslon.
void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80059a8:	b500      	push	{lr}
 80059aa:	b083      	sub	sp, #12
 80059ac:	9201      	str	r2, [sp, #4]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 80059ae:	2301      	movs	r3, #1
 80059b0:	461a      	mov	r2, r3
 80059b2:	f000 f95b 	bl	8005c6c <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 80059b6:	2101      	movs	r1, #1
 80059b8:	a801      	add	r0, sp, #4
 80059ba:	f000 f8d7 	bl	8005b6c <ILI9341_SendData>
}
 80059be:	b003      	add	sp, #12
 80059c0:	f85d fb04 	ldr.w	pc, [sp], #4

080059c4 <LCD_IO_Init>:
{
 80059c4:	b538      	push	{r3, r4, r5, lr}
	LCD_RST_LOW();
 80059c6:	4c05      	ldr	r4, [pc, #20]	; (80059dc <LCD_IO_Init+0x18>)
 80059c8:	2508      	movs	r5, #8
 80059ca:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 80059cc:	2078      	movs	r0, #120	; 0x78
 80059ce:	f7fc f93b 	bl	8001c48 <HAL_Delay>
	LCD_RST_HIGH();
 80059d2:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 80059d4:	2078      	movs	r0, #120	; 0x78
 80059d6:	f7fc f937 	bl	8001c48 <HAL_Delay>
}
 80059da:	bd38      	pop	{r3, r4, r5, pc}
 80059dc:	48000c00 	.word	0x48000c00

080059e0 <LCD_FillRect>:
{
 80059e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e4:	4607      	mov	r7, r0
 80059e6:	4688      	mov	r8, r1
 80059e8:	4615      	mov	r5, r2
 80059ea:	461e      	mov	r6, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 80059ec:	2002      	movs	r0, #2
 80059ee:	f000 fa09 	bl	8005e04 <ILI9341_GetParam>
 80059f2:	4604      	mov	r4, r0
	uint32_t pixel_count = w * h;  /* Dejansko št. pikslov */
 80059f4:	fb06 f305 	mul.w	r3, r6, r5
	if(pixel_count > max_count)
 80059f8:	4298      	cmp	r0, r3
 80059fa:	d300      	bcc.n	80059fe <LCD_FillRect+0x1e>
	uint32_t pixel_count = w * h;  /* Dejansko št. pikslov */
 80059fc:	461c      	mov	r4, r3
	ILI9341_SetDisplayWindow(x, y, w, h);
 80059fe:	4633      	mov	r3, r6
 8005a00:	462a      	mov	r2, r5
 8005a02:	4641      	mov	r1, r8
 8005a04:	4638      	mov	r0, r7
 8005a06:	f000 f931 	bl	8005c6c <ILI9341_SetDisplayWindow>
	ILI9341_SendRepeatedData(c, pixel_count);
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8005a10:	f000 f8f2 	bl	8005bf8 <ILI9341_SendRepeatedData>
}
 8005a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005a18 <_HW_FillFrame_>:


// Implementacija funkcije za izris pravokotnika na zaslon.
static inline UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8005a18:	b510      	push	{r4, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	4696      	mov	lr, r2
 8005a1e:	469c      	mov	ip, r3
	UG_S16 w,h;
	if (x2 > x1) w = x2 - x1;
 8005a20:	4282      	cmp	r2, r0
 8005a22:	dd0c      	ble.n	8005a3e <_HW_FillFrame_+0x26>
 8005a24:	1a12      	subs	r2, r2, r0
	else
	{
		w = x1 - x2;
		x1 = x2;
	}
	if (y2 > y1) h = y2 - y1;
 8005a26:	458c      	cmp	ip, r1
 8005a28:	dd0c      	ble.n	8005a44 <_HW_FillFrame_+0x2c>
 8005a2a:	ebac 0301 	sub.w	r3, ip, r1
	{
		h = y1 - y2;
		y1 = y2;
	}

	LCD_FillRect(x1, y1, w, h, c);
 8005a2e:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 8005a32:	9400      	str	r4, [sp, #0]
 8005a34:	f7ff ffd4 	bl	80059e0 <LCD_FillRect>

	return UG_RESULT_OK;
}
 8005a38:	2000      	movs	r0, #0
 8005a3a:	b002      	add	sp, #8
 8005a3c:	bd10      	pop	{r4, pc}
		w = x1 - x2;
 8005a3e:	1a82      	subs	r2, r0, r2
		x1 = x2;
 8005a40:	4670      	mov	r0, lr
 8005a42:	e7f0      	b.n	8005a26 <_HW_FillFrame_+0xe>
		h = y1 - y2;
 8005a44:	eba1 030c 	sub.w	r3, r1, ip
		y1 = y2;
 8005a48:	4661      	mov	r1, ip
 8005a4a:	e7f0      	b.n	8005a2e <_HW_FillFrame_+0x16>

08005a4c <LCD_ClearScreen>:
{
 8005a4c:	b510      	push	{r4, lr}
 8005a4e:	b082      	sub	sp, #8
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 8005a50:	2000      	movs	r0, #0
 8005a52:	f000 f9d7 	bl	8005e04 <ILI9341_GetParam>
 8005a56:	4604      	mov	r4, r0
 8005a58:	2001      	movs	r0, #1
 8005a5a:	f000 f9d3 	bl	8005e04 <ILI9341_GetParam>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2000      	movs	r0, #0
 8005a62:	9000      	str	r0, [sp, #0]
 8005a64:	4622      	mov	r2, r4
 8005a66:	4601      	mov	r1, r0
 8005a68:	f7ff ffba 	bl	80059e0 <LCD_FillRect>
}
 8005a6c:	b002      	add	sp, #8
 8005a6e:	bd10      	pop	{r4, pc}

08005a70 <LCD_Init>:
{
 8005a70:	b508      	push	{r3, lr}
	LCD_IO_Init();
 8005a72:	f7ff ffa7 	bl	80059c4 <LCD_IO_Init>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 8005a76:	2103      	movs	r1, #3
 8005a78:	2055      	movs	r0, #85	; 0x55
 8005a7a:	f000 f945 	bl	8005d08 <ILI9341_Init>
	ILI9341_DisplayOn();
 8005a7e:	f000 f9b4 	bl	8005dea <ILI9341_DisplayOn>
	LCD_ClearScreen();
 8005a82:	f7ff ffe3 	bl	8005a4c <LCD_ClearScreen>
	ILI9341_WaitTransfer();
 8005a86:	f000 f9ab 	bl	8005de0 <ILI9341_WaitTransfer>
	LCD_BKLT_init();
 8005a8a:	f000 f83f 	bl	8005b0c <LCD_BKLT_init>
}
 8005a8e:	bd08      	pop	{r3, pc}

08005a90 <LCD_uGUI_init>:
// ------------ Inicializacija uGUI za delo z našim zaslonom -------------------


// Inicializacija uGUI knjižnice za delo z našim LCD zaslonom.
void LCD_uGUI_init(void)
{
 8005a90:	b510      	push	{r4, lr}
	// Inicializacija uGUI knjižnice: registracija funkcije za izris enega piksla na zaslon,
	// specifikacija resolucije zaslona.
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8005a92:	2000      	movs	r0, #0
 8005a94:	f000 f9b6 	bl	8005e04 <ILI9341_GetParam>
 8005a98:	4604      	mov	r4, r0
 8005a9a:	2001      	movs	r0, #1
 8005a9c:	f000 f9b2 	bl	8005e04 <ILI9341_GetParam>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	4622      	mov	r2, r4
 8005aa4:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <LCD_uGUI_init+0x40>)
 8005aa6:	480b      	ldr	r0, [pc, #44]	; (8005ad4 <LCD_uGUI_init+0x44>)
 8005aa8:	f002 fd7e 	bl	80085a8 <UG_Init>

	// Nastavitev "default" fontov in barv za besedilo in ozadje.
	UG_FontSelect(&FONT_8X12);
 8005aac:	480a      	ldr	r0, [pc, #40]	; (8005ad8 <LCD_uGUI_init+0x48>)
 8005aae:	f002 fdaf 	bl	8008610 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 8005ab2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005ab6:	f002 fdf1 	bl	800869c <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 8005aba:	2000      	movs	r0, #0
 8005abc:	f002 fdf4 	bl	80086a8 <UG_SetBackcolor>

	// Registracija funkcij za izris pravokotnika.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 8005ac0:	4906      	ldr	r1, [pc, #24]	; (8005adc <LCD_uGUI_init+0x4c>)
 8005ac2:	2001      	movs	r0, #1
 8005ac4:	f002 ffd6 	bl	8008a74 <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8005ac8:	2001      	movs	r0, #1
 8005aca:	f002 ffe1 	bl	8008a90 <UG_DriverEnable>
}
 8005ace:	bd10      	pop	{r4, pc}
 8005ad0:	080059a9 	.word	0x080059a9
 8005ad4:	200008e0 	.word	0x200008e0
 8005ad8:	08078334 	.word	0x08078334
 8005adc:	08005a19 	.word	0x08005a19

08005ae0 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005ae0:	6341      	str	r1, [r0, #52]	; 0x34
}
 8005ae2:	4770      	bx	lr

08005ae4 <LL_TIM_OC_GetCompareCH1>:
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8005ae4:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8005ae6:	4770      	bx	lr

08005ae8 <LCD_BKLT_set_brightness>:
//
// PREMISLITE: ker smo premišljeno definirali periodo časovnika, s katerim
// generiramo PWM signal, vhodni argument funkcije kar neposredno lahko
// uporabimo za nastavitev vrednosti za primerjanje ("compare value")
void LCD_BKLT_set_brightness(uint8_t brightness)
{
 8005ae8:	b508      	push	{r3, lr}
 8005aea:	4601      	mov	r1, r0
	// Ustrezno LL funkcijo torej kličemo s pomočjo kazalca na funkcijo,
	// ki je shranjen v "handle" strukturi po sledeči predlogi:
	//
	// 		Function_pointer (function_argument_list)
	//
	return LCD_backlight.SetCompare( LCD_backlight.timer, brightness );
 8005aec:	4b02      	ldr	r3, [pc, #8]	; (8005af8 <LCD_BKLT_set_brightness+0x10>)
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	6818      	ldr	r0, [r3, #0]
 8005af2:	4790      	blx	r2

	// NAMIG: poglejte, kako smo implementirali klic pri funkciji
	// LCD_BKLT_get_brightness() zgoraj.
}
 8005af4:	bd08      	pop	{r3, pc}
 8005af6:	bf00      	nop
 8005af8:	2000096c 	.word	0x2000096c

08005afc <LCD_BKLT_on>:


// Funkcija LCD_BKLT_on() prižge osvetlitev LED zaslona in nastavi jakost
// osvetlitve na specificirano privzeto vrednost ("default value").
void LCD_BKLT_on(void)
{
 8005afc:	b508      	push	{r3, lr}
	// DOPOLNI
	LCD_BKLT_set_brightness(LCD_backlight.default_brightness);
 8005afe:	4b02      	ldr	r3, [pc, #8]	; (8005b08 <LCD_BKLT_on+0xc>)
 8005b00:	7c18      	ldrb	r0, [r3, #16]
 8005b02:	f7ff fff1 	bl	8005ae8 <LCD_BKLT_set_brightness>
}
 8005b06:	bd08      	pop	{r3, pc}
 8005b08:	2000096c 	.word	0x2000096c

08005b0c <LCD_BKLT_init>:
{
 8005b0c:	b510      	push	{r4, lr}
		LCD_backlight.timer = TIM4 ;
 8005b0e:	4c0b      	ldr	r4, [pc, #44]	; (8005b3c <LCD_BKLT_init+0x30>)
 8005b10:	4b0b      	ldr	r3, [pc, #44]	; (8005b40 <LCD_BKLT_init+0x34>)
 8005b12:	6023      	str	r3, [r4, #0]
		LCD_backlight.timer_channel = 1 ;		// namig: poglejte komentar pri implementaciji funkcije LL_TIM_CC_EnableChannel()
 8005b14:	2201      	movs	r2, #1
 8005b16:	6062      	str	r2, [r4, #4]
		LCD_backlight.SetCompare = LL_TIM_OC_SetCompareCH1;
 8005b18:	4a0a      	ldr	r2, [pc, #40]	; (8005b44 <LCD_BKLT_init+0x38>)
 8005b1a:	60a2      	str	r2, [r4, #8]
		LCD_backlight.GetCompare = LL_TIM_OC_GetCompareCH1;
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	; (8005b48 <LCD_BKLT_init+0x3c>)
 8005b1e:	60e2      	str	r2, [r4, #12]
		LCD_backlight.default_brightness = 100;		// podano v procentih
 8005b20:	2264      	movs	r2, #100	; 0x64
 8005b22:	7422      	strb	r2, [r4, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
		LCD_BKLT_on();
 8005b2c:	f7ff ffe6 	bl	8005afc <LCD_BKLT_on>
		LL_TIM_CC_EnableChannel(LCD_backlight.timer, LCD_backlight.timer_channel);
 8005b30:	6822      	ldr	r2, [r4, #0]
 8005b32:	6863      	ldr	r3, [r4, #4]
  SET_BIT(TIMx->CCER, Channels);
 8005b34:	6a11      	ldr	r1, [r2, #32]
 8005b36:	430b      	orrs	r3, r1
 8005b38:	6213      	str	r3, [r2, #32]
}
 8005b3a:	bd10      	pop	{r4, pc}
 8005b3c:	2000096c 	.word	0x2000096c
 8005b40:	40000800 	.word	0x40000800
 8005b44:	08005ae1 	.word	0x08005ae1
 8005b48:	08005ae5 	.word	0x08005ae5

08005b4c <ILI9341_SetAddress>:
void ILI9341_SetAddress(LCD_IO_Data_t *address)
{
	// Ukazni register je le eden, zato podajanje dolžine podatka ni potrebno
#ifdef hLCD_USE_DMA
	//Cakaj, ce je slucajno sredi transferja
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <ILI9341_SetAddress+0x1c>)
 8005b4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d1f9      	bne.n	8005b4c <ILI9341_SetAddress>
#endif
	FMC_BANK1_SetAddress(*address);
 8005b58:	8802      	ldrh	r2, [r0, #0]
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8005b5a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005b5e:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005b60:	f3bf 8f4f 	dsb	sy
}
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20000194 	.word	0x20000194

08005b6c <ILI9341_SendData>:
#ifdef hLCD_USE_DMA

int32_t ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	4605      	mov	r5, r0
 8005b70:	460c      	mov	r4, r1
	uint32_t len, remain;

	if (hLCDDMA.Init.PeriphInc != DMA_PINC_ENABLE)	//za Send data je potrebno omogočit peripheral increment
 8005b72:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d00b      	beq.n	8005b92 <ILI9341_SendData+0x26>
	{
		//Cakaj, ce je slucajno sredi transferja
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005b7a:	4b1d      	ldr	r3, [pc, #116]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005b7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d1f9      	bne.n	8005b7a <ILI9341_SendData+0xe>
		hLCDDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 8005b86:	481a      	ldr	r0, [pc, #104]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	60c3      	str	r3, [r0, #12]
		if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8005b8c:	f7fc ff18 	bl	80029c0 <HAL_DMA_Init>
 8005b90:	bb40      	cbnz	r0, 8005be4 <ILI9341_SendData+0x78>
			return 1;
		}
	}

	// vrni error, če DMA ni inicializiran
	if (hLCDDMA.State == HAL_DMA_STATE_RESET) return 1;
 8005b92:	4b17      	ldr	r3, [pc, #92]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005b94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b98:	b333      	cbz	r3, 8005be8 <ILI9341_SendData+0x7c>

	// poslji podatke glede na sirino vodila
	switch (hLCDDMA.Init.PeriphDataAlignment)
 8005b9a:	4b15      	ldr	r3, [pc, #84]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	b123      	cbz	r3, 8005baa <ILI9341_SendData+0x3e>
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d115      	bne.n	8005bd2 <ILI9341_SendData+0x66>
	{
		case DMA_PDATAALIGN_WORD:
			len = (length / (2*LCD_IO_DATA_WRITE_CYCLES));
 8005ba6:	0864      	lsrs	r4, r4, #1
			break;
 8005ba8:	e013      	b.n	8005bd2 <ILI9341_SendData+0x66>
		case DMA_PDATAALIGN_BYTE:
			len = 2*length/LCD_IO_DATA_WRITE_CYCLES;
 8005baa:	0064      	lsls	r4, r4, #1
			break;
 8005bac:	e011      	b.n	8005bd2 <ILI9341_SendData+0x66>
 8005bae:	4626      	mov	r6, r4
			len = DMA_MAX_LENGTH;
			remain -= DMA_MAX_LENGTH;
		}
		else
		{
			remain = 0;
 8005bb0:	2400      	movs	r4, #0
		}

		//Cakaj, ce je slucajno sredi transferja
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005bb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d1f9      	bne.n	8005bb2 <ILI9341_SendData+0x46>

		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t)data, (uint32_t)FMC_BANK1_MEM, len) != HAL_OK)
 8005bbe:	4633      	mov	r3, r6
 8005bc0:	4a0c      	ldr	r2, [pc, #48]	; (8005bf4 <ILI9341_SendData+0x88>)
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	480a      	ldr	r0, [pc, #40]	; (8005bf0 <ILI9341_SendData+0x84>)
 8005bc6:	f7fc ff67 	bl	8002a98 <HAL_DMA_Start_IT>
 8005bca:	b978      	cbnz	r0, 8005bec <ILI9341_SendData+0x80>
		{
			/* Transfer Error */
			return 1;
		}

		data += len;
 8005bcc:	eb05 0546 	add.w	r5, r5, r6, lsl #1
		len = remain;
	}
	while (remain > 0);
 8005bd0:	b15c      	cbz	r4, 8005bea <ILI9341_SendData+0x7e>
		if (len > DMA_MAX_LENGTH)
 8005bd2:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005bd6:	d3ea      	bcc.n	8005bae <ILI9341_SendData+0x42>
			remain -= DMA_MAX_LENGTH;
 8005bd8:	f5a4 447f 	sub.w	r4, r4, #65280	; 0xff00
 8005bdc:	3cff      	subs	r4, #255	; 0xff
			len = DMA_MAX_LENGTH;
 8005bde:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8005be2:	e7e6      	b.n	8005bb2 <ILI9341_SendData+0x46>
			return 1;
 8005be4:	2001      	movs	r0, #1
 8005be6:	e000      	b.n	8005bea <ILI9341_SendData+0x7e>
	if (hLCDDMA.State == HAL_DMA_STATE_RESET) return 1;
 8005be8:	2001      	movs	r0, #1

	return 0;
}
 8005bea:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
 8005bec:	2001      	movs	r0, #1
 8005bee:	e7fc      	b.n	8005bea <ILI9341_SendData+0x7e>
 8005bf0:	20000194 	.word	0x20000194
 8005bf4:	60010000 	.word	0x60010000

08005bf8 <ILI9341_SendRepeatedData>:

int32_t ILI9341_SendRepeatedData(LCD_IO_Data_t data, uint32_t num_copies)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	e004      	b.n	8005c06 <ILI9341_SendRepeatedData+0xe>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 8005bfc:	4a04      	ldr	r2, [pc, #16]	; (8005c10 <ILI9341_SendRepeatedData+0x18>)
 8005bfe:	8010      	strh	r0, [r2, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 8005c04:	3301      	adds	r3, #1
 8005c06:	428b      	cmp	r3, r1
 8005c08:	d3f8      	bcc.n	8005bfc <ILI9341_SendRepeatedData+0x4>
		FMC_BANK1_WriteData(data);

	return 0;
}
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	60010000 	.word	0x60010000

08005c14 <ILI9341_SetOrientation>:
/*!
  * @brief  Nastavi orientacijo zaslona.
  * @param  orientation zasuk zaslona, podan v obliki ILI9341_MISKO_ROTATE_{0,90,180,270}
  */
void ILI9341_SetOrientation(uint32_t orientation)
{
 8005c14:	b510      	push	{r4, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	4604      	mov	r4, r0
	ILI9341_Data_t command   = ILI9341_MAC; /* Memory Access Control */
 8005c1a:	2336      	movs	r3, #54	; 0x36
 8005c1c:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8005c20:	4b10      	ldr	r3, [pc, #64]	; (8005c64 <ILI9341_SetOrientation+0x50>)
 8005c22:	f833 3020 	ldrh.w	r3, [r3, r0, lsl #2]
 8005c26:	f8ad 3004 	strh.w	r3, [sp, #4]

	ILI9341_SetAddress(&command);
 8005c2a:	f10d 0006 	add.w	r0, sp, #6
 8005c2e:	f7ff ff8d 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(&parameter, 1);
 8005c32:	2101      	movs	r1, #1
 8005c34:	a801      	add	r0, sp, #4
 8005c36:	f7ff ff99 	bl	8005b6c <ILI9341_SendData>

	switch (orientation) {
 8005c3a:	b144      	cbz	r4, 8005c4e <ILI9341_SetOrientation+0x3a>
 8005c3c:	2c03      	cmp	r4, #3
 8005c3e:	d006      	beq.n	8005c4e <ILI9341_SetOrientation+0x3a>
		LCD.height = ILI9341_WIDTH;
		break;
	default:
	case ILI9341_MISKO_ROTATE_90:
	case ILI9341_MISKO_ROTATE_180:
		LCD.width  = ILI9341_WIDTH;
 8005c40:	4b09      	ldr	r3, [pc, #36]	; (8005c68 <ILI9341_SetOrientation+0x54>)
 8005c42:	22f0      	movs	r2, #240	; 0xf0
 8005c44:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_HEIGHT;
 8005c46:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c4a:	605a      	str	r2, [r3, #4]
		break;
 8005c4c:	e005      	b.n	8005c5a <ILI9341_SetOrientation+0x46>
		LCD.width  = ILI9341_HEIGHT;
 8005c4e:	4b06      	ldr	r3, [pc, #24]	; (8005c68 <ILI9341_SetOrientation+0x54>)
 8005c50:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005c54:	601a      	str	r2, [r3, #0]
		LCD.height = ILI9341_WIDTH;
 8005c56:	22f0      	movs	r2, #240	; 0xf0
 8005c58:	605a      	str	r2, [r3, #4]
	}
	LCD.orientation = orientation;
 8005c5a:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <ILI9341_SetOrientation+0x54>)
 8005c5c:	609c      	str	r4, [r3, #8]
}
 8005c5e:	b002      	add	sp, #8
 8005c60:	bd10      	pop	{r4, pc}
 8005c62:	bf00      	nop
 8005c64:	0800c2c0 	.word	0x0800c2c0
 8005c68:	20000980 	.word	0x20000980

08005c6c <ILI9341_SetDisplayWindow>:
  * @param  Ypos   y koordinata izhodišča
  * @param  Height višina okna
  * @param  Width  širina okna
  */
void ILI9341_SetDisplayWindow(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8005c6c:	b530      	push	{r4, r5, lr}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	460c      	mov	r4, r1
 8005c72:	461d      	mov	r5, r3
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[4];

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	command = ILI9341_CASET;
 8005c74:	232a      	movs	r3, #42	; 0x2a
 8005c76:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 8005c7a:	f3c0 230f 	ubfx	r3, r0, #8, #16
 8005c7e:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8005c82:	b2c3      	uxtb	r3, r0
 8005c84:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8005c88:	1883      	adds	r3, r0, r2
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8005c90:	f8ad 3008 	strh.w	r3, [sp, #8]
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8005c94:	fa12 f080 	uxtah	r0, r2, r0
 8005c98:	b280      	uxth	r0, r0
 8005c9a:	3801      	subs	r0, #1
 8005c9c:	b2c0      	uxtb	r0, r0
 8005c9e:	f8ad 000a 	strh.w	r0, [sp, #10]
	ILI9341_SetAddress(&command);
 8005ca2:	f10d 000e 	add.w	r0, sp, #14
 8005ca6:	f7ff ff51 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 8005caa:	2104      	movs	r1, #4
 8005cac:	eb0d 0001 	add.w	r0, sp, r1
 8005cb0:	f7ff ff5c 	bl	8005b6c <ILI9341_SendData>

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	command = ILI9341_RASET;
 8005cb4:	232b      	movs	r3, #43	; 0x2b
 8005cb6:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 8005cba:	f3c4 230f 	ubfx	r3, r4, #8, #16
 8005cbe:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8005cc2:	b2e3      	uxtb	r3, r4
 8005cc4:	f8ad 3006 	strh.w	r3, [sp, #6]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8005cc8:	1962      	adds	r2, r4, r5
 8005cca:	3a01      	subs	r2, #1
 8005ccc:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8005cd0:	f8ad 2008 	strh.w	r2, [sp, #8]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8005cd4:	fa15 f484 	uxtah	r4, r5, r4
 8005cd8:	b2a4      	uxth	r4, r4
 8005cda:	3c01      	subs	r4, #1
 8005cdc:	b2e4      	uxtb	r4, r4
 8005cde:	f8ad 400a 	strh.w	r4, [sp, #10]
	ILI9341_SetAddress(&command);
 8005ce2:	f10d 000e 	add.w	r0, sp, #14
 8005ce6:	f7ff ff31 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 4);
 8005cea:	2104      	movs	r1, #4
 8005cec:	eb0d 0001 	add.w	r0, sp, r1
 8005cf0:	f7ff ff3c 	bl	8005b6c <ILI9341_SendData>

	// Zapusti nastavitev okna v načinu za vpis barve v GRAM
	command = ILI9341_GRAM;
 8005cf4:	232c      	movs	r3, #44	; 0x2c
 8005cf6:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8005cfa:	f10d 000e 	add.w	r0, sp, #14
 8005cfe:	f7ff ff25 	bl	8005b4c <ILI9341_SetAddress>
}
 8005d02:	b005      	add	sp, #20
 8005d04:	bd30      	pop	{r4, r5, pc}
	...

08005d08 <ILI9341_Init>:
  * @param  color_space želen barvni prostor (ILI9341_COLORSPACE_RBG{565,666})
  * @param  orientation orientacija zaslona
  * @internal
  */
void ILI9341_Init(uint32_t color_space, uint32_t orientation)
{
 8005d08:	b530      	push	{r4, r5, lr}
 8005d0a:	b085      	sub	sp, #20
 8005d0c:	4604      	mov	r4, r0
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[5];

	ILI9341_SetOrientation(orientation);
 8005d0e:	4608      	mov	r0, r1
 8005d10:	f7ff ff80 	bl	8005c14 <ILI9341_SetOrientation>
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8005d14:	4a31      	ldr	r2, [pc, #196]	; (8005ddc <ILI9341_Init+0xd4>)
 8005d16:	6853      	ldr	r3, [r2, #4]
 8005d18:	6812      	ldr	r2, [r2, #0]
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	f7ff ffa5 	bl	8005c6c <ILI9341_SetDisplayWindow>

	// Sleep out
	command = ILI9341_SLEEP_OUT;
 8005d22:	2311      	movs	r3, #17
 8005d24:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8005d28:	f10d 000e 	add.w	r0, sp, #14
 8005d2c:	f7ff ff0e 	bl	8005b4c <ILI9341_SetAddress>
	HAL_Delay(200);
 8005d30:	20c8      	movs	r0, #200	; 0xc8
 8005d32:	f7fb ff89 	bl	8001c48 <HAL_Delay>

	// Display Normal mode
	command = ILI9341_NORMAL_MODE_ON;
 8005d36:	2313      	movs	r3, #19
 8005d38:	f8ad 300e 	strh.w	r3, [sp, #14]
	ILI9341_SetAddress(&command);
 8005d3c:	f10d 000e 	add.w	r0, sp, #14
 8005d40:	f7ff ff04 	bl	8005b4c <ILI9341_SetAddress>
	HAL_Delay(100);
 8005d44:	2064      	movs	r0, #100	; 0x64
 8005d46:	f7fb ff7f 	bl	8001c48 <HAL_Delay>

	// Pixel Format
	command = ILI9341_PIXEL_FORMAT;
 8005d4a:	233a      	movs	r3, #58	; 0x3a
 8005d4c:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = color_space;
 8005d50:	f8ad 4004 	strh.w	r4, [sp, #4]
	ILI9341_SetAddress(&command);
 8005d54:	f10d 000e 	add.w	r0, sp, #14
 8005d58:	f7ff fef8 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	a801      	add	r0, sp, #4
 8005d60:	f7ff ff04 	bl	8005b6c <ILI9341_SendData>
	HAL_Delay(100);
 8005d64:	2064      	movs	r0, #100	; 0x64
 8005d66:	f7fb ff6f 	bl	8001c48 <HAL_Delay>

	// Update Interface control
	command = ILI9341_INTERFACE;
 8005d6a:	23f6      	movs	r3, #246	; 0xf6
 8005d6c:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0x49;
 8005d70:	2349      	movs	r3, #73	; 0x49
 8005d72:	f8ad 3004 	strh.w	r3, [sp, #4]
	parameter[1] = 0;
 8005d76:	2400      	movs	r4, #0
 8005d78:	f8ad 4006 	strh.w	r4, [sp, #6]
	parameter[2] = 0x20;
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	f8ad 3008 	strh.w	r3, [sp, #8]
	ILI9341_SetAddress(&command);
 8005d82:	f10d 000e 	add.w	r0, sp, #14
 8005d86:	f7ff fee1 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 3);
 8005d8a:	2103      	movs	r1, #3
 8005d8c:	a801      	add	r0, sp, #4
 8005d8e:	f7ff feed 	bl	8005b6c <ILI9341_SendData>

	// Enable TE
	command = ILI9341_TEON;
 8005d92:	2335      	movs	r3, #53	; 0x35
 8005d94:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 1; /* VSYNC + HSYNC */
 8005d98:	2501      	movs	r5, #1
 8005d9a:	f8ad 5004 	strh.w	r5, [sp, #4]
	ILI9341_SetAddress(&command);
 8005d9e:	f10d 000e 	add.w	r0, sp, #14
 8005da2:	f7ff fed3 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 1);
 8005da6:	4629      	mov	r1, r5
 8005da8:	a801      	add	r0, sp, #4
 8005daa:	f7ff fedf 	bl	8005b6c <ILI9341_SendData>
	HAL_Delay(100);
 8005dae:	2064      	movs	r0, #100	; 0x64
 8005db0:	f7fb ff4a 	bl	8001c48 <HAL_Delay>

	// Enable TE scan line
	command = ILI9341_SET_TEAR_SCANLINE;
 8005db4:	2344      	movs	r3, #68	; 0x44
 8005db6:	f8ad 300e 	strh.w	r3, [sp, #14]
	parameter[0] = 0;
 8005dba:	f8ad 4004 	strh.w	r4, [sp, #4]
	parameter[1] = 0;
 8005dbe:	f8ad 4006 	strh.w	r4, [sp, #6]
	ILI9341_SetAddress(&command);
 8005dc2:	f10d 000e 	add.w	r0, sp, #14
 8005dc6:	f7ff fec1 	bl	8005b4c <ILI9341_SetAddress>
	ILI9341_SendData(parameter, 2);
 8005dca:	2102      	movs	r1, #2
 8005dcc:	a801      	add	r0, sp, #4
 8005dce:	f7ff fecd 	bl	8005b6c <ILI9341_SendData>
	HAL_Delay(100);
 8005dd2:	2064      	movs	r0, #100	; 0x64
 8005dd4:	f7fb ff38 	bl	8001c48 <HAL_Delay>
}
 8005dd8:	b005      	add	sp, #20
 8005dda:	bd30      	pop	{r4, r5, pc}
 8005ddc:	20000980 	.word	0x20000980

08005de0 <ILI9341_WaitTransfer>:

//! @brief Počakaj na prenos podatka FSMC->Ili9341. Možne dodelave.
void ILI9341_WaitTransfer()
{
 8005de0:	b508      	push	{r3, lr}
	// AddresSetupTime + 1 + DataSetupTime + 1. Glej `fmc.c'.
	// načeloma 6 + 1 + 5 + 1 ms (13 ms), vendar ni zadosti
	HAL_Delay(50);
 8005de2:	2032      	movs	r0, #50	; 0x32
 8005de4:	f7fb ff30 	bl	8001c48 <HAL_Delay>
}
 8005de8:	bd08      	pop	{r3, pc}

08005dea <ILI9341_DisplayOn>:

//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
 8005dea:	b500      	push	{lr}
 8005dec:	b083      	sub	sp, #12
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
 8005dee:	2329      	movs	r3, #41	; 0x29
 8005df0:	f8ad 3006 	strh.w	r3, [sp, #6]
	ILI9341_SetAddress(&command);
 8005df4:	f10d 0006 	add.w	r0, sp, #6
 8005df8:	f7ff fea8 	bl	8005b4c <ILI9341_SetAddress>
}
 8005dfc:	b003      	add	sp, #12
 8005dfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08005e04 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 8005e04:	2803      	cmp	r0, #3
 8005e06:	d803      	bhi.n	8005e10 <ILI9341_GetParam+0xc>
 8005e08:	e8df f000 	tbb	[pc, r0]
 8005e0c:	0a0d0704 	.word	0x0a0d0704
 8005e10:	2000      	movs	r0, #0
 8005e12:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <ILI9341_GetParam+0x28>)
 8005e16:	6818      	ldr	r0, [r3, #0]
		break;
 8005e18:	4770      	bx	lr
	case LCD_HEIGHT:
		value = LCD.height;
 8005e1a:	4b04      	ldr	r3, [pc, #16]	; (8005e2c <ILI9341_GetParam+0x28>)
 8005e1c:	6858      	ldr	r0, [r3, #4]
		break;
 8005e1e:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 8005e20:	4b02      	ldr	r3, [pc, #8]	; (8005e2c <ILI9341_GetParam+0x28>)
 8005e22:	6898      	ldr	r0, [r3, #8]
		break;
 8005e24:	4770      	bx	lr
		value = ILI9341_AREA;
 8005e26:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
	default:
		break;
	}

	return value;
}
 8005e2a:	4770      	bx	lr
 8005e2c:	20000980 	.word	0x20000980

08005e30 <generateMap>:
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>

void generateMap(){
 8005e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	466d      	mov	r5, sp
	uint8_t walkx = 12;
	uint8_t walky = 12;
	const uint8_t part_size = 24;
//	uint8_t part[24][24] = {1};
	uint8_t part[part_size][part_size];
 8005e38:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8005e3c:	466c      	mov	r4, sp
	for(int y=0;y<24;y++){
 8005e3e:	2100      	movs	r1, #0
 8005e40:	e009      	b.n	8005e56 <generateMap+0x26>
	        for(int x=0;x<24;x++){
	            part[y][x] = 1;
 8005e42:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005e46:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005e4a:	2001      	movs	r0, #1
 8005e4c:	54d0      	strb	r0, [r2, r3]
	        for(int x=0;x<24;x++){
 8005e4e:	4403      	add	r3, r0
 8005e50:	2b17      	cmp	r3, #23
 8005e52:	ddf6      	ble.n	8005e42 <generateMap+0x12>
	for(int y=0;y<24;y++){
 8005e54:	3101      	adds	r1, #1
 8005e56:	2917      	cmp	r1, #23
 8005e58:	dc01      	bgt.n	8005e5e <generateMap+0x2e>
	        for(int x=0;x<24;x++){
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e7f8      	b.n	8005e50 <generateMap+0x20>
	        }
		}
	memset(map, 1, sizeof(map));
 8005e5e:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8005e62:	2101      	movs	r1, #1
 8005e64:	4846      	ldr	r0, [pc, #280]	; (8005f80 <generateMap+0x150>)
 8005e66:	f002 fe61 	bl	8008b2c <memset>
	const int max_i = 250;
	int dir;
	int dirx, diry;
	for(int i=0;i<max_i;i++){
 8005e6a:	2600      	movs	r6, #0
	uint8_t walky = 12;
 8005e6c:	f04f 090c 	mov.w	r9, #12
	uint8_t walkx = 12;
 8005e70:	46c8      	mov	r8, r9
	for(int i=0;i<max_i;i++){
 8005e72:	e010      	b.n	8005e96 <generateMap+0x66>
		dir = rand()%4;

		switch(dir){
 8005e74:	4618      	mov	r0, r3
 8005e76:	f04f 33ff 	mov.w	r3, #4294967295

		default:
			return;

		}
		if(walkx+dirx < 1 || walky+diry < 1 || walkx+dirx >= part_size || walky+diry >= part_size) i--;
 8005e7a:	eb08 0103 	add.w	r1, r8, r3
 8005e7e:	2900      	cmp	r1, #0
 8005e80:	dd07      	ble.n	8005e92 <generateMap+0x62>
 8005e82:	eb09 0200 	add.w	r2, r9, r0
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	dd03      	ble.n	8005e92 <generateMap+0x62>
 8005e8a:	2917      	cmp	r1, #23
 8005e8c:	dc01      	bgt.n	8005e92 <generateMap+0x62>
 8005e8e:	2a17      	cmp	r2, #23
 8005e90:	dd23      	ble.n	8005eda <generateMap+0xaa>
 8005e92:	3e01      	subs	r6, #1
	for(int i=0;i<max_i;i++){
 8005e94:	3601      	adds	r6, #1
 8005e96:	2ef9      	cmp	r6, #249	; 0xf9
 8005e98:	dc2e      	bgt.n	8005ef8 <generateMap+0xc8>
		dir = rand()%4;
 8005e9a:	f002 fe7d 	bl	8008b98 <rand>
 8005e9e:	4242      	negs	r2, r0
 8005ea0:	f000 0303 	and.w	r3, r0, #3
 8005ea4:	f002 0203 	and.w	r2, r2, #3
 8005ea8:	bf58      	it	pl
 8005eaa:	4253      	negpl	r3, r2
		switch(dir){
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d865      	bhi.n	8005f7c <generateMap+0x14c>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <generateMap+0x88>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005e75 	.word	0x08005e75
 8005ebc:	08005ed7 	.word	0x08005ed7
 8005ec0:	08005ec9 	.word	0x08005ec9
 8005ec4:	08005ecf 	.word	0x08005ecf
			diry = 1;
 8005ec8:	2001      	movs	r0, #1
			dirx = 0;
 8005eca:	2300      	movs	r3, #0
			break;
 8005ecc:	e7d5      	b.n	8005e7a <generateMap+0x4a>
			diry = -1;
 8005ece:	f04f 30ff 	mov.w	r0, #4294967295
			dirx = 0;
 8005ed2:	2300      	movs	r3, #0
			break;
 8005ed4:	e7d1      	b.n	8005e7a <generateMap+0x4a>
			diry = 0;
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	e7cf      	b.n	8005e7a <generateMap+0x4a>
		else{
			walkx += dirx;
 8005eda:	4498      	add	r8, r3
 8005edc:	fa5f f888 	uxtb.w	r8, r8
			walky += diry;
 8005ee0:	4481      	add	r9, r0
 8005ee2:	fa5f f989 	uxtb.w	r9, r9
			part[walky][walkx] = 0;
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	b2c9      	uxtb	r1, r1
 8005eea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005eee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	5453      	strb	r3, [r2, r1]
 8005ef6:	e7cd      	b.n	8005e94 <generateMap+0x64>


	}

	//prekopira level v mapo
	for(int y=0;y<24;y++){
 8005ef8:	2100      	movs	r1, #0
 8005efa:	e012      	b.n	8005f22 <generateMap+0xf2>
		for(int x=0;x<24;x++){
			map[y][25+x] = part[y][x];
 8005efc:	f103 0019 	add.w	r0, r3, #25
 8005f00:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8005f04:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8005f08:	f812 c003 	ldrb.w	ip, [r2, r3]
 8005f0c:	4a1c      	ldr	r2, [pc, #112]	; (8005f80 <generateMap+0x150>)
 8005f0e:	f04f 0e32 	mov.w	lr, #50	; 0x32
 8005f12:	fb0e 2201 	mla	r2, lr, r1, r2
 8005f16:	f802 c000 	strb.w	ip, [r2, r0]
		for(int x=0;x<24;x++){
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	2b17      	cmp	r3, #23
 8005f1e:	dded      	ble.n	8005efc <generateMap+0xcc>
	for(int y=0;y<24;y++){
 8005f20:	3101      	adds	r1, #1
 8005f22:	2917      	cmp	r1, #23
 8005f24:	dc01      	bgt.n	8005f2a <generateMap+0xfa>
		for(int x=0;x<24;x++){
 8005f26:	2300      	movs	r3, #0
 8005f28:	e7f8      	b.n	8005f1c <generateMap+0xec>
		}
	}
	//genenrira zacetni prostor
	for(int y=1;y<26;y++){
 8005f2a:	2101      	movs	r1, #1
 8005f2c:	e007      	b.n	8005f3e <generateMap+0x10e>
		for(int x=1;x<26;x++){
			if(x > 17 && x < 25 && y > 6 && y < 18)
 8005f2e:	f1a3 0212 	sub.w	r2, r3, #18
 8005f32:	2a06      	cmp	r2, #6
 8005f34:	d907      	bls.n	8005f46 <generateMap+0x116>
		for(int x=1;x<26;x++){
 8005f36:	3301      	adds	r3, #1
 8005f38:	2b19      	cmp	r3, #25
 8005f3a:	ddf8      	ble.n	8005f2e <generateMap+0xfe>
	for(int y=1;y<26;y++){
 8005f3c:	3101      	adds	r1, #1
 8005f3e:	2919      	cmp	r1, #25
 8005f40:	dc0c      	bgt.n	8005f5c <generateMap+0x12c>
		for(int x=1;x<26;x++){
 8005f42:	2301      	movs	r3, #1
 8005f44:	e7f8      	b.n	8005f38 <generateMap+0x108>
			if(x > 17 && x < 25 && y > 6 && y < 18)
 8005f46:	2906      	cmp	r1, #6
 8005f48:	ddf5      	ble.n	8005f36 <generateMap+0x106>
 8005f4a:	2911      	cmp	r1, #17
 8005f4c:	dcf3      	bgt.n	8005f36 <generateMap+0x106>
			map[y][x] = 0;
 8005f4e:	4a0c      	ldr	r2, [pc, #48]	; (8005f80 <generateMap+0x150>)
 8005f50:	2032      	movs	r0, #50	; 0x32
 8005f52:	fb00 2201 	mla	r2, r0, r1, r2
 8005f56:	2000      	movs	r0, #0
 8005f58:	54d0      	strb	r0, [r2, r3]
 8005f5a:	e7ec      	b.n	8005f36 <generateMap+0x106>
		}
	}
	//generira pot do levela
	int pathx = 25, pathy = 12;
	for(int i=0;i<13;i++ ){
 8005f5c:	2200      	movs	r2, #0
	int pathx = 25, pathy = 12;
 8005f5e:	2119      	movs	r1, #25
 8005f60:	e006      	b.n	8005f70 <generateMap+0x140>
		map[pathy][pathx] = 0;
 8005f62:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <generateMap+0x150>)
 8005f64:	440b      	add	r3, r1
 8005f66:	2000      	movs	r0, #0
 8005f68:	f883 0258 	strb.w	r0, [r3, #600]	; 0x258
		pathx++;
 8005f6c:	3101      	adds	r1, #1
	for(int i=0;i<13;i++ ){
 8005f6e:	3201      	adds	r2, #1
 8005f70:	2a0c      	cmp	r2, #12
 8005f72:	ddf6      	ble.n	8005f62 <generateMap+0x132>
 8005f74:	46ad      	mov	sp, r5
	}
}
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return;
 8005f7c:	46ad      	mov	sp, r5
 8005f7e:	e7fa      	b.n	8005f76 <generateMap+0x146>
 8005f80:	20000994 	.word	0x20000994

08005f84 <drawMiniMap>:

void drawMiniMap(){
 8005f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int dpx = ((int)px/Blocksize);
 8005f88:	4b4f      	ldr	r3, [pc, #316]	; (80060c8 <drawMiniMap+0x144>)
 8005f8a:	edd3 7a00 	vldr	s15, [r3]
 8005f8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005f92:	ee17 6a90 	vmov	r6, s15
 8005f96:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <drawMiniMap+0x148>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	fb96 f6f3 	sdiv	r6, r6, r3
	int dpy = ((int)py/Blocksize);
 8005f9e:	4a4c      	ldr	r2, [pc, #304]	; (80060d0 <drawMiniMap+0x14c>)
 8005fa0:	edd2 7a00 	vldr	s15, [r2]
 8005fa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005fa8:	ee17 7a90 	vmov	r7, s15
 8005fac:	fb97 f7f3 	sdiv	r7, r7, r3
	for(int y=0;y<map_height*2;y+=2){
 8005fb0:	2500      	movs	r5, #0
 8005fb2:	e083      	b.n	80060bc <drawMiniMap+0x138>
		for(int x=0;x<map_width*2;x+=2){
			uint16_t color;
			if(y == 0 || x == 0 || y == map_height*2-2 || x == map_width*2-2){
				color = create_rgb(255, 71, 71);
 8005fb4:	2247      	movs	r2, #71	; 0x47
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	20ff      	movs	r0, #255	; 0xff
 8005fba:	f000 f989 	bl	80062d0 <create_rgb>
 8005fbe:	b280      	uxth	r0, r0
					int spy = sp[i].y / Blocksize;
					if(x/2== spx && y/2 == spy) color = create_rgb(255, 0, 0);
				}
			}
			//UG_FillFrame(x*3, y*3, x*3+3, y*3+3, color);
			pixels[y*240 + x + 70] = color;
 8005fc0:	ebc5 1305 	rsb	r3, r5, r5, lsl #4
 8005fc4:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8005fc8:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8005fcc:	4a41      	ldr	r2, [pc, #260]	; (80060d4 <drawMiniMap+0x150>)
 8005fce:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
			pixels[y*240 + x+1 + 70] = color;
 8005fd2:	3347      	adds	r3, #71	; 0x47
 8005fd4:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
			pixels[(y+1)*240 + x + 70] = color;
 8005fd8:	1c6b      	adds	r3, r5, #1
 8005fda:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8005fde:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8005fe2:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8005fe6:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
			pixels[(y+1)*240 + x+1 + 70] = color;
 8005fea:	3347      	adds	r3, #71	; 0x47
 8005fec:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		for(int x=0;x<map_width*2;x+=2){
 8005ff0:	3402      	adds	r4, #2
 8005ff2:	2c63      	cmp	r4, #99	; 0x63
 8005ff4:	dc61      	bgt.n	80060ba <drawMiniMap+0x136>
			if(y == 0 || x == 0 || y == map_height*2-2 || x == map_width*2-2){
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	d0dc      	beq.n	8005fb4 <drawMiniMap+0x30>
 8005ffa:	2c00      	cmp	r4, #0
 8005ffc:	d0da      	beq.n	8005fb4 <drawMiniMap+0x30>
 8005ffe:	2d30      	cmp	r5, #48	; 0x30
 8006000:	d0d8      	beq.n	8005fb4 <drawMiniMap+0x30>
 8006002:	2c62      	cmp	r4, #98	; 0x62
 8006004:	d0d6      	beq.n	8005fb4 <drawMiniMap+0x30>
				if(map[y/2][x/2] == 0) color = create_rgb(255, 255, 255);
 8006006:	eb05 7ad5 	add.w	sl, r5, r5, lsr #31
 800600a:	ea4f 0a6a 	mov.w	sl, sl, asr #1
 800600e:	eb04 79d4 	add.w	r9, r4, r4, lsr #31
 8006012:	ea4f 0969 	mov.w	r9, r9, asr #1
 8006016:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <drawMiniMap+0x154>)
 8006018:	2232      	movs	r2, #50	; 0x32
 800601a:	fb02 330a 	mla	r3, r2, sl, r3
 800601e:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006022:	b953      	cbnz	r3, 800603a <drawMiniMap+0xb6>
 8006024:	22ff      	movs	r2, #255	; 0xff
 8006026:	4611      	mov	r1, r2
 8006028:	4610      	mov	r0, r2
 800602a:	f000 f951 	bl	80062d0 <create_rgb>
 800602e:	b280      	uxth	r0, r0
				if(x/2 == dpx && y/2 == dpy) color = create_rgb(0, 0, 0);
 8006030:	45b1      	cmp	r9, r6
 8006032:	d009      	beq.n	8006048 <drawMiniMap+0xc4>
void drawMiniMap(){
 8006034:	f04f 0800 	mov.w	r8, #0
 8006038:	e011      	b.n	800605e <drawMiniMap+0xda>
				else color = create_rgb(71, 71, 71);
 800603a:	2247      	movs	r2, #71	; 0x47
 800603c:	4611      	mov	r1, r2
 800603e:	4610      	mov	r0, r2
 8006040:	f000 f946 	bl	80062d0 <create_rgb>
 8006044:	b280      	uxth	r0, r0
 8006046:	e7f3      	b.n	8006030 <drawMiniMap+0xac>
				if(x/2 == dpx && y/2 == dpy) color = create_rgb(0, 0, 0);
 8006048:	45ba      	cmp	sl, r7
 800604a:	d1f3      	bne.n	8006034 <drawMiniMap+0xb0>
 800604c:	2200      	movs	r2, #0
 800604e:	4611      	mov	r1, r2
 8006050:	4610      	mov	r0, r2
 8006052:	f000 f93d 	bl	80062d0 <create_rgb>
 8006056:	b280      	uxth	r0, r0
 8006058:	e7ec      	b.n	8006034 <drawMiniMap+0xb0>
				for(int i=0;i<num_of_enemys;i++){
 800605a:	f108 0801 	add.w	r8, r8, #1
 800605e:	f1b8 0f03 	cmp.w	r8, #3
 8006062:	dcad      	bgt.n	8005fc0 <drawMiniMap+0x3c>
					if(sp[i].life < 1) continue;
 8006064:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <drawMiniMap+0x158>)
 8006066:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800606a:	fb02 3308 	mla	r3, r2, r8, r3
 800606e:	7e1b      	ldrb	r3, [r3, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f2      	beq.n	800605a <drawMiniMap+0xd6>
					int spx = sp[i].x / Blocksize;
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <drawMiniMap+0x158>)
 8006076:	fb02 3308 	mla	r3, r2, r8, r3
 800607a:	edd3 6a02 	vldr	s13, [r3, #8]
 800607e:	4a13      	ldr	r2, [pc, #76]	; (80060cc <drawMiniMap+0x148>)
 8006080:	edd2 7a00 	vldr	s15, [r2]
 8006084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int spy = sp[i].y / Blocksize;
 8006090:	ed93 6a03 	vldr	s12, [r3, #12]
 8006094:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8006098:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					if(x/2== spx && y/2 == spy) color = create_rgb(255, 0, 0);
 800609c:	ee17 3a10 	vmov	r3, s14
 80060a0:	4599      	cmp	r9, r3
 80060a2:	d1da      	bne.n	800605a <drawMiniMap+0xd6>
 80060a4:	ee16 3a90 	vmov	r3, s13
 80060a8:	459a      	cmp	sl, r3
 80060aa:	d1d6      	bne.n	800605a <drawMiniMap+0xd6>
 80060ac:	2200      	movs	r2, #0
 80060ae:	4611      	mov	r1, r2
 80060b0:	20ff      	movs	r0, #255	; 0xff
 80060b2:	f000 f90d 	bl	80062d0 <create_rgb>
 80060b6:	b280      	uxth	r0, r0
 80060b8:	e7cf      	b.n	800605a <drawMiniMap+0xd6>
	for(int y=0;y<map_height*2;y+=2){
 80060ba:	3502      	adds	r5, #2
 80060bc:	2d31      	cmp	r5, #49	; 0x31
 80060be:	dc01      	bgt.n	80060c4 <drawMiniMap+0x140>
		for(int x=0;x<map_width*2;x+=2){
 80060c0:	2400      	movs	r4, #0
 80060c2:	e796      	b.n	8005ff2 <drawMiniMap+0x6e>
	int dpy = ((int)py/Blocksize) * 2;
	pixels[dpy*map_width + dpx] = create_rgb(0, 0, 0);
	pixels[dpy*map_width + dpx+1] = create_rgb(0, 0, 0);
	pixels[(dpy+1)*map_width*2 + dpx] = create_rgb(0, 0, 0);
	pixels[(dpy+1)*map_width*2 + dpx+1] = create_rgb(0, 0, 0);*/
}
 80060c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060c8:	20000018 	.word	0x20000018
 80060cc:	2000000c 	.word	0x2000000c
 80060d0:	2000001c 	.word	0x2000001c
 80060d4:	20000e78 	.word	0x20000e78
 80060d8:	20000994 	.word	0x20000994
 80060dc:	2001d090 	.word	0x2001d090

080060e0 <PSERV_init>:

static periodic_services_handle_t periodic_services;

void PSERV_init(void)
{
	periodic_services.TIM = TIM6;
 80060e0:	4b03      	ldr	r3, [pc, #12]	; (80060f0 <PSERV_init+0x10>)
 80060e2:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <PSERV_init+0x14>)
 80060e4:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	f042 0201 	orr.w	r2, r2, #1
 80060ec:	601a      	str	r2, [r3, #0]
	LL_TIM_EnableCounter(TIM6);
}
 80060ee:	4770      	bx	lr
 80060f0:	40001000 	.word	0x40001000
 80060f4:	2000098c 	.word	0x2000098c

080060f8 <PSERV_enable>:

void PSERV_enable(void)
{
	LL_TIM_EnableUpdateEvent(periodic_services.TIM);
 80060f8:	4b03      	ldr	r3, [pc, #12]	; (8006108 <PSERV_enable+0x10>)
 80060fa:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 80060fc:	6813      	ldr	r3, [r2, #0]
 80060fe:	f023 0302 	bic.w	r3, r3, #2
 8006102:	6013      	str	r3, [r2, #0]
}
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	2000098c 	.word	0x2000098c

0800610c <PSERV_run_services_Callback>:
{
	LL_TIM_DisableUpdateEvent(periodic_services.TIM);
}

void PSERV_run_services_Callback(void)
{
 800610c:	b508      	push	{r3, lr}
	KBD_demo_toggle_LEDs_if_buttons_pressed();
 800610e:	f7ff fc17 	bl	8005940 <KBD_demo_toggle_LEDs_if_buttons_pressed>
}
 8006112:	bd08      	pop	{r3, pc}

08006114 <narisi_velik_kvadrat>:
#include <math.h>
#include <stdio.h>


void narisi_velik_kvadrat(int x, int y, __uint16_t c)
{
 8006114:	b410      	push	{r4}
	int ay = y*240;
 8006116:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 800611a:	ea4f 1c03 	mov.w	ip, r3, lsl #4
	if(ay+x+2 < 57600){
 800611e:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 8006122:	f24e 04fd 	movw	r4, #57597	; 0xe0fd
 8006126:	42a3      	cmp	r3, r4
 8006128:	dc0a      	bgt.n	8006140 <narisi_velik_kvadrat+0x2c>
		pixels[ay + (x)] = c;
 800612a:	4c1c      	ldr	r4, [pc, #112]	; (800619c <narisi_velik_kvadrat+0x88>)
 800612c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+1)] = c;
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	4463      	add	r3, ip
 8006134:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+2)] = c;
 8006138:	1c83      	adds	r3, r0, #2
 800613a:	4463      	add	r3, ip
 800613c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}

	ay = (y+1)*240;
 8006140:	1c4b      	adds	r3, r1, #1
 8006142:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8006146:	ea4f 1c03 	mov.w	ip, r3, lsl #4
	if(ay+x+2 < 57600){
 800614a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 800614e:	f24e 04fd 	movw	r4, #57597	; 0xe0fd
 8006152:	42a3      	cmp	r3, r4
 8006154:	dc0a      	bgt.n	800616c <narisi_velik_kvadrat+0x58>
		pixels[ay + (x)] = c;
 8006156:	4c11      	ldr	r4, [pc, #68]	; (800619c <narisi_velik_kvadrat+0x88>)
 8006158:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+1)] = c;
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	4463      	add	r3, ip
 8006160:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+2)] = c;
 8006164:	1c83      	adds	r3, r0, #2
 8006166:	4463      	add	r3, ip
 8006168:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}

	ay = (y+2) * 240;
 800616c:	3102      	adds	r1, #2
 800616e:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8006172:	010c      	lsls	r4, r1, #4
	if(ay+x+2 < 57600){
 8006174:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006178:	f24e 03fd 	movw	r3, #57597	; 0xe0fd
 800617c:	4299      	cmp	r1, r3
 800617e:	dc09      	bgt.n	8006194 <narisi_velik_kvadrat+0x80>
		pixels[ay + (x)] = c;
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <narisi_velik_kvadrat+0x88>)
 8006182:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		pixels[ay + (x+1)] = c;
 8006186:	3001      	adds	r0, #1
 8006188:	4420      	add	r0, r4
 800618a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		pixels[ay + (x)+2] = c;
 800618e:	3102      	adds	r1, #2
 8006190:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	}

}
 8006194:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000e78 	.word	0x20000e78

080061a0 <narisi_velik_kvadrat_stene>:
void narisi_velik_kvadrat_stene(int x, int y, __uint16_t c)
{
 80061a0:	b410      	push	{r4}
	int ay;
	ay = y*240;
 80061a2:	ebc1 1301 	rsb	r3, r1, r1, lsl #4
 80061a6:	ea4f 1c03 	mov.w	ip, r3, lsl #4
	if(ay+x+4 < 57600){
 80061aa:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80061ae:	f24e 04fb 	movw	r4, #57595	; 0xe0fb
 80061b2:	42a3      	cmp	r3, r4
 80061b4:	dc12      	bgt.n	80061dc <narisi_velik_kvadrat_stene+0x3c>
		pixels[ay + (x)] = c;
 80061b6:	4c27      	ldr	r4, [pc, #156]	; (8006254 <narisi_velik_kvadrat_stene+0xb4>)
 80061b8:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+1)] = c;
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	4463      	add	r3, ip
 80061c0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+2)] = c;
 80061c4:	1c83      	adds	r3, r0, #2
 80061c6:	4463      	add	r3, ip
 80061c8:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+3)] = c;
 80061cc:	1cc3      	adds	r3, r0, #3
 80061ce:	4463      	add	r3, ip
 80061d0:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+4)] = c;
 80061d4:	1d03      	adds	r3, r0, #4
 80061d6:	449c      	add	ip, r3
 80061d8:	f824 201c 	strh.w	r2, [r4, ip, lsl #1]
	}

	ay = (y+1)*240;
 80061dc:	1c4b      	adds	r3, r1, #1
 80061de:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80061e2:	ea4f 1c03 	mov.w	ip, r3, lsl #4
	if(ay + x + 4 < 57600){
 80061e6:	eb00 1303 	add.w	r3, r0, r3, lsl #4
 80061ea:	f24e 04fb 	movw	r4, #57595	; 0xe0fb
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	dc12      	bgt.n	8006218 <narisi_velik_kvadrat_stene+0x78>
		pixels[ay + (x)] = c;
 80061f2:	4c18      	ldr	r4, [pc, #96]	; (8006254 <narisi_velik_kvadrat_stene+0xb4>)
 80061f4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+1)] = c;
 80061f8:	1c43      	adds	r3, r0, #1
 80061fa:	4463      	add	r3, ip
 80061fc:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+2)] = c;
 8006200:	1c83      	adds	r3, r0, #2
 8006202:	4463      	add	r3, ip
 8006204:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+3)] = c;
 8006208:	1cc3      	adds	r3, r0, #3
 800620a:	4463      	add	r3, ip
 800620c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
		pixels[ay + (x+4)] = c;
 8006210:	1d03      	adds	r3, r0, #4
 8006212:	449c      	add	ip, r3
 8006214:	f824 201c 	strh.w	r2, [r4, ip, lsl #1]
	}

	ay = (y+2) * 240;
 8006218:	3102      	adds	r1, #2
 800621a:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 800621e:	010c      	lsls	r4, r1, #4
	if(ay + x + 4 < 57600){
 8006220:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006224:	f24e 03fb 	movw	r3, #57595	; 0xe0fb
 8006228:	4299      	cmp	r1, r3
 800622a:	dc0f      	bgt.n	800624c <narisi_velik_kvadrat_stene+0xac>
		pixels[ay + (x)] = c;
 800622c:	4b09      	ldr	r3, [pc, #36]	; (8006254 <narisi_velik_kvadrat_stene+0xb4>)
 800622e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
		pixels[ay + (x+1)] = c;
 8006232:	3001      	adds	r0, #1
 8006234:	4420      	add	r0, r4
 8006236:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		pixels[ay + (x)+2] = c;
 800623a:	1c88      	adds	r0, r1, #2
 800623c:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		pixels[ay + (x)+3] = c;
 8006240:	1cc8      	adds	r0, r1, #3
 8006242:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
		pixels[ay + (x)+4] = c;
 8006246:	3104      	adds	r1, #4
 8006248:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	}
}
 800624c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	20000e78 	.word	0x20000e78

08006258 <popraviKot>:
		TIM5->CCR2 = 0;
		TIMUT_stopwatch_set_time_mark(&score);
	}
}

float popraviKot(float kot) {
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	ed2d 8b02 	vpush	{d8}
 800625e:	eeb0 8a40 	vmov.f32	s16, s0
	if (kot < 0) return kot + 2 * PI;
 8006262:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626a:	d410      	bmi.n	800628e <popraviKot+0x36>
	else if (kot > 2 * PI) return kot - 2 * PI;
 800626c:	ee10 0a10 	vmov	r0, s0
 8006270:	f7fa f992 	bl	8000598 <__aeabi_f2d>
 8006274:	4604      	mov	r4, r0
 8006276:	460d      	mov	r5, r1
 8006278:	a313      	add	r3, pc, #76	; (adr r3, 80062c8 <popraviKot+0x70>)
 800627a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627e:	f7fa fc73 	bl	8000b68 <__aeabi_dcmpgt>
 8006282:	b990      	cbnz	r0, 80062aa <popraviKot+0x52>
	return kot;
 8006284:	eeb0 0a48 	vmov.f32	s0, s16
}
 8006288:	ecbd 8b02 	vpop	{d8}
 800628c:	bd38      	pop	{r3, r4, r5, pc}
	if (kot < 0) return kot + 2 * PI;
 800628e:	ee10 0a10 	vmov	r0, s0
 8006292:	f7fa f981 	bl	8000598 <__aeabi_f2d>
 8006296:	a30c      	add	r3, pc, #48	; (adr r3, 80062c8 <popraviKot+0x70>)
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7fa f81e 	bl	80002dc <__adddf3>
 80062a0:	f7fa fcaa 	bl	8000bf8 <__aeabi_d2f>
 80062a4:	ee00 0a10 	vmov	s0, r0
 80062a8:	e7ee      	b.n	8006288 <popraviKot+0x30>
	else if (kot > 2 * PI) return kot - 2 * PI;
 80062aa:	a307      	add	r3, pc, #28	; (adr r3, 80062c8 <popraviKot+0x70>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	4620      	mov	r0, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	f7fa f810 	bl	80002d8 <__aeabi_dsub>
 80062b8:	f7fa fc9e 	bl	8000bf8 <__aeabi_d2f>
 80062bc:	ee00 0a10 	vmov	s0, r0
 80062c0:	e7e2      	b.n	8006288 <popraviKot+0x30>
 80062c2:	bf00      	nop
 80062c4:	f3af 8000 	nop.w
 80062c8:	f01b866e 	.word	0xf01b866e
 80062cc:	401921f9 	.word	0x401921f9

080062d0 <create_rgb>:
unsigned long create_rgb(int r, int g, int b)
{
	return ((((r>>3)<<11) | ((g>>2)<<5) | (b>>3)));
 80062d0:	10c0      	asrs	r0, r0, #3
 80062d2:	1089      	asrs	r1, r1, #2
 80062d4:	0149      	lsls	r1, r1, #5
 80062d6:	ea41 20c0 	orr.w	r0, r1, r0, lsl #11
}
 80062da:	ea40 00e2 	orr.w	r0, r0, r2, asr #3
 80062de:	4770      	bx	lr

080062e0 <reset>:
void reset() {
 80062e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062e4:	b084      	sub	sp, #16
	LEDs_off(255);
 80062e6:	20ff      	movs	r0, #255	; 0xff
 80062e8:	f7ff f90c 	bl	8005504 <LEDs_off>
	UG_COLOR red = create_rgb(255, 0, 0);
 80062ec:	2200      	movs	r2, #0
 80062ee:	4611      	mov	r1, r2
 80062f0:	20ff      	movs	r0, #255	; 0xff
 80062f2:	f7ff ffed 	bl	80062d0 <create_rgb>
 80062f6:	4606      	mov	r6, r0
	int counter = 0;
 80062f8:	2500      	movs	r5, #0
	while (counter < 700) {
 80062fa:	e02c      	b.n	8006356 <reset+0x76>
		x = rand() % 233 + 40;
 80062fc:	f002 fc4c 	bl	8008b98 <rand>
 8006300:	4f18      	ldr	r7, [pc, #96]	; (8006364 <reset+0x84>)
 8006302:	fb87 2300 	smull	r2, r3, r7, r0
 8006306:	181a      	adds	r2, r3, r0
 8006308:	17c3      	asrs	r3, r0, #31
 800630a:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
 800630e:	f04f 08e9 	mov.w	r8, #233	; 0xe9
 8006312:	fb08 0313 	mls	r3, r8, r3, r0
 8006316:	b29c      	uxth	r4, r3
 8006318:	3428      	adds	r4, #40	; 0x28
 800631a:	b2a4      	uxth	r4, r4
		y = rand() % 233;
 800631c:	f002 fc3c 	bl	8008b98 <rand>
 8006320:	fb87 3700 	smull	r3, r7, r7, r0
 8006324:	4407      	add	r7, r0
 8006326:	17c1      	asrs	r1, r0, #31
 8006328:	ebc1 11e7 	rsb	r1, r1, r7, asr #7
 800632c:	fb08 0111 	mls	r1, r8, r1, r0
		UG_FillFrame(x, y, x+8, y+8, red);
 8006330:	b289      	uxth	r1, r1
 8006332:	9600      	str	r6, [sp, #0]
 8006334:	f101 0308 	add.w	r3, r1, #8
 8006338:	f104 0208 	add.w	r2, r4, #8
 800633c:	4620      	mov	r0, r4
 800633e:	f002 f979 	bl	8008634 <UG_FillFrame>
		TIMUT_stopwatch_set_time_mark(&sw_reset);
 8006342:	a802      	add	r0, sp, #8
 8006344:	f002 f916 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
		while(!TIMUT_stopwatch_has_X_ms_passed(&sw_reset, 1));
 8006348:	2101      	movs	r1, #1
 800634a:	a802      	add	r0, sp, #8
 800634c:	f002 f920 	bl	8008590 <TIMUT_stopwatch_has_X_ms_passed>
 8006350:	2800      	cmp	r0, #0
 8006352:	d0f9      	beq.n	8006348 <reset+0x68>
		counter++;
 8006354:	3501      	adds	r5, #1
	while (counter < 700) {
 8006356:	f5b5 7f2f 	cmp.w	r5, #700	; 0x2bc
 800635a:	dbcf      	blt.n	80062fc <reset+0x1c>
}
 800635c:	b004      	add	sp, #16
 800635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006362:	bf00      	nop
 8006364:	8ca29c05 	.word	0x8ca29c05

08006368 <visibility>:

//FUNKCIJA ZA RACUNANJE VIDLJIVOSTI
float visibility(float distance)
{
 8006368:	b508      	push	{r3, lr}
 800636a:	ee10 0a10 	vmov	r0, s0
    return exp(-pow(distance * density, gradient));
 800636e:	f7fa f913 	bl	8000598 <__aeabi_f2d>
 8006372:	a311      	add	r3, pc, #68	; (adr r3, 80063b8 <visibility+0x50>)
 8006374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006378:	f7fa f966 	bl	8000648 <__aeabi_dmul>
 800637c:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 80063b0 <visibility+0x48>
 8006380:	ec41 0b10 	vmov	d0, r0, r1
 8006384:	f004 f8b0 	bl	800a4e8 <pow>
 8006388:	ec53 2b10 	vmov	r2, r3, d0
 800638c:	ee10 0a10 	vmov	r0, s0
 8006390:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006394:	ec41 0b10 	vmov	d0, r0, r1
 8006398:	f004 f85e 	bl	800a458 <exp>
 800639c:	ec51 0b10 	vmov	r0, r1, d0
 80063a0:	f7fa fc2a 	bl	8000bf8 <__aeabi_d2f>
}
 80063a4:	ee00 0a10 	vmov	s0, r0
 80063a8:	bd08      	pop	{r3, pc}
 80063aa:	bf00      	nop
 80063ac:	f3af 8000 	nop.w
 80063b0:	00000000 	.word	0x00000000
 80063b4:	40140000 	.word	0x40140000
 80063b8:	7bb2fec5 	.word	0x7bb2fec5
 80063bc:	3fa0b0f2 	.word	0x3fa0b0f2

080063c0 <map_range>:

float map_range(float min1, float max1, float min2, float max2, float value)
{
	return min2 + (max2 - min2) * ((value - min1) / (max1 - min1));
 80063c0:	ee71 1ac1 	vsub.f32	s3, s3, s2
 80063c4:	ee32 2a40 	vsub.f32	s4, s4, s0
 80063c8:	ee30 0ac0 	vsub.f32	s0, s1, s0
 80063cc:	eec2 7a00 	vdiv.f32	s15, s4, s0
 80063d0:	ee61 1aa7 	vmul.f32	s3, s3, s15
}
 80063d4:	ee31 0a81 	vadd.f32	s0, s3, s2
 80063d8:	4770      	bx	lr
 80063da:	0000      	movs	r0, r0
 80063dc:	0000      	movs	r0, r0
	...

080063e0 <moveBlood>:
		}
	}
	gun_button_prev = KBD_get_button_state(BTN_OK);
}

void moveBlood(Blood *blood) {
 80063e0:	b510      	push	{r4, lr}
 80063e2:	ed2d 8b02 	vpush	{d8}
 80063e6:	4604      	mov	r4, r0
	blood->posx += blood->velx;
 80063e8:	edd0 7a00 	vldr	s15, [r0]
 80063ec:	ed90 7a02 	vldr	s14, [r0, #8]
 80063f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063f4:	edc0 7a00 	vstr	s15, [r0]
	blood->posy += blood->vely;
 80063f8:	edd0 8a03 	vldr	s17, [r0, #12]
 80063fc:	edd0 7a01 	vldr	s15, [r0, #4]
 8006400:	ee77 7aa8 	vadd.f32	s15, s15, s17
 8006404:	edc0 7a01 	vstr	s15, [r0, #4]
	blood->velx *= friction;
 8006408:	ee17 0a10 	vmov	r0, s14
 800640c:	f7fa f8c4 	bl	8000598 <__aeabi_f2d>
 8006410:	a319      	add	r3, pc, #100	; (adr r3, 8006478 <moveBlood+0x98>)
 8006412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006416:	f7fa f917 	bl	8000648 <__aeabi_dmul>
 800641a:	f7fa fbed 	bl	8000bf8 <__aeabi_d2f>
 800641e:	ee08 0a10 	vmov	s16, r0
 8006422:	60a0      	str	r0, [r4, #8]
	blood->vely *= friction;
 8006424:	ee18 0a90 	vmov	r0, s17
 8006428:	f7fa f8b6 	bl	8000598 <__aeabi_f2d>
 800642c:	a312      	add	r3, pc, #72	; (adr r3, 8006478 <moveBlood+0x98>)
 800642e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006432:	f7fa f909 	bl	8000648 <__aeabi_dmul>
 8006436:	f7fa fbdf 	bl	8000bf8 <__aeabi_d2f>
 800643a:	ee07 0a90 	vmov	s15, r0
 800643e:	60e0      	str	r0, [r4, #12]
	blood->vely += gravity;
 8006440:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006444:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006448:	edc4 7a03 	vstr	s15, [r4, #12]
	if (blood->velx > maxspeed) blood->velx = maxspeed;
 800644c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006450:	eeb4 8ac7 	vcmpe.f32	s16, s14
 8006454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006458:	dd01      	ble.n	800645e <moveBlood+0x7e>
 800645a:	ed84 7a02 	vstr	s14, [r4, #8]
	if (blood->vely > maxspeed) blood->vely = maxspeed;
 800645e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8006462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646a:	dd01      	ble.n	8006470 <moveBlood+0x90>
 800646c:	ed84 7a03 	vstr	s14, [r4, #12]
}
 8006470:	ecbd 8b02 	vpop	{d8}
 8006474:	bd10      	pop	{r4, pc}
 8006476:	bf00      	nop
 8006478:	66666666 	.word	0x66666666
 800647c:	3fee6666 	.word	0x3fee6666

08006480 <initBlood>:

void initBlood(Blood blood[], uint8_t x, uint8_t y, float dist) {
 8006480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006484:	ed2d 8b02 	vpush	{d8}
 8006488:	b083      	sub	sp, #12
 800648a:	4606      	mov	r6, r0
 800648c:	ee08 1a10 	vmov	s16, r1
 8006490:	ee08 2a90 	vmov	s17, r2
 8006494:	ee10 0a10 	vmov	r0, s0
    float scale = 1 / (dist*0.05);
 8006498:	f7fa f87e 	bl	8000598 <__aeabi_f2d>
 800649c:	a341      	add	r3, pc, #260	; (adr r3, 80065a4 <initBlood+0x124>)
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f7fa f8d1 	bl	8000648 <__aeabi_dmul>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	2000      	movs	r0, #0
 80064ac:	4938      	ldr	r1, [pc, #224]	; (8006590 <initBlood+0x110>)
 80064ae:	f7fa f9f5 	bl	800089c <__aeabi_ddiv>
 80064b2:	f7fa fba1 	bl	8000bf8 <__aeabi_d2f>
 80064b6:	4607      	mov	r7, r0
    if(scale > 1) scale = 1;
 80064b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80064bc:	ee07 0a10 	vmov	s14, r0
 80064c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064c8:	dd01      	ble.n	80064ce <initBlood+0x4e>
 80064ca:	ee17 7a90 	vmov	r7, s15
    for (int i = 0;i < num_of_blood_particles;i++) {
 80064ce:	f04f 0b00 	mov.w	fp, #0
 80064d2:	e055      	b.n	8006580 <initBlood+0x100>
        blood[i].posx = x;
 80064d4:	eb0b 0a8b 	add.w	sl, fp, fp, lsl #2
 80064d8:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
 80064dc:	eef8 7a48 	vcvt.f32.u32	s15, s16
 80064e0:	edca 7a00 	vstr	s15, [sl]
        blood[i].posy = y;
 80064e4:	eef8 7a68 	vcvt.f32.u32	s15, s17
 80064e8:	edca 7a01 	vstr	s15, [sl, #4]
        int range = 100;
        blood[i].velx = (((double)(rand() % (12 * range)) / (range)) - 6)*scale;
 80064ec:	f002 fb54 	bl	8008b98 <rand>
 80064f0:	4a28      	ldr	r2, [pc, #160]	; (8006594 <initBlood+0x114>)
 80064f2:	fb82 3200 	smull	r3, r2, r2, r0
 80064f6:	17c3      	asrs	r3, r0, #31
 80064f8:	ebc3 13e2 	rsb	r3, r3, r2, asr #7
 80064fc:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8006500:	fb02 0013 	mls	r0, r2, r3, r0
 8006504:	f7fa f836 	bl	8000574 <__aeabi_i2d>
 8006508:	2200      	movs	r2, #0
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <initBlood+0x118>)
 800650c:	f7fa f9c6 	bl	800089c <__aeabi_ddiv>
 8006510:	2200      	movs	r2, #0
 8006512:	4b22      	ldr	r3, [pc, #136]	; (800659c <initBlood+0x11c>)
 8006514:	f7f9 fee0 	bl	80002d8 <__aeabi_dsub>
 8006518:	e9cd 0100 	strd	r0, r1, [sp]
 800651c:	4638      	mov	r0, r7
 800651e:	f7fa f83b 	bl	8000598 <__aeabi_f2d>
 8006522:	4604      	mov	r4, r0
 8006524:	460d      	mov	r5, r1
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800652e:	f7fa f88b 	bl	8000648 <__aeabi_dmul>
 8006532:	f7fa fb61 	bl	8000bf8 <__aeabi_d2f>
 8006536:	f8ca 0008 	str.w	r0, [sl, #8]
        blood[i].vely = (-(double)(rand() % (5 * range)) / (range)) * scale;
 800653a:	f002 fb2d 	bl	8008b98 <rand>
 800653e:	4a18      	ldr	r2, [pc, #96]	; (80065a0 <initBlood+0x120>)
 8006540:	fb82 3200 	smull	r3, r2, r2, r0
 8006544:	17c3      	asrs	r3, r0, #31
 8006546:	ebc3 1362 	rsb	r3, r3, r2, asr #5
 800654a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800654e:	fb02 0013 	mls	r0, r2, r3, r0
 8006552:	f7fa f80f 	bl	8000574 <__aeabi_i2d>
 8006556:	f101 4900 	add.w	r9, r1, #2147483648	; 0x80000000
 800655a:	2200      	movs	r2, #0
 800655c:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <initBlood+0x118>)
 800655e:	4649      	mov	r1, r9
 8006560:	f7fa f99c 	bl	800089c <__aeabi_ddiv>
 8006564:	4602      	mov	r2, r0
 8006566:	460b      	mov	r3, r1
 8006568:	4620      	mov	r0, r4
 800656a:	4629      	mov	r1, r5
 800656c:	f7fa f86c 	bl	8000648 <__aeabi_dmul>
 8006570:	f7fa fb42 	bl	8000bf8 <__aeabi_d2f>
 8006574:	f8ca 000c 	str.w	r0, [sl, #12]
        blood[i].active = 1;
 8006578:	2301      	movs	r3, #1
 800657a:	f88a 3010 	strb.w	r3, [sl, #16]
    for (int i = 0;i < num_of_blood_particles;i++) {
 800657e:	449b      	add	fp, r3
 8006580:	f1bb 0f13 	cmp.w	fp, #19
 8006584:	dda6      	ble.n	80064d4 <initBlood+0x54>
    }
}
 8006586:	b003      	add	sp, #12
 8006588:	ecbd 8b02 	vpop	{d8}
 800658c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006590:	3ff00000 	.word	0x3ff00000
 8006594:	1b4e81b5 	.word	0x1b4e81b5
 8006598:	40590000 	.word	0x40590000
 800659c:	40180000 	.word	0x40180000
 80065a0:	10624dd3 	.word	0x10624dd3
 80065a4:	9999999a 	.word	0x9999999a
 80065a8:	3fa99999 	.word	0x3fa99999

080065ac <drawBlood>:

void drawBlood(Blood blood, float sx, float sy, float dist) {
 80065ac:	b084      	sub	sp, #16
 80065ae:	b508      	push	{r3, lr}
 80065b0:	ed2d 8b02 	vpush	{d8}
 80065b4:	f10d 0c10 	add.w	ip, sp, #16
 80065b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float realx = blood.posx + sx;
 80065bc:	ed9d 8a04 	vldr	s16, [sp, #16]
 80065c0:	ee38 8a00 	vadd.f32	s16, s16, s0
	float realy = blood.posy + sy;
 80065c4:	eddd 7a05 	vldr	s15, [sp, #20]
 80065c8:	ee77 8aa0 	vadd.f32	s17, s15, s1
	float vis = visibility(dist);
 80065cc:	eeb0 0a41 	vmov.f32	s0, s2
 80065d0:	f7ff feca 	bl	8006368 <visibility>
	//219, 43, 18
	UG_COLOR c = create_rgb(255*vis, 0, 0);
 80065d4:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8006644 <drawBlood+0x98>
 80065d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80065dc:	2200      	movs	r2, #0
 80065de:	4611      	mov	r1, r2
 80065e0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80065e4:	ee17 0a90 	vmov	r0, s15
 80065e8:	f7ff fe72 	bl	80062d0 <create_rgb>
	if(realx < 40 || realx > 280 || realy < 0 || realy > 240) return;
 80065ec:	eddf 7a16 	vldr	s15, [pc, #88]	; 8006648 <drawBlood+0x9c>
 80065f0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80065f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f8:	d412      	bmi.n	8006620 <drawBlood+0x74>
 80065fa:	eddf 7a14 	vldr	s15, [pc, #80]	; 800664c <drawBlood+0xa0>
 80065fe:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006606:	dc0b      	bgt.n	8006620 <drawBlood+0x74>
 8006608:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800660c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006610:	d406      	bmi.n	8006620 <drawBlood+0x74>
 8006612:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006650 <drawBlood+0xa4>
 8006616:	eef4 8ae7 	vcmpe.f32	s17, s15
 800661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661e:	dd05      	ble.n	800662c <drawBlood+0x80>
    //glColor3ub(237, 126, 109);
    //glPointSize(25*scale);
	//glBegin(GL_POINTS);
	//glVertex2f(blood.posx + sx,blood.posy + sy);
	//glEnd();
}
 8006620:	ecbd 8b02 	vpop	{d8}
 8006624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006628:	b004      	add	sp, #16
 800662a:	4770      	bx	lr
	narisi_velik_kvadrat(realx,realy, c);
 800662c:	b282      	uxth	r2, r0
 800662e:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8006632:	ee17 1a90 	vmov	r1, s15
 8006636:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800663a:	ee17 0a90 	vmov	r0, s15
 800663e:	f7ff fd69 	bl	8006114 <narisi_velik_kvadrat>
 8006642:	e7ed      	b.n	8006620 <drawBlood+0x74>
 8006644:	437f0000 	.word	0x437f0000
 8006648:	42200000 	.word	0x42200000
 800664c:	438c0000 	.word	0x438c0000
 8006650:	43700000 	.word	0x43700000

08006654 <draw_full_screen_image>:
	const float Q31_MIX_F = -1.0F;
	return (int)roundf(scalbnf(fmaxf(fminf(input, Q31_MAX_F), Q31_MIX_F), 31));
}
*/

void draw_full_screen_image(const uint8_t *img){
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	4606      	mov	r6, r0
	int pixel = 0;
	uint8_t red, green, blue;
	for(int y=0;y<240;y++){
 8006658:	2700      	movs	r7, #0
 800665a:	e013      	b.n	8006684 <draw_full_screen_image+0x30>
		for(int x=0;x<240;x++){
			pixel = ((y*240) + x) * 3;
 800665c:	ebc7 1407 	rsb	r4, r7, r7, lsl #4
 8006660:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 8006664:	eb04 0344 	add.w	r3, r4, r4, lsl #1
			red = img[pixel + 0];
			green = img[pixel + 1];
 8006668:	1c59      	adds	r1, r3, #1
			blue = img[pixel + 2];
 800666a:	1c9a      	adds	r2, r3, #2
			pixels[y*240 + x] = create_rgb(red, green, blue);
 800666c:	5cb2      	ldrb	r2, [r6, r2]
 800666e:	5c71      	ldrb	r1, [r6, r1]
 8006670:	5cf0      	ldrb	r0, [r6, r3]
 8006672:	f7ff fe2d 	bl	80062d0 <create_rgb>
 8006676:	4b0b      	ldr	r3, [pc, #44]	; (80066a4 <draw_full_screen_image+0x50>)
 8006678:	f823 0014 	strh.w	r0, [r3, r4, lsl #1]
		for(int x=0;x<240;x++){
 800667c:	3501      	adds	r5, #1
 800667e:	2def      	cmp	r5, #239	; 0xef
 8006680:	ddec      	ble.n	800665c <draw_full_screen_image+0x8>
	for(int y=0;y<240;y++){
 8006682:	3701      	adds	r7, #1
 8006684:	2fef      	cmp	r7, #239	; 0xef
 8006686:	dc01      	bgt.n	800668c <draw_full_screen_image+0x38>
		for(int x=0;x<240;x++){
 8006688:	2500      	movs	r5, #0
 800668a:	e7f8      	b.n	800667e <draw_full_screen_image+0x2a>
		}
	}
	ILI9341_SetDisplayWindow(40, 0, 240, 240);
 800668c:	23f0      	movs	r3, #240	; 0xf0
 800668e:	461a      	mov	r2, r3
 8006690:	2100      	movs	r1, #0
 8006692:	2028      	movs	r0, #40	; 0x28
 8006694:	f7ff faea 	bl	8005c6c <ILI9341_SetDisplayWindow>
	ILI9341_SendData(pixels, 57600);
 8006698:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800669c:	4801      	ldr	r0, [pc, #4]	; (80066a4 <draw_full_screen_image+0x50>)
 800669e:	f7ff fa65 	bl	8005b6c <ILI9341_SendData>
}
 80066a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a4:	20000e78 	.word	0x20000e78

080066a8 <draw_full_screen_image_without_red>:

void draw_full_screen_image_without_red(const uint8_t *img){
 80066a8:	b570      	push	{r4, r5, r6, lr}
 80066aa:	4605      	mov	r5, r0
	int pixel = 0;
	uint8_t red, green, blue;
	//int offset = 55*240;
	for(int y=0;y<130;y++){
 80066ac:	2600      	movs	r6, #0
 80066ae:	e020      	b.n	80066f2 <draw_full_screen_image_without_red+0x4a>
			pixel = ((y*240) + x) * 3;
			red = img[pixel + 0];
			green = img[pixel + 1];
			blue = img[pixel + 2];
			if(red != 255 || green != 255 || blue != 255)
				pixels[(y+55)*240 + x] = create_rgb(red, green, blue);
 80066b0:	f7ff fe0e 	bl	80062d0 <create_rgb>
 80066b4:	f106 0337 	add.w	r3, r6, #55	; 0x37
 80066b8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80066bc:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80066c0:	4a14      	ldr	r2, [pc, #80]	; (8006714 <draw_full_screen_image_without_red+0x6c>)
 80066c2:	f822 0013 	strh.w	r0, [r2, r3, lsl #1]
		for(int x=0;x<240;x++){
 80066c6:	3401      	adds	r4, #1
 80066c8:	2cef      	cmp	r4, #239	; 0xef
 80066ca:	dc11      	bgt.n	80066f0 <draw_full_screen_image_without_red+0x48>
			pixel = ((y*240) + x) * 3;
 80066cc:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
 80066d0:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80066d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			red = img[pixel + 0];
 80066d8:	5ce8      	ldrb	r0, [r5, r3]
			green = img[pixel + 1];
 80066da:	1c5a      	adds	r2, r3, #1
 80066dc:	5ca9      	ldrb	r1, [r5, r2]
			blue = img[pixel + 2];
 80066de:	3302      	adds	r3, #2
 80066e0:	5cea      	ldrb	r2, [r5, r3]
			if(red != 255 || green != 255 || blue != 255)
 80066e2:	28ff      	cmp	r0, #255	; 0xff
 80066e4:	d1e4      	bne.n	80066b0 <draw_full_screen_image_without_red+0x8>
 80066e6:	29ff      	cmp	r1, #255	; 0xff
 80066e8:	d1e2      	bne.n	80066b0 <draw_full_screen_image_without_red+0x8>
 80066ea:	2aff      	cmp	r2, #255	; 0xff
 80066ec:	d1e0      	bne.n	80066b0 <draw_full_screen_image_without_red+0x8>
 80066ee:	e7ea      	b.n	80066c6 <draw_full_screen_image_without_red+0x1e>
	for(int y=0;y<130;y++){
 80066f0:	3601      	adds	r6, #1
 80066f2:	2e81      	cmp	r6, #129	; 0x81
 80066f4:	dc01      	bgt.n	80066fa <draw_full_screen_image_without_red+0x52>
		for(int x=0;x<240;x++){
 80066f6:	2400      	movs	r4, #0
 80066f8:	e7e6      	b.n	80066c8 <draw_full_screen_image_without_red+0x20>
		}
	}
	ILI9341_SetDisplayWindow(40, 0, 240, 240);
 80066fa:	23f0      	movs	r3, #240	; 0xf0
 80066fc:	461a      	mov	r2, r3
 80066fe:	2100      	movs	r1, #0
 8006700:	2028      	movs	r0, #40	; 0x28
 8006702:	f7ff fab3 	bl	8005c6c <ILI9341_SetDisplayWindow>
	ILI9341_SendData(pixels, 57600);
 8006706:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800670a:	4802      	ldr	r0, [pc, #8]	; (8006714 <draw_full_screen_image_without_red+0x6c>)
 800670c:	f7ff fa2e 	bl	8005b6c <ILI9341_SendData>
}
 8006710:	bd70      	pop	{r4, r5, r6, pc}
 8006712:	bf00      	nop
 8006714:	20000e78 	.word	0x20000e78

08006718 <create_level_one_sprites>:
	handle_score(curr_score);
	reset();
	init();
}

void create_level_one_sprites(){
 8006718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800671c:	b083      	sub	sp, #12
	int tmpx, tmpy, done = 0;
	for(int i=0;i<num_of_enemys;i++){
 800671e:	2300      	movs	r3, #0
 8006720:	9301      	str	r3, [sp, #4]
 8006722:	e0a6      	b.n	8006872 <create_level_one_sprites+0x15a>
		while(1){
			tmpx = rand()%23+25;
			tmpy = rand()%22+1;
			if(map[tmpy][tmpx] == 0){
				done = 1;
				for(int i=0;i<num_of_enemys;i++){
 8006724:	3501      	adds	r5, #1
 8006726:	2d03      	cmp	r5, #3
 8006728:	dc48      	bgt.n	80067bc <create_level_one_sprites+0xa4>
					if((tmpx+0.5) * Blocksize == sp_original[i].x && (tmpy+0.5) * Blocksize == sp_original[i].y) done = 0;
 800672a:	4620      	mov	r0, r4
 800672c:	f7f9 ff22 	bl	8000574 <__aeabi_i2d>
 8006730:	2200      	movs	r2, #0
 8006732:	4b5e      	ldr	r3, [pc, #376]	; (80068ac <create_level_one_sprites+0x194>)
 8006734:	f7f9 fdd2 	bl	80002dc <__adddf3>
 8006738:	4680      	mov	r8, r0
 800673a:	4689      	mov	r9, r1
 800673c:	4b5c      	ldr	r3, [pc, #368]	; (80068b0 <create_level_one_sprites+0x198>)
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	f7f9 ff18 	bl	8000574 <__aeabi_i2d>
 8006744:	4606      	mov	r6, r0
 8006746:	460f      	mov	r7, r1
 8006748:	4602      	mov	r2, r0
 800674a:	460b      	mov	r3, r1
 800674c:	4640      	mov	r0, r8
 800674e:	4649      	mov	r1, r9
 8006750:	f7f9 ff7a 	bl	8000648 <__aeabi_dmul>
 8006754:	4680      	mov	r8, r0
 8006756:	4689      	mov	r9, r1
 8006758:	4b56      	ldr	r3, [pc, #344]	; (80068b4 <create_level_one_sprites+0x19c>)
 800675a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800675e:	fb02 3305 	mla	r3, r2, r5, r3
 8006762:	6898      	ldr	r0, [r3, #8]
 8006764:	f7f9 ff18 	bl	8000598 <__aeabi_f2d>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4640      	mov	r0, r8
 800676e:	4649      	mov	r1, r9
 8006770:	f7fa f9d2 	bl	8000b18 <__aeabi_dcmpeq>
 8006774:	2800      	cmp	r0, #0
 8006776:	d0d5      	beq.n	8006724 <create_level_one_sprites+0xc>
 8006778:	4650      	mov	r0, sl
 800677a:	f7f9 fefb 	bl	8000574 <__aeabi_i2d>
 800677e:	2200      	movs	r2, #0
 8006780:	4b4a      	ldr	r3, [pc, #296]	; (80068ac <create_level_one_sprites+0x194>)
 8006782:	f7f9 fdab 	bl	80002dc <__adddf3>
 8006786:	4602      	mov	r2, r0
 8006788:	460b      	mov	r3, r1
 800678a:	4630      	mov	r0, r6
 800678c:	4639      	mov	r1, r7
 800678e:	f7f9 ff5b 	bl	8000648 <__aeabi_dmul>
 8006792:	4606      	mov	r6, r0
 8006794:	460f      	mov	r7, r1
 8006796:	4b47      	ldr	r3, [pc, #284]	; (80068b4 <create_level_one_sprites+0x19c>)
 8006798:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800679c:	fb02 3305 	mla	r3, r2, r5, r3
 80067a0:	68d8      	ldr	r0, [r3, #12]
 80067a2:	f7f9 fef9 	bl	8000598 <__aeabi_f2d>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4630      	mov	r0, r6
 80067ac:	4639      	mov	r1, r7
 80067ae:	f7fa f9b3 	bl	8000b18 <__aeabi_dcmpeq>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d0b6      	beq.n	8006724 <create_level_one_sprites+0xc>
 80067b6:	f04f 0b00 	mov.w	fp, #0
 80067ba:	e7b3      	b.n	8006724 <create_level_one_sprites+0xc>
				}
			}
			if(done == 1) break;
 80067bc:	f1bb 0f00 	cmp.w	fp, #0
 80067c0:	d127      	bne.n	8006812 <create_level_one_sprites+0xfa>
			tmpx = rand()%23+25;
 80067c2:	f002 f9e9 	bl	8008b98 <rand>
 80067c6:	4c3c      	ldr	r4, [pc, #240]	; (80068b8 <create_level_one_sprites+0x1a0>)
 80067c8:	fb84 3400 	smull	r3, r4, r4, r0
 80067cc:	1823      	adds	r3, r4, r0
 80067ce:	17c4      	asrs	r4, r0, #31
 80067d0:	ebc4 1423 	rsb	r4, r4, r3, asr #4
 80067d4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80067d8:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
 80067dc:	1b04      	subs	r4, r0, r4
 80067de:	3419      	adds	r4, #25
			tmpy = rand()%22+1;
 80067e0:	f002 f9da 	bl	8008b98 <rand>
 80067e4:	4a35      	ldr	r2, [pc, #212]	; (80068bc <create_level_one_sprites+0x1a4>)
 80067e6:	fb82 3200 	smull	r3, r2, r2, r0
 80067ea:	17c3      	asrs	r3, r0, #31
 80067ec:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80067f0:	2216      	movs	r2, #22
 80067f2:	fb02 0313 	mls	r3, r2, r3, r0
 80067f6:	f103 0a01 	add.w	sl, r3, #1
			if(map[tmpy][tmpx] == 0){
 80067fa:	2232      	movs	r2, #50	; 0x32
 80067fc:	fb03 2202 	mla	r2, r3, r2, r2
 8006800:	4b2f      	ldr	r3, [pc, #188]	; (80068c0 <create_level_one_sprites+0x1a8>)
 8006802:	441a      	add	r2, r3
 8006804:	5d13      	ldrb	r3, [r2, r4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1d8      	bne.n	80067bc <create_level_one_sprites+0xa4>
				for(int i=0;i<num_of_enemys;i++){
 800680a:	2500      	movs	r5, #0
				done = 1;
 800680c:	f04f 0b01 	mov.w	fp, #1
 8006810:	e789      	b.n	8006726 <create_level_one_sprites+0xe>
		}
		sp_original[i].x = (tmpx+0.5) * Blocksize;
 8006812:	4620      	mov	r0, r4
 8006814:	f7f9 feae 	bl	8000574 <__aeabi_i2d>
 8006818:	2200      	movs	r2, #0
 800681a:	4b24      	ldr	r3, [pc, #144]	; (80068ac <create_level_one_sprites+0x194>)
 800681c:	f7f9 fd5e 	bl	80002dc <__adddf3>
 8006820:	4606      	mov	r6, r0
 8006822:	460f      	mov	r7, r1
 8006824:	4b22      	ldr	r3, [pc, #136]	; (80068b0 <create_level_one_sprites+0x198>)
 8006826:	6818      	ldr	r0, [r3, #0]
 8006828:	f7f9 fea4 	bl	8000574 <__aeabi_i2d>
 800682c:	4604      	mov	r4, r0
 800682e:	460d      	mov	r5, r1
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	4630      	mov	r0, r6
 8006836:	4639      	mov	r1, r7
 8006838:	f7f9 ff06 	bl	8000648 <__aeabi_dmul>
 800683c:	f7fa f9dc 	bl	8000bf8 <__aeabi_d2f>
 8006840:	4e1c      	ldr	r6, [pc, #112]	; (80068b4 <create_level_one_sprites+0x19c>)
 8006842:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8006846:	9f01      	ldr	r7, [sp, #4]
 8006848:	fb03 6607 	mla	r6, r3, r7, r6
 800684c:	60b0      	str	r0, [r6, #8]
		sp_original[i].y = (tmpy+0.5) * Blocksize;
 800684e:	4650      	mov	r0, sl
 8006850:	f7f9 fe90 	bl	8000574 <__aeabi_i2d>
 8006854:	2200      	movs	r2, #0
 8006856:	4b15      	ldr	r3, [pc, #84]	; (80068ac <create_level_one_sprites+0x194>)
 8006858:	f7f9 fd40 	bl	80002dc <__adddf3>
 800685c:	4602      	mov	r2, r0
 800685e:	460b      	mov	r3, r1
 8006860:	4620      	mov	r0, r4
 8006862:	4629      	mov	r1, r5
 8006864:	f7f9 fef0 	bl	8000648 <__aeabi_dmul>
 8006868:	f7fa f9c6 	bl	8000bf8 <__aeabi_d2f>
 800686c:	60f0      	str	r0, [r6, #12]
	for(int i=0;i<num_of_enemys;i++){
 800686e:	1c7b      	adds	r3, r7, #1
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	2b03      	cmp	r3, #3
 8006876:	dc15      	bgt.n	80068a4 <create_level_one_sprites+0x18c>
		sp_original[i].sizeX = 128;
 8006878:	480e      	ldr	r0, [pc, #56]	; (80068b4 <create_level_one_sprites+0x19c>)
 800687a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800687e:	9b01      	ldr	r3, [sp, #4]
 8006880:	fb03 f101 	mul.w	r1, r3, r1
 8006884:	1843      	adds	r3, r0, r1
 8006886:	2280      	movs	r2, #128	; 0x80
 8006888:	829a      	strh	r2, [r3, #20]
		sp_original[i].sizeY = 128;
 800688a:	82da      	strh	r2, [r3, #22]
		sp_original[i].life = 3;
 800688c:	2203      	movs	r2, #3
 800688e:	761a      	strb	r2, [r3, #24]
		sp_original[i].damadgedTime = 0;
 8006890:	2200      	movs	r2, #0
 8006892:	61da      	str	r2, [r3, #28]
		sp_original[i].damadgedTimeMax = 5;
 8006894:	2405      	movs	r4, #5
 8006896:	621c      	str	r4, [r3, #32]
		sp_original[i].tip = 0;
 8006898:	5042      	str	r2, [r0, r1]
		sp_original[i].map = 0;
 800689a:	605a      	str	r2, [r3, #4]
		sp_original[i].viden = 0;
 800689c:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
		done = 0;
 80068a0:	4693      	mov	fp, r2
 80068a2:	e78e      	b.n	80067c2 <create_level_one_sprites+0xaa>
	}

}
 80068a4:	b003      	add	sp, #12
 80068a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068aa:	bf00      	nop
 80068ac:	3fe00000 	.word	0x3fe00000
 80068b0:	2000000c 	.word	0x2000000c
 80068b4:	2001d780 	.word	0x2001d780
 80068b8:	b21642c9 	.word	0xb21642c9
 80068bc:	2e8ba2e9 	.word	0x2e8ba2e9
 80068c0:	20000994 	.word	0x20000994

080068c4 <copy_sprites>:

void copy_sprites(){
 80068c4:	b510      	push	{r4, lr}
	for(int i=0;i<num_of_enemys;i++){
 80068c6:	2400      	movs	r4, #0
 80068c8:	e00a      	b.n	80068e0 <copy_sprites+0x1c>
		memcpy(&sp[i], &sp_original[i], sizeof(sprite));
 80068ca:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80068ce:	fb02 f304 	mul.w	r3, r2, r4
 80068d2:	4905      	ldr	r1, [pc, #20]	; (80068e8 <copy_sprites+0x24>)
 80068d4:	4419      	add	r1, r3
 80068d6:	4805      	ldr	r0, [pc, #20]	; (80068ec <copy_sprites+0x28>)
 80068d8:	4418      	add	r0, r3
 80068da:	f002 f919 	bl	8008b10 <memcpy>
	for(int i=0;i<num_of_enemys;i++){
 80068de:	3401      	adds	r4, #1
 80068e0:	2c03      	cmp	r4, #3
 80068e2:	ddf2      	ble.n	80068ca <copy_sprites+0x6>
	}
}
 80068e4:	bd10      	pop	{r4, pc}
 80068e6:	bf00      	nop
 80068e8:	2001d780 	.word	0x2001d780
 80068ec:	2001d090 	.word	0x2001d090

080068f0 <init>:
void init(){
 80068f0:	b500      	push	{lr}
 80068f2:	b083      	sub	sp, #12
	UG_SetBackcolor( C_BLACK ) ;
 80068f4:	2000      	movs	r0, #0
 80068f6:	f001 fed7 	bl	80086a8 <UG_SetBackcolor>
	UG_SetForecolor( C_RED ) ;
 80068fa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 80068fe:	f001 fecd 	bl	800869c <UG_SetForecolor>
	UG_FillFrame(40, 0, 280, 240, C_BLACK);
 8006902:	2100      	movs	r1, #0
 8006904:	9100      	str	r1, [sp, #0]
 8006906:	23f0      	movs	r3, #240	; 0xf0
 8006908:	f44f 728c 	mov.w	r2, #280	; 0x118
 800690c:	2028      	movs	r0, #40	; 0x28
 800690e:	f001 fe91 	bl	8008634 <UG_FillFrame>
	if(firstInit == 1){
 8006912:	4b3a      	ldr	r3, [pc, #232]	; (80069fc <init+0x10c>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b01      	cmp	r3, #1
 8006918:	d005      	beq.n	8006926 <init+0x36>
		draw_full_screen_image(t_cover_photo_complete);
 800691a:	4839      	ldr	r0, [pc, #228]	; (8006a00 <init+0x110>)
 800691c:	f7ff fe9a 	bl	8006654 <draw_full_screen_image>
		KBD_scan();
 8006920:	f7fe ffc8 	bl	80058b4 <KBD_scan>
		while(KBD_get_button_state(BTN_OK) != BTN_SIG_VALUE_PRESSED){
 8006924:	e03e      	b.n	80069a4 <init+0xb4>
		firstInit = 0;
 8006926:	4b35      	ldr	r3, [pc, #212]	; (80069fc <init+0x10c>)
 8006928:	2200      	movs	r2, #0
 800692a:	701a      	strb	r2, [r3, #0]
		draw_full_screen_image(t_cover_photo_complete);
 800692c:	4834      	ldr	r0, [pc, #208]	; (8006a00 <init+0x110>)
 800692e:	f7ff fe91 	bl	8006654 <draw_full_screen_image>
		KBD_scan();
 8006932:	f7fe ffbf 	bl	80058b4 <KBD_scan>
		while(KBD_get_button_state(BTN_OK) != BTN_SIG_VALUE_PRESSED){
 8006936:	e001      	b.n	800693c <init+0x4c>
			KBD_scan();
 8006938:	f7fe ffbc 	bl	80058b4 <KBD_scan>
		while(KBD_get_button_state(BTN_OK) != BTN_SIG_VALUE_PRESSED){
 800693c:	2000      	movs	r0, #0
 800693e:	f7fe fff5 	bl	800592c <KBD_get_button_state>
 8006942:	2800      	cmp	r0, #0
 8006944:	d1f8      	bne.n	8006938 <init+0x48>
		seed = HAL_GetTick();
 8006946:	f7fb f979 	bl	8001c3c <HAL_GetTick>
		srand(seed);
 800694a:	f002 f8f7 	bl	8008b3c <srand>
		generateMap();
 800694e:	f7ff fa6f 	bl	8005e30 <generateMap>
		create_level_one_sprites();
 8006952:	f7ff fee1 	bl	8006718 <create_level_one_sprites>
		LEDs_on(240);
 8006956:	20f0      	movs	r0, #240	; 0xf0
 8006958:	f7fe fdb2 	bl	80054c0 <LEDs_on>
		copy_sprites();
 800695c:	f7ff ffb2 	bl	80068c4 <copy_sprites>
		px = 20*Blocksize;
 8006960:	4b28      	ldr	r3, [pc, #160]	; (8006a04 <init+0x114>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006968:	0092      	lsls	r2, r2, #2
 800696a:	ee07 2a90 	vmov	s15, r2
 800696e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006972:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <init+0x118>)
 8006974:	edc2 7a00 	vstr	s15, [r2]
		py = 12*Blocksize;
 8006978:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006986:	4b21      	ldr	r3, [pc, #132]	; (8006a0c <init+0x11c>)
 8006988:	edc3 7a00 	vstr	s15, [r3]
		angle = PI/4;
 800698c:	4b20      	ldr	r3, [pc, #128]	; (8006a10 <init+0x120>)
 800698e:	4a21      	ldr	r2, [pc, #132]	; (8006a14 <init+0x124>)
 8006990:	601a      	str	r2, [r3, #0]
		TIM5->CCR2 = 0;
 8006992:	4b21      	ldr	r3, [pc, #132]	; (8006a18 <init+0x128>)
 8006994:	2200      	movs	r2, #0
 8006996:	639a      	str	r2, [r3, #56]	; 0x38
		TIMUT_stopwatch_set_time_mark(&score);
 8006998:	4820      	ldr	r0, [pc, #128]	; (8006a1c <init+0x12c>)
 800699a:	f001 fdeb 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
 800699e:	e02a      	b.n	80069f6 <init+0x106>
			KBD_scan();
 80069a0:	f7fe ff88 	bl	80058b4 <KBD_scan>
		while(KBD_get_button_state(BTN_OK) != BTN_SIG_VALUE_PRESSED){
 80069a4:	2000      	movs	r0, #0
 80069a6:	f7fe ffc1 	bl	800592c <KBD_get_button_state>
 80069aa:	2800      	cmp	r0, #0
 80069ac:	d1f8      	bne.n	80069a0 <init+0xb0>
		LEDs_on(240);
 80069ae:	20f0      	movs	r0, #240	; 0xf0
 80069b0:	f7fe fd86 	bl	80054c0 <LEDs_on>
		copy_sprites();
 80069b4:	f7ff ff86 	bl	80068c4 <copy_sprites>
		px = 20*Blocksize;
 80069b8:	4b12      	ldr	r3, [pc, #72]	; (8006a04 <init+0x114>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80069c0:	0092      	lsls	r2, r2, #2
 80069c2:	ee07 2a90 	vmov	s15, r2
 80069c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069ca:	4a0f      	ldr	r2, [pc, #60]	; (8006a08 <init+0x118>)
 80069cc:	edc2 7a00 	vstr	s15, [r2]
		py = 12*Blocksize;
 80069d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	ee07 3a90 	vmov	s15, r3
 80069da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069de:	4b0b      	ldr	r3, [pc, #44]	; (8006a0c <init+0x11c>)
 80069e0:	edc3 7a00 	vstr	s15, [r3]
		angle = PI/4;
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <init+0x120>)
 80069e6:	4a0b      	ldr	r2, [pc, #44]	; (8006a14 <init+0x124>)
 80069e8:	601a      	str	r2, [r3, #0]
		TIM5->CCR2 = 0;
 80069ea:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <init+0x128>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	639a      	str	r2, [r3, #56]	; 0x38
		TIMUT_stopwatch_set_time_mark(&score);
 80069f0:	480a      	ldr	r0, [pc, #40]	; (8006a1c <init+0x12c>)
 80069f2:	f001 fdbf 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
}
 80069f6:	b003      	add	sp, #12
 80069f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80069fc:	20000014 	.word	0x20000014
 8006a00:	08012694 	.word	0x08012694
 8006a04:	2000000c 	.word	0x2000000c
 8006a08:	20000018 	.word	0x20000018
 8006a0c:	2000001c 	.word	0x2000001c
 8006a10:	20000010 	.word	0x20000010
 8006a14:	3f490fd0 	.word	0x3f490fd0
 8006a18:	40000c00 	.word	0x40000c00
 8006a1c:	2001d07c 	.word	0x2001d07c

08006a20 <handle_score>:

void handle_score(float currScore){
 8006a20:	b570      	push	{r4, r5, r6, lr}
 8006a22:	ed2d 8b02 	vpush	{d8}
 8006a26:	b0a6      	sub	sp, #152	; 0x98
 8006a28:	ee10 4a10 	vmov	r4, s0
	char str1[70];
	char str2[70];
	if(prevScore == 0 || prevScore > currScore){
 8006a2c:	4b78      	ldr	r3, [pc, #480]	; (8006c10 <handle_score+0x1f0>)
 8006a2e:	edd3 7a00 	vldr	s15, [r3]
 8006a32:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a3a:	d004      	beq.n	8006a46 <handle_score+0x26>
 8006a3c:	eef4 7ac0 	vcmpe.f32	s15, s0
 8006a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a44:	dd17      	ble.n	8006a76 <handle_score+0x56>
		sprintf(str1, "New High Score: %.3f", currScore);
 8006a46:	4620      	mov	r0, r4
 8006a48:	f7f9 fda6 	bl	8000598 <__aeabi_f2d>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	460b      	mov	r3, r1
 8006a50:	4970      	ldr	r1, [pc, #448]	; (8006c14 <handle_score+0x1f4>)
 8006a52:	a814      	add	r0, sp, #80	; 0x50
 8006a54:	f002 f9a4 	bl	8008da0 <siprintf>
		sprintf(str2, "Last Score: %.3f", prevScore);
 8006a58:	4d6d      	ldr	r5, [pc, #436]	; (8006c10 <handle_score+0x1f0>)
 8006a5a:	6828      	ldr	r0, [r5, #0]
 8006a5c:	f7f9 fd9c 	bl	8000598 <__aeabi_f2d>
 8006a60:	4602      	mov	r2, r0
 8006a62:	460b      	mov	r3, r1
 8006a64:	496c      	ldr	r1, [pc, #432]	; (8006c18 <handle_score+0x1f8>)
 8006a66:	a802      	add	r0, sp, #8
 8006a68:	f002 f99a 	bl	8008da0 <siprintf>
		prevScore = currScore;
 8006a6c:	602c      	str	r4, [r5, #0]
	uint8_t red, green, blue;
	int pixel = 0;
	int countX = 0;
	int countY = 0;
	for(float y=0;y<32;y+=delta){
		countX = 0;
 8006a6e:	eddf 8a6b 	vldr	s17, [pc, #428]	; 8006c1c <handle_score+0x1fc>
 8006a72:	2600      	movs	r6, #0
 8006a74:	e047      	b.n	8006b06 <handle_score+0xe6>
		sprintf(str1, "The High Score Is: %.3f", prevScore);
 8006a76:	ee17 0a90 	vmov	r0, s15
 8006a7a:	f7f9 fd8d 	bl	8000598 <__aeabi_f2d>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	460b      	mov	r3, r1
 8006a82:	4967      	ldr	r1, [pc, #412]	; (8006c20 <handle_score+0x200>)
 8006a84:	a814      	add	r0, sp, #80	; 0x50
 8006a86:	f002 f98b 	bl	8008da0 <siprintf>
		sprintf(str2, "Current Score: %.3f", currScore);
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f7f9 fd84 	bl	8000598 <__aeabi_f2d>
 8006a90:	4602      	mov	r2, r0
 8006a92:	460b      	mov	r3, r1
 8006a94:	4963      	ldr	r1, [pc, #396]	; (8006c24 <handle_score+0x204>)
 8006a96:	a802      	add	r0, sp, #8
 8006a98:	f002 f982 	bl	8008da0 <siprintf>
 8006a9c:	e7e7      	b.n	8006a6e <handle_score+0x4e>
				green = t_wall[pixel + 1];
				blue = t_wall[pixel + 2];

				pixels[countY*240+countX] = create_rgb(red, green, blue);
			}
			countX++;
 8006a9e:	3401      	adds	r4, #1
		for(float x=0;x<32;x+=delta){
 8006aa0:	eddf 7a61 	vldr	s15, [pc, #388]	; 8006c28 <handle_score+0x208>
 8006aa4:	ee38 8a27 	vadd.f32	s16, s16, s15
 8006aa8:	eddf 7a60 	vldr	s15, [pc, #384]	; 8006c2c <handle_score+0x20c>
 8006aac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab4:	d522      	bpl.n	8006afc <handle_score+0xdc>
			pixel = ((int)(y)*32+(int)x)*3;
 8006ab6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006aba:	ee17 3a90 	vmov	r3, s15
 8006abe:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8006ac2:	ee17 2a90 	vmov	r2, s15
 8006ac6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8006aca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			if(pixel <= 32*32*3-3 && countY*240+countX < 57600){
 8006ace:	f640 32fd 	movw	r2, #3069	; 0xbfd
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	dce3      	bgt.n	8006a9e <handle_score+0x7e>
 8006ad6:	ebc6 1506 	rsb	r5, r6, r6, lsl #4
 8006ada:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 8006ade:	f5b5 4f61 	cmp.w	r5, #57600	; 0xe100
 8006ae2:	dadc      	bge.n	8006a9e <handle_score+0x7e>
				red = t_wall[pixel + 0];
 8006ae4:	4852      	ldr	r0, [pc, #328]	; (8006c30 <handle_score+0x210>)
				green = t_wall[pixel + 1];
 8006ae6:	1c59      	adds	r1, r3, #1
				blue = t_wall[pixel + 2];
 8006ae8:	1c9a      	adds	r2, r3, #2
				pixels[countY*240+countX] = create_rgb(red, green, blue);
 8006aea:	5c82      	ldrb	r2, [r0, r2]
 8006aec:	5c41      	ldrb	r1, [r0, r1]
 8006aee:	5cc0      	ldrb	r0, [r0, r3]
 8006af0:	f7ff fbee 	bl	80062d0 <create_rgb>
 8006af4:	4b4f      	ldr	r3, [pc, #316]	; (8006c34 <handle_score+0x214>)
 8006af6:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
 8006afa:	e7d0      	b.n	8006a9e <handle_score+0x7e>
		}
		countY++;
 8006afc:	3601      	adds	r6, #1
	for(float y=0;y<32;y+=delta){
 8006afe:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8006c28 <handle_score+0x208>
 8006b02:	ee78 8aa7 	vadd.f32	s17, s17, s15
 8006b06:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006c2c <handle_score+0x20c>
 8006b0a:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b12:	d503      	bpl.n	8006b1c <handle_score+0xfc>
		for(float x=0;x<32;x+=delta){
 8006b14:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8006c1c <handle_score+0x1fc>
		countX = 0;
 8006b18:	2400      	movs	r4, #0
 8006b1a:	e7c5      	b.n	8006aa8 <handle_score+0x88>
	}
	UG_FillFrame(40, 0, 280, 240, C_BLACK);
 8006b1c:	2400      	movs	r4, #0
 8006b1e:	9400      	str	r4, [sp, #0]
 8006b20:	23f0      	movs	r3, #240	; 0xf0
 8006b22:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b26:	4621      	mov	r1, r4
 8006b28:	2028      	movs	r0, #40	; 0x28
 8006b2a:	f001 fd83 	bl	8008634 <UG_FillFrame>
	ILI9341_SetDisplayWindow(40, 0, 240, 240);
 8006b2e:	23f0      	movs	r3, #240	; 0xf0
 8006b30:	461a      	mov	r2, r3
 8006b32:	4621      	mov	r1, r4
 8006b34:	2028      	movs	r0, #40	; 0x28
 8006b36:	f7ff f899 	bl	8005c6c <ILI9341_SetDisplayWindow>
	ILI9341_SendData(pixels, 57600);
 8006b3a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8006b3e:	483d      	ldr	r0, [pc, #244]	; (8006c34 <handle_score+0x214>)
 8006b40:	f7ff f814 	bl	8005b6c <ILI9341_SendData>

	UG_FillFrame(40, s_height/2-40, 280, s_height/2-40+12, create_rgb(0, 0, 0));
 8006b44:	4622      	mov	r2, r4
 8006b46:	4621      	mov	r1, r4
 8006b48:	4620      	mov	r0, r4
 8006b4a:	f7ff fbc1 	bl	80062d0 <create_rgb>
 8006b4e:	4604      	mov	r4, r0
 8006b50:	9000      	str	r0, [sp, #0]
 8006b52:	235c      	movs	r3, #92	; 0x5c
 8006b54:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b58:	2150      	movs	r1, #80	; 0x50
 8006b5a:	2028      	movs	r0, #40	; 0x28
 8006b5c:	f001 fd6a 	bl	8008634 <UG_FillFrame>
	UG_FillFrame(40, s_height/2-28, 280, s_height/2-28+12, create_rgb(0, 0, 0));
 8006b60:	9400      	str	r4, [sp, #0]
 8006b62:	2368      	movs	r3, #104	; 0x68
 8006b64:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b68:	215c      	movs	r1, #92	; 0x5c
 8006b6a:	2028      	movs	r0, #40	; 0x28
 8006b6c:	f001 fd62 	bl	8008634 <UG_FillFrame>
	UG_FillFrame(40, s_height/2+25, 280, s_height/2+25+12, create_rgb(0, 0, 0));
 8006b70:	9400      	str	r4, [sp, #0]
 8006b72:	239d      	movs	r3, #157	; 0x9d
 8006b74:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b78:	2191      	movs	r1, #145	; 0x91
 8006b7a:	2028      	movs	r0, #40	; 0x28
 8006b7c:	f001 fd5a 	bl	8008634 <UG_FillFrame>
	UG_FillFrame(40, s_height/2+45, 280, s_height/2+45+12, create_rgb(0, 0, 0));
 8006b80:	9400      	str	r4, [sp, #0]
 8006b82:	23b1      	movs	r3, #177	; 0xb1
 8006b84:	f44f 728c 	mov.w	r2, #280	; 0x118
 8006b88:	21a5      	movs	r1, #165	; 0xa5
 8006b8a:	2028      	movs	r0, #40	; 0x28
 8006b8c:	f001 fd52 	bl	8008634 <UG_FillFrame>

	uint16_t size1 = strlen(str1) * 9;
 8006b90:	a814      	add	r0, sp, #80	; 0x50
 8006b92:	f7f9 fb45 	bl	8000220 <strlen>
 8006b96:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006b9a:	b285      	uxth	r5, r0
	uint16_t size2 = strlen(str2) * 9;
 8006b9c:	a802      	add	r0, sp, #8
 8006b9e:	f7f9 fb3f 	bl	8000220 <strlen>
 8006ba2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8006ba6:	b284      	uxth	r4, r0

	UG_SetForecolor(create_rgb(255, 112, 112));
 8006ba8:	2270      	movs	r2, #112	; 0x70
 8006baa:	4611      	mov	r1, r2
 8006bac:	20ff      	movs	r0, #255	; 0xff
 8006bae:	f7ff fb8f 	bl	80062d0 <create_rgb>
 8006bb2:	f001 fd73 	bl	800869c <UG_SetForecolor>
	UG_PutString(s_width/2-size1/2, s_height/2-40, str1);
 8006bb6:	0868      	lsrs	r0, r5, #1
 8006bb8:	aa14      	add	r2, sp, #80	; 0x50
 8006bba:	2150      	movs	r1, #80	; 0x50
 8006bbc:	f1c0 00a0 	rsb	r0, r0, #160	; 0xa0
 8006bc0:	f001 ff1a 	bl	80089f8 <UG_PutString>
	UG_PutString(s_width/2-size2/2, s_height/2-28, str2);
 8006bc4:	0860      	lsrs	r0, r4, #1
 8006bc6:	aa02      	add	r2, sp, #8
 8006bc8:	215c      	movs	r1, #92	; 0x5c
 8006bca:	f1c0 00a0 	rsb	r0, r0, #160	; 0xa0
 8006bce:	f001 ff13 	bl	80089f8 <UG_PutString>

	UG_SetForecolor(create_rgb(112, 122, 255));
 8006bd2:	22ff      	movs	r2, #255	; 0xff
 8006bd4:	217a      	movs	r1, #122	; 0x7a
 8006bd6:	2070      	movs	r0, #112	; 0x70
 8006bd8:	f7ff fb7a 	bl	80062d0 <create_rgb>
 8006bdc:	f001 fd5e 	bl	800869c <UG_SetForecolor>
	UG_PutString(s_width/2-24*4.5, s_height/2+25, "Press OK to continue! ->");
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <handle_score+0x218>)
 8006be2:	2191      	movs	r1, #145	; 0x91
 8006be4:	2034      	movs	r0, #52	; 0x34
 8006be6:	f001 ff07 	bl	80089f8 <UG_PutString>
	UG_PutString(s_width/2-26*4.5, s_height/2+45, "Press RESET for new level!");
 8006bea:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <handle_score+0x21c>)
 8006bec:	21a5      	movs	r1, #165	; 0xa5
 8006bee:	202b      	movs	r0, #43	; 0x2b
 8006bf0:	f001 ff02 	bl	80089f8 <UG_PutString>



	KBD_scan();
 8006bf4:	f7fe fe5e 	bl	80058b4 <KBD_scan>
	while(KBD_get_button_state(BTN_OK) != BTN_SIG_VALUE_PRESSED){
 8006bf8:	e001      	b.n	8006bfe <handle_score+0x1de>
		KBD_scan();
 8006bfa:	f7fe fe5b 	bl	80058b4 <KBD_scan>
	while(KBD_get_button_state(BTN_OK) != BTN_SIG_VALUE_PRESSED){
 8006bfe:	2000      	movs	r0, #0
 8006c00:	f7fe fe94 	bl	800592c <KBD_get_button_state>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d1f8      	bne.n	8006bfa <handle_score+0x1da>
	}

}
 8006c08:	b026      	add	sp, #152	; 0x98
 8006c0a:	ecbd 8b02 	vpop	{d8}
 8006c0e:	bd70      	pop	{r4, r5, r6, pc}
 8006c10:	2001d078 	.word	0x2001d078
 8006c14:	08012604 	.word	0x08012604
 8006c18:	0801261c 	.word	0x0801261c
 8006c1c:	00000000 	.word	0x00000000
 8006c20:	08012630 	.word	0x08012630
 8006c24:	08012648 	.word	0x08012648
 8006c28:	3e088889 	.word	0x3e088889
 8006c2c:	42000000 	.word	0x42000000
 8006c30:	08011a04 	.word	0x08011a04
 8006c34:	20000e78 	.word	0x20000e78
 8006c38:	0801265c 	.word	0x0801265c
 8006c3c:	08012678 	.word	0x08012678

08006c40 <play_sound>:

void play_sound(uint8_t sound){
	switch(sound){
 8006c40:	2803      	cmp	r0, #3
 8006c42:	d82d      	bhi.n	8006ca0 <play_sound+0x60>
 8006c44:	e8df f000 	tbb	[pc, r0]
 8006c48:	22170c02 	.word	0x22170c02
	case 0:
		sound_select = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <play_sound+0x64>)
 8006c50:	6013      	str	r3, [r2, #0]
		sound_counter = 0;
 8006c52:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <play_sound+0x68>)
 8006c54:	6013      	str	r3, [r2, #0]
		sound_limit = 3209;
 8006c56:	4b15      	ldr	r3, [pc, #84]	; (8006cac <play_sound+0x6c>)
 8006c58:	f640 4289 	movw	r2, #3209	; 0xc89
 8006c5c:	601a      	str	r2, [r3, #0]
		break;
 8006c5e:	4770      	bx	lr
	case 1:
		sound_select = 1;
 8006c60:	4b10      	ldr	r3, [pc, #64]	; (8006ca4 <play_sound+0x64>)
 8006c62:	2201      	movs	r2, #1
 8006c64:	601a      	str	r2, [r3, #0]
		sound_counter = 0;
 8006c66:	4b10      	ldr	r3, [pc, #64]	; (8006ca8 <play_sound+0x68>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	601a      	str	r2, [r3, #0]
		sound_limit = 2984;
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <play_sound+0x6c>)
 8006c6e:	f640 32a8 	movw	r2, #2984	; 0xba8
 8006c72:	601a      	str	r2, [r3, #0]
		break;
 8006c74:	4770      	bx	lr
	case 2:
		sound_select = 2;
 8006c76:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <play_sound+0x64>)
 8006c78:	2202      	movs	r2, #2
 8006c7a:	601a      	str	r2, [r3, #0]
		sound_counter = 0;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <play_sound+0x68>)
 8006c7e:	2200      	movs	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
		sound_limit = 3721;
 8006c82:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <play_sound+0x6c>)
 8006c84:	f640 6289 	movw	r2, #3721	; 0xe89
 8006c88:	601a      	str	r2, [r3, #0]
		break;
 8006c8a:	4770      	bx	lr
	case 3:
		sound_select = 3;
 8006c8c:	4b05      	ldr	r3, [pc, #20]	; (8006ca4 <play_sound+0x64>)
 8006c8e:	2203      	movs	r2, #3
 8006c90:	601a      	str	r2, [r3, #0]
		sound_counter = 0;
 8006c92:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <play_sound+0x68>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	601a      	str	r2, [r3, #0]
		sound_limit = 9330;
 8006c98:	4b04      	ldr	r3, [pc, #16]	; (8006cac <play_sound+0x6c>)
 8006c9a:	f242 4272 	movw	r2, #9330	; 0x2472
 8006c9e:	601a      	str	r2, [r3, #0]
	default:
		return;
	}
}
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	2001d08c 	.word	0x2001d08c
 8006ca8:	2001d084 	.word	0x2001d084
 8006cac:	2001d088 	.word	0x2001d088

08006cb0 <check_victory>:
	for(int i=0;i<num_of_enemys;i++){
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	dc09      	bgt.n	8006cca <check_victory+0x1a>
		if(sp[i].life > 0) return;
 8006cb6:	4a23      	ldr	r2, [pc, #140]	; (8006d44 <check_victory+0x94>)
 8006cb8:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006cbc:	fb01 2203 	mla	r2, r1, r3, r2
 8006cc0:	7e12      	ldrb	r2, [r2, #24]
 8006cc2:	2a00      	cmp	r2, #0
 8006cc4:	d13c      	bne.n	8006d40 <check_victory+0x90>
	for(int i=0;i<num_of_enemys;i++){
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	e7f3      	b.n	8006cb2 <check_victory+0x2>
void check_victory(){
 8006cca:	b510      	push	{r4, lr}
 8006ccc:	ed2d 8b02 	vpush	{d8}
 8006cd0:	b082      	sub	sp, #8
	TIMUT_stopwatch_update(&score);
 8006cd2:	4c1d      	ldr	r4, [pc, #116]	; (8006d48 <check_victory+0x98>)
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f001 fc53 	bl	8008580 <TIMUT_stopwatch_update>
	play_sound(1);
 8006cda:	2001      	movs	r0, #1
 8006cdc:	f7ff ffb0 	bl	8006c40 <play_sound>
	float curr_score = (float)score.elapsed_time / 1000.0;
 8006ce0:	edd4 7a01 	vldr	s15, [r4, #4]
 8006ce4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006d4c <check_victory+0x9c>
 8006cec:	ee87 8a87 	vdiv.f32	s16, s15, s14
	draw_full_screen_image_without_red(t_victory_screen);
 8006cf0:	4817      	ldr	r0, [pc, #92]	; (8006d50 <check_victory+0xa0>)
 8006cf2:	f7ff fcd9 	bl	80066a8 <draw_full_screen_image_without_red>
	TIMUT_stopwatch_set_time_mark(&victory);
 8006cf6:	4668      	mov	r0, sp
 8006cf8:	f001 fc3c 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
	while(!TIMUT_stopwatch_has_X_ms_passed(&victory, 5000)){
 8006cfc:	e00d      	b.n	8006d1a <check_victory+0x6a>
		LEDs_on(255);
 8006cfe:	20ff      	movs	r0, #255	; 0xff
 8006d00:	f7fe fbde 	bl	80054c0 <LEDs_on>
		HAL_Delay(1000);
 8006d04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d08:	f7fa ff9e 	bl	8001c48 <HAL_Delay>
		LEDs_off(255);
 8006d0c:	20ff      	movs	r0, #255	; 0xff
 8006d0e:	f7fe fbf9 	bl	8005504 <LEDs_off>
		HAL_Delay(1000);
 8006d12:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d16:	f7fa ff97 	bl	8001c48 <HAL_Delay>
	while(!TIMUT_stopwatch_has_X_ms_passed(&victory, 5000)){
 8006d1a:	f241 3188 	movw	r1, #5000	; 0x1388
 8006d1e:	4668      	mov	r0, sp
 8006d20:	f001 fc36 	bl	8008590 <TIMUT_stopwatch_has_X_ms_passed>
 8006d24:	2800      	cmp	r0, #0
 8006d26:	d0ea      	beq.n	8006cfe <check_victory+0x4e>
	handle_score(curr_score);
 8006d28:	eeb0 0a48 	vmov.f32	s0, s16
 8006d2c:	f7ff fe78 	bl	8006a20 <handle_score>
	reset();
 8006d30:	f7ff fad6 	bl	80062e0 <reset>
	init();
 8006d34:	f7ff fddc 	bl	80068f0 <init>
}
 8006d38:	b002      	add	sp, #8
 8006d3a:	ecbd 8b02 	vpop	{d8}
 8006d3e:	bd10      	pop	{r4, pc}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	2001d090 	.word	0x2001d090
 8006d48:	2001d07c 	.word	0x2001d07c
 8006d4c:	447a0000 	.word	0x447a0000
 8006d50:	0803c994 	.word	0x0803c994

08006d54 <shoot>:
{
 8006d54:	b530      	push	{r4, r5, lr}
 8006d56:	b083      	sub	sp, #12
	if(time_gun == 0){
 8006d58:	4b3c      	ldr	r3, [pc, #240]	; (8006e4c <shoot+0xf8>)
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b133      	cbz	r3, 8006d6c <shoot+0x18>
	gun_button_prev = KBD_get_button_state(BTN_OK);
 8006d5e:	2000      	movs	r0, #0
 8006d60:	f7fe fde4 	bl	800592c <KBD_get_button_state>
 8006d64:	4b3a      	ldr	r3, [pc, #232]	; (8006e50 <shoot+0xfc>)
 8006d66:	7018      	strb	r0, [r3, #0]
}
 8006d68:	b003      	add	sp, #12
 8006d6a:	bd30      	pop	{r4, r5, pc}
		KBD_scan();
 8006d6c:	f7fe fda2 	bl	80058b4 <KBD_scan>
		if(KBD_get_button_state(BTN_OK) == BTN_STATE_RELEASED && gun_button_prev == BTN_STATE_PRESSED){
 8006d70:	2000      	movs	r0, #0
 8006d72:	f7fe fddb 	bl	800592c <KBD_get_button_state>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d1f1      	bne.n	8006d5e <shoot+0xa>
 8006d7a:	4b35      	ldr	r3, [pc, #212]	; (8006e50 <shoot+0xfc>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d1ed      	bne.n	8006d5e <shoot+0xa>
			time_gun = max_time_gun;
 8006d82:	4b34      	ldr	r3, [pc, #208]	; (8006e54 <shoot+0x100>)
 8006d84:	781a      	ldrb	r2, [r3, #0]
 8006d86:	4b31      	ldr	r3, [pc, #196]	; (8006e4c <shoot+0xf8>)
 8006d88:	701a      	strb	r2, [r3, #0]
			play_sound(3);
 8006d8a:	2003      	movs	r0, #3
 8006d8c:	f7ff ff58 	bl	8006c40 <play_sound>
			UG_FillFrame(40, 0, 240, 240,create_rgb(233, 235, 162));
 8006d90:	22a2      	movs	r2, #162	; 0xa2
 8006d92:	21eb      	movs	r1, #235	; 0xeb
 8006d94:	20e9      	movs	r0, #233	; 0xe9
 8006d96:	f7ff fa9b 	bl	80062d0 <create_rgb>
 8006d9a:	9000      	str	r0, [sp, #0]
 8006d9c:	23f0      	movs	r3, #240	; 0xf0
 8006d9e:	461a      	mov	r2, r3
 8006da0:	2100      	movs	r1, #0
 8006da2:	2028      	movs	r0, #40	; 0x28
 8006da4:	f001 fc46 	bl	8008634 <UG_FillFrame>
			for(int i = 0; i < num_of_enemys;i++)
 8006da8:	2400      	movs	r4, #0
 8006daa:	e01f      	b.n	8006dec <shoot+0x98>
						for(int j=0;j<num_of_enemys;j++){
 8006dac:	3501      	adds	r5, #1
 8006dae:	2d03      	cmp	r5, #3
 8006db0:	dc0a      	bgt.n	8006dc8 <shoot+0x74>
							if(sp[j].life < 1) check = check << 1;
 8006db2:	4b29      	ldr	r3, [pc, #164]	; (8006e58 <shoot+0x104>)
 8006db4:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8006db8:	fb02 3305 	mla	r3, r2, r5, r3
 8006dbc:	7e1b      	ldrb	r3, [r3, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1f4      	bne.n	8006dac <shoot+0x58>
 8006dc2:	0040      	lsls	r0, r0, #1
 8006dc4:	b2c0      	uxtb	r0, r0
 8006dc6:	e7f1      	b.n	8006dac <shoot+0x58>
						LEDs_on(check);
 8006dc8:	f7fe fb7a 	bl	80054c0 <LEDs_on>
					initBlood(sp[i].blood, 0, 0, sp[i].dist);
 8006dcc:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8006dd0:	fb04 f303 	mul.w	r3, r4, r3
 8006dd4:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8006dd8:	481f      	ldr	r0, [pc, #124]	; (8006e58 <shoot+0x104>)
 8006dda:	4403      	add	r3, r0
 8006ddc:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8006de0:	2200      	movs	r2, #0
 8006de2:	4611      	mov	r1, r2
 8006de4:	4428      	add	r0, r5
 8006de6:	f7ff fb4b 	bl	8006480 <initBlood>
			for(int i = 0; i < num_of_enemys;i++)
 8006dea:	3401      	adds	r4, #1
 8006dec:	2c03      	cmp	r4, #3
 8006dee:	dcb6      	bgt.n	8006d5e <shoot+0xa>
				if(sp[i].tip == 1 && sp[i].life > 0 && sp[i].damadgedTime == 0)
 8006df0:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8006df4:	fb04 f303 	mul.w	r3, r4, r3
 8006df8:	4a17      	ldr	r2, [pc, #92]	; (8006e58 <shoot+0x104>)
 8006dfa:	58d3      	ldr	r3, [r2, r3]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d1f4      	bne.n	8006dea <shoot+0x96>
 8006e00:	4613      	mov	r3, r2
 8006e02:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8006e06:	fb02 3304 	mla	r3, r2, r4, r3
 8006e0a:	7e1b      	ldrb	r3, [r3, #24]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d0ec      	beq.n	8006dea <shoot+0x96>
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <shoot+0x104>)
 8006e12:	fb02 3304 	mla	r3, r2, r4, r3
 8006e16:	69dd      	ldr	r5, [r3, #28]
 8006e18:	2d00      	cmp	r5, #0
 8006e1a:	d1e6      	bne.n	8006dea <shoot+0x96>
					play_sound(0);
 8006e1c:	2000      	movs	r0, #0
 8006e1e:	f7ff ff0f 	bl	8006c40 <play_sound>
					sp[i].damadgedTime = sp[i].damadgedTimeMax;
 8006e22:	4a0d      	ldr	r2, [pc, #52]	; (8006e58 <shoot+0x104>)
 8006e24:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8006e28:	fb03 2204 	mla	r2, r3, r4, r2
 8006e2c:	6a13      	ldr	r3, [r2, #32]
 8006e2e:	61d3      	str	r3, [r2, #28]
					sp[i].life--;
 8006e30:	7e13      	ldrb	r3, [r2, #24]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	7613      	strb	r3, [r2, #24]
					if(sp[i].life < 1){
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1c7      	bne.n	8006dcc <shoot+0x78>
						check_victory();
 8006e3c:	f7ff ff38 	bl	8006cb0 <check_victory>
						LEDs_off(240);
 8006e40:	20f0      	movs	r0, #240	; 0xf0
 8006e42:	f7fe fb5f 	bl	8005504 <LEDs_off>
						uint8_t check = 240;
 8006e46:	20f0      	movs	r0, #240	; 0xf0
						for(int j=0;j<num_of_enemys;j++){
 8006e48:	e7b1      	b.n	8006dae <shoot+0x5a>
 8006e4a:	bf00      	nop
 8006e4c:	2001de70 	.word	0x2001de70
 8006e50:	20000990 	.word	0x20000990
 8006e54:	20000015 	.word	0x20000015
 8006e58:	2001d090 	.word	0x2001d090
 8006e5c:	00000000 	.word	0x00000000

08006e60 <drawGun>:

float sprite_x;
uint8_t sprite_draw;
float sprite_angle_diff;

void drawGun() {
 8006e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e64:	ed2d 8b02 	vpush	{d8}
	float scale = 1.0f / 2.0f;
	int tx_step = 1.0f / scale;
	int ty_step = 1.0f / scale;
	int red, green, blue;
	for (int y = 0; y < 128; y += ty_step) {
 8006e68:	2600      	movs	r6, #0
 8006e6a:	e068      	b.n	8006f3e <drawGun+0xde>
			if(time_gun == 0){
				red = t_guns[pixel + 0];
				green = t_guns[pixel + 1];
				blue = t_guns[pixel + 2];
			}else{
				red = t_gun_2[pixel + 0];
 8006e6c:	4a3e      	ldr	r2, [pc, #248]	; (8006f68 <drawGun+0x108>)
 8006e6e:	5cd5      	ldrb	r5, [r2, r3]
				green = t_gun_2[pixel + 1];
 8006e70:	1c59      	adds	r1, r3, #1
 8006e72:	5c57      	ldrb	r7, [r2, r1]
				blue = t_gun_2[pixel + 2];
 8006e74:	3302      	adds	r3, #2
 8006e76:	f812 8003 	ldrb.w	r8, [r2, r3]
			}
			if ((red + green + blue) < 689) {
 8006e7a:	19eb      	adds	r3, r5, r7
 8006e7c:	4443      	add	r3, r8
 8006e7e:	f5b3 7f2c 	cmp.w	r3, #688	; 0x2b0
 8006e82:	dd12      	ble.n	8006eaa <drawGun+0x4a>
		for (int x = 0; x < 128; x += tx_step) {
 8006e84:	3402      	adds	r4, #2
 8006e86:	2c7f      	cmp	r4, #127	; 0x7f
 8006e88:	dc58      	bgt.n	8006f3c <drawGun+0xdc>
			int pixel = ((y) * 128 + x) * 3;
 8006e8a:	eb04 13c6 	add.w	r3, r4, r6, lsl #7
 8006e8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			if(time_gun == 0){
 8006e92:	4a36      	ldr	r2, [pc, #216]	; (8006f6c <drawGun+0x10c>)
 8006e94:	7812      	ldrb	r2, [r2, #0]
 8006e96:	2a00      	cmp	r2, #0
 8006e98:	d1e8      	bne.n	8006e6c <drawGun+0xc>
				red = t_guns[pixel + 0];
 8006e9a:	4a35      	ldr	r2, [pc, #212]	; (8006f70 <drawGun+0x110>)
 8006e9c:	5cd5      	ldrb	r5, [r2, r3]
				green = t_guns[pixel + 1];
 8006e9e:	1c59      	adds	r1, r3, #1
 8006ea0:	5c57      	ldrb	r7, [r2, r1]
				blue = t_guns[pixel + 2];
 8006ea2:	3302      	adds	r3, #2
 8006ea4:	f812 8003 	ldrb.w	r8, [r2, r3]
 8006ea8:	e7e7      	b.n	8006e7a <drawGun+0x1a>
				int gun_x = width / 2 - 128 * scale / 2
						+ (int) ((float) x / tx_step);
 8006eaa:	ee07 4a90 	vmov	s15, r4
 8006eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eb2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8006eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006eba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ebe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ec2:	eef3 6a02 	vmov.f32	s13, #50	; 0x41900000  18.0
 8006ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
				int gun_y = height - 128 * scale + (int) ((float) y / ty_step)
 8006eca:	ee06 6a90 	vmov	s13, r6
 8006ece:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
 8006ed2:	ee28 8a07 	vmul.f32	s16, s16, s14
 8006ed6:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8006eda:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8006ede:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006f74 <drawGun+0x114>
 8006ee2:	ee38 8a07 	vadd.f32	s16, s16, s14
						+ 8;
 8006ee6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006eea:	ee38 8a07 	vadd.f32	s16, s16, s14
				int gun_y = height - 128 * scale + (int) ((float) y / ty_step)
 8006eee:	eebd 8ac8 	vcvt.s32.f32	s16, s16

				gun_x *= s_scale;
 8006ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006ef6:	ee17 0a90 	vmov	r0, s15
 8006efa:	f7f9 fb3b 	bl	8000574 <__aeabi_i2d>
 8006efe:	a318      	add	r3, pc, #96	; (adr r3, 8006f60 <drawGun+0x100>)
 8006f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f04:	f7f9 fba0 	bl	8000648 <__aeabi_dmul>
 8006f08:	f7f9 fe4e 	bl	8000ba8 <__aeabi_d2iz>
 8006f0c:	4681      	mov	r9, r0
				gun_x += s_offset;
				gun_y *= s_scale;
 8006f0e:	ee18 0a10 	vmov	r0, s16
 8006f12:	f7f9 fb2f 	bl	8000574 <__aeabi_i2d>
 8006f16:	a312      	add	r3, pc, #72	; (adr r3, 8006f60 <drawGun+0x100>)
 8006f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1c:	f7f9 fb94 	bl	8000648 <__aeabi_dmul>
 8006f20:	f7f9 fe42 	bl	8000ba8 <__aeabi_d2iz>
 8006f24:	4682      	mov	sl, r0

				narisi_velik_kvadrat(gun_x, gun_y,
						create_rgb(red, green, blue));
 8006f26:	4642      	mov	r2, r8
 8006f28:	4639      	mov	r1, r7
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f7ff f9d0 	bl	80062d0 <create_rgb>
				narisi_velik_kvadrat(gun_x, gun_y,
 8006f30:	b282      	uxth	r2, r0
 8006f32:	4651      	mov	r1, sl
 8006f34:	4648      	mov	r0, r9
 8006f36:	f7ff f8ed 	bl	8006114 <narisi_velik_kvadrat>
 8006f3a:	e7a3      	b.n	8006e84 <drawGun+0x24>
	for (int y = 0; y < 128; y += ty_step) {
 8006f3c:	3602      	adds	r6, #2
 8006f3e:	2e7f      	cmp	r6, #127	; 0x7f
 8006f40:	dc01      	bgt.n	8006f46 <drawGun+0xe6>
		for (int x = 0; x < 128; x += tx_step) {
 8006f42:	2400      	movs	r4, #0
 8006f44:	e79f      	b.n	8006e86 <drawGun+0x26>
			}
		}
	}
	if(time_gun > 0) time_gun--;
 8006f46:	4b09      	ldr	r3, [pc, #36]	; (8006f6c <drawGun+0x10c>)
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	b113      	cbz	r3, 8006f52 <drawGun+0xf2>
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	4a07      	ldr	r2, [pc, #28]	; (8006f6c <drawGun+0x10c>)
 8006f50:	7013      	strb	r3, [r2, #0]
}
 8006f52:	ecbd 8b02 	vpop	{d8}
 8006f56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f5a:	bf00      	nop
 8006f5c:	f3af 8000 	nop.w
 8006f60:	33333333 	.word	0x33333333
 8006f64:	40033333 	.word	0x40033333
 8006f68:	08060334 	.word	0x08060334
 8006f6c:	2001de70 	.word	0x2001de70
 8006f70:	0806c334 	.word	0x0806c334
 8006f74:	42100000 	.word	0x42100000

08006f78 <drawMap>:
void drawMap(CORDIC_HandleTypeDef *hc) {
 8006f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7c:	ed2d 8b10 	vpush	{d8-d15}
 8006f80:	b083      	sub	sp, #12
	TIMUT_stopwatch_set_time_mark(&sw1);
 8006f82:	48bf      	ldr	r0, [pc, #764]	; (8007280 <drawMap+0x308>)
 8006f84:	f001 faf6 	bl	8008574 <TIMUT_stopwatch_set_time_mark>
	float dx = 0, dy = 0, d1 = 10000, d2 = 10000, rvx = 0, rvy = 0, dof = 0,
			newAngle = 0, rhx = 0, rhy = 0, d = 0, rx = 0, ry = 0;
	int wx = 0, wy = 0;
	float vis;
	KBD_scan();
 8006f88:	f7fe fc94 	bl	80058b4 <KBD_scan>

	int ipx = (int) px;
 8006f8c:	4bbd      	ldr	r3, [pc, #756]	; (8007284 <drawMap+0x30c>)
 8006f8e:	edd3 7a00 	vldr	s15, [r3]
 8006f92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f96:	ee17 8a90 	vmov	r8, s15
	int ipy = (int) py;
 8006f9a:	4bbb      	ldr	r3, [pc, #748]	; (8007288 <drawMap+0x310>)
 8006f9c:	edd3 7a00 	vldr	s15, [r3]
 8006fa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006fa4:	edcd 7a01 	vstr	s15, [sp, #4]

	//MOVE PLAYER
	if (JOY_get_axis_position(Y) < 40) {
 8006fa8:	2001      	movs	r0, #1
 8006faa:	f7fe fc15 	bl	80057d8 <JOY_get_axis_position>
 8006fae:	2827      	cmp	r0, #39	; 0x27
 8006fb0:	d837      	bhi.n	8007022 <drawMap+0xaa>
		if (JOY_get_axis_position(X) < 40)
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f7fe fc10 	bl	80057d8 <JOY_get_axis_position>
 8006fb8:	2827      	cmp	r0, #39	; 0x27
 8006fba:	d80b      	bhi.n	8006fd4 <drawMap+0x5c>
			angle += player_turning_speed;
 8006fbc:	4cb3      	ldr	r4, [pc, #716]	; (800728c <drawMap+0x314>)
 8006fbe:	6820      	ldr	r0, [r4, #0]
 8006fc0:	f7f9 faea 	bl	8000598 <__aeabi_f2d>
 8006fc4:	a3aa      	add	r3, pc, #680	; (adr r3, 8007270 <drawMap+0x2f8>)
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f7f9 f987 	bl	80002dc <__adddf3>
 8006fce:	f7f9 fe13 	bl	8000bf8 <__aeabi_d2f>
 8006fd2:	6020      	str	r0, [r4, #0]
		if (JOY_get_axis_position(X) > 60)
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	f7fe fbff 	bl	80057d8 <JOY_get_axis_position>
 8006fda:	283c      	cmp	r0, #60	; 0x3c
 8006fdc:	d90b      	bls.n	8006ff6 <drawMap+0x7e>
			angle -= player_turning_speed;
 8006fde:	4cab      	ldr	r4, [pc, #684]	; (800728c <drawMap+0x314>)
 8006fe0:	6820      	ldr	r0, [r4, #0]
 8006fe2:	f7f9 fad9 	bl	8000598 <__aeabi_f2d>
 8006fe6:	a3a2      	add	r3, pc, #648	; (adr r3, 8007270 <drawMap+0x2f8>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f974 	bl	80002d8 <__aeabi_dsub>
 8006ff0:	f7f9 fe02 	bl	8000bf8 <__aeabi_d2f>
 8006ff4:	6020      	str	r0, [r4, #0]
		if (JOY_get_axis_position(X) < 40)
			angle -= player_turning_speed;
		if (JOY_get_axis_position(X) > 60)
			angle += player_turning_speed;
	}
	if (angle < 0)
 8006ff6:	4ba5      	ldr	r3, [pc, #660]	; (800728c <drawMap+0x314>)
 8006ff8:	edd3 7a00 	vldr	s15, [r3]
 8006ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007004:	d430      	bmi.n	8007068 <drawMap+0xf0>
		angle = 2 * PI;
	else if (angle > 2 * PI)
 8007006:	ee17 0a90 	vmov	r0, s15
 800700a:	f7f9 fac5 	bl	8000598 <__aeabi_f2d>
 800700e:	a39a      	add	r3, pc, #616	; (adr r3, 8007278 <drawMap+0x300>)
 8007010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007014:	f7f9 fda8 	bl	8000b68 <__aeabi_dcmpgt>
 8007018:	b340      	cbz	r0, 800706c <drawMap+0xf4>
		angle = 0;
 800701a:	4b9c      	ldr	r3, [pc, #624]	; (800728c <drawMap+0x314>)
 800701c:	2200      	movs	r2, #0
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e024      	b.n	800706c <drawMap+0xf4>
		if (JOY_get_axis_position(X) < 40)
 8007022:	2000      	movs	r0, #0
 8007024:	f7fe fbd8 	bl	80057d8 <JOY_get_axis_position>
 8007028:	2827      	cmp	r0, #39	; 0x27
 800702a:	d80b      	bhi.n	8007044 <drawMap+0xcc>
			angle -= player_turning_speed;
 800702c:	4c97      	ldr	r4, [pc, #604]	; (800728c <drawMap+0x314>)
 800702e:	6820      	ldr	r0, [r4, #0]
 8007030:	f7f9 fab2 	bl	8000598 <__aeabi_f2d>
 8007034:	a38e      	add	r3, pc, #568	; (adr r3, 8007270 <drawMap+0x2f8>)
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f94d 	bl	80002d8 <__aeabi_dsub>
 800703e:	f7f9 fddb 	bl	8000bf8 <__aeabi_d2f>
 8007042:	6020      	str	r0, [r4, #0]
		if (JOY_get_axis_position(X) > 60)
 8007044:	2000      	movs	r0, #0
 8007046:	f7fe fbc7 	bl	80057d8 <JOY_get_axis_position>
 800704a:	283c      	cmp	r0, #60	; 0x3c
 800704c:	d9d3      	bls.n	8006ff6 <drawMap+0x7e>
			angle += player_turning_speed;
 800704e:	4c8f      	ldr	r4, [pc, #572]	; (800728c <drawMap+0x314>)
 8007050:	6820      	ldr	r0, [r4, #0]
 8007052:	f7f9 faa1 	bl	8000598 <__aeabi_f2d>
 8007056:	a386      	add	r3, pc, #536	; (adr r3, 8007270 <drawMap+0x2f8>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 f93e 	bl	80002dc <__adddf3>
 8007060:	f7f9 fdca 	bl	8000bf8 <__aeabi_d2f>
 8007064:	6020      	str	r0, [r4, #0]
 8007066:	e7c6      	b.n	8006ff6 <drawMap+0x7e>
		angle = 2 * PI;
 8007068:	4a89      	ldr	r2, [pc, #548]	; (8007290 <drawMap+0x318>)
 800706a:	601a      	str	r2, [r3, #0]

	//POGLEJ A SE PLAYER LAHKO PREMAKNE
	int fCheck = 5;
	int fCheckX = 0, fCheckY = 0;
	if (cosf(angle) < 0)
 800706c:	4b87      	ldr	r3, [pc, #540]	; (800728c <drawMap+0x314>)
 800706e:	ed93 8a00 	vldr	s16, [r3]
 8007072:	eeb0 0a48 	vmov.f32	s0, s16
 8007076:	f003 f92f 	bl	800a2d8 <cosf>
 800707a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800707e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007082:	f100 80e6 	bmi.w	8007252 <drawMap+0x2da>
		fCheckX = -fCheck;
	else
		fCheckX = fCheck;
 8007086:	2505      	movs	r5, #5
	if (sinf(angle) < 0)
 8007088:	eeb0 0a48 	vmov.f32	s0, s16
 800708c:	f003 f970 	bl	800a370 <sinf>
 8007090:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007098:	f100 80de 	bmi.w	8007258 <drawMap+0x2e0>
		fCheckY = -fCheck;
	else
		fCheckY = fCheck;
 800709c:	2405      	movs	r4, #5

	if (JOY_get_axis_position(Y) > 60) {
 800709e:	2001      	movs	r0, #1
 80070a0:	f7fe fb9a 	bl	80057d8 <JOY_get_axis_position>
 80070a4:	283c      	cmp	r0, #60	; 0x3c
 80070a6:	d943      	bls.n	8007130 <drawMap+0x1b8>
		if (map[ipy / 10][(ipx + fCheckX) / 10] == 0)
 80070a8:	4a7a      	ldr	r2, [pc, #488]	; (8007294 <drawMap+0x31c>)
 80070aa:	9901      	ldr	r1, [sp, #4]
 80070ac:	fb82 0301 	smull	r0, r3, r2, r1
 80070b0:	17c9      	asrs	r1, r1, #31
 80070b2:	ebc1 01a3 	rsb	r1, r1, r3, asr #2
 80070b6:	eb05 0308 	add.w	r3, r5, r8
 80070ba:	fb82 0203 	smull	r0, r2, r2, r3
 80070be:	17db      	asrs	r3, r3, #31
 80070c0:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 80070c4:	4a74      	ldr	r2, [pc, #464]	; (8007298 <drawMap+0x320>)
 80070c6:	2032      	movs	r0, #50	; 0x32
 80070c8:	fb00 2201 	mla	r2, r0, r1, r2
 80070cc:	5cd3      	ldrb	r3, [r2, r3]
 80070ce:	b96b      	cbnz	r3, 80070ec <drawMap+0x174>
			px += player_speed * cosf(angle);
 80070d0:	4b6e      	ldr	r3, [pc, #440]	; (800728c <drawMap+0x314>)
 80070d2:	ed93 0a00 	vldr	s0, [r3]
 80070d6:	f003 f8ff 	bl	800a2d8 <cosf>
 80070da:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070de:	4b69      	ldr	r3, [pc, #420]	; (8007284 <drawMap+0x30c>)
 80070e0:	edd3 7a00 	vldr	s15, [r3]
 80070e4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80070e8:	ed83 0a00 	vstr	s0, [r3]
		if (map[(ipy + fCheckY) / 10][ipx / 10] == 0)
 80070ec:	9b01      	ldr	r3, [sp, #4]
 80070ee:	18e3      	adds	r3, r4, r3
 80070f0:	4a68      	ldr	r2, [pc, #416]	; (8007294 <drawMap+0x31c>)
 80070f2:	fb82 0103 	smull	r0, r1, r2, r3
 80070f6:	17db      	asrs	r3, r3, #31
 80070f8:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80070fc:	fb82 1208 	smull	r1, r2, r2, r8
 8007100:	ea4f 71e8 	mov.w	r1, r8, asr #31
 8007104:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 8007108:	4963      	ldr	r1, [pc, #396]	; (8007298 <drawMap+0x320>)
 800710a:	2032      	movs	r0, #50	; 0x32
 800710c:	fb00 1303 	mla	r3, r0, r3, r1
 8007110:	5c9b      	ldrb	r3, [r3, r2]
 8007112:	b96b      	cbnz	r3, 8007130 <drawMap+0x1b8>
			py += player_speed * sinf(angle);
 8007114:	4b5d      	ldr	r3, [pc, #372]	; (800728c <drawMap+0x314>)
 8007116:	ed93 0a00 	vldr	s0, [r3]
 800711a:	f003 f929 	bl	800a370 <sinf>
 800711e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007122:	4b59      	ldr	r3, [pc, #356]	; (8007288 <drawMap+0x310>)
 8007124:	edd3 7a00 	vldr	s15, [r3]
 8007128:	ee37 0a80 	vadd.f32	s0, s15, s0
 800712c:	ed83 0a00 	vstr	s0, [r3]
	}
	if (JOY_get_axis_position(Y) < 40) {
 8007130:	2001      	movs	r0, #1
 8007132:	f7fe fb51 	bl	80057d8 <JOY_get_axis_position>
 8007136:	2827      	cmp	r0, #39	; 0x27
 8007138:	d847      	bhi.n	80071ca <drawMap+0x252>
		if (map[ipy / 10][(ipx - fCheckX) / 10] == 0)
 800713a:	4b56      	ldr	r3, [pc, #344]	; (8007294 <drawMap+0x31c>)
 800713c:	9a01      	ldr	r2, [sp, #4]
 800713e:	fb83 0102 	smull	r0, r1, r3, r2
 8007142:	17d2      	asrs	r2, r2, #31
 8007144:	ebc2 01a1 	rsb	r1, r2, r1, asr #2
 8007148:	eba8 0505 	sub.w	r5, r8, r5
 800714c:	fb83 2305 	smull	r2, r3, r3, r5
 8007150:	17ed      	asrs	r5, r5, #31
 8007152:	ebc5 03a3 	rsb	r3, r5, r3, asr #2
 8007156:	4a50      	ldr	r2, [pc, #320]	; (8007298 <drawMap+0x320>)
 8007158:	2032      	movs	r0, #50	; 0x32
 800715a:	fb00 2201 	mla	r2, r0, r1, r2
 800715e:	5cd3      	ldrb	r3, [r2, r3]
 8007160:	b97b      	cbnz	r3, 8007182 <drawMap+0x20a>
			px += -player_speed * cosf(angle);
 8007162:	4b4a      	ldr	r3, [pc, #296]	; (800728c <drawMap+0x314>)
 8007164:	ed93 0a00 	vldr	s0, [r3]
 8007168:	f003 f8b6 	bl	800a2d8 <cosf>
 800716c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8007170:	ee20 7a27 	vmul.f32	s14, s0, s15
 8007174:	4b43      	ldr	r3, [pc, #268]	; (8007284 <drawMap+0x30c>)
 8007176:	edd3 7a00 	vldr	s15, [r3]
 800717a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800717e:	edc3 7a00 	vstr	s15, [r3]
		if (map[(ipy - fCheckY) / 10][ipx / 10] == 0)
 8007182:	9b01      	ldr	r3, [sp, #4]
 8007184:	1b1c      	subs	r4, r3, r4
 8007186:	4a43      	ldr	r2, [pc, #268]	; (8007294 <drawMap+0x31c>)
 8007188:	fb82 1304 	smull	r1, r3, r2, r4
 800718c:	17e4      	asrs	r4, r4, #31
 800718e:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8007192:	fb82 1208 	smull	r1, r2, r2, r8
 8007196:	ea4f 71e8 	mov.w	r1, r8, asr #31
 800719a:	ebc1 02a2 	rsb	r2, r1, r2, asr #2
 800719e:	493e      	ldr	r1, [pc, #248]	; (8007298 <drawMap+0x320>)
 80071a0:	2032      	movs	r0, #50	; 0x32
 80071a2:	fb00 1303 	mla	r3, r0, r3, r1
 80071a6:	5c9b      	ldrb	r3, [r3, r2]
 80071a8:	b97b      	cbnz	r3, 80071ca <drawMap+0x252>
			py += -player_speed * sinf(angle);
 80071aa:	4b38      	ldr	r3, [pc, #224]	; (800728c <drawMap+0x314>)
 80071ac:	ed93 0a00 	vldr	s0, [r3]
 80071b0:	f003 f8de 	bl	800a370 <sinf>
 80071b4:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 80071b8:	ee20 7a27 	vmul.f32	s14, s0, s15
 80071bc:	4b32      	ldr	r3, [pc, #200]	; (8007288 <drawMap+0x310>)
 80071be:	edd3 7a00 	vldr	s15, [r3]
 80071c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071c6:	edc3 7a00 	vstr	s15, [r3]
	}


	//DA LAHKO IGRALEC ODPRE VRATA
	float roka = 6;
	float rokaPosX = px + roka * cosf(angle);
 80071ca:	4b30      	ldr	r3, [pc, #192]	; (800728c <drawMap+0x314>)
 80071cc:	ed93 9a00 	vldr	s18, [r3]
 80071d0:	eeb0 0a49 	vmov.f32	s0, s18
 80071d4:	f003 f880 	bl	800a2d8 <cosf>
 80071d8:	eef1 8a08 	vmov.f32	s17, #24	; 0x40c00000  6.0
 80071dc:	ee60 7a28 	vmul.f32	s15, s0, s17
 80071e0:	4b28      	ldr	r3, [pc, #160]	; (8007284 <drawMap+0x30c>)
 80071e2:	ed93 8a00 	vldr	s16, [r3]
 80071e6:	ee37 8a88 	vadd.f32	s16, s15, s16
	float rokaPosY = py + roka * sinf(angle);
 80071ea:	eeb0 0a49 	vmov.f32	s0, s18
 80071ee:	f003 f8bf 	bl	800a370 <sinf>
 80071f2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80071f6:	4b24      	ldr	r3, [pc, #144]	; (8007288 <drawMap+0x310>)
 80071f8:	edd3 8a00 	vldr	s17, [r3]
 80071fc:	ee77 8aa8 	vadd.f32	s17, s15, s17
	if (!KBD_get_button_state(BTN_ESC)
 8007200:	2001      	movs	r0, #1
 8007202:	f7fe fb93 	bl	800592c <KBD_get_button_state>
 8007206:	b9a0      	cbnz	r0, 8007232 <drawMap+0x2ba>
			&& map[(int) rokaPosY / Blocksize][(int) rokaPosX / Blocksize] == 3)
 8007208:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800720c:	4b23      	ldr	r3, [pc, #140]	; (800729c <drawMap+0x324>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	ee17 2a90 	vmov	r2, s15
 8007214:	fb92 f2f3 	sdiv	r2, r2, r3
 8007218:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800721c:	ee17 1a90 	vmov	r1, s15
 8007220:	fb91 f3f3 	sdiv	r3, r1, r3
 8007224:	491c      	ldr	r1, [pc, #112]	; (8007298 <drawMap+0x320>)
 8007226:	2032      	movs	r0, #50	; 0x32
 8007228:	fb00 1102 	mla	r1, r0, r2, r1
 800722c:	5cc9      	ldrb	r1, [r1, r3]
 800722e:	2903      	cmp	r1, #3
 8007230:	d015      	beq.n	800725e <drawMap+0x2e6>
		float tmpty2 = sinf(newAngle) * 1847.52;
		float tmptx1 = px / 0.3;
		float tmpty1 = py / 0.3;

		for (int y = lineOff + lineH; y < height; y++) {
			vis = 1;
 8007232:	eebb ea0e 	vmov.f32	s28, #190	; 0xc1f00000 -30.0
 8007236:	ed9f 9a1a 	vldr	s18, [pc, #104]	; 80072a0 <drawMap+0x328>
 800723a:	eef0 8a49 	vmov.f32	s17, s18
 800723e:	eeb0 aa49 	vmov.f32	s20, s18
 8007242:	eef0 9a49 	vmov.f32	s19, s18
 8007246:	eef0 aa49 	vmov.f32	s21, s18
 800724a:	eeb0 ba49 	vmov.f32	s22, s18
 800724e:	f000 bca4 	b.w	8007b9a <drawMap+0xc22>
		fCheckX = -fCheck;
 8007252:	f06f 0504 	mvn.w	r5, #4
 8007256:	e717      	b.n	8007088 <drawMap+0x110>
		fCheckY = -fCheck;
 8007258:	f06f 0404 	mvn.w	r4, #4
 800725c:	e71f      	b.n	800709e <drawMap+0x126>
		map[(int) rokaPosY / Blocksize][(int) rokaPosX / Blocksize] = 0;
 800725e:	490e      	ldr	r1, [pc, #56]	; (8007298 <drawMap+0x320>)
 8007260:	fb00 1202 	mla	r2, r0, r2, r1
 8007264:	2100      	movs	r1, #0
 8007266:	54d1      	strb	r1, [r2, r3]
 8007268:	e7e3      	b.n	8007232 <drawMap+0x2ba>
 800726a:	bf00      	nop
 800726c:	f3af 8000 	nop.w
 8007270:	47ae147b 	.word	0x47ae147b
 8007274:	3fb47ae1 	.word	0x3fb47ae1
 8007278:	f01b866e 	.word	0xf01b866e
 800727c:	401921f9 	.word	0x401921f9
 8007280:	2001de80 	.word	0x2001de80
 8007284:	20000018 	.word	0x20000018
 8007288:	2000001c 	.word	0x2000001c
 800728c:	20000010 	.word	0x20000010
 8007290:	40c90fd0 	.word	0x40c90fd0
 8007294:	66666667 	.word	0x66666667
 8007298:	20000994 	.word	0x20000994
 800729c:	2000000c 	.word	0x2000000c
 80072a0:	00000000 	.word	0x00000000
			newAngle += 2 * PI;
 80072a4:	f7f9 f978 	bl	8000598 <__aeabi_f2d>
 80072a8:	a3dc      	add	r3, pc, #880	; (adr r3, 800761c <drawMap+0x6a4>)
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f7f9 f815 	bl	80002dc <__adddf3>
 80072b2:	f7f9 fca1 	bl	8000bf8 <__aeabi_d2f>
 80072b6:	ee0d 0a90 	vmov	s27, r0
		float aTan = 1 / tanf(newAngle);
 80072ba:	eeb0 0a6d 	vmov.f32	s0, s27
 80072be:	f003 f89d 	bl	800a3fc <tanf>
 80072c2:	eef0 ba40 	vmov.f32	s23, s0
 80072c6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80072ca:	ee87 8a80 	vdiv.f32	s16, s15, s0
		if (newAngle >= PI) { //GLEDA GOR
 80072ce:	ee1d 0a90 	vmov	r0, s27
 80072d2:	f7f9 f961 	bl	8000598 <__aeabi_f2d>
 80072d6:	4604      	mov	r4, r0
 80072d8:	460d      	mov	r5, r1
 80072da:	a3c5      	add	r3, pc, #788	; (adr r3, 80075f0 <drawMap+0x678>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f9 fc38 	bl	8000b54 <__aeabi_dcmpge>
 80072e4:	b360      	cbz	r0, 8007340 <drawMap+0x3c8>
			rvy = ipy - (ipy % Blocksize) - 0.0001;
 80072e6:	4bc8      	ldr	r3, [pc, #800]	; (8007608 <drawMap+0x690>)
 80072e8:	f8d3 a000 	ldr.w	sl, [r3]
 80072ec:	9b01      	ldr	r3, [sp, #4]
 80072ee:	fb93 f0fa 	sdiv	r0, r3, sl
 80072f2:	fb0a 3010 	mls	r0, sl, r0, r3
 80072f6:	1a18      	subs	r0, r3, r0
 80072f8:	f7f9 f93c 	bl	8000574 <__aeabi_i2d>
 80072fc:	a3ba      	add	r3, pc, #744	; (adr r3, 80075e8 <drawMap+0x670>)
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f7f8 ffe9 	bl	80002d8 <__aeabi_dsub>
 8007306:	f7f9 fc77 	bl	8000bf8 <__aeabi_d2f>
 800730a:	ee0a 0a10 	vmov	s20, r0
			rvx = (py - rvy) * -aTan + px;
 800730e:	4bbf      	ldr	r3, [pc, #764]	; (800760c <drawMap+0x694>)
 8007310:	edd3 9a00 	vldr	s19, [r3]
 8007314:	ee79 9aca 	vsub.f32	s19, s19, s20
 8007318:	ee68 9a69 	vnmul.f32	s19, s16, s19
 800731c:	4bbc      	ldr	r3, [pc, #752]	; (8007610 <drawMap+0x698>)
 800731e:	edd3 7a00 	vldr	s15, [r3]
 8007322:	ee79 9aa7 	vadd.f32	s19, s19, s15
			dy = -Blocksize;
 8007326:	f1ca 0a00 	rsb	sl, sl, #0
 800732a:	ee07 aa90 	vmov	s15, sl
 800732e:	eef8 aae7 	vcvt.f32.s32	s21, s15
			dx = dy * aTan;
 8007332:	ee28 ba2a 	vmul.f32	s22, s16, s21
		dof = 0;
 8007336:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8007614 <drawMap+0x69c>
				dof = render_distance;
 800733a:	f04f 0a00 	mov.w	sl, #0
 800733e:	e048      	b.n	80073d2 <drawMap+0x45a>
		} else if (newAngle < PI) {  //GLEDA DOL
 8007340:	a3ab      	add	r3, pc, #684	; (adr r3, 80075f0 <drawMap+0x678>)
 8007342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fbef 	bl	8000b2c <__aeabi_dcmplt>
 800734e:	b308      	cbz	r0, 8007394 <drawMap+0x41c>
			rvy = ipy - (ipy % Blocksize) + Blocksize;
 8007350:	4bad      	ldr	r3, [pc, #692]	; (8007608 <drawMap+0x690>)
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	9901      	ldr	r1, [sp, #4]
 8007356:	fb91 f3f2 	sdiv	r3, r1, r2
 800735a:	fb02 1313 	mls	r3, r2, r3, r1
 800735e:	1acb      	subs	r3, r1, r3
 8007360:	4413      	add	r3, r2
 8007362:	ee07 3a90 	vmov	s15, r3
 8007366:	eeb8 aae7 	vcvt.f32.s32	s20, s15
			rvx = (py - rvy) * -aTan + px;
 800736a:	4ba8      	ldr	r3, [pc, #672]	; (800760c <drawMap+0x694>)
 800736c:	edd3 9a00 	vldr	s19, [r3]
 8007370:	ee79 9aca 	vsub.f32	s19, s19, s20
 8007374:	ee68 9a69 	vnmul.f32	s19, s16, s19
 8007378:	4ba5      	ldr	r3, [pc, #660]	; (8007610 <drawMap+0x698>)
 800737a:	edd3 7a00 	vldr	s15, [r3]
 800737e:	ee79 9aa7 	vadd.f32	s19, s19, s15
			dy = Blocksize;
 8007382:	ee07 2a90 	vmov	s15, r2
 8007386:	eef8 aae7 	vcvt.f32.s32	s21, s15
			dx = dy * aTan;
 800738a:	ee28 ba2a 	vmul.f32	s22, s16, s21
		dof = 0;
 800738e:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8007614 <drawMap+0x69c>
 8007392:	e7d2      	b.n	800733a <drawMap+0x3c2>
		} else if (newAngle == 0 || newAngle == PI) { // GLEDA  CIST LECVO ALPA CIST DESNO
 8007394:	eef5 da40 	vcmp.f32	s27, #0.0
 8007398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800739c:	d008      	beq.n	80073b0 <drawMap+0x438>
 800739e:	a394      	add	r3, pc, #592	; (adr r3, 80075f0 <drawMap+0x678>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	4620      	mov	r0, r4
 80073a6:	4629      	mov	r1, r5
 80073a8:	f7f9 fbb6 	bl	8000b18 <__aeabi_dcmpeq>
 80073ac:	2800      	cmp	r0, #0
 80073ae:	d03b      	beq.n	8007428 <drawMap+0x4b0>
			rvx = px;
 80073b0:	4b97      	ldr	r3, [pc, #604]	; (8007610 <drawMap+0x698>)
 80073b2:	edd3 9a00 	vldr	s19, [r3]
			rvy = py;
 80073b6:	4b95      	ldr	r3, [pc, #596]	; (800760c <drawMap+0x694>)
 80073b8:	ed93 aa00 	vldr	s20, [r3]
			dof = render_distance;
 80073bc:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80073c0:	e7bb      	b.n	800733a <drawMap+0x3c2>
				rvx += dx;
 80073c2:	ee79 9a8b 	vadd.f32	s19, s19, s22
				rvy += dy;
 80073c6:	ee3a aa2a 	vadd.f32	s20, s20, s21
				dof++;
 80073ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80073ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
		while (dof < render_distance) { //PREVER ALI SE KAM ZALETI V "render_distance" KORAKIH
 80073d2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 80073d6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80073da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073de:	d526      	bpl.n	800742e <drawMap+0x4b6>
			wx = rvx / Blocksize;
 80073e0:	4b89      	ldr	r3, [pc, #548]	; (8007608 <drawMap+0x690>)
 80073e2:	edd3 7a00 	vldr	s15, [r3]
 80073e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80073ea:	ee89 7aa7 	vdiv.f32	s14, s19, s15
 80073ee:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80073f2:	ee17 3a10 	vmov	r3, s14
			wy = rvy / Blocksize;
 80073f6:	ee8a 7a27 	vdiv.f32	s14, s20, s15
 80073fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
			if (wx > -1 && wx < map_width && wy > -1 && wy < map_height && map[(int) wy][(int) wx] != 0) {
 80073fe:	2b31      	cmp	r3, #49	; 0x31
 8007400:	d8df      	bhi.n	80073c2 <drawMap+0x44a>
 8007402:	ee17 2a10 	vmov	r2, s14
 8007406:	2a00      	cmp	r2, #0
 8007408:	dbdb      	blt.n	80073c2 <drawMap+0x44a>
 800740a:	2a18      	cmp	r2, #24
 800740c:	dcd9      	bgt.n	80073c2 <drawMap+0x44a>
 800740e:	4a82      	ldr	r2, [pc, #520]	; (8007618 <drawMap+0x6a0>)
 8007410:	2132      	movs	r1, #50	; 0x32
 8007412:	ee17 0a10 	vmov	r0, s14
 8007416:	fb01 2200 	mla	r2, r1, r0, r2
 800741a:	5cd3      	ldrb	r3, [r2, r3]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d0d0      	beq.n	80073c2 <drawMap+0x44a>
				vmt = map[(int) wy][(int) wx];
 8007420:	469a      	mov	sl, r3
				dof = render_distance;
 8007422:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
				vmt = map[(int) wy][(int) wx];
 8007426:	e7d4      	b.n	80073d2 <drawMap+0x45a>
		dof = 0;
 8007428:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8007614 <drawMap+0x69c>
 800742c:	e785      	b.n	800733a <drawMap+0x3c2>
		d1 = sqrt((px - rvx) * (px - rvx) + (py - rvy) * (py - rvy));
 800742e:	4b78      	ldr	r3, [pc, #480]	; (8007610 <drawMap+0x698>)
 8007430:	edd3 7a00 	vldr	s15, [r3]
 8007434:	ee77 7ae9 	vsub.f32	s15, s15, s19
 8007438:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800743c:	4b73      	ldr	r3, [pc, #460]	; (800760c <drawMap+0x694>)
 800743e:	edd3 7a00 	vldr	s15, [r3]
 8007442:	ee77 7aca 	vsub.f32	s15, s15, s20
 8007446:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800744a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800744e:	ee17 0a90 	vmov	r0, s15
 8007452:	f7f9 f8a1 	bl	8000598 <__aeabi_f2d>
 8007456:	ec41 0b10 	vmov	d0, r0, r1
 800745a:	f003 f8b5 	bl	800a5c8 <sqrt>
 800745e:	ec51 0b10 	vmov	r0, r1, d0
 8007462:	f7f9 fbc9 	bl	8000bf8 <__aeabi_d2f>
 8007466:	ee08 0a10 	vmov	s16, r0
		if (newAngle >= ((3 * PI) / 2) || newAngle <= PI / 2) { //GLEDA DESNO
 800746a:	a363      	add	r3, pc, #396	; (adr r3, 80075f8 <drawMap+0x680>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	4620      	mov	r0, r4
 8007472:	4629      	mov	r1, r5
 8007474:	f7f9 fb6e 	bl	8000b54 <__aeabi_dcmpge>
 8007478:	b938      	cbnz	r0, 800748a <drawMap+0x512>
 800747a:	a361      	add	r3, pc, #388	; (adr r3, 8007600 <drawMap+0x688>)
 800747c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007480:	4620      	mov	r0, r4
 8007482:	4629      	mov	r1, r5
 8007484:	f7f9 fb5c 	bl	8000b40 <__aeabi_dcmple>
 8007488:	b318      	cbz	r0, 80074d2 <drawMap+0x55a>
			rhx = ipx - (ipx % Blocksize) + Blocksize;
 800748a:	4b5f      	ldr	r3, [pc, #380]	; (8007608 <drawMap+0x690>)
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	fb98 f3f2 	sdiv	r3, r8, r2
 8007492:	fb02 8313 	mls	r3, r2, r3, r8
 8007496:	eba8 0303 	sub.w	r3, r8, r3
 800749a:	4413      	add	r3, r2
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 8ae7 	vcvt.f32.s32	s17, s15
			rhy = (px - rhx) * -nTan + py;
 80074a4:	4b5a      	ldr	r3, [pc, #360]	; (8007610 <drawMap+0x698>)
 80074a6:	ed93 9a00 	vldr	s18, [r3]
 80074aa:	ee39 9a68 	vsub.f32	s18, s18, s17
 80074ae:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
 80074b2:	4b56      	ldr	r3, [pc, #344]	; (800760c <drawMap+0x694>)
 80074b4:	edd3 7a00 	vldr	s15, [r3]
 80074b8:	ee39 9a27 	vadd.f32	s18, s18, s15
			dx = Blocksize;
 80074bc:	ee07 2a90 	vmov	s15, r2
 80074c0:	eeb8 bae7 	vcvt.f32.s32	s22, s15
			dy = dx * nTan;
 80074c4:	ee6b aa8b 	vmul.f32	s21, s23, s22
		dof = 0;
 80074c8:	eddf 6a52 	vldr	s13, [pc, #328]	; 8007614 <drawMap+0x69c>
				dof = render_distance;
 80074cc:	f04f 0b00 	mov.w	fp, #0
 80074d0:	e05c      	b.n	800758c <drawMap+0x614>
		} else if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) {  //GLEDA LEVO
 80074d2:	a34b      	add	r3, pc, #300	; (adr r3, 8007600 <drawMap+0x688>)
 80074d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d8:	4620      	mov	r0, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	f7f9 fb44 	bl	8000b68 <__aeabi_dcmpgt>
 80074e0:	b390      	cbz	r0, 8007548 <drawMap+0x5d0>
 80074e2:	a345      	add	r3, pc, #276	; (adr r3, 80075f8 <drawMap+0x680>)
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	4620      	mov	r0, r4
 80074ea:	4629      	mov	r1, r5
 80074ec:	f7f9 fb1e 	bl	8000b2c <__aeabi_dcmplt>
 80074f0:	b350      	cbz	r0, 8007548 <drawMap+0x5d0>
			rhx = ipx - (ipx % Blocksize) - 0.0001;
 80074f2:	4b45      	ldr	r3, [pc, #276]	; (8007608 <drawMap+0x690>)
 80074f4:	f8d3 b000 	ldr.w	fp, [r3]
 80074f8:	fb98 f0fb 	sdiv	r0, r8, fp
 80074fc:	fb0b 8010 	mls	r0, fp, r0, r8
 8007500:	eba8 0000 	sub.w	r0, r8, r0
 8007504:	f7f9 f836 	bl	8000574 <__aeabi_i2d>
 8007508:	a337      	add	r3, pc, #220	; (adr r3, 80075e8 <drawMap+0x670>)
 800750a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750e:	f7f8 fee3 	bl	80002d8 <__aeabi_dsub>
 8007512:	f7f9 fb71 	bl	8000bf8 <__aeabi_d2f>
 8007516:	ee08 0a90 	vmov	s17, r0
			rhy = (px - rhx) * -nTan + py;
 800751a:	4b3d      	ldr	r3, [pc, #244]	; (8007610 <drawMap+0x698>)
 800751c:	ed93 9a00 	vldr	s18, [r3]
 8007520:	ee39 9a68 	vsub.f32	s18, s18, s17
 8007524:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
 8007528:	4b38      	ldr	r3, [pc, #224]	; (800760c <drawMap+0x694>)
 800752a:	edd3 7a00 	vldr	s15, [r3]
 800752e:	ee39 9a27 	vadd.f32	s18, s18, s15
			dx = -Blocksize;
 8007532:	f1cb 0b00 	rsb	fp, fp, #0
 8007536:	ee07 ba90 	vmov	s15, fp
 800753a:	eeb8 bae7 	vcvt.f32.s32	s22, s15
			dy = dx * nTan;
 800753e:	ee6b aa8b 	vmul.f32	s21, s23, s22
		dof = 0;
 8007542:	eddf 6a34 	vldr	s13, [pc, #208]	; 8007614 <drawMap+0x69c>
			dy = dx * nTan;
 8007546:	e7c1      	b.n	80074cc <drawMap+0x554>
		} else if (newAngle == PI / 2 || newAngle == (3 * PI) / 2) {
 8007548:	a32d      	add	r3, pc, #180	; (adr r3, 8007600 <drawMap+0x688>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	4620      	mov	r0, r4
 8007550:	4629      	mov	r1, r5
 8007552:	f7f9 fae1 	bl	8000b18 <__aeabi_dcmpeq>
 8007556:	b940      	cbnz	r0, 800756a <drawMap+0x5f2>
 8007558:	a327      	add	r3, pc, #156	; (adr r3, 80075f8 <drawMap+0x680>)
 800755a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800755e:	4620      	mov	r0, r4
 8007560:	4629      	mov	r1, r5
 8007562:	f7f9 fad9 	bl	8000b18 <__aeabi_dcmpeq>
 8007566:	2800      	cmp	r0, #0
 8007568:	d03b      	beq.n	80075e2 <drawMap+0x66a>
			rhx = px;
 800756a:	4b29      	ldr	r3, [pc, #164]	; (8007610 <drawMap+0x698>)
 800756c:	edd3 8a00 	vldr	s17, [r3]
			rhy = py;
 8007570:	4b26      	ldr	r3, [pc, #152]	; (800760c <drawMap+0x694>)
 8007572:	ed93 9a00 	vldr	s18, [r3]
			dof = render_distance;
 8007576:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 800757a:	e7a7      	b.n	80074cc <drawMap+0x554>
				rhx += dx;
 800757c:	ee78 8a8b 	vadd.f32	s17, s17, s22
				rhy += dy;
 8007580:	ee39 9a2a 	vadd.f32	s18, s18, s21
				dof++;
 8007584:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007588:	ee76 6aa7 	vadd.f32	s13, s13, s15
		while (dof < render_distance) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 800758c:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8007590:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007598:	d544      	bpl.n	8007624 <drawMap+0x6ac>
			wx = rhx / Blocksize;
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <drawMap+0x690>)
 800759c:	edd3 7a00 	vldr	s15, [r3]
 80075a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075a4:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 80075a8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80075ac:	ee17 3a10 	vmov	r3, s14
			wy = rhy / Blocksize;
 80075b0:	ee89 7a27 	vdiv.f32	s14, s18, s15
 80075b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
			if (wx > -1 && wx < map_width && wy > -1 && wy < map_height
 80075b8:	2b31      	cmp	r3, #49	; 0x31
 80075ba:	d8df      	bhi.n	800757c <drawMap+0x604>
 80075bc:	ee17 2a10 	vmov	r2, s14
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	dbdb      	blt.n	800757c <drawMap+0x604>
 80075c4:	2a18      	cmp	r2, #24
 80075c6:	dcd9      	bgt.n	800757c <drawMap+0x604>
					&& map[wy][wx] != 0) {
 80075c8:	4a13      	ldr	r2, [pc, #76]	; (8007618 <drawMap+0x6a0>)
 80075ca:	2132      	movs	r1, #50	; 0x32
 80075cc:	ee17 0a10 	vmov	r0, s14
 80075d0:	fb01 2200 	mla	r2, r1, r0, r2
 80075d4:	5cd3      	ldrb	r3, [r2, r3]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d0d0      	beq.n	800757c <drawMap+0x604>
				hmt = map[wy][wx];
 80075da:	469b      	mov	fp, r3
				dof = render_distance;
 80075dc:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
				hmt = map[wy][wx];
 80075e0:	e7d4      	b.n	800758c <drawMap+0x614>
		dof = 0;
 80075e2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8007614 <drawMap+0x69c>
 80075e6:	e771      	b.n	80074cc <drawMap+0x554>
 80075e8:	eb1c432d 	.word	0xeb1c432d
 80075ec:	3f1a36e2 	.word	0x3f1a36e2
 80075f0:	f01b866e 	.word	0xf01b866e
 80075f4:	400921f9 	.word	0x400921f9
 80075f8:	7414a4d2 	.word	0x7414a4d2
 80075fc:	4012d97b 	.word	0x4012d97b
 8007600:	f01b866e 	.word	0xf01b866e
 8007604:	3ff921f9 	.word	0x3ff921f9
 8007608:	2000000c 	.word	0x2000000c
 800760c:	2000001c 	.word	0x2000001c
 8007610:	20000018 	.word	0x20000018
 8007614:	00000000 	.word	0x00000000
 8007618:	20000994 	.word	0x20000994
 800761c:	f01b866e 	.word	0xf01b866e
 8007620:	401921f9 	.word	0x401921f9
		d2 = sqrt((px - rhx) * (px - rhx) + (py - rhy) * (py - rhy));
 8007624:	4bd2      	ldr	r3, [pc, #840]	; (8007970 <drawMap+0x9f8>)
 8007626:	edd3 7a00 	vldr	s15, [r3]
 800762a:	ee77 7ae8 	vsub.f32	s15, s15, s17
 800762e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8007632:	4bd0      	ldr	r3, [pc, #832]	; (8007974 <drawMap+0x9fc>)
 8007634:	edd3 7a00 	vldr	s15, [r3]
 8007638:	ee77 7ac9 	vsub.f32	s15, s15, s18
 800763c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007644:	ee17 0a90 	vmov	r0, s15
 8007648:	f7f8 ffa6 	bl	8000598 <__aeabi_f2d>
 800764c:	ec41 0b10 	vmov	d0, r0, r1
 8007650:	f002 ffba 	bl	800a5c8 <sqrt>
 8007654:	ec51 0b10 	vmov	r0, r1, d0
 8007658:	f7f9 face 	bl	8000bf8 <__aeabi_d2f>
 800765c:	ee07 0a90 	vmov	s15, r0
		if (d1 > d2) {
 8007660:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007668:	f340 808b 	ble.w	8007782 <drawMap+0x80a>
 800766c:	46da      	mov	sl, fp
			ry = rhy;
 800766e:	eef0 ba49 	vmov.f32	s23, s18
			rx = rhx;
 8007672:	eeb0 ca68 	vmov.f32	s24, s17
			d = d2;
 8007676:	ee08 0a10 	vmov	s16, r0
			shade = 0.5;
 800767a:	eeb6 da00 	vmov.f32	s26, #96	; 0x3f000000  0.5
		vis = visibility(d);
 800767e:	eeb0 0a48 	vmov.f32	s0, s16
 8007682:	f7fe fe71 	bl	8006368 <visibility>
 8007686:	eef0 ca40 	vmov.f32	s25, s0
		float lineH = (Blocksize * 100) / (d * cosf(z * DEGREE)); //POPRAVI FISHEYE
 800768a:	4bbb      	ldr	r3, [pc, #748]	; (8007978 <drawMap+0xa00>)
 800768c:	f8d3 b000 	ldr.w	fp, [r3]
 8007690:	2364      	movs	r3, #100	; 0x64
 8007692:	fb03 f30b 	mul.w	r3, r3, fp
 8007696:	ee07 3a90 	vmov	s15, r3
 800769a:	eeb8 fae7 	vcvt.f32.s32	s30, s15
 800769e:	4630      	mov	r0, r6
 80076a0:	4639      	mov	r1, r7
 80076a2:	f7f9 faa9 	bl	8000bf8 <__aeabi_d2f>
 80076a6:	ee00 0a10 	vmov	s0, r0
 80076aa:	f002 fe15 	bl	800a2d8 <cosf>
 80076ae:	ee20 8a08 	vmul.f32	s16, s0, s16
 80076b2:	eecf ea08 	vdiv.f32	s29, s30, s16
		float ty_step = 32.0f / (float) lineH; //ZATO DA SE TEKSTURA ENAKOMERNO PORAZDELI
 80076b6:	eddf 7ab1 	vldr	s15, [pc, #708]	; 800797c <drawMap+0xa04>
 80076ba:	eec7 faae 	vdiv.f32	s31, s15, s29
		if (lineH > height) {
 80076be:	eddf 7ab0 	vldr	s15, [pc, #704]	; 8007980 <drawMap+0xa08>
 80076c2:	eef4 eae7 	vcmpe.f32	s29, s15
 80076c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ca:	dd61      	ble.n	8007790 <drawMap+0x818>
			ty_offset = (lineH - height) / 2.0f;
 80076cc:	ee3e 8ae7 	vsub.f32	s16, s29, s15
 80076d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80076d4:	ee28 8a07 	vmul.f32	s16, s16, s14
			lineH = height;
 80076d8:	eef0 ea67 	vmov.f32	s29, s15
		float lineOff = 50 - lineH / 2;
 80076dc:	eeb6 fa00 	vmov.f32	s30, #96	; 0x3f000000  0.5
 80076e0:	ee6e 7a8f 	vmul.f32	s15, s29, s30
 80076e4:	ed9f faa7 	vldr	s30, [pc, #668]	; 8007984 <drawMap+0xa0c>
 80076e8:	ee3f fa67 	vsub.f32	s30, s30, s15
		float ty = ty_offset * ty_step; //+ (hmt - 1) * 32;
 80076ec:	ee28 8a2f 	vmul.f32	s16, s16, s31
		float scale = (float) Blocksize / 32.0f;
 80076f0:	ee07 ba90 	vmov	s15, fp
 80076f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f8:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8007988 <drawMap+0xa10>
 80076fc:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (shade == 1) {
 8007700:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007704:	eeb4 da47 	vcmp.f32	s26, s14
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	d143      	bne.n	8007796 <drawMap+0x81e>
			tx = (int) (rx / scale) % 32;
 800770e:	ee8c 7a27 	vdiv.f32	s14, s24, s15
 8007712:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007716:	ee17 3a90 	vmov	r3, s15
 800771a:	425a      	negs	r2, r3
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	f002 021f 	and.w	r2, r2, #31
 8007724:	bf58      	it	pl
 8007726:	4253      	negpl	r3, r2
 8007728:	ee07 3a90 	vmov	s15, r3
 800772c:	eeb8 cae7 	vcvt.f32.s32	s24, s15
			if (newAngle < 2 * PI)
 8007730:	a387      	add	r3, pc, #540	; (adr r3, 8007950 <drawMap+0x9d8>)
 8007732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007736:	4620      	mov	r0, r4
 8007738:	4629      	mov	r1, r5
 800773a:	f7f9 f9f7 	bl	8000b2c <__aeabi_dcmplt>
 800773e:	b118      	cbz	r0, 8007748 <drawMap+0x7d0>
				tx = 31 - tx;
 8007740:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
 8007744:	ee37 cacc 	vsub.f32	s24, s15, s24
		int wallx = (int) ((float) (z + 30) * width / 60);
 8007748:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 800774c:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8007750:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8007980 <drawMap+0xa08>
 8007754:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007758:	eddf 6a8c 	vldr	s13, [pc, #560]	; 800798c <drawMap+0xa14>
 800775c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		wallx *= s_scale;
 8007760:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8007764:	ee17 0a90 	vmov	r0, s15
 8007768:	f7f8 ff04 	bl	8000574 <__aeabi_i2d>
 800776c:	a37a      	add	r3, pc, #488	; (adr r3, 8007958 <drawMap+0x9e0>)
 800776e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007772:	f7f8 ff69 	bl	8000648 <__aeabi_dmul>
 8007776:	f7f9 fa17 	bl	8000ba8 <__aeabi_d2iz>
 800777a:	4606      	mov	r6, r0
		for (int j = 0; j < lineH; j++) {
 800777c:	f04f 0900 	mov.w	r9, #0
 8007780:	e079      	b.n	8007876 <drawMap+0x8fe>
			ry = rvy;
 8007782:	eef0 ba4a 	vmov.f32	s23, s20
			rx = rvx;
 8007786:	eeb0 ca69 	vmov.f32	s24, s19
		float shade = 1;
 800778a:	eeb7 da00 	vmov.f32	s26, #112	; 0x3f800000  1.0
 800778e:	e776      	b.n	800767e <drawMap+0x706>
		float ty_offset = 0; //ZATO DA SE TEKSTURE LEPO PORAZDELIJO
 8007790:	ed9f 8a7f 	vldr	s16, [pc, #508]	; 8007990 <drawMap+0xa18>
 8007794:	e7a2      	b.n	80076dc <drawMap+0x764>
			tx = (int) (ry / scale) % 32;
 8007796:	ee8b 7aa7 	vdiv.f32	s14, s23, s15
 800779a:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800779e:	ee17 3a90 	vmov	r3, s15
 80077a2:	425a      	negs	r2, r3
 80077a4:	f003 031f 	and.w	r3, r3, #31
 80077a8:	f002 021f 	and.w	r2, r2, #31
 80077ac:	bf58      	it	pl
 80077ae:	4253      	negpl	r3, r2
 80077b0:	ee07 3a90 	vmov	s15, r3
 80077b4:	eeb8 cae7 	vcvt.f32.s32	s24, s15
			if (newAngle > PI / 2 && newAngle < (3 * PI) / 2)
 80077b8:	a369      	add	r3, pc, #420	; (adr r3, 8007960 <drawMap+0x9e8>)
 80077ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077be:	4620      	mov	r0, r4
 80077c0:	4629      	mov	r1, r5
 80077c2:	f7f9 f9d1 	bl	8000b68 <__aeabi_dcmpgt>
 80077c6:	2800      	cmp	r0, #0
 80077c8:	d0be      	beq.n	8007748 <drawMap+0x7d0>
 80077ca:	a367      	add	r3, pc, #412	; (adr r3, 8007968 <drawMap+0x9f0>)
 80077cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d0:	4620      	mov	r0, r4
 80077d2:	4629      	mov	r1, r5
 80077d4:	f7f9 f9aa 	bl	8000b2c <__aeabi_dcmplt>
 80077d8:	2800      	cmp	r0, #0
 80077da:	d0b5      	beq.n	8007748 <drawMap+0x7d0>
				tx = 31 - tx;
 80077dc:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
 80077e0:	ee37 cacc 	vsub.f32	s24, s15, s24
 80077e4:	e7b0      	b.n	8007748 <drawMap+0x7d0>
				red = t_brickWall[pixel + 0] * shade * vis;
 80077e6:	4a6b      	ldr	r2, [pc, #428]	; (8007994 <drawMap+0xa1c>)
 80077e8:	5cd1      	ldrb	r1, [r2, r3]
 80077ea:	ee07 1a10 	vmov	s14, r1
 80077ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80077f2:	ee27 7a0d 	vmul.f32	s14, s14, s26
 80077f6:	ee27 7a2c 	vmul.f32	s14, s14, s25
 80077fa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80077fe:	ee17 5a10 	vmov	r5, s14
				green = t_brickWall[pixel + 1] * shade * vis;
 8007802:	1c59      	adds	r1, r3, #1
 8007804:	5c51      	ldrb	r1, [r2, r1]
 8007806:	ee07 1a10 	vmov	s14, r1
 800780a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800780e:	ee27 7a0d 	vmul.f32	s14, s14, s26
 8007812:	ee27 7a2c 	vmul.f32	s14, s14, s25
 8007816:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800781a:	ee17 4a10 	vmov	r4, s14
				blue = t_brickWall[pixel + 2] * shade * vis;
 800781e:	3302      	adds	r3, #2
 8007820:	5cd3      	ldrb	r3, [r2, r3]
 8007822:	ee07 3a10 	vmov	s14, r3
 8007826:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800782a:	ee27 7a0d 	vmul.f32	s14, s14, s26
 800782e:	ee27 7a2c 	vmul.f32	s14, s14, s25
 8007832:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007836:	ee17 7a10 	vmov	r7, s14
			int wally = lineOff + j;
 800783a:	ee77 7a8f 	vadd.f32	s15, s15, s30
			wally *= s_scale;
 800783e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007842:	ee17 0a90 	vmov	r0, s15
 8007846:	f7f8 fe95 	bl	8000574 <__aeabi_i2d>
 800784a:	a343      	add	r3, pc, #268	; (adr r3, 8007958 <drawMap+0x9e0>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fefa 	bl	8000648 <__aeabi_dmul>
 8007854:	f7f9 f9a8 	bl	8000ba8 <__aeabi_d2iz>
 8007858:	4683      	mov	fp, r0
					create_rgb(red, green, blue));
 800785a:	463a      	mov	r2, r7
 800785c:	4621      	mov	r1, r4
 800785e:	4628      	mov	r0, r5
 8007860:	f7fe fd36 	bl	80062d0 <create_rgb>
			narisi_velik_kvadrat_stene(wallx, wally,
 8007864:	b282      	uxth	r2, r0
 8007866:	4659      	mov	r1, fp
 8007868:	4630      	mov	r0, r6
 800786a:	f7fe fc99 	bl	80061a0 <narisi_velik_kvadrat_stene>
			ty += ty_step;
 800786e:	ee38 8a2f 	vadd.f32	s16, s16, s31
		for (int j = 0; j < lineH; j++) {
 8007872:	f109 0901 	add.w	r9, r9, #1
 8007876:	ee07 9a90 	vmov	s15, r9
 800787a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800787e:	eef4 7aee 	vcmpe.f32	s15, s29
 8007882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007886:	d540      	bpl.n	800790a <drawMap+0x992>
			int pixel = ((int) ty * 32 + (int) tx) * 3;
 8007888:	eebd 7acc 	vcvt.s32.f32	s14, s24
 800788c:	ee17 3a10 	vmov	r3, s14
 8007890:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 8007894:	ee17 2a10 	vmov	r2, s14
 8007898:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800789c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			switch (hmt) {
 80078a0:	f1ba 0f01 	cmp.w	sl, #1
 80078a4:	d09f      	beq.n	80077e6 <drawMap+0x86e>
 80078a6:	f1ba 0f02 	cmp.w	sl, #2
 80078aa:	d003      	beq.n	80078b4 <drawMap+0x93c>
 80078ac:	2400      	movs	r4, #0
 80078ae:	4627      	mov	r7, r4
 80078b0:	4625      	mov	r5, r4
 80078b2:	e7c2      	b.n	800783a <drawMap+0x8c2>
				red = t_wall[pixel + 0] * shade * vis;
 80078b4:	4a38      	ldr	r2, [pc, #224]	; (8007998 <drawMap+0xa20>)
 80078b6:	5cd1      	ldrb	r1, [r2, r3]
 80078b8:	ee07 1a10 	vmov	s14, r1
 80078bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078c0:	ee27 7a0d 	vmul.f32	s14, s14, s26
 80078c4:	ee27 7a2c 	vmul.f32	s14, s14, s25
 80078c8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80078cc:	ee17 5a10 	vmov	r5, s14
				green = t_wall[pixel + 1] * shade * vis;
 80078d0:	1c59      	adds	r1, r3, #1
 80078d2:	5c51      	ldrb	r1, [r2, r1]
 80078d4:	ee07 1a10 	vmov	s14, r1
 80078d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078dc:	ee27 7a0d 	vmul.f32	s14, s14, s26
 80078e0:	ee27 7a2c 	vmul.f32	s14, s14, s25
 80078e4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80078e8:	ee17 4a10 	vmov	r4, s14
				blue = t_wall[pixel + 2] * shade * vis;
 80078ec:	3302      	adds	r3, #2
 80078ee:	5cd3      	ldrb	r3, [r2, r3]
 80078f0:	ee07 3a10 	vmov	s14, r3
 80078f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80078f8:	ee27 7a0d 	vmul.f32	s14, s14, s26
 80078fc:	ee27 7a2c 	vmul.f32	s14, s14, s25
 8007900:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007904:	ee17 7a10 	vmov	r7, s14
				break;
 8007908:	e797      	b.n	800783a <drawMap+0x8c2>
		float floorAngle = (angle - newAngle);
 800790a:	4b24      	ldr	r3, [pc, #144]	; (800799c <drawMap+0xa24>)
 800790c:	ed93 8a00 	vldr	s16, [r3]
 8007910:	ee38 8a6d 	vsub.f32	s16, s16, s27
		if (floorAngle < 0)
 8007914:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8007918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800791c:	d440      	bmi.n	80079a0 <drawMap+0xa28>
		else if (floorAngle > 2 * PI)
 800791e:	ee18 0a10 	vmov	r0, s16
 8007922:	f7f8 fe39 	bl	8000598 <__aeabi_f2d>
 8007926:	4604      	mov	r4, r0
 8007928:	460d      	mov	r5, r1
 800792a:	a309      	add	r3, pc, #36	; (adr r3, 8007950 <drawMap+0x9d8>)
 800792c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007930:	f7f9 f91a 	bl	8000b68 <__aeabi_dcmpgt>
 8007934:	2800      	cmp	r0, #0
 8007936:	d040      	beq.n	80079ba <drawMap+0xa42>
			floorAngle -= 2 * PI;
 8007938:	a305      	add	r3, pc, #20	; (adr r3, 8007950 <drawMap+0x9d8>)
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	4620      	mov	r0, r4
 8007940:	4629      	mov	r1, r5
 8007942:	f7f8 fcc9 	bl	80002d8 <__aeabi_dsub>
 8007946:	f7f9 f957 	bl	8000bf8 <__aeabi_d2f>
 800794a:	ee08 0a10 	vmov	s16, r0
 800794e:	e034      	b.n	80079ba <drawMap+0xa42>
 8007950:	f01b866e 	.word	0xf01b866e
 8007954:	401921f9 	.word	0x401921f9
 8007958:	33333333 	.word	0x33333333
 800795c:	40033333 	.word	0x40033333
 8007960:	f01b866e 	.word	0xf01b866e
 8007964:	3ff921f9 	.word	0x3ff921f9
 8007968:	7414a4d2 	.word	0x7414a4d2
 800796c:	4012d97b 	.word	0x4012d97b
 8007970:	20000018 	.word	0x20000018
 8007974:	2000001c 	.word	0x2000001c
 8007978:	2000000c 	.word	0x2000000c
 800797c:	42000000 	.word	0x42000000
 8007980:	42c80000 	.word	0x42c80000
 8007984:	42480000 	.word	0x42480000
 8007988:	3d000000 	.word	0x3d000000
 800798c:	42700000 	.word	0x42700000
 8007990:	00000000 	.word	0x00000000
 8007994:	08053734 	.word	0x08053734
 8007998:	08011a04 	.word	0x08011a04
 800799c:	20000010 	.word	0x20000010
			floorAngle += 2 * PI;
 80079a0:	ee18 0a10 	vmov	r0, s16
 80079a4:	f7f8 fdf8 	bl	8000598 <__aeabi_f2d>
 80079a8:	a3a5      	add	r3, pc, #660	; (adr r3, 8007c40 <drawMap+0xcc8>)
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	f7f8 fc95 	bl	80002dc <__adddf3>
 80079b2:	f7f9 f921 	bl	8000bf8 <__aeabi_d2f>
 80079b6:	ee08 0a10 	vmov	s16, r0
		cosNew = cosf(newAngle);
 80079ba:	eeb0 0a6d 	vmov.f32	s0, s27
 80079be:	f002 fc8b 	bl	800a2d8 <cosf>
 80079c2:	ee10 5a10 	vmov	r5, s0
		cosFloor = cosf(floorAngle);
 80079c6:	eeb0 0a48 	vmov.f32	s0, s16
 80079ca:	f002 fc85 	bl	800a2d8 <cosf>
 80079ce:	eef0 ba40 	vmov.f32	s23, s0
		sinNew = sinf(newAngle);
 80079d2:	eeb0 0a6d 	vmov.f32	s0, s27
 80079d6:	f002 fccb 	bl	800a370 <sinf>
 80079da:	ee10 4a10 	vmov	r4, s0
		float tmptx2 = cosf(newAngle) * 1847.52;
 80079de:	4628      	mov	r0, r5
 80079e0:	f7f8 fdda 	bl	8000598 <__aeabi_f2d>
 80079e4:	a39f      	add	r3, pc, #636	; (adr r3, 8007c64 <drawMap+0xcec>)
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f7f8 fe2d 	bl	8000648 <__aeabi_dmul>
 80079ee:	f7f9 f903 	bl	8000bf8 <__aeabi_d2f>
 80079f2:	ee0d 0a90 	vmov	s27, r0
		float tmpty2 = sinf(newAngle) * 1847.52;
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7f8 fdce 	bl	8000598 <__aeabi_f2d>
 80079fc:	a399      	add	r3, pc, #612	; (adr r3, 8007c64 <drawMap+0xcec>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fe21 	bl	8000648 <__aeabi_dmul>
 8007a06:	f7f9 f8f7 	bl	8000bf8 <__aeabi_d2f>
 8007a0a:	ee0d 0a10 	vmov	s26, r0
		float tmptx1 = px / 0.3;
 8007a0e:	4b8e      	ldr	r3, [pc, #568]	; (8007c48 <drawMap+0xcd0>)
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	f7f8 fdc1 	bl	8000598 <__aeabi_f2d>
 8007a16:	a384      	add	r3, pc, #528	; (adr r3, 8007c28 <drawMap+0xcb0>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 ff3e 	bl	800089c <__aeabi_ddiv>
 8007a20:	f7f9 f8ea 	bl	8000bf8 <__aeabi_d2f>
 8007a24:	ee0c 0a90 	vmov	s25, r0
		float tmpty1 = py / 0.3;
 8007a28:	4b88      	ldr	r3, [pc, #544]	; (8007c4c <drawMap+0xcd4>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	f7f8 fdb4 	bl	8000598 <__aeabi_f2d>
 8007a30:	a37d      	add	r3, pc, #500	; (adr r3, 8007c28 <drawMap+0xcb0>)
 8007a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a36:	f7f8 ff31 	bl	800089c <__aeabi_ddiv>
 8007a3a:	f7f9 f8dd 	bl	8000bf8 <__aeabi_d2f>
 8007a3e:	ee0c 0a10 	vmov	s24, r0
		for (int y = lineOff + lineH; y < height; y++) {
 8007a42:	ee7e ea8f 	vadd.f32	s29, s29, s30
 8007a46:	eefd 7aee 	vcvt.s32.f32	s15, s29
 8007a4a:	ee17 5a90 	vmov	r5, s15
 8007a4e:	e074      	b.n	8007b3a <drawMap+0xbc2>
			ty = tmpty1 + tmpty2 / dy / cosFloor;
			int pixel = (((int) (ty) & 31) * 32 + ((int) (tx) & 31)) * 3;

			if (y - height / 2 < 13) {
				float dist = 30;
				vis = visibility(dist);
 8007a50:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8007a54:	f7fe fc88 	bl	8006368 <visibility>
 8007a58:	eef0 fa40 	vmov.f32	s31, s0
			}

			int red = t_floor[pixel + 0] * vis /** 0.7*/;
 8007a5c:	4b7c      	ldr	r3, [pc, #496]	; (8007c50 <drawMap+0xcd8>)
 8007a5e:	5d1a      	ldrb	r2, [r3, r4]
 8007a60:	ee08 2a10 	vmov	s16, r2
 8007a64:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8007a68:	ee28 8a2f 	vmul.f32	s16, s16, s31
 8007a6c:	eebd 8ac8 	vcvt.s32.f32	s16, s16
			int green = t_floor[pixel + 1] * vis /** 0.7*/;
 8007a70:	f104 0a01 	add.w	sl, r4, #1
 8007a74:	f813 200a 	ldrb.w	r2, [r3, sl]
 8007a78:	ee0e 2a90 	vmov	s29, r2
 8007a7c:	eef8 eaee 	vcvt.f32.s32	s29, s29
 8007a80:	ee6e eaaf 	vmul.f32	s29, s29, s31
 8007a84:	eefd eaee 	vcvt.s32.f32	s29, s29
			int blue = t_floor[pixel + 2] * vis /** 0.7*/;
 8007a88:	1ca7      	adds	r7, r4, #2
 8007a8a:	5ddb      	ldrb	r3, [r3, r7]
 8007a8c:	ee0f 3a10 	vmov	s30, r3
 8007a90:	eeb8 facf 	vcvt.f32.s32	s30, s30
 8007a94:	ee2f fa2f 	vmul.f32	s30, s30, s31
 8007a98:	eebd facf 	vcvt.s32.f32	s30, s30

			int tlay = y;
			tlay *= s_scale;
 8007a9c:	4628      	mov	r0, r5
 8007a9e:	f7f8 fd69 	bl	8000574 <__aeabi_i2d>
 8007aa2:	a363      	add	r3, pc, #396	; (adr r3, 8007c30 <drawMap+0xcb8>)
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fdce 	bl	8000648 <__aeabi_dmul>
 8007aac:	f7f9 f87c 	bl	8000ba8 <__aeabi_d2iz>
 8007ab0:	4683      	mov	fp, r0

			narisi_velik_kvadrat_stene(tlax, tlay,
					create_rgb(red, green, blue));
 8007ab2:	ee1f 2a10 	vmov	r2, s30
 8007ab6:	ee1e 1a90 	vmov	r1, s29
 8007aba:	ee18 0a10 	vmov	r0, s16
 8007abe:	f7fe fc07 	bl	80062d0 <create_rgb>
			narisi_velik_kvadrat_stene(tlax, tlay,
 8007ac2:	b282      	uxth	r2, r0
 8007ac4:	4659      	mov	r1, fp
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f7fe fb6a 	bl	80061a0 <narisi_velik_kvadrat_stene>

			//NARISI STROP
			red = t_wall[pixel + 0] * vis /** 0.7*/;
 8007acc:	4b61      	ldr	r3, [pc, #388]	; (8007c54 <drawMap+0xcdc>)
 8007ace:	5d1a      	ldrb	r2, [r3, r4]
 8007ad0:	ee08 2a10 	vmov	s16, r2
 8007ad4:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8007ad8:	ee28 8a2f 	vmul.f32	s16, s16, s31
 8007adc:	eebd 8ac8 	vcvt.s32.f32	s16, s16
			green = t_wall[pixel + 1] * vis /** 0.7*/;
 8007ae0:	f813 200a 	ldrb.w	r2, [r3, sl]
 8007ae4:	ee0e 2a90 	vmov	s29, r2
 8007ae8:	eef8 eaee 	vcvt.f32.s32	s29, s29
 8007aec:	ee6e eaaf 	vmul.f32	s29, s29, s31
 8007af0:	eefd eaee 	vcvt.s32.f32	s29, s29
			blue = t_wall[pixel + 2] * vis /** 0.7*/;
 8007af4:	5ddb      	ldrb	r3, [r3, r7]
 8007af6:	ee0f 3a10 	vmov	s30, r3
 8007afa:	eeb8 facf 	vcvt.f32.s32	s30, s30
 8007afe:	ee2f fa2f 	vmul.f32	s30, s30, s31
 8007b02:	eebd facf 	vcvt.s32.f32	s30, s30

			int stropy = height - y;
			stropy *= s_scale;
 8007b06:	f1c5 0064 	rsb	r0, r5, #100	; 0x64
 8007b0a:	f7f8 fd33 	bl	8000574 <__aeabi_i2d>
 8007b0e:	a348      	add	r3, pc, #288	; (adr r3, 8007c30 <drawMap+0xcb8>)
 8007b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b14:	f7f8 fd98 	bl	8000648 <__aeabi_dmul>
 8007b18:	f7f9 f846 	bl	8000ba8 <__aeabi_d2iz>
 8007b1c:	4604      	mov	r4, r0

			narisi_velik_kvadrat_stene(stropx, stropy,
					create_rgb(red, green, blue));
 8007b1e:	ee1f 2a10 	vmov	r2, s30
 8007b22:	ee1e 1a90 	vmov	r1, s29
 8007b26:	ee18 0a10 	vmov	r0, s16
 8007b2a:	f7fe fbd1 	bl	80062d0 <create_rgb>
			narisi_velik_kvadrat_stene(stropx, stropy,
 8007b2e:	b282      	uxth	r2, r0
 8007b30:	4621      	mov	r1, r4
 8007b32:	4630      	mov	r0, r6
 8007b34:	f7fe fb34 	bl	80061a0 <narisi_velik_kvadrat_stene>
		for (int y = lineOff + lineH; y < height; y++) {
 8007b38:	3501      	adds	r5, #1
 8007b3a:	2d63      	cmp	r5, #99	; 0x63
 8007b3c:	dc29      	bgt.n	8007b92 <drawMap+0xc1a>
			float dy = y - (height / 2.0f);
 8007b3e:	ee07 5a90 	vmov	s15, r5
 8007b42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007b46:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007c58 <drawMap+0xce0>
 8007b4a:	ee37 7a67 	vsub.f32	s14, s14, s15
			tx = tmptx1 + tmptx2 / dy / cosFloor;
 8007b4e:	eecd 6a87 	vdiv.f32	s13, s27, s14
 8007b52:	eec6 7aab 	vdiv.f32	s15, s13, s23
 8007b56:	ee77 7aac 	vadd.f32	s15, s15, s25
			ty = tmpty1 + tmpty2 / dy / cosFloor;
 8007b5a:	eecd 6a07 	vdiv.f32	s13, s26, s14
 8007b5e:	ee86 7aab 	vdiv.f32	s14, s13, s23
 8007b62:	ee37 7a0c 	vadd.f32	s14, s14, s24
			int pixel = (((int) (ty) & 31) * 32 + ((int) (tx) & 31)) * 3;
 8007b66:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8007b6a:	ee17 4a10 	vmov	r4, s14
 8007b6e:	f004 031f 	and.w	r3, r4, #31
 8007b72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007b76:	ee17 4a90 	vmov	r4, s15
 8007b7a:	f004 041f 	and.w	r4, r4, #31
 8007b7e:	eb04 1443 	add.w	r4, r4, r3, lsl #5
 8007b82:	eb04 0444 	add.w	r4, r4, r4, lsl #1
			if (y - height / 2 < 13) {
 8007b86:	2d3e      	cmp	r5, #62	; 0x3e
 8007b88:	f77f af62 	ble.w	8007a50 <drawMap+0xad8>
			vis = 1;
 8007b8c:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
 8007b90:	e764      	b.n	8007a5c <drawMap+0xae4>
	for (float z = -30; z < 30; z += 1) { //LOOPEJ OD - 30STOPINJ DO 30 STOPINJ
 8007b92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b96:	ee3e ea27 	vadd.f32	s28, s28, s15
 8007b9a:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8007b9e:	eeb4 eae7 	vcmpe.f32	s28, s15
 8007ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ba6:	d535      	bpl.n	8007c14 <drawMap+0xc9c>
		float newAngle = z * DEGREE + angle;
 8007ba8:	ee1e 0a10 	vmov	r0, s28
 8007bac:	f7f8 fcf4 	bl	8000598 <__aeabi_f2d>
 8007bb0:	a321      	add	r3, pc, #132	; (adr r3, 8007c38 <drawMap+0xcc0>)
 8007bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb6:	f7f8 fd47 	bl	8000648 <__aeabi_dmul>
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	4b27      	ldr	r3, [pc, #156]	; (8007c5c <drawMap+0xce4>)
 8007bc0:	6818      	ldr	r0, [r3, #0]
 8007bc2:	f7f8 fce9 	bl	8000598 <__aeabi_f2d>
 8007bc6:	4632      	mov	r2, r6
 8007bc8:	463b      	mov	r3, r7
 8007bca:	f7f8 fb87 	bl	80002dc <__adddf3>
 8007bce:	f7f9 f813 	bl	8000bf8 <__aeabi_d2f>
 8007bd2:	ee0d 0a90 	vmov	s27, r0
		if (newAngle < 0)
 8007bd6:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8007bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bde:	f53f ab61 	bmi.w	80072a4 <drawMap+0x32c>
		else if (newAngle > 2 * PI)
 8007be2:	f7f8 fcd9 	bl	8000598 <__aeabi_f2d>
 8007be6:	4604      	mov	r4, r0
 8007be8:	460d      	mov	r5, r1
 8007bea:	a315      	add	r3, pc, #84	; (adr r3, 8007c40 <drawMap+0xcc8>)
 8007bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf0:	f7f8 ffba 	bl	8000b68 <__aeabi_dcmpgt>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	f43f ab60 	beq.w	80072ba <drawMap+0x342>
			newAngle -= 2 * PI;
 8007bfa:	a311      	add	r3, pc, #68	; (adr r3, 8007c40 <drawMap+0xcc8>)
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	4620      	mov	r0, r4
 8007c02:	4629      	mov	r1, r5
 8007c04:	f7f8 fb68 	bl	80002d8 <__aeabi_dsub>
 8007c08:	f7f8 fff6 	bl	8000bf8 <__aeabi_d2f>
 8007c0c:	ee0d 0a90 	vmov	s27, r0
 8007c10:	f7ff bb53 	b.w	80072ba <drawMap+0x342>
		}

	}
	TIMUT_stopwatch_update(&sw1);
 8007c14:	4812      	ldr	r0, [pc, #72]	; (8007c60 <drawMap+0xce8>)
 8007c16:	f000 fcb3 	bl	8008580 <TIMUT_stopwatch_update>
}
 8007c1a:	b003      	add	sp, #12
 8007c1c:	ecbd 8b10 	vpop	{d8-d15}
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	f3af 8000 	nop.w
 8007c28:	33333333 	.word	0x33333333
 8007c2c:	3fd33333 	.word	0x3fd33333
 8007c30:	33333333 	.word	0x33333333
 8007c34:	40033333 	.word	0x40033333
 8007c38:	7707c94d 	.word	0x7707c94d
 8007c3c:	3f91df46 	.word	0x3f91df46
 8007c40:	f01b866e 	.word	0xf01b866e
 8007c44:	401921f9 	.word	0x401921f9
 8007c48:	20000018 	.word	0x20000018
 8007c4c:	2000001c 	.word	0x2000001c
 8007c50:	08010e04 	.word	0x08010e04
 8007c54:	08011a04 	.word	0x08011a04
 8007c58:	42480000 	.word	0x42480000
 8007c5c:	20000010 	.word	0x20000010
 8007c60:	2001de80 	.word	0x2001de80
 8007c64:	7ae147ae 	.word	0x7ae147ae
 8007c68:	409cde14 	.word	0x409cde14
 8007c6c:	00000000 	.word	0x00000000

08007c70 <drawSprites>:

void drawSprites() {
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	ed2d 8b0c 	vpush	{d8-d13}
 8007c78:	b0f5      	sub	sp, #468	; 0x1d4
	//IZRACUNAJ ODDALJENOSTI OD IGRALCA
	for (int i = 0; i < num_of_enemys; i++) {
 8007c7a:	2500      	movs	r5, #0
 8007c7c:	e026      	b.n	8007ccc <drawSprites+0x5c>
		sp[i].dist = sqrtl(
				(px - sp[i].x) * (px - sp[i].x)
 8007c7e:	4cc2      	ldr	r4, [pc, #776]	; (8007f88 <drawSprites+0x318>)
 8007c80:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007c84:	fb03 4405 	mla	r4, r3, r5, r4
 8007c88:	ed94 7a02 	vldr	s14, [r4, #8]
 8007c8c:	4bbf      	ldr	r3, [pc, #764]	; (8007f8c <drawSprites+0x31c>)
 8007c8e:	edd3 7a00 	vldr	s15, [r3]
 8007c92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007c96:	ee27 7aa7 	vmul.f32	s14, s15, s15
						+ (py - sp[i].y) * (py - sp[i].y));
 8007c9a:	edd4 6a03 	vldr	s13, [r4, #12]
 8007c9e:	4bbc      	ldr	r3, [pc, #752]	; (8007f90 <drawSprites+0x320>)
 8007ca0:	edd3 7a00 	vldr	s15, [r3]
 8007ca4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007ca8:	ee67 7aa7 	vmul.f32	s15, s15, s15
		sp[i].dist = sqrtl(
 8007cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cb0:	ee17 0a90 	vmov	r0, s15
 8007cb4:	f7f8 fc70 	bl	8000598 <__aeabi_f2d>
 8007cb8:	ec41 0b10 	vmov	d0, r0, r1
 8007cbc:	f002 fbca 	bl	800a454 <sqrtl>
 8007cc0:	ec51 0b10 	vmov	r0, r1, d0
 8007cc4:	f7f8 ff98 	bl	8000bf8 <__aeabi_d2f>
 8007cc8:	6260      	str	r0, [r4, #36]	; 0x24
	for (int i = 0; i < num_of_enemys; i++) {
 8007cca:	3501      	adds	r5, #1
 8007ccc:	2d03      	cmp	r5, #3
 8007cce:	ddd6      	ble.n	8007c7e <drawSprites+0xe>
	}

	//RAZPOREDI SPRAJTE PO RAZDALJI -> MEHURCEK
	sprite tmp;
	for (int i = 0; i < num_of_enemys - 1; i++) {
 8007cd0:	2500      	movs	r5, #0
 8007cd2:	e02d      	b.n	8007d30 <drawSprites+0xc0>
	for (int i = 0; i < num_of_enemys; i++) {
 8007cd4:	4633      	mov	r3, r6
		for (int j = 0; j < num_of_enemys - i - 1; j++) {
 8007cd6:	f1c5 0203 	rsb	r2, r5, #3
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	dd27      	ble.n	8007d2e <drawSprites+0xbe>
			if (sp[j].dist <= sp[j + 1].dist) {
 8007cde:	49aa      	ldr	r1, [pc, #680]	; (8007f88 <drawSprites+0x318>)
 8007ce0:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007ce4:	fb02 1003 	mla	r0, r2, r3, r1
 8007ce8:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8007cec:	1c5e      	adds	r6, r3, #1
 8007cee:	fb03 2202 	mla	r2, r3, r2, r2
 8007cf2:	440a      	add	r2, r1
 8007cf4:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007cf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d00:	d8e8      	bhi.n	8007cd4 <drawSprites+0x64>
				memcpy(&tmp, &sp[j], sizeof(sprite));
 8007d02:	f44f 78de 	mov.w	r8, #444	; 0x1bc
 8007d06:	460f      	mov	r7, r1
 8007d08:	4604      	mov	r4, r0
 8007d0a:	4642      	mov	r2, r8
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	a805      	add	r0, sp, #20
 8007d10:	f000 fefe 	bl	8008b10 <memcpy>
				memcpy(&sp[j], &sp[j+1], sizeof(sprite));
 8007d14:	fb08 7706 	mla	r7, r8, r6, r7
 8007d18:	4642      	mov	r2, r8
 8007d1a:	4639      	mov	r1, r7
 8007d1c:	4620      	mov	r0, r4
 8007d1e:	f000 fef7 	bl	8008b10 <memcpy>
				memcpy(&sp[j+1], &tmp, sizeof(sprite));
 8007d22:	4642      	mov	r2, r8
 8007d24:	a905      	add	r1, sp, #20
 8007d26:	4638      	mov	r0, r7
 8007d28:	f000 fef2 	bl	8008b10 <memcpy>
 8007d2c:	e7d2      	b.n	8007cd4 <drawSprites+0x64>
	for (int i = 0; i < num_of_enemys - 1; i++) {
 8007d2e:	3501      	adds	r5, #1
 8007d30:	2d02      	cmp	r5, #2
 8007d32:	dc01      	bgt.n	8007d38 <drawSprites+0xc8>
		for (int j = 0; j < num_of_enemys - i - 1; j++) {
 8007d34:	2300      	movs	r3, #0
 8007d36:	e7ce      	b.n	8007cd6 <drawSprites+0x66>
		}
	}

	uint8_t indicate_led = 0;
	//POJDI SKOZE VSE SLIKICE
	for (int sprite = 0; sprite < num_of_enemys; sprite++) {
 8007d38:	2500      	movs	r5, #0
	uint8_t indicate_led = 0;
 8007d3a:	46a9      	mov	r9, r5
 8007d3c:	e051      	b.n	8007de2 <drawSprites+0x172>

		//IZRACUNAJ KOT SLIKICE GLEDE NA IGRALCA
		float sangle = atanf((sy - py) / (sx - px));
		//TO NEVEM KAJ NARDI
		if (fabs(px + cosf(sangle) - sx) > fabs(px - sx)) {
			sangle = popraviKot((sangle - PI));
 8007d3e:	ee18 0a10 	vmov	r0, s16
 8007d42:	f7f8 fc29 	bl	8000598 <__aeabi_f2d>
 8007d46:	a388      	add	r3, pc, #544	; (adr r3, 8007f68 <drawSprites+0x2f8>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fac4 	bl	80002d8 <__aeabi_dsub>
 8007d50:	f7f8 ff52 	bl	8000bf8 <__aeabi_d2f>
 8007d54:	ee00 0a10 	vmov	s0, r0
 8007d58:	f7fe fa7e 	bl	8006258 <popraviKot>
 8007d5c:	eeb0 8a40 	vmov.f32	s16, s0
 8007d60:	e06c      	b.n	8007e3c <drawSprites+0x1cc>
		float angleDiff = popraviKot(angle - sangle);
		sprite_angle_diff = angleDiff;
		//POGLEJ CE SE SLIKICO VIDI
		float dist = sp[sprite].dist;
		if ((angleDiff > 11 * PI / 6 || angleDiff < PI / 6)
				&& dist / Blocksize < render_distance) {
 8007d62:	4b8c      	ldr	r3, [pc, #560]	; (8007f94 <drawSprites+0x324>)
 8007d64:	f8d3 8000 	ldr.w	r8, [r3]
 8007d68:	ee07 8a90 	vmov	s15, r8
 8007d6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d70:	ee88 7aa7 	vdiv.f32	s14, s17, s15
 8007d74:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8007d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d80:	f100 8088 	bmi.w	8007e94 <drawSprites+0x224>
				}
			}
		}

		//TO JE LOGIKA ZA PREMIKANJE TAKO DA DRSI PO STENAH
		if(sp[sprite].viden == 1 && dist > 4){
 8007d84:	4b80      	ldr	r3, [pc, #512]	; (8007f88 <drawSprites+0x318>)
 8007d86:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007d8a:	fb02 3305 	mla	r3, r2, r5, r3
 8007d8e:	f893 31b8 	ldrb.w	r3, [r3, #440]	; 0x1b8
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	f000 830c 	beq.w	80083b0 <drawSprites+0x740>
			mapx = (int) sp[sprite].x / 10;
			if (map[mapy][mapx] == 0) sp[sprite].y += 0.4 * sinf(sangle + PI);
		}

		//POGLEJ CE SI SE DOTAKNU IGRALCA
		if (sp[sprite].dist <= 5 && sp[sprite].life > 0) {
 8007d98:	4b7b      	ldr	r3, [pc, #492]	; (8007f88 <drawSprites+0x318>)
 8007d9a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007d9e:	fb02 3305 	mla	r3, r2, r5, r3
 8007da2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007da6:	eef1 7a04 	vmov.f32	s15, #20	; 0x40a00000  5.0
 8007daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db2:	d806      	bhi.n	8007dc2 <drawSprites+0x152>
 8007db4:	4b74      	ldr	r3, [pc, #464]	; (8007f88 <drawSprites+0x318>)
 8007db6:	fb02 3305 	mla	r3, r2, r5, r3
 8007dba:	7e1b      	ldrb	r3, [r3, #24]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 83ab 	bne.w	8008518 <drawSprites+0x8a8>
			play_sound(2);
			reset();
			init();
			return;
		}
		if(sp[sprite].damadgedTime > 0) sp[sprite].damadgedTime--;
 8007dc2:	4b71      	ldr	r3, [pc, #452]	; (8007f88 <drawSprites+0x318>)
 8007dc4:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007dc8:	fb02 3305 	mla	r3, r2, r5, r3
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	dd06      	ble.n	8007de0 <drawSprites+0x170>
 8007dd2:	4a6d      	ldr	r2, [pc, #436]	; (8007f88 <drawSprites+0x318>)
 8007dd4:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8007dd8:	fb01 2205 	mla	r2, r1, r5, r2
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	61d3      	str	r3, [r2, #28]
	for (int sprite = 0; sprite < num_of_enemys; sprite++) {
 8007de0:	3501      	adds	r5, #1
 8007de2:	2d03      	cmp	r5, #3
 8007de4:	f300 83a0 	bgt.w	8008528 <drawSprites+0x8b8>
		float sx = sp[sprite].x;
 8007de8:	4b67      	ldr	r3, [pc, #412]	; (8007f88 <drawSprites+0x318>)
 8007dea:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007dee:	fb02 3305 	mla	r3, r2, r5, r3
 8007df2:	ed93 9a02 	vldr	s18, [r3, #8]
		float sy = sp[sprite].y;
 8007df6:	edd3 7a03 	vldr	s15, [r3, #12]
		float sangle = atanf((sy - py) / (sx - px));
 8007dfa:	4b65      	ldr	r3, [pc, #404]	; (8007f90 <drawSprites+0x320>)
 8007dfc:	ed93 0a00 	vldr	s0, [r3]
 8007e00:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8007e04:	4b61      	ldr	r3, [pc, #388]	; (8007f8c <drawSprites+0x31c>)
 8007e06:	edd3 8a00 	vldr	s17, [r3]
 8007e0a:	ee39 0a68 	vsub.f32	s0, s18, s17
 8007e0e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8007e12:	f002 f98d 	bl	800a130 <atanf>
 8007e16:	eeb0 8a40 	vmov.f32	s16, s0
		if (fabs(px + cosf(sangle) - sx) > fabs(px - sx)) {
 8007e1a:	f002 fa5d 	bl	800a2d8 <cosf>
 8007e1e:	ee38 0a80 	vadd.f32	s0, s17, s0
 8007e22:	ee30 0a49 	vsub.f32	s0, s0, s18
 8007e26:	eeb0 0ac0 	vabs.f32	s0, s0
 8007e2a:	ee78 8ac9 	vsub.f32	s17, s17, s18
 8007e2e:	eef0 8ae8 	vabs.f32	s17, s17
 8007e32:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8007e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e3a:	dc80      	bgt.n	8007d3e <drawSprites+0xce>
		float angleDiff = popraviKot(angle - sangle);
 8007e3c:	4b56      	ldr	r3, [pc, #344]	; (8007f98 <drawSprites+0x328>)
 8007e3e:	ed93 0a00 	vldr	s0, [r3]
 8007e42:	ee30 0a48 	vsub.f32	s0, s0, s16
 8007e46:	f7fe fa07 	bl	8006258 <popraviKot>
 8007e4a:	ee10 ba10 	vmov	fp, s0
		sprite_angle_diff = angleDiff;
 8007e4e:	4b53      	ldr	r3, [pc, #332]	; (8007f9c <drawSprites+0x32c>)
 8007e50:	ed83 0a00 	vstr	s0, [r3]
		float dist = sp[sprite].dist;
 8007e54:	4b4c      	ldr	r3, [pc, #304]	; (8007f88 <drawSprites+0x318>)
 8007e56:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007e5a:	fb02 3305 	mla	r3, r2, r5, r3
 8007e5e:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
		if ((angleDiff > 11 * PI / 6 || angleDiff < PI / 6)
 8007e62:	ee10 0a10 	vmov	r0, s0
 8007e66:	f7f8 fb97 	bl	8000598 <__aeabi_f2d>
 8007e6a:	4606      	mov	r6, r0
 8007e6c:	460f      	mov	r7, r1
 8007e6e:	a340      	add	r3, pc, #256	; (adr r3, 8007f70 <drawSprites+0x300>)
 8007e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e74:	f7f8 fe78 	bl	8000b68 <__aeabi_dcmpgt>
 8007e78:	2800      	cmp	r0, #0
 8007e7a:	f47f af72 	bne.w	8007d62 <drawSprites+0xf2>
 8007e7e:	a33e      	add	r3, pc, #248	; (adr r3, 8007f78 <drawSprites+0x308>)
 8007e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e84:	4630      	mov	r0, r6
 8007e86:	4639      	mov	r1, r7
 8007e88:	f7f8 fe50 	bl	8000b2c <__aeabi_dcmplt>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	f43f af79 	beq.w	8007d84 <drawSprites+0x114>
 8007e92:	e766      	b.n	8007d62 <drawSprites+0xf2>
			for (uint8_t d = 0; d < dist; d += 1) {
 8007e94:	f04f 0a00 	mov.w	sl, #0
 8007e98:	ee07 aa90 	vmov	s15, sl
 8007e9c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
 8007ea0:	eeb4 9ae8 	vcmpe.f32	s18, s17
 8007ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea8:	d52c      	bpl.n	8007f04 <drawSprites+0x294>
				if (map[((int) (py + sinf(sangle) * d) / Blocksize)][((int) (px
 8007eaa:	eeb0 0a48 	vmov.f32	s0, s16
 8007eae:	f002 fa5f 	bl	800a370 <sinf>
 8007eb2:	ee60 7a09 	vmul.f32	s15, s0, s18
 8007eb6:	4b36      	ldr	r3, [pc, #216]	; (8007f90 <drawSprites+0x320>)
 8007eb8:	ed93 0a00 	vldr	s0, [r3]
 8007ebc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007ec0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ec4:	ee17 4a90 	vmov	r4, s15
 8007ec8:	fb94 f4f8 	sdiv	r4, r4, r8
						+ cosf(sangle) * d) / Blocksize)] != 0) {
 8007ecc:	eeb0 0a48 	vmov.f32	s0, s16
 8007ed0:	f002 fa02 	bl	800a2d8 <cosf>
 8007ed4:	ee60 7a09 	vmul.f32	s15, s0, s18
 8007ed8:	4b2c      	ldr	r3, [pc, #176]	; (8007f8c <drawSprites+0x31c>)
 8007eda:	ed93 0a00 	vldr	s0, [r3]
 8007ede:	ee77 7a80 	vadd.f32	s15, s15, s0
				if (map[((int) (py + sinf(sangle) * d) / Blocksize)][((int) (px
 8007ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ee6:	ee17 3a90 	vmov	r3, s15
						+ cosf(sangle) * d) / Blocksize)] != 0) {
 8007eea:	fb93 f3f8 	sdiv	r3, r3, r8
				if (map[((int) (py + sinf(sangle) * d) / Blocksize)][((int) (px
 8007eee:	4a2c      	ldr	r2, [pc, #176]	; (8007fa0 <drawSprites+0x330>)
 8007ef0:	2132      	movs	r1, #50	; 0x32
 8007ef2:	fb01 2404 	mla	r4, r1, r4, r2
 8007ef6:	5ce3      	ldrb	r3, [r4, r3]
 8007ef8:	bb93      	cbnz	r3, 8007f60 <drawSprites+0x2f0>
			for (uint8_t d = 0; d < dist; d += 1) {
 8007efa:	f10a 0a01 	add.w	sl, sl, #1
 8007efe:	fa5f fa8a 	uxtb.w	sl, sl
 8007f02:	e7c9      	b.n	8007e98 <drawSprites+0x228>
		uint8_t draw = 1;
 8007f04:	2101      	movs	r1, #1
			if (sp[sprite].life < 1)
 8007f06:	4b20      	ldr	r3, [pc, #128]	; (8007f88 <drawSprites+0x318>)
 8007f08:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007f0c:	fb02 3305 	mla	r3, r2, r5, r3
 8007f10:	7e1c      	ldrb	r4, [r3, #24]
 8007f12:	b104      	cbz	r4, 8007f16 <drawSprites+0x2a6>
 8007f14:	460c      	mov	r4, r1
			float factor = dist * cosf(angleDiff);
 8007f16:	ee00 ba10 	vmov	s0, fp
 8007f1a:	f002 f9dd 	bl	800a2d8 <cosf>
 8007f1e:	ee20 9a28 	vmul.f32	s18, s0, s17
			if(factor <= 0.2) factor = 0.2;
 8007f22:	ee19 0a10 	vmov	r0, s18
 8007f26:	f7f8 fb37 	bl	8000598 <__aeabi_f2d>
 8007f2a:	a315      	add	r3, pc, #84	; (adr r3, 8007f80 <drawSprites+0x310>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 fe06 	bl	8000b40 <__aeabi_dcmple>
 8007f34:	b108      	cbz	r0, 8007f3a <drawSprites+0x2ca>
 8007f36:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8007fa4 <drawSprites+0x334>
			float scaling = 15 * 1 / (factor);
 8007f3a:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8007f3e:	eec7 ba89 	vdiv.f32	s23, s15, s18
			if (scaling > 7) scaling = 7;
 8007f42:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8007f46:	eef4 bae7 	vcmpe.f32	s23, s15
 8007f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f4e:	dc2b      	bgt.n	8007fa8 <drawSprites+0x338>
			else if(scaling <= 0) scaling = 0.2;
 8007f50:	eef5 bac0 	vcmpe.f32	s23, #0.0
 8007f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f58:	d828      	bhi.n	8007fac <drawSprites+0x33c>
 8007f5a:	eddf ba12 	vldr	s23, [pc, #72]	; 8007fa4 <drawSprites+0x334>
 8007f5e:	e025      	b.n	8007fac <drawSprites+0x33c>
					draw = 0;
 8007f60:	2100      	movs	r1, #0
 8007f62:	e7d0      	b.n	8007f06 <drawSprites+0x296>
 8007f64:	f3af 8000 	nop.w
 8007f68:	f01b866e 	.word	0xf01b866e
 8007f6c:	400921f9 	.word	0x400921f9
 8007f70:	c6c3e5e5 	.word	0xc6c3e5e5
 8007f74:	401709cf 	.word	0x401709cf
 8007f78:	4abd0449 	.word	0x4abd0449
 8007f7c:	3fe0c151 	.word	0x3fe0c151
 8007f80:	9999999a 	.word	0x9999999a
 8007f84:	3fc99999 	.word	0x3fc99999
 8007f88:	2001d090 	.word	0x2001d090
 8007f8c:	20000018 	.word	0x20000018
 8007f90:	2000001c 	.word	0x2000001c
 8007f94:	2000000c 	.word	0x2000000c
 8007f98:	20000010 	.word	0x20000010
 8007f9c:	2001de74 	.word	0x2001de74
 8007fa0:	20000994 	.word	0x20000994
 8007fa4:	3e4ccccd 	.word	0x3e4ccccd
			if (scaling > 7) scaling = 7;
 8007fa8:	eef1 ba0c 	vmov.f32	s23, #28	; 0x40e00000  7.0
			float sy = s_height / 2 - scaling * sp[sprite].sizeY / 2;
 8007fac:	4bc6      	ldr	r3, [pc, #792]	; (80082c8 <drawSprites+0x658>)
 8007fae:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8007fb2:	fb02 3305 	mla	r3, r2, r5, r3
 8007fb6:	8adb      	ldrh	r3, [r3, #22]
 8007fb8:	ee0c 3a10 	vmov	s24, r3
 8007fbc:	eeb8 cacc 	vcvt.f32.s32	s24, s24
 8007fc0:	ee2c ca2b 	vmul.f32	s24, s24, s23
 8007fc4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007fc8:	ee6c 7a27 	vmul.f32	s15, s24, s15
 8007fcc:	ed9f cabf 	vldr	s24, [pc, #764]	; 80082cc <drawSprites+0x65c>
 8007fd0:	ee3c ca67 	vsub.f32	s24, s24, s15
			if (angleDiff > PI / 6)
 8007fd4:	a3b6      	add	r3, pc, #728	; (adr r3, 80082b0 <drawSprites+0x640>)
 8007fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fda:	4630      	mov	r0, r6
 8007fdc:	4639      	mov	r1, r7
 8007fde:	f7f8 fdc3 	bl	8000b68 <__aeabi_dcmpgt>
 8007fe2:	b148      	cbz	r0, 8007ff8 <drawSprites+0x388>
				angleDiff -= 2 * PI;
 8007fe4:	a3b4      	add	r3, pc, #720	; (adr r3, 80082b8 <drawSprites+0x648>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	4630      	mov	r0, r6
 8007fec:	4639      	mov	r1, r7
 8007fee:	f7f8 f973 	bl	80002d8 <__aeabi_dsub>
 8007ff2:	f7f8 fe01 	bl	8000bf8 <__aeabi_d2f>
 8007ff6:	4683      	mov	fp, r0
			float sx = (map_range(-PI / 6, PI / 6, PI / 3, 0, angleDiff)
 8007ff8:	ee02 ba10 	vmov	s4, fp
 8007ffc:	eddf 1ab4 	vldr	s3, [pc, #720]	; 80082d0 <drawSprites+0x660>
 8008000:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 80082d4 <drawSprites+0x664>
 8008004:	eddf 0ab4 	vldr	s1, [pc, #720]	; 80082d8 <drawSprites+0x668>
 8008008:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80082dc <drawSprites+0x66c>
 800800c:	f7fe f9d8 	bl	80063c0 <map_range>
 8008010:	ee10 0a10 	vmov	r0, s0
 8008014:	f7f8 fac0 	bl	8000598 <__aeabi_f2d>
					/ (PI / 3)) * s_height - scaling * sp[sprite].sizeX / 2;
 8008018:	a3a9      	add	r3, pc, #676	; (adr r3, 80082c0 <drawSprites+0x650>)
 800801a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801e:	f7f8 fc3d 	bl	800089c <__aeabi_ddiv>
 8008022:	2200      	movs	r2, #0
 8008024:	4bae      	ldr	r3, [pc, #696]	; (80082e0 <drawSprites+0x670>)
 8008026:	f7f8 fb0f 	bl	8000648 <__aeabi_dmul>
 800802a:	4606      	mov	r6, r0
 800802c:	460f      	mov	r7, r1
 800802e:	4ba6      	ldr	r3, [pc, #664]	; (80082c8 <drawSprites+0x658>)
 8008030:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8008034:	fb02 3305 	mla	r3, r2, r5, r3
 8008038:	8a9b      	ldrh	r3, [r3, #20]
 800803a:	ee09 3a10 	vmov	s18, r3
 800803e:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 8008042:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8008046:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800804a:	ee69 7a27 	vmul.f32	s15, s18, s15
 800804e:	ee17 0a90 	vmov	r0, s15
 8008052:	f7f8 faa1 	bl	8000598 <__aeabi_f2d>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 f93b 	bl	80002d8 <__aeabi_dsub>
			float sx = (map_range(-PI / 6, PI / 6, PI / 3, 0, angleDiff)
 8008062:	f7f8 fdc9 	bl	8000bf8 <__aeabi_d2f>
 8008066:	ee0a 0a10 	vmov	s20, r0
			sprite_x = sx;
 800806a:	4b9e      	ldr	r3, [pc, #632]	; (80082e4 <drawSprites+0x674>)
 800806c:	6018      	str	r0, [r3, #0]
			tx_step = (1.0 / scaling);
 800806e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008072:	ee87 baab 	vdiv.f32	s22, s15, s23
			sprite_draw = draw;
 8008076:	4b9c      	ldr	r3, [pc, #624]	; (80082e8 <drawSprites+0x678>)
 8008078:	701c      	strb	r4, [r3, #0]
			if (sx < s_height / 2
 800807a:	eddf 7a94 	vldr	s15, [pc, #592]	; 80082cc <drawSprites+0x65c>
 800807e:	eeb4 aae7 	vcmpe.f32	s20, s15
 8008082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008086:	d508      	bpl.n	800809a <drawSprites+0x42a>
				&& sx + sp[sprite].sizeX * scaling > s_height / 2
 8008088:	ee39 9a0a 	vadd.f32	s18, s18, s20
 800808c:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8008090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008094:	dd01      	ble.n	800809a <drawSprites+0x42a>
				&& draw == 1 && sp[sprite].damadgedTime < 1) {
 8008096:	2c01      	cmp	r4, #1
 8008098:	d01c      	beq.n	80080d4 <drawSprites+0x464>
				sp[sprite].tip = 0;
 800809a:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 800809e:	fb05 f303 	mul.w	r3, r5, r3
 80080a2:	4a89      	ldr	r2, [pc, #548]	; (80082c8 <drawSprites+0x658>)
 80080a4:	2100      	movs	r1, #0
 80080a6:	50d1      	str	r1, [r2, r3]
			if (draw == 1) {
 80080a8:	2c01      	cmp	r4, #1
 80080aa:	f47f ae6b 	bne.w	8007d84 <drawSprites+0x114>
				sp[sprite].viden = 1;
 80080ae:	4b86      	ldr	r3, [pc, #536]	; (80082c8 <drawSprites+0x658>)
 80080b0:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80080b4:	fb02 3305 	mla	r3, r2, r5, r3
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 21b8 	strb.w	r2, [r3, #440]	; 0x1b8
				float vis = visibility(dist);
 80080be:	eeb0 0a68 	vmov.f32	s0, s17
 80080c2:	f7fe f951 	bl	8006368 <visibility>
 80080c6:	eef0 9a40 	vmov.f32	s19, s0
				for (float y = 0; y < sp[sprite].sizeY; y += ty_step) {
 80080ca:	eddf aa81 	vldr	s21, [pc, #516]	; 80082d0 <drawSprites+0x660>
				int countx = 0, county = 0;
 80080ce:	eddf ca87 	vldr	s25, [pc, #540]	; 80082ec <drawSprites+0x67c>
				for (float y = 0; y < sp[sprite].sizeY; y += ty_step) {
 80080d2:	e0b9      	b.n	8008248 <drawSprites+0x5d8>
				&& draw == 1 && sp[sprite].damadgedTime < 1) {
 80080d4:	4b7c      	ldr	r3, [pc, #496]	; (80082c8 <drawSprites+0x658>)
 80080d6:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 80080da:	fb02 3305 	mla	r3, r2, r5, r3
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dcda      	bgt.n	800809a <drawSprites+0x42a>
					sp[sprite].tip = 1;
 80080e4:	4613      	mov	r3, r2
 80080e6:	fb05 f303 	mul.w	r3, r5, r3
 80080ea:	4a77      	ldr	r2, [pc, #476]	; (80082c8 <drawSprites+0x658>)
 80080ec:	2101      	movs	r1, #1
 80080ee:	50d1      	str	r1, [r2, r3]
				indicate_led = 1;
 80080f0:	46a1      	mov	r9, r4
 80080f2:	e7d9      	b.n	80080a8 <drawSprites+0x438>
						if ((red != 188 || blue != 0 || green != 0)) {
 80080f4:	bb6b      	cbnz	r3, 8008152 <drawSprites+0x4e2>
 80080f6:	bb61      	cbnz	r1, 8008152 <drawSprites+0x4e2>
						countx++;
 80080f8:	3401      	adds	r4, #1
					for (float x = 0; x < sp[sprite].sizeX; x += tx_step) {
 80080fa:	ee39 9a0b 	vadd.f32	s18, s18, s22
 80080fe:	4b72      	ldr	r3, [pc, #456]	; (80082c8 <drawSprites+0x658>)
 8008100:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8008104:	fb02 3305 	mla	r3, r2, r5, r3
 8008108:	8a9b      	ldrh	r3, [r3, #20]
 800810a:	ee07 3a90 	vmov	s15, r3
 800810e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008112:	eef4 7ac9 	vcmpe.f32	s15, s18
 8008116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811a:	f340 808e 	ble.w	800823a <drawSprites+0x5ca>
						pixel = ((int) y * sp[sprite].sizeY + (int) x) * 3;
 800811e:	4b6a      	ldr	r3, [pc, #424]	; (80082c8 <drawSprites+0x658>)
 8008120:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8008124:	fb02 3305 	mla	r3, r2, r5, r3
 8008128:	8ad9      	ldrh	r1, [r3, #22]
 800812a:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800812e:	ee17 3a90 	vmov	r3, s15
 8008132:	eefd 7aea 	vcvt.s32.f32	s15, s21
 8008136:	ee17 2a90 	vmov	r2, s15
 800813a:	fb01 3302 	mla	r3, r1, r2, r3
 800813e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						red = t_enemy[pixel + 0];
 8008142:	486b      	ldr	r0, [pc, #428]	; (80082f0 <drawSprites+0x680>)
 8008144:	5cc2      	ldrb	r2, [r0, r3]
						green = t_enemy[pixel + 1];
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	5c41      	ldrb	r1, [r0, r1]
						blue = t_enemy[pixel + 2];
 800814a:	3302      	adds	r3, #2
 800814c:	5cc3      	ldrb	r3, [r0, r3]
						if ((red != 188 || blue != 0 || green != 0)) {
 800814e:	2abc      	cmp	r2, #188	; 0xbc
 8008150:	d0d0      	beq.n	80080f4 <drawSprites+0x484>
							if (sp[sprite].damadgedTime > 0) {
 8008152:	485d      	ldr	r0, [pc, #372]	; (80082c8 <drawSprites+0x658>)
 8008154:	f44f 76de 	mov.w	r6, #444	; 0x1bc
 8008158:	fb06 0005 	mla	r0, r6, r5, r0
 800815c:	69c0      	ldr	r0, [r0, #28]
 800815e:	2800      	cmp	r0, #0
 8008160:	dd14      	ble.n	800818c <drawSprites+0x51c>
								if(red + add_red > 255) red = 255;
 8008162:	ee07 2a90 	vmov	s15, r2
 8008166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800816a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80082f4 <drawSprites+0x684>
 800816e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008172:	ed9f 7a61 	vldr	s14, [pc, #388]	; 80082f8 <drawSprites+0x688>
 8008176:	eef4 7ac7 	vcmpe.f32	s15, s14
 800817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817e:	dc5a      	bgt.n	8008236 <drawSprites+0x5c6>
								else red += add_red;
 8008180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008184:	edcd 7a03 	vstr	s15, [sp, #12]
 8008188:	f89d 200c 	ldrb.w	r2, [sp, #12]
							red *= vis;
 800818c:	ee07 2a90 	vmov	s15, r2
 8008190:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008194:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8008198:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800819c:	edcd 7a03 	vstr	s15, [sp, #12]
 80081a0:	f89d 000c 	ldrb.w	r0, [sp, #12]
							green *= vis;
 80081a4:	ee07 1a90 	vmov	s15, r1
 80081a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081ac:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80081b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081b4:	edcd 7a03 	vstr	s15, [sp, #12]
 80081b8:	f89d 100c 	ldrb.w	r1, [sp, #12]
							blue *= vis;
 80081bc:	ee07 3a90 	vmov	s15, r3
 80081c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081c4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 80081c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081cc:	edcd 7a03 	vstr	s15, [sp, #12]
 80081d0:	f89d 200c 	ldrb.w	r2, [sp, #12]
							if (sx + countx < s_height && sx + countx
 80081d4:	ee07 4a90 	vmov	s15, r4
 80081d8:	eeb8 dae7 	vcvt.f32.s32	s26, s15
 80081dc:	ee3d da0a 	vadd.f32	s26, s26, s20
 80081e0:	eddf 7a46 	vldr	s15, [pc, #280]	; 80082fc <drawSprites+0x68c>
 80081e4:	eeb4 dae7 	vcmpe.f32	s26, s15
 80081e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ec:	d584      	bpl.n	80080f8 <drawSprites+0x488>
 80081ee:	eeb5 dac0 	vcmpe.f32	s26, #0.0
 80081f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081f6:	f77f af7f 	ble.w	80080f8 <drawSprites+0x488>
															> 0&& sy + county > 0 && sy + county < s_height)
 80081fa:	eef8 daec 	vcvt.f32.s32	s27, s25
 80081fe:	ee7d da8c 	vadd.f32	s27, s27, s24
 8008202:	eef5 dac0 	vcmpe.f32	s27, #0.0
 8008206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820a:	f77f af75 	ble.w	80080f8 <drawSprites+0x488>
 800820e:	eef4 dae7 	vcmpe.f32	s27, s15
 8008212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008216:	f57f af6f 	bpl.w	80080f8 <drawSprites+0x488>
								narisi_velik_kvadrat(sx + countx, sy + county, create_rgb(red, green, blue));
 800821a:	f7fe f859 	bl	80062d0 <create_rgb>
 800821e:	b282      	uxth	r2, r0
 8008220:	eefd 7aed 	vcvt.s32.f32	s15, s27
 8008224:	ee17 1a90 	vmov	r1, s15
 8008228:	eefd 7acd 	vcvt.s32.f32	s15, s26
 800822c:	ee17 0a90 	vmov	r0, s15
 8008230:	f7fd ff70 	bl	8006114 <narisi_velik_kvadrat>
 8008234:	e760      	b.n	80080f8 <drawSprites+0x488>
								if(red + add_red > 255) red = 255;
 8008236:	22ff      	movs	r2, #255	; 0xff
 8008238:	e7a8      	b.n	800818c <drawSprites+0x51c>
					county++;
 800823a:	ee1c 3a90 	vmov	r3, s25
 800823e:	3301      	adds	r3, #1
 8008240:	ee0c 3a90 	vmov	s25, r3
				for (float y = 0; y < sp[sprite].sizeY; y += ty_step) {
 8008244:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8008248:	4b1f      	ldr	r3, [pc, #124]	; (80082c8 <drawSprites+0x658>)
 800824a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800824e:	fb02 3305 	mla	r3, r2, r5, r3
 8008252:	8adb      	ldrh	r3, [r3, #22]
 8008254:	ee07 3a90 	vmov	s15, r3
 8008258:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800825c:	eef4 7aea 	vcmpe.f32	s15, s21
 8008260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008264:	dd03      	ble.n	800826e <drawSprites+0x5fe>
					for (float x = 0; x < sp[sprite].sizeX; x += tx_step) {
 8008266:	ed9f 9a1a 	vldr	s18, [pc, #104]	; 80082d0 <drawSprites+0x660>
					countx = 0;
 800826a:	2400      	movs	r4, #0
 800826c:	e747      	b.n	80080fe <drawSprites+0x48e>
				if (sp[sprite].damadgedTime > 0) {
 800826e:	4b16      	ldr	r3, [pc, #88]	; (80082c8 <drawSprites+0x658>)
 8008270:	fb02 3305 	mla	r3, r2, r5, r3
 8008274:	69db      	ldr	r3, [r3, #28]
 8008276:	2b00      	cmp	r3, #0
 8008278:	f77f ad84 	ble.w	8007d84 <drawSprites+0x114>
					float startx = sx + scaling * sp[sprite].sizeX / 2;
 800827c:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <drawSprites+0x658>)
 800827e:	fb02 3305 	mla	r3, r2, r5, r3
 8008282:	8a9b      	ldrh	r3, [r3, #20]
 8008284:	ee07 3a10 	vmov	s14, r3
 8008288:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800828c:	ee27 7a2b 	vmul.f32	s14, s14, s23
 8008290:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8008294:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008298:	ee37 aa0a 	vadd.f32	s20, s14, s20
					float starty = sy + scaling * sp[sprite].sizeY / 2;
 800829c:	ee67 7aab 	vmul.f32	s15, s15, s23
 80082a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80082a4:	ee37 ca8c 	vadd.f32	s24, s15, s24
					for (int i = 0; i < num_of_blood_particles; i++) {
 80082a8:	2400      	movs	r4, #0
 80082aa:	e043      	b.n	8008334 <drawSprites+0x6c4>
 80082ac:	f3af 8000 	nop.w
 80082b0:	4abd0449 	.word	0x4abd0449
 80082b4:	3fe0c151 	.word	0x3fe0c151
 80082b8:	f01b866e 	.word	0xf01b866e
 80082bc:	401921f9 	.word	0x401921f9
 80082c0:	4abd0449 	.word	0x4abd0449
 80082c4:	3ff0c151 	.word	0x3ff0c151
 80082c8:	2001d090 	.word	0x2001d090
 80082cc:	42f00000 	.word	0x42f00000
 80082d0:	00000000 	.word	0x00000000
 80082d4:	3f860a8a 	.word	0x3f860a8a
 80082d8:	3f060a8a 	.word	0x3f060a8a
 80082dc:	bf060a8a 	.word	0xbf060a8a
 80082e0:	406e0000 	.word	0x406e0000
 80082e4:	2001de7c 	.word	0x2001de7c
 80082e8:	2001de78 	.word	0x2001de78
 80082ec:	00000000 	.word	0x00000000
 80082f0:	08054334 	.word	0x08054334
 80082f4:	42960000 	.word	0x42960000
 80082f8:	437f0000 	.word	0x437f0000
 80082fc:	43700000 	.word	0x43700000
						moveBlood(&sp[sprite].blood[i]);
 8008300:	f7fe f86e 	bl	80063e0 <moveBlood>
						drawBlood(sp[sprite].blood[i], startx, starty, sp[sprite].dist);
 8008304:	4b98      	ldr	r3, [pc, #608]	; (8008568 <drawSprites+0x8f8>)
 8008306:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800830a:	fb05 f202 	mul.w	r2, r5, r2
 800830e:	189e      	adds	r6, r3, r2
 8008310:	eb04 0184 	add.w	r1, r4, r4, lsl #2
 8008314:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008318:	4413      	add	r3, r2
 800831a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800831c:	3328      	adds	r3, #40	; 0x28
 800831e:	9200      	str	r2, [sp, #0]
 8008320:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008322:	ed96 1a09 	vldr	s2, [r6, #36]	; 0x24
 8008326:	eef0 0a4c 	vmov.f32	s1, s24
 800832a:	eeb0 0a4a 	vmov.f32	s0, s20
 800832e:	f7fe f93d 	bl	80065ac <drawBlood>
					for (int i = 0; i < num_of_blood_particles; i++) {
 8008332:	3401      	adds	r4, #1
 8008334:	2c13      	cmp	r4, #19
 8008336:	f73f ad25 	bgt.w	8007d84 <drawSprites+0x114>
						if (sp[sprite].blood[i].active != 1) continue;
 800833a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800833e:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8008342:	fb05 f202 	mul.w	r2, r5, r2
 8008346:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800834a:	4a87      	ldr	r2, [pc, #540]	; (8008568 <drawSprites+0x8f8>)
 800834c:	4413      	add	r3, r2
 800834e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008352:	2b01      	cmp	r3, #1
 8008354:	d1ed      	bne.n	8008332 <drawSprites+0x6c2>
						bloodOutOfBounds(&sp[sprite].blood[i],scaling * sp[sprite].sizeY/2);
 8008356:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800835a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800835e:	fb05 f202 	mul.w	r2, r5, r2
 8008362:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008366:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800836a:	497f      	ldr	r1, [pc, #508]	; (8008568 <drawSprites+0x8f8>)
 800836c:	4408      	add	r0, r1
 800836e:	440a      	add	r2, r1
 8008370:	8ad2      	ldrh	r2, [r2, #22]
 8008372:	ee07 2a90 	vmov	s15, r2
 8008376:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800837a:	ee67 7aab 	vmul.f32	s15, s15, s23
 800837e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8008382:	ee67 7a87 	vmul.f32	s15, s15, s14
void moveBlood(Blood blood[]);

void initBlood(Blood blood[], uint8_t x, uint8_t y, float dist);

inline void bloodOutOfBounds(Blood* blood, float maxy) {
    if (blood->posy > maxy) {
 8008386:	440b      	add	r3, r1
 8008388:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800838c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	d5b4      	bpl.n	8008300 <drawSprites+0x690>
		blood->active = 0;
 8008396:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800839a:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 800839e:	fb05 f202 	mul.w	r2, r5, r2
 80083a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80083a6:	440b      	add	r3, r1
 80083a8:	2200      	movs	r2, #0
 80083aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80083ae:	e7a7      	b.n	8008300 <drawSprites+0x690>
		if(sp[sprite].viden == 1 && dist > 4){
 80083b0:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 80083b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80083b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083bc:	f77f acec 	ble.w	8007d98 <drawSprites+0x128>
			if (cosf(sangle + PI) < 0)
 80083c0:	ee18 0a10 	vmov	r0, s16
 80083c4:	f7f8 f8e8 	bl	8000598 <__aeabi_f2d>
 80083c8:	a363      	add	r3, pc, #396	; (adr r3, 8008558 <drawSprites+0x8e8>)
 80083ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ce:	f7f7 ff85 	bl	80002dc <__adddf3>
 80083d2:	f7f8 fc11 	bl	8000bf8 <__aeabi_d2f>
 80083d6:	ee08 0a10 	vmov	s16, r0
 80083da:	ee00 0a10 	vmov	s0, r0
 80083de:	f001 ff7b 	bl	800a2d8 <cosf>
 80083e2:	eef0 8a40 	vmov.f32	s17, s0
 80083e6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80083ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ee:	f100 808d 	bmi.w	800850c <drawSprites+0x89c>
				fCheckX = fCheck;
 80083f2:	2605      	movs	r6, #5
			if (sinf(sangle + PI) < 0)
 80083f4:	eeb0 0a48 	vmov.f32	s0, s16
 80083f8:	f001 ffba 	bl	800a370 <sinf>
 80083fc:	eeb0 8a40 	vmov.f32	s16, s0
 8008400:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008408:	f100 8083 	bmi.w	8008512 <drawSprites+0x8a2>
				fCheckY = fCheck;
 800840c:	f04f 0805 	mov.w	r8, #5
			uint8_t mapy = (int) sp[sprite].y / 10;
 8008410:	4b55      	ldr	r3, [pc, #340]	; (8008568 <drawSprites+0x8f8>)
 8008412:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8008416:	fb02 3305 	mla	r3, r2, r5, r3
 800841a:	ed93 9a03 	vldr	s18, [r3, #12]
 800841e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8008422:	ee17 4a90 	vmov	r4, s15
 8008426:	4951      	ldr	r1, [pc, #324]	; (800856c <drawSprites+0x8fc>)
 8008428:	fb81 2004 	smull	r2, r0, r1, r4
 800842c:	17e2      	asrs	r2, r4, #31
 800842e:	ebc2 02a0 	rsb	r2, r2, r0, asr #2
			uint8_t mapx = ((int) sp[sprite].x + fCheckX) / 10;
 8008432:	edd3 9a02 	vldr	s19, [r3, #8]
 8008436:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800843a:	ee17 3a90 	vmov	r3, s15
 800843e:	4433      	add	r3, r6
 8008440:	fb81 0103 	smull	r0, r1, r1, r3
 8008444:	17db      	asrs	r3, r3, #31
 8008446:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
			if (map[mapy][mapx] == 0) sp[sprite].x += 0.4 * cosf(sangle + PI);
 800844a:	b2d2      	uxtb	r2, r2
 800844c:	b2db      	uxtb	r3, r3
 800844e:	4948      	ldr	r1, [pc, #288]	; (8008570 <drawSprites+0x900>)
 8008450:	2032      	movs	r0, #50	; 0x32
 8008452:	fb00 1202 	mla	r2, r0, r2, r1
 8008456:	5cd3      	ldrb	r3, [r2, r3]
 8008458:	b9db      	cbnz	r3, 8008492 <drawSprites+0x822>
 800845a:	ee18 0a90 	vmov	r0, s17
 800845e:	f7f8 f89b 	bl	8000598 <__aeabi_f2d>
 8008462:	a33f      	add	r3, pc, #252	; (adr r3, 8008560 <drawSprites+0x8f0>)
 8008464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008468:	f7f8 f8ee 	bl	8000648 <__aeabi_dmul>
 800846c:	4606      	mov	r6, r0
 800846e:	460f      	mov	r7, r1
 8008470:	4b3d      	ldr	r3, [pc, #244]	; (8008568 <drawSprites+0x8f8>)
 8008472:	f44f 7ade 	mov.w	sl, #444	; 0x1bc
 8008476:	fb0a 3a05 	mla	sl, sl, r5, r3
 800847a:	ee19 0a90 	vmov	r0, s19
 800847e:	f7f8 f88b 	bl	8000598 <__aeabi_f2d>
 8008482:	4632      	mov	r2, r6
 8008484:	463b      	mov	r3, r7
 8008486:	f7f7 ff29 	bl	80002dc <__adddf3>
 800848a:	f7f8 fbb5 	bl	8000bf8 <__aeabi_d2f>
 800848e:	f8ca 0008 	str.w	r0, [sl, #8]
			mapy = ((int) sp[sprite].y + fCheckY) / 10;
 8008492:	4444      	add	r4, r8
 8008494:	4935      	ldr	r1, [pc, #212]	; (800856c <drawSprites+0x8fc>)
 8008496:	fb81 2304 	smull	r2, r3, r1, r4
 800849a:	17e4      	asrs	r4, r4, #31
 800849c:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
			mapx = (int) sp[sprite].x / 10;
 80084a0:	4a31      	ldr	r2, [pc, #196]	; (8008568 <drawSprites+0x8f8>)
 80084a2:	f44f 70de 	mov.w	r0, #444	; 0x1bc
 80084a6:	fb00 2205 	mla	r2, r0, r5, r2
 80084aa:	edd2 7a02 	vldr	s15, [r2, #8]
 80084ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084b2:	ee17 2a90 	vmov	r2, s15
 80084b6:	fb81 0102 	smull	r0, r1, r1, r2
 80084ba:	17d2      	asrs	r2, r2, #31
 80084bc:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
			if (map[mapy][mapx] == 0) sp[sprite].y += 0.4 * sinf(sangle + PI);
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	b2d2      	uxtb	r2, r2
 80084c4:	492a      	ldr	r1, [pc, #168]	; (8008570 <drawSprites+0x900>)
 80084c6:	2032      	movs	r0, #50	; 0x32
 80084c8:	fb00 1303 	mla	r3, r0, r3, r1
 80084cc:	5c9b      	ldrb	r3, [r3, r2]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f47f ac62 	bne.w	8007d98 <drawSprites+0x128>
 80084d4:	ee18 0a10 	vmov	r0, s16
 80084d8:	f7f8 f85e 	bl	8000598 <__aeabi_f2d>
 80084dc:	a320      	add	r3, pc, #128	; (adr r3, 8008560 <drawSprites+0x8f0>)
 80084de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e2:	f7f8 f8b1 	bl	8000648 <__aeabi_dmul>
 80084e6:	4606      	mov	r6, r0
 80084e8:	460f      	mov	r7, r1
 80084ea:	4c1f      	ldr	r4, [pc, #124]	; (8008568 <drawSprites+0x8f8>)
 80084ec:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 80084f0:	fb03 4405 	mla	r4, r3, r5, r4
 80084f4:	ee19 0a10 	vmov	r0, s18
 80084f8:	f7f8 f84e 	bl	8000598 <__aeabi_f2d>
 80084fc:	4632      	mov	r2, r6
 80084fe:	463b      	mov	r3, r7
 8008500:	f7f7 feec 	bl	80002dc <__adddf3>
 8008504:	f7f8 fb78 	bl	8000bf8 <__aeabi_d2f>
 8008508:	60e0      	str	r0, [r4, #12]
 800850a:	e445      	b.n	8007d98 <drawSprites+0x128>
				fCheckX = -fCheck;
 800850c:	f06f 0604 	mvn.w	r6, #4
 8008510:	e770      	b.n	80083f4 <drawSprites+0x784>
				fCheckY = -fCheck;
 8008512:	f06f 0804 	mvn.w	r8, #4
 8008516:	e77b      	b.n	8008410 <drawSprites+0x7a0>
			play_sound(2);
 8008518:	2002      	movs	r0, #2
 800851a:	f7fe fb91 	bl	8006c40 <play_sound>
			reset();
 800851e:	f7fd fedf 	bl	80062e0 <reset>
			init();
 8008522:	f7fe f9e5 	bl	80068f0 <init>
			return;
 8008526:	e008      	b.n	800853a <drawSprites+0x8ca>
	}
	if(indicate_led){
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	d00a      	beq.n	8008544 <drawSprites+0x8d4>
		LED_on(LED1);
 800852e:	2001      	movs	r0, #1
 8008530:	f7fc ffa0 	bl	8005474 <LED_on>
		LED_on(LED2);
 8008534:	2002      	movs	r0, #2
 8008536:	f7fc ff9d 	bl	8005474 <LED_on>
	}else{
		LED_off(LED1);
		LED_off(LED2);
	}

}
 800853a:	b075      	add	sp, #468	; 0x1d4
 800853c:	ecbd 8b0c 	vpop	{d8-d13}
 8008540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		LED_off(LED1);
 8008544:	2001      	movs	r0, #1
 8008546:	f7fc ff9f 	bl	8005488 <LED_off>
		LED_off(LED2);
 800854a:	2002      	movs	r0, #2
 800854c:	f7fc ff9c 	bl	8005488 <LED_off>
 8008550:	e7f3      	b.n	800853a <drawSprites+0x8ca>
 8008552:	bf00      	nop
 8008554:	f3af 8000 	nop.w
 8008558:	f01b866e 	.word	0xf01b866e
 800855c:	400921f9 	.word	0x400921f9
 8008560:	9999999a 	.word	0x9999999a
 8008564:	3fd99999 	.word	0x3fd99999
 8008568:	2001d090 	.word	0x2001d090
 800856c:	66666667 	.word	0x66666667
 8008570:	20000994 	.word	0x20000994

08008574 <TIMUT_stopwatch_set_time_mark>:
// Funkcija TIMUT_stopwatch_set_time_mark() si zabeleži trenutno
// vrednost SysTick števca in tako na nek način postavi "časovni zaznamek"
// (angl. time mark), v katerem trenutku smo z uro štoparico pričeli
// meriti čas (tj. "štopati").
void TIMUT_stopwatch_set_time_mark(stopwatch_handle_t *stopwatch)
{
 8008574:	b510      	push	{r4, lr}
 8008576:	4604      	mov	r4, r0
	stopwatch->time_mark = HAL_GetTick();
 8008578:	f7f9 fb60 	bl	8001c3c <HAL_GetTick>
 800857c:	6020      	str	r0, [r4, #0]
}
 800857e:	bd10      	pop	{r4, pc}

08008580 <TIMUT_stopwatch_update>:


// Funkcija TIMUT_stopwatch_update() posodobi vrednost pretečenega
// časa od trenutka, kjer smo postavili časovni zaznamek ("time mark").
void TIMUT_stopwatch_update(stopwatch_handle_t *stopwatch)
{
 8008580:	b510      	push	{r4, lr}
 8008582:	4604      	mov	r4, r0
	stopwatch->elapsed_time = HAL_GetTick() - stopwatch->time_mark;
 8008584:	f7f9 fb5a 	bl	8001c3c <HAL_GetTick>
 8008588:	6823      	ldr	r3, [r4, #0]
 800858a:	1ac0      	subs	r0, r0, r3
 800858c:	6060      	str	r0, [r4, #4]
}
 800858e:	bd10      	pop	{r4, pc}

08008590 <TIMUT_stopwatch_has_X_ms_passed>:
// Funkcija TIMUT_stopwatch_has_X_ms_passed() preveri, ali je od postavitve
// časovnega zaznamka že preteklo "x" milisekund, kjer pa je "x" vrednost
// vhodnega parametra funkcije. Funkcija vrne vrednost 1, če je že preteklo
// "x" milisekund, sicer pa vrne 0.
uint8_t TIMUT_stopwatch_has_X_ms_passed(stopwatch_handle_t *stopwatch, uint32_t x)
{
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4605      	mov	r5, r0
 8008594:	460c      	mov	r4, r1
	// Najprej je potrebno posodobiti vrednost pretečenega časa.
	// Uporabite ustrezno TIMUT_ funkcijo zgoraj.

		// DOPOLNI
	TIMUT_stopwatch_update(stopwatch);
 8008596:	f7ff fff3 	bl	8008580 <TIMUT_stopwatch_update>

	// Nato se pa preveri, če je pretečeni čas večji ali manjši od "x" milisekund.
	if ( stopwatch->elapsed_time > x )
 800859a:	686b      	ldr	r3, [r5, #4]
 800859c:	42a3      	cmp	r3, r4
 800859e:	d901      	bls.n	80085a4 <TIMUT_stopwatch_has_X_ms_passed+0x14>
	{
		return 1;	// pretečeni čas je večji od "x" milisekund
 80085a0:	2001      	movs	r0, #1
	else
	{
		return 0;	// pretečeni čas je manjši od "x" milisekund
	}

}
 80085a2:	bd38      	pop	{r3, r4, r5, pc}
		return 0;	// pretečeni čas je manjši od "x" milisekund
 80085a4:	2000      	movs	r0, #0
 80085a6:	e7fc      	b.n	80085a2 <TIMUT_stopwatch_has_X_ms_passed+0x12>

080085a8 <UG_Init>:

UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 80085a8:	6001      	str	r1, [r0, #0]
   g->x_dim = x;
 80085aa:	6042      	str	r2, [r0, #4]
   g->y_dim = y;
 80085ac:	6083      	str	r3, [r0, #8]
   g->console.x_start = 4;
 80085ae:	2104      	movs	r1, #4
 80085b0:	62c1      	str	r1, [r0, #44]	; 0x2c
   g->console.y_start = 4;
 80085b2:	6301      	str	r1, [r0, #48]	; 0x30
   g->console.x_end = g->x_dim - g->console.x_start-1;
 80085b4:	3a05      	subs	r2, #5
 80085b6:	6342      	str	r2, [r0, #52]	; 0x34
   g->console.y_end = g->y_dim - g->console.x_start-1;
 80085b8:	3b05      	subs	r3, #5
 80085ba:	6383      	str	r3, [r0, #56]	; 0x38
   g->console.x_pos = g->console.x_end;
 80085bc:	6242      	str	r2, [r0, #36]	; 0x24
   g->console.y_pos = g->console.y_end;
 80085be:	6283      	str	r3, [r0, #40]	; 0x28
   g->char_h_space = 1;
 80085c0:	2301      	movs	r3, #1
 80085c2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
   g->char_v_space = 1;
 80085c6:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
   g->font.p = NULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	6443      	str	r3, [r0, #68]	; 0x44
   g->font.char_height = 0;
 80085ce:	6503      	str	r3, [r0, #80]	; 0x50
   g->font.char_width = 0;
 80085d0:	64c3      	str	r3, [r0, #76]	; 0x4c
   g->font.start_char = 0;
 80085d2:	6543      	str	r3, [r0, #84]	; 0x54
   g->font.end_char = 0;
 80085d4:	6583      	str	r3, [r0, #88]	; 0x58
   g->font.widths = NULL;
 80085d6:	65c3      	str	r3, [r0, #92]	; 0x5c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 80085d8:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80085dc:	66c2      	str	r2, [r0, #108]	; 0x6c
   #endif
   g->fore_color = C_WHITE;
 80085de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085e2:	6642      	str	r2, [r0, #100]	; 0x64
   g->back_color = C_BLACK;
 80085e4:	6683      	str	r3, [r0, #104]	; 0x68
   g->next_window = NULL;
 80085e6:	6183      	str	r3, [r0, #24]
   g->active_window = NULL;
 80085e8:	61c3      	str	r3, [r0, #28]
   g->last_window = NULL;
 80085ea:	6203      	str	r3, [r0, #32]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80085ec:	e008      	b.n	8008600 <UG_Init+0x58>
   {
      g->driver[i].driver = NULL;
 80085ee:	f103 020e 	add.w	r2, r3, #14
 80085f2:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80085f6:	2100      	movs	r1, #0
 80085f8:	6051      	str	r1, [r2, #4]
      g->driver[i].state = 0;
 80085fa:	7211      	strb	r1, [r2, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80085fc:	3301      	adds	r3, #1
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b02      	cmp	r3, #2
 8008602:	d9f4      	bls.n	80085ee <UG_Init+0x46>
   }

   gui = g;
 8008604:	4b01      	ldr	r3, [pc, #4]	; (800860c <UG_Init+0x64>)
 8008606:	6018      	str	r0, [r3, #0]
   return 1;
}
 8008608:	2001      	movs	r0, #1
 800860a:	4770      	bx	lr
 800860c:	2001de88 	.word	0x2001de88

08008610 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8008610:	b500      	push	{lr}
   gui->font = *font;
 8008612:	4b07      	ldr	r3, [pc, #28]	; (8008630 <UG_FontSelect+0x20>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f103 0c44 	add.w	ip, r3, #68	; 0x44
 800861a:	4686      	mov	lr, r0
 800861c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8008620:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008624:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8008628:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
}
 800862c:	f85d fb04 	ldr.w	pc, [sp], #4
 8008630:	2001de88 	.word	0x2001de88

08008634 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8008634:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008638:	b083      	sub	sp, #12
 800863a:	4606      	mov	r6, r0
 800863c:	4688      	mov	r8, r1
 800863e:	4691      	mov	r9, r2
 8008640:	461d      	mov	r5, r3
 8008642:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   UG_S16 n,m;

   if ( x2 < x1 )
 8008644:	4282      	cmp	r2, r0
 8008646:	db01      	blt.n	800864c <UG_FillFrame+0x18>
 8008648:	4681      	mov	r9, r0
 800864a:	4616      	mov	r6, r2
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 800864c:	4545      	cmp	r5, r8
 800864e:	db02      	blt.n	8008656 <UG_FillFrame+0x22>
 8008650:	462b      	mov	r3, r5
 8008652:	4645      	mov	r5, r8
 8008654:	4698      	mov	r8, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <UG_FillFrame+0x64>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 800865e:	f012 0f02 	tst.w	r2, #2
 8008662:	d015      	beq.n	8008690 <UG_FillFrame+0x5c>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8008664:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8008666:	9700      	str	r7, [sp, #0]
 8008668:	4643      	mov	r3, r8
 800866a:	4632      	mov	r2, r6
 800866c:	4629      	mov	r1, r5
 800866e:	4648      	mov	r0, r9
 8008670:	47a0      	blx	r4
 8008672:	b968      	cbnz	r0, 8008690 <UG_FillFrame+0x5c>
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
      }
   }
}
 8008674:	b003      	add	sp, #12
 8008676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         gui->pset(n,m,c);
 800867a:	4b07      	ldr	r3, [pc, #28]	; (8008698 <UG_FillFrame+0x64>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	463a      	mov	r2, r7
 8008682:	4629      	mov	r1, r5
 8008684:	4620      	mov	r0, r4
 8008686:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8008688:	3401      	adds	r4, #1
 800868a:	42a6      	cmp	r6, r4
 800868c:	daf5      	bge.n	800867a <UG_FillFrame+0x46>
   for( m=y1; m<=y2; m++ )
 800868e:	3501      	adds	r5, #1
 8008690:	45a8      	cmp	r8, r5
 8008692:	dbef      	blt.n	8008674 <UG_FillFrame+0x40>
      for( n=x1; n<=x2; n++ )
 8008694:	464c      	mov	r4, r9
 8008696:	e7f8      	b.n	800868a <UG_FillFrame+0x56>
 8008698:	2001de88 	.word	0x2001de88

0800869c <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 800869c:	4b01      	ldr	r3, [pc, #4]	; (80086a4 <UG_SetForecolor+0x8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	6658      	str	r0, [r3, #100]	; 0x64
}
 80086a2:	4770      	bx	lr
 80086a4:	2001de88 	.word	0x2001de88

080086a8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 80086a8:	4b01      	ldr	r3, [pc, #4]	; (80086b0 <UG_SetBackcolor+0x8>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6698      	str	r0, [r3, #104]	; 0x68
}
 80086ae:	4770      	bx	lr
 80086b0:	2001de88 	.word	0x2001de88

080086b4 <_UG_PutChar>:

/* -------------------------------------------------------------------------------- */
/* -- INTERNAL FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */
void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 80086b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b8:	b087      	sub	sp, #28
 80086ba:	9103      	str	r1, [sp, #12]
 80086bc:	4611      	mov	r1, r2
 80086be:	461f      	mov	r7, r3
 80086c0:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;

   switch ( bt )
 80086c4:	28fc      	cmp	r0, #252	; 0xfc
 80086c6:	d824      	bhi.n	8008712 <_UG_PutChar+0x5e>
 80086c8:	28d6      	cmp	r0, #214	; 0xd6
 80086ca:	d319      	bcc.n	8008700 <_UG_PutChar+0x4c>
 80086cc:	f1a0 03d6 	sub.w	r3, r0, #214	; 0xd6
 80086d0:	2b26      	cmp	r3, #38	; 0x26
 80086d2:	d81e      	bhi.n	8008712 <_UG_PutChar+0x5e>
 80086d4:	e8df f003 	tbb	[pc, r3]
 80086d8:	1d1d1d60 	.word	0x1d1d1d60
 80086dc:	1d641d1d 	.word	0x1d641d1d
 80086e0:	1d1d1d1d 	.word	0x1d1d1d1d
 80086e4:	1d661d1d 	.word	0x1d661d1d
 80086e8:	1d1d1d1d 	.word	0x1d1d1d1d
 80086ec:	1d1d1d1d 	.word	0x1d1d1d1d
 80086f0:	1d1d1d1d 	.word	0x1d1d1d1d
 80086f4:	1d1d1d1d 	.word	0x1d1d1d1d
 80086f8:	1d1d1d6a 	.word	0x1d1d1d6a
 80086fc:	1d1d      	.short	0x1d1d
 80086fe:	62          	.byte	0x62
 80086ff:	00          	.byte	0x00
 8008700:	28b5      	cmp	r0, #181	; 0xb5
 8008702:	d051      	beq.n	80087a8 <_UG_PutChar+0xf4>
 8008704:	28c4      	cmp	r0, #196	; 0xc4
 8008706:	d101      	bne.n	800870c <_UG_PutChar+0x58>
      case 0xF6: bt = 0x94; break; // �
      case 0xD6: bt = 0x99; break; // �
      case 0xFC: bt = 0x81; break; // �
      case 0xDC: bt = 0x9A; break; // �
      case 0xE4: bt = 0x84; break; // �
      case 0xC4: bt = 0x8E; break; // �
 8008708:	208e      	movs	r0, #142	; 0x8e
 800870a:	e002      	b.n	8008712 <_UG_PutChar+0x5e>
   switch ( bt )
 800870c:	28b0      	cmp	r0, #176	; 0xb0
 800870e:	d100      	bne.n	8008712 <_UG_PutChar+0x5e>
      case 0xB5: bt = 0xE6; break; // �
      case 0xB0: bt = 0xF8; break; // �
 8008710:	20f8      	movs	r0, #248	; 0xf8
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8008712:	4604      	mov	r4, r0
 8008714:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008718:	4298      	cmp	r0, r3
 800871a:	d374      	bcc.n	8008806 <_UG_PutChar+0x152>
 800871c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8008720:	4290      	cmp	r0, r2
 8008722:	d870      	bhi.n	8008806 <_UG_PutChar+0x152>
   
   yo = y;
 8008724:	468b      	mov	fp, r1
   bn = font->char_width;
 8008726:	f8d8 2008 	ldr.w	r2, [r8, #8]
   if ( !bn ) return;
 800872a:	2a00      	cmp	r2, #0
 800872c:	d06b      	beq.n	8008806 <_UG_PutChar+0x152>
   bn >>= 3;
 800872e:	08d0      	lsrs	r0, r2, #3
 8008730:	9001      	str	r0, [sp, #4]
   if ( font->char_width % 8 ) bn++;
 8008732:	f012 0f07 	tst.w	r2, #7
 8008736:	d001      	beq.n	800873c <_UG_PutChar+0x88>
 8008738:	3001      	adds	r0, #1
 800873a:	9001      	str	r0, [sp, #4]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 800873c:	f8d8 0018 	ldr.w	r0, [r8, #24]
 8008740:	2800      	cmp	r0, #0
 8008742:	d035      	beq.n	80087b0 <_UG_PutChar+0xfc>
 8008744:	1ae5      	subs	r5, r4, r3
 8008746:	5d40      	ldrb	r0, [r0, r5]
 8008748:	9005      	str	r0, [sp, #20]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 800874a:	48a3      	ldr	r0, [pc, #652]	; (80089d8 <_UG_PutChar+0x324>)
 800874c:	6800      	ldr	r0, [r0, #0]
 800874e:	f890 5088 	ldrb.w	r5, [r0, #136]	; 0x88
 8008752:	f015 0f02 	tst.w	r5, #2
 8008756:	f000 80a2 	beq.w	800889e <_UG_PutChar+0x1ea>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 800875a:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800875e:	9803      	ldr	r0, [sp, #12]
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	18c2      	adds	r2, r0, r3
 8008764:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008768:	440b      	add	r3, r1
 800876a:	3b01      	subs	r3, #1
 800876c:	3a01      	subs	r2, #1
 800876e:	47a8      	blx	r5
 8008770:	4681      	mov	r9, r0
	   
      if (font->font_type == FONT_TYPE_1BPP)
 8008772:	f898 3004 	ldrb.w	r3, [r8, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d143      	bne.n	8008802 <_UG_PutChar+0x14e>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 800877a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800877e:	1ae3      	subs	r3, r4, r3
 8008780:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008784:	fb02 f303 	mul.w	r3, r2, r3
 8008788:	9a01      	ldr	r2, [sp, #4]
 800878a:	fb02 f303 	mul.w	r3, r2, r3
		  for( j=0;j<font->char_height;j++ )
 800878e:	2200      	movs	r2, #0
 8008790:	9203      	str	r2, [sp, #12]
 8008792:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8008796:	e02b      	b.n	80087f0 <_UG_PutChar+0x13c>
      case 0xD6: bt = 0x99; break; // �
 8008798:	2099      	movs	r0, #153	; 0x99
 800879a:	e7ba      	b.n	8008712 <_UG_PutChar+0x5e>
      case 0xFC: bt = 0x81; break; // �
 800879c:	2081      	movs	r0, #129	; 0x81
 800879e:	e7b8      	b.n	8008712 <_UG_PutChar+0x5e>
      case 0xDC: bt = 0x9A; break; // �
 80087a0:	209a      	movs	r0, #154	; 0x9a
 80087a2:	e7b6      	b.n	8008712 <_UG_PutChar+0x5e>
      case 0xE4: bt = 0x84; break; // �
 80087a4:	2084      	movs	r0, #132	; 0x84
 80087a6:	e7b4      	b.n	8008712 <_UG_PutChar+0x5e>
      case 0xB5: bt = 0xE6; break; // �
 80087a8:	20e6      	movs	r0, #230	; 0xe6
 80087aa:	e7b2      	b.n	8008712 <_UG_PutChar+0x5e>
      case 0xF6: bt = 0x94; break; // �
 80087ac:	2094      	movs	r0, #148	; 0x94
 80087ae:	e7b0      	b.n	8008712 <_UG_PutChar+0x5e>
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 80087b0:	9205      	str	r2, [sp, #20]
 80087b2:	e7ca      	b.n	800874a <_UG_PutChar+0x96>
				   {
					  push_pixel(fc);
				   }
				   else
				   {
					  push_pixel(bc);
 80087b4:	4658      	mov	r0, fp
 80087b6:	47c8      	blx	r9
				   }
				   b >>= 1;
 80087b8:	086d      	lsrs	r5, r5, #1
				   c--;
 80087ba:	3e01      	subs	r6, #1
				for( k=0;(k<8) && c;k++ )
 80087bc:	3401      	adds	r4, #1
 80087be:	2c07      	cmp	r4, #7
 80087c0:	d806      	bhi.n	80087d0 <_UG_PutChar+0x11c>
 80087c2:	b12e      	cbz	r6, 80087d0 <_UG_PutChar+0x11c>
				   if( b & 0x01 )
 80087c4:	f015 0f01 	tst.w	r5, #1
 80087c8:	d0f4      	beq.n	80087b4 <_UG_PutChar+0x100>
					  push_pixel(fc);
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c8      	blx	r9
 80087ce:	e7f3      	b.n	80087b8 <_UG_PutChar+0x104>
			 for( i=0;i<bn;i++ )
 80087d0:	f10a 0a01 	add.w	sl, sl, #1
				b = font->p[index++];
 80087d4:	9b02      	ldr	r3, [sp, #8]
			 for( i=0;i<bn;i++ )
 80087d6:	9a01      	ldr	r2, [sp, #4]
 80087d8:	4592      	cmp	sl, r2
 80087da:	d206      	bcs.n	80087ea <_UG_PutChar+0x136>
				b = font->p[index++];
 80087dc:	f8d8 2000 	ldr.w	r2, [r8]
 80087e0:	1c59      	adds	r1, r3, #1
 80087e2:	9102      	str	r1, [sp, #8]
 80087e4:	5cd5      	ldrb	r5, [r2, r3]
				for( k=0;(k<8) && c;k++ )
 80087e6:	2400      	movs	r4, #0
 80087e8:	e7e9      	b.n	80087be <_UG_PutChar+0x10a>
		  for( j=0;j<font->char_height;j++ )
 80087ea:	9a03      	ldr	r2, [sp, #12]
 80087ec:	3201      	adds	r2, #1
 80087ee:	9203      	str	r2, [sp, #12]
 80087f0:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80087f4:	9903      	ldr	r1, [sp, #12]
 80087f6:	428a      	cmp	r2, r1
 80087f8:	d905      	bls.n	8008806 <_UG_PutChar+0x152>
			 c=actual_char_width;
 80087fa:	9e05      	ldr	r6, [sp, #20]
			 for( i=0;i<bn;i++ )
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	e7e9      	b.n	80087d6 <_UG_PutChar+0x122>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8008802:	2b01      	cmp	r3, #1
 8008804:	d002      	beq.n	800880c <_UG_PutChar+0x158>
            index += font->char_width - actual_char_width;
            yo++;
         }
      }
   }
}
 8008806:	b007      	add	sp, #28
 8008808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 800880c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008810:	1ae3      	subs	r3, r4, r3
 8008812:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008816:	fb02 f303 	mul.w	r3, r2, r3
 800881a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800881e:	fb02 f303 	mul.w	r3, r2, r3
		   for( j=0;j<font->char_height;j++ )
 8008822:	2600      	movs	r6, #0
 8008824:	f8dd b014 	ldr.w	fp, [sp, #20]
 8008828:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800882a:	e032      	b.n	8008892 <_UG_PutChar+0x1de>
				 b = font->p[index++];
 800882c:	f8d8 2000 	ldr.w	r2, [r8]
 8008830:	f103 0a01 	add.w	sl, r3, #1
 8008834:	5cd1      	ldrb	r1, [r2, r3]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8008836:	b2f8      	uxtb	r0, r7
 8008838:	fa5f fc85 	uxtb.w	ip, r5
 800883c:	f5c1 7380 	rsb	r3, r1, #256	; 0x100
 8008840:	fb03 fc0c 	mul.w	ip, r3, ip
 8008844:	fb01 c000 	mla	r0, r1, r0, ip
 8008848:	f3c0 2207 	ubfx	r2, r0, #8, #8
				         ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 800884c:	f407 407f 	and.w	r0, r7, #65280	; 0xff00
 8008850:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8008854:	fb0c fc03 	mul.w	ip, ip, r3
 8008858:	fb00 c001 	mla	r0, r0, r1, ip
 800885c:	0a00      	lsrs	r0, r0, #8
 800885e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8008862:	4310      	orrs	r0, r2
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8008864:	f407 0c7f 	and.w	ip, r7, #16711680	; 0xff0000
 8008868:	f405 027f 	and.w	r2, r5, #16711680	; 0xff0000
 800886c:	fb03 f202 	mul.w	r2, r3, r2
 8008870:	fb0c 2301 	mla	r3, ip, r1, r2
 8008874:	0a1b      	lsrs	r3, r3, #8
 8008876:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				 push_pixel(color);
 800887a:	4318      	orrs	r0, r3
 800887c:	47c8      	blx	r9
			  for( i=0;i<actual_char_width;i++ )
 800887e:	3401      	adds	r4, #1
				 b = font->p[index++];
 8008880:	4653      	mov	r3, sl
			  for( i=0;i<actual_char_width;i++ )
 8008882:	455c      	cmp	r4, fp
 8008884:	d3d2      	bcc.n	800882c <_UG_PutChar+0x178>
			  index += font->char_width - actual_char_width;
 8008886:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800888a:	eba2 020b 	sub.w	r2, r2, fp
 800888e:	4413      	add	r3, r2
		   for( j=0;j<font->char_height;j++ )
 8008890:	3601      	adds	r6, #1
 8008892:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008896:	42b2      	cmp	r2, r6
 8008898:	d9b5      	bls.n	8008806 <_UG_PutChar+0x152>
			  for( i=0;i<actual_char_width;i++ )
 800889a:	2400      	movs	r4, #0
 800889c:	e7f1      	b.n	8008882 <_UG_PutChar+0x1ce>
	   if (font->font_type == FONT_TYPE_1BPP)
 800889e:	f898 1004 	ldrb.w	r1, [r8, #4]
 80088a2:	2900      	cmp	r1, #0
 80088a4:	d141      	bne.n	800892a <_UG_PutChar+0x276>
         index = (bt - font->start_char)* font->char_height * bn;
 80088a6:	1ae3      	subs	r3, r4, r3
 80088a8:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80088ac:	fb02 f303 	mul.w	r3, r2, r3
 80088b0:	9a01      	ldr	r2, [sp, #4]
 80088b2:	fb02 f303 	mul.w	r3, r2, r3
         for( j=0;j<font->char_height;j++ )
 80088b6:	2200      	movs	r2, #0
 80088b8:	9204      	str	r2, [sp, #16]
 80088ba:	46ba      	mov	sl, r7
 80088bc:	e02a      	b.n	8008914 <_UG_PutChar+0x260>
                  gui->pset(xo,yo,bc);
 80088be:	4b46      	ldr	r3, [pc, #280]	; (80089d8 <_UG_PutChar+0x324>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80088c6:	4659      	mov	r1, fp
 80088c8:	4638      	mov	r0, r7
 80088ca:	4798      	blx	r3
               b >>= 1;
 80088cc:	086d      	lsrs	r5, r5, #1
               xo++;
 80088ce:	3701      	adds	r7, #1
               c--;
 80088d0:	3e01      	subs	r6, #1
             for( k=0;(k<8) && c;k++ )
 80088d2:	3401      	adds	r4, #1
 80088d4:	2c07      	cmp	r4, #7
 80088d6:	d80b      	bhi.n	80088f0 <_UG_PutChar+0x23c>
 80088d8:	b156      	cbz	r6, 80088f0 <_UG_PutChar+0x23c>
               if( b & 0x01 )
 80088da:	f015 0f01 	tst.w	r5, #1
 80088de:	d0ee      	beq.n	80088be <_UG_PutChar+0x20a>
                  gui->pset(xo,yo,fc);
 80088e0:	4b3d      	ldr	r3, [pc, #244]	; (80089d8 <_UG_PutChar+0x324>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4652      	mov	r2, sl
 80088e8:	4659      	mov	r1, fp
 80088ea:	4638      	mov	r0, r7
 80088ec:	4798      	blx	r3
 80088ee:	e7ed      	b.n	80088cc <_UG_PutChar+0x218>
           for( i=0;i<bn;i++ )
 80088f0:	f109 0901 	add.w	r9, r9, #1
             b = font->p[index++];
 80088f4:	9b02      	ldr	r3, [sp, #8]
           for( i=0;i<bn;i++ )
 80088f6:	9a01      	ldr	r2, [sp, #4]
 80088f8:	4591      	cmp	r9, r2
 80088fa:	d206      	bcs.n	800890a <_UG_PutChar+0x256>
             b = font->p[index++];
 80088fc:	f8d8 2000 	ldr.w	r2, [r8]
 8008900:	1c59      	adds	r1, r3, #1
 8008902:	9102      	str	r1, [sp, #8]
 8008904:	5cd5      	ldrb	r5, [r2, r3]
             for( k=0;(k<8) && c;k++ )
 8008906:	2400      	movs	r4, #0
 8008908:	e7e4      	b.n	80088d4 <_UG_PutChar+0x220>
           yo++;
 800890a:	f10b 0b01 	add.w	fp, fp, #1
         for( j=0;j<font->char_height;j++ )
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	3201      	adds	r2, #1
 8008912:	9204      	str	r2, [sp, #16]
 8008914:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8008918:	9904      	ldr	r1, [sp, #16]
 800891a:	428a      	cmp	r2, r1
 800891c:	f67f af73 	bls.w	8008806 <_UG_PutChar+0x152>
           xo = x;
 8008920:	9f03      	ldr	r7, [sp, #12]
           c=actual_char_width;
 8008922:	9e05      	ldr	r6, [sp, #20]
           for( i=0;i<bn;i++ )
 8008924:	f04f 0900 	mov.w	r9, #0
 8008928:	e7e5      	b.n	80088f6 <_UG_PutChar+0x242>
      else if (font->font_type == FONT_TYPE_8BPP)
 800892a:	2901      	cmp	r1, #1
 800892c:	f47f af6b 	bne.w	8008806 <_UG_PutChar+0x152>
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8008930:	1ae3      	subs	r3, r4, r3
 8008932:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8008936:	fb01 f303 	mul.w	r3, r1, r3
 800893a:	fb02 f303 	mul.w	r3, r2, r3
         for( j=0;j<font->char_height;j++ )
 800893e:	f04f 0900 	mov.w	r9, #0
 8008942:	f8cd 9004 	str.w	r9, [sp, #4]
 8008946:	f8dd a014 	ldr.w	sl, [sp, #20]
 800894a:	9e10      	ldr	r6, [sp, #64]	; 0x40
 800894c:	e03b      	b.n	80089c6 <_UG_PutChar+0x312>
               b = font->p[index++];
 800894e:	f8d8 2000 	ldr.w	r2, [r8]
 8008952:	f103 0901 	add.w	r9, r3, #1
 8008956:	5cd0      	ldrb	r0, [r2, r3]
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8008958:	b2fa      	uxtb	r2, r7
 800895a:	b2f1      	uxtb	r1, r6
 800895c:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8008960:	fb03 f101 	mul.w	r1, r3, r1
 8008964:	fb00 1202 	mla	r2, r0, r2, r1
 8008968:	f3c2 2207 	ubfx	r2, r2, #8, #8
                       ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 800896c:	f407 417f 	and.w	r1, r7, #65280	; 0xff00
 8008970:	f406 4c7f 	and.w	ip, r6, #65280	; 0xff00
 8008974:	fb0c fc03 	mul.w	ip, ip, r3
 8008978:	fb01 c100 	mla	r1, r1, r0, ip
 800897c:	0a09      	lsrs	r1, r1, #8
 800897e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8008982:	4311      	orrs	r1, r2
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8008984:	f407 027f 	and.w	r2, r7, #16711680	; 0xff0000
 8008988:	f406 0c7f 	and.w	ip, r6, #16711680	; 0xff0000
 800898c:	fb0c f303 	mul.w	r3, ip, r3
 8008990:	fb02 3200 	mla	r2, r2, r0, r3
 8008994:	0a12      	lsrs	r2, r2, #8
 8008996:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
               gui->pset(xo,yo,color);
 800899a:	4b0f      	ldr	r3, [pc, #60]	; (80089d8 <_UG_PutChar+0x324>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	430a      	orrs	r2, r1
 80089a2:	4659      	mov	r1, fp
 80089a4:	4628      	mov	r0, r5
 80089a6:	4798      	blx	r3
               xo++;
 80089a8:	3501      	adds	r5, #1
            for( i=0;i<actual_char_width;i++ )
 80089aa:	3401      	adds	r4, #1
               b = font->p[index++];
 80089ac:	464b      	mov	r3, r9
            for( i=0;i<actual_char_width;i++ )
 80089ae:	4554      	cmp	r4, sl
 80089b0:	d3cd      	bcc.n	800894e <_UG_PutChar+0x29a>
            index += font->char_width - actual_char_width;
 80089b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80089b6:	eba2 020a 	sub.w	r2, r2, sl
 80089ba:	4413      	add	r3, r2
            yo++;
 80089bc:	f10b 0b01 	add.w	fp, fp, #1
         for( j=0;j<font->char_height;j++ )
 80089c0:	9a01      	ldr	r2, [sp, #4]
 80089c2:	3201      	adds	r2, #1
 80089c4:	9201      	str	r2, [sp, #4]
 80089c6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 80089ca:	9901      	ldr	r1, [sp, #4]
 80089cc:	428a      	cmp	r2, r1
 80089ce:	f67f af1a 	bls.w	8008806 <_UG_PutChar+0x152>
            xo = x;
 80089d2:	9d03      	ldr	r5, [sp, #12]
            for( i=0;i<actual_char_width;i++ )
 80089d4:	2400      	movs	r4, #0
 80089d6:	e7ea      	b.n	80089ae <_UG_PutChar+0x2fa>
 80089d8:	2001de88 	.word	0x2001de88

080089dc <UG_PutChar>:
{
 80089dc:	b510      	push	{r4, lr}
 80089de:	b082      	sub	sp, #8
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 80089e0:	4c04      	ldr	r4, [pc, #16]	; (80089f4 <UG_PutChar+0x18>)
 80089e2:	6824      	ldr	r4, [r4, #0]
 80089e4:	3444      	adds	r4, #68	; 0x44
 80089e6:	9401      	str	r4, [sp, #4]
 80089e8:	9c04      	ldr	r4, [sp, #16]
 80089ea:	9400      	str	r4, [sp, #0]
 80089ec:	f7ff fe62 	bl	80086b4 <_UG_PutChar>
}
 80089f0:	b002      	add	sp, #8
 80089f2:	bd10      	pop	{r4, pc}
 80089f4:	2001de88 	.word	0x2001de88

080089f8 <UG_PutString>:
{
 80089f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089fc:	b083      	sub	sp, #12
 80089fe:	4680      	mov	r8, r0
 8008a00:	460f      	mov	r7, r1
 8008a02:	4615      	mov	r5, r2
   xp=x;
 8008a04:	4606      	mov	r6, r0
   while ( *str != 0 )
 8008a06:	e011      	b.n	8008a2c <UG_PutString+0x34>
         xp = gui->x_dim;
 8008a08:	6866      	ldr	r6, [r4, #4]
         continue;
 8008a0a:	e00f      	b.n	8008a2c <UG_PutString+0x34>
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8008a0c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8008a10:	e01e      	b.n	8008a50 <UG_PutString+0x58>
      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8008a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a14:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8008a16:	9200      	str	r2, [sp, #0]
 8008a18:	463a      	mov	r2, r7
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	f7ff ffde 	bl	80089dc <UG_PutChar>
      xp += cw + gui->char_h_space;
 8008a20:	4b13      	ldr	r3, [pc, #76]	; (8008a70 <UG_PutString+0x78>)
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f993 3060 	ldrsb.w	r3, [r3, #96]	; 0x60
 8008a28:	4499      	add	r9, r3
 8008a2a:	444e      	add	r6, r9
   while ( *str != 0 )
 8008a2c:	7828      	ldrb	r0, [r5, #0]
 8008a2e:	b1d8      	cbz	r0, 8008a68 <UG_PutString+0x70>
      chr = *str++;
 8008a30:	3501      	adds	r5, #1
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8008a32:	4b0f      	ldr	r3, [pc, #60]	; (8008a70 <UG_PutString+0x78>)
 8008a34:	681c      	ldr	r4, [r3, #0]
 8008a36:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008a38:	4298      	cmp	r0, r3
 8008a3a:	d3f7      	bcc.n	8008a2c <UG_PutString+0x34>
 8008a3c:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8008a3e:	4290      	cmp	r0, r2
 8008a40:	d8f4      	bhi.n	8008a2c <UG_PutString+0x34>
      if ( chr == '\n' )
 8008a42:	280a      	cmp	r0, #10
 8008a44:	d0e0      	beq.n	8008a08 <UG_PutString+0x10>
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8008a46:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8008a48:	2a00      	cmp	r2, #0
 8008a4a:	d0df      	beq.n	8008a0c <UG_PutString+0x14>
 8008a4c:	1ac3      	subs	r3, r0, r3
 8008a4e:	5cd3      	ldrb	r3, [r2, r3]
      if ( xp + cw > gui->x_dim - 1 )
 8008a50:	6862      	ldr	r2, [r4, #4]
 8008a52:	4699      	mov	r9, r3
 8008a54:	4433      	add	r3, r6
 8008a56:	429a      	cmp	r2, r3
 8008a58:	dcdb      	bgt.n	8008a12 <UG_PutString+0x1a>
         yp += gui->font.char_height+gui->char_v_space;
 8008a5a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8008a5c:	f994 2061 	ldrsb.w	r2, [r4, #97]	; 0x61
 8008a60:	4413      	add	r3, r2
 8008a62:	441f      	add	r7, r3
         xp = x;
 8008a64:	4646      	mov	r6, r8
 8008a66:	e7d4      	b.n	8008a12 <UG_PutString+0x1a>
}
 8008a68:	b003      	add	sp, #12
 8008a6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a6e:	bf00      	nop
 8008a70:	2001de88 	.word	0x2001de88

08008a74 <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8008a74:	2802      	cmp	r0, #2
 8008a76:	d807      	bhi.n	8008a88 <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8008a78:	4b04      	ldr	r3, [pc, #16]	; (8008a8c <UG_DriverRegister+0x18>)
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	300e      	adds	r0, #14
 8008a7e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8008a82:	6041      	str	r1, [r0, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8008a84:	2303      	movs	r3, #3
 8008a86:	7203      	strb	r3, [r0, #8]
}
 8008a88:	4770      	bx	lr
 8008a8a:	bf00      	nop
 8008a8c:	2001de88 	.word	0x2001de88

08008a90 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8008a90:	2802      	cmp	r0, #2
 8008a92:	d80f      	bhi.n	8008ab4 <UG_DriverEnable+0x24>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 8008a94:	4b08      	ldr	r3, [pc, #32]	; (8008ab8 <UG_DriverEnable+0x28>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	f100 030e 	add.w	r3, r0, #14
 8008a9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008aa0:	7a1b      	ldrb	r3, [r3, #8]
 8008aa2:	f013 0f01 	tst.w	r3, #1
 8008aa6:	d005      	beq.n	8008ab4 <UG_DriverEnable+0x24>
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 8008aa8:	300e      	adds	r0, #14
 8008aaa:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8008aae:	f043 0302 	orr.w	r3, r3, #2
 8008ab2:	7203      	strb	r3, [r0, #8]
   }
}
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	2001de88 	.word	0x2001de88

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	; (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20000020 	.word	0x20000020

08008ac8 <__libc_init_array>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d0d      	ldr	r5, [pc, #52]	; (8008b00 <__libc_init_array+0x38>)
 8008acc:	4c0d      	ldr	r4, [pc, #52]	; (8008b04 <__libc_init_array+0x3c>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	d109      	bne.n	8008aec <__libc_init_array+0x24>
 8008ad8:	4d0b      	ldr	r5, [pc, #44]	; (8008b08 <__libc_init_array+0x40>)
 8008ada:	4c0c      	ldr	r4, [pc, #48]	; (8008b0c <__libc_init_array+0x44>)
 8008adc:	f003 fbbe 	bl	800c25c <_init>
 8008ae0:	1b64      	subs	r4, r4, r5
 8008ae2:	10a4      	asrs	r4, r4, #2
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	42a6      	cmp	r6, r4
 8008ae8:	d105      	bne.n	8008af6 <__libc_init_array+0x2e>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af0:	4798      	blx	r3
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7ee      	b.n	8008ad4 <__libc_init_array+0xc>
 8008af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afa:	4798      	blx	r3
 8008afc:	3601      	adds	r6, #1
 8008afe:	e7f2      	b.n	8008ae6 <__libc_init_array+0x1e>
 8008b00:	080794e8 	.word	0x080794e8
 8008b04:	080794e8 	.word	0x080794e8
 8008b08:	080794e8 	.word	0x080794e8
 8008b0c:	080794ec 	.word	0x080794ec

08008b10 <memcpy>:
 8008b10:	440a      	add	r2, r1
 8008b12:	4291      	cmp	r1, r2
 8008b14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b18:	d100      	bne.n	8008b1c <memcpy+0xc>
 8008b1a:	4770      	bx	lr
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b26:	4291      	cmp	r1, r2
 8008b28:	d1f9      	bne.n	8008b1e <memcpy+0xe>
 8008b2a:	bd10      	pop	{r4, pc}

08008b2c <memset>:
 8008b2c:	4402      	add	r2, r0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d100      	bne.n	8008b36 <memset+0xa>
 8008b34:	4770      	bx	lr
 8008b36:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3a:	e7f9      	b.n	8008b30 <memset+0x4>

08008b3c <srand>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4b10      	ldr	r3, [pc, #64]	; (8008b80 <srand+0x44>)
 8008b40:	681d      	ldr	r5, [r3, #0]
 8008b42:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b44:	4604      	mov	r4, r0
 8008b46:	b9b3      	cbnz	r3, 8008b76 <srand+0x3a>
 8008b48:	2018      	movs	r0, #24
 8008b4a:	f000 fc59 	bl	8009400 <malloc>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	63a8      	str	r0, [r5, #56]	; 0x38
 8008b52:	b920      	cbnz	r0, 8008b5e <srand+0x22>
 8008b54:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <srand+0x48>)
 8008b56:	480c      	ldr	r0, [pc, #48]	; (8008b88 <srand+0x4c>)
 8008b58:	2142      	movs	r1, #66	; 0x42
 8008b5a:	f000 fa01 	bl	8008f60 <__assert_func>
 8008b5e:	490b      	ldr	r1, [pc, #44]	; (8008b8c <srand+0x50>)
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <srand+0x54>)
 8008b62:	e9c0 1300 	strd	r1, r3, [r0]
 8008b66:	4b0b      	ldr	r3, [pc, #44]	; (8008b94 <srand+0x58>)
 8008b68:	6083      	str	r3, [r0, #8]
 8008b6a:	230b      	movs	r3, #11
 8008b6c:	8183      	strh	r3, [r0, #12]
 8008b6e:	2100      	movs	r1, #0
 8008b70:	2001      	movs	r0, #1
 8008b72:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008b76:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008b78:	2200      	movs	r2, #0
 8008b7a:	611c      	str	r4, [r3, #16]
 8008b7c:	615a      	str	r2, [r3, #20]
 8008b7e:	bd38      	pop	{r3, r4, r5, pc}
 8008b80:	20000020 	.word	0x20000020
 8008b84:	08078f54 	.word	0x08078f54
 8008b88:	08078f6b 	.word	0x08078f6b
 8008b8c:	abcd330e 	.word	0xabcd330e
 8008b90:	e66d1234 	.word	0xe66d1234
 8008b94:	0005deec 	.word	0x0005deec

08008b98 <rand>:
 8008b98:	4b16      	ldr	r3, [pc, #88]	; (8008bf4 <rand+0x5c>)
 8008b9a:	b510      	push	{r4, lr}
 8008b9c:	681c      	ldr	r4, [r3, #0]
 8008b9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008ba0:	b9b3      	cbnz	r3, 8008bd0 <rand+0x38>
 8008ba2:	2018      	movs	r0, #24
 8008ba4:	f000 fc2c 	bl	8009400 <malloc>
 8008ba8:	63a0      	str	r0, [r4, #56]	; 0x38
 8008baa:	b928      	cbnz	r0, 8008bb8 <rand+0x20>
 8008bac:	4602      	mov	r2, r0
 8008bae:	4b12      	ldr	r3, [pc, #72]	; (8008bf8 <rand+0x60>)
 8008bb0:	4812      	ldr	r0, [pc, #72]	; (8008bfc <rand+0x64>)
 8008bb2:	214e      	movs	r1, #78	; 0x4e
 8008bb4:	f000 f9d4 	bl	8008f60 <__assert_func>
 8008bb8:	4a11      	ldr	r2, [pc, #68]	; (8008c00 <rand+0x68>)
 8008bba:	4b12      	ldr	r3, [pc, #72]	; (8008c04 <rand+0x6c>)
 8008bbc:	e9c0 2300 	strd	r2, r3, [r0]
 8008bc0:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <rand+0x70>)
 8008bc2:	6083      	str	r3, [r0, #8]
 8008bc4:	230b      	movs	r3, #11
 8008bc6:	8183      	strh	r3, [r0, #12]
 8008bc8:	2201      	movs	r2, #1
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8008bd0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8008bd2:	4a0e      	ldr	r2, [pc, #56]	; (8008c0c <rand+0x74>)
 8008bd4:	6920      	ldr	r0, [r4, #16]
 8008bd6:	6963      	ldr	r3, [r4, #20]
 8008bd8:	490d      	ldr	r1, [pc, #52]	; (8008c10 <rand+0x78>)
 8008bda:	4342      	muls	r2, r0
 8008bdc:	fb01 2203 	mla	r2, r1, r3, r2
 8008be0:	fba0 0101 	umull	r0, r1, r0, r1
 8008be4:	1c43      	adds	r3, r0, #1
 8008be6:	eb42 0001 	adc.w	r0, r2, r1
 8008bea:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8008bee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008bf2:	bd10      	pop	{r4, pc}
 8008bf4:	20000020 	.word	0x20000020
 8008bf8:	08078f54 	.word	0x08078f54
 8008bfc:	08078f6b 	.word	0x08078f6b
 8008c00:	abcd330e 	.word	0xabcd330e
 8008c04:	e66d1234 	.word	0xe66d1234
 8008c08:	0005deec 	.word	0x0005deec
 8008c0c:	5851f42d 	.word	0x5851f42d
 8008c10:	4c957f2d 	.word	0x4c957f2d

08008c14 <setvbuf>:
 8008c14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	461d      	mov	r5, r3
 8008c1a:	4b5d      	ldr	r3, [pc, #372]	; (8008d90 <setvbuf+0x17c>)
 8008c1c:	681f      	ldr	r7, [r3, #0]
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460e      	mov	r6, r1
 8008c22:	4690      	mov	r8, r2
 8008c24:	b127      	cbz	r7, 8008c30 <setvbuf+0x1c>
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	b913      	cbnz	r3, 8008c30 <setvbuf+0x1c>
 8008c2a:	4638      	mov	r0, r7
 8008c2c:	f000 fad0 	bl	80091d0 <__sinit>
 8008c30:	4b58      	ldr	r3, [pc, #352]	; (8008d94 <setvbuf+0x180>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d167      	bne.n	8008d06 <setvbuf+0xf2>
 8008c36:	687c      	ldr	r4, [r7, #4]
 8008c38:	f1b8 0f02 	cmp.w	r8, #2
 8008c3c:	d006      	beq.n	8008c4c <setvbuf+0x38>
 8008c3e:	f1b8 0f01 	cmp.w	r8, #1
 8008c42:	f200 809f 	bhi.w	8008d84 <setvbuf+0x170>
 8008c46:	2d00      	cmp	r5, #0
 8008c48:	f2c0 809c 	blt.w	8008d84 <setvbuf+0x170>
 8008c4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c4e:	07db      	lsls	r3, r3, #31
 8008c50:	d405      	bmi.n	8008c5e <setvbuf+0x4a>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	0598      	lsls	r0, r3, #22
 8008c56:	d402      	bmi.n	8008c5e <setvbuf+0x4a>
 8008c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5a:	f000 fb69 	bl	8009330 <__retarget_lock_acquire_recursive>
 8008c5e:	4621      	mov	r1, r4
 8008c60:	4638      	mov	r0, r7
 8008c62:	f000 fa21 	bl	80090a8 <_fflush_r>
 8008c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c68:	b141      	cbz	r1, 8008c7c <setvbuf+0x68>
 8008c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c6e:	4299      	cmp	r1, r3
 8008c70:	d002      	beq.n	8008c78 <setvbuf+0x64>
 8008c72:	4638      	mov	r0, r7
 8008c74:	f000 fbcc 	bl	8009410 <_free_r>
 8008c78:	2300      	movs	r3, #0
 8008c7a:	6363      	str	r3, [r4, #52]	; 0x34
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61a3      	str	r3, [r4, #24]
 8008c80:	6063      	str	r3, [r4, #4]
 8008c82:	89a3      	ldrh	r3, [r4, #12]
 8008c84:	0619      	lsls	r1, r3, #24
 8008c86:	d503      	bpl.n	8008c90 <setvbuf+0x7c>
 8008c88:	6921      	ldr	r1, [r4, #16]
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	f000 fbc0 	bl	8009410 <_free_r>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8008c96:	f023 0303 	bic.w	r3, r3, #3
 8008c9a:	f1b8 0f02 	cmp.w	r8, #2
 8008c9e:	81a3      	strh	r3, [r4, #12]
 8008ca0:	d06c      	beq.n	8008d7c <setvbuf+0x168>
 8008ca2:	ab01      	add	r3, sp, #4
 8008ca4:	466a      	mov	r2, sp
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f000 fb43 	bl	8009334 <__swhatbuf_r>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	4318      	orrs	r0, r3
 8008cb2:	81a0      	strh	r0, [r4, #12]
 8008cb4:	2d00      	cmp	r5, #0
 8008cb6:	d130      	bne.n	8008d1a <setvbuf+0x106>
 8008cb8:	9d00      	ldr	r5, [sp, #0]
 8008cba:	4628      	mov	r0, r5
 8008cbc:	f000 fba0 	bl	8009400 <malloc>
 8008cc0:	4606      	mov	r6, r0
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d155      	bne.n	8008d72 <setvbuf+0x15e>
 8008cc6:	f8dd 9000 	ldr.w	r9, [sp]
 8008cca:	45a9      	cmp	r9, r5
 8008ccc:	d14a      	bne.n	8008d64 <setvbuf+0x150>
 8008cce:	f04f 35ff 	mov.w	r5, #4294967295
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	60a2      	str	r2, [r4, #8]
 8008cd6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8008cda:	6022      	str	r2, [r4, #0]
 8008cdc:	6122      	str	r2, [r4, #16]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ce4:	6162      	str	r2, [r4, #20]
 8008ce6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ce8:	f043 0302 	orr.w	r3, r3, #2
 8008cec:	07d2      	lsls	r2, r2, #31
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	d405      	bmi.n	8008cfe <setvbuf+0xea>
 8008cf2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8008cf6:	d102      	bne.n	8008cfe <setvbuf+0xea>
 8008cf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfa:	f000 fb1a 	bl	8009332 <__retarget_lock_release_recursive>
 8008cfe:	4628      	mov	r0, r5
 8008d00:	b003      	add	sp, #12
 8008d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d06:	4b24      	ldr	r3, [pc, #144]	; (8008d98 <setvbuf+0x184>)
 8008d08:	429c      	cmp	r4, r3
 8008d0a:	d101      	bne.n	8008d10 <setvbuf+0xfc>
 8008d0c:	68bc      	ldr	r4, [r7, #8]
 8008d0e:	e793      	b.n	8008c38 <setvbuf+0x24>
 8008d10:	4b22      	ldr	r3, [pc, #136]	; (8008d9c <setvbuf+0x188>)
 8008d12:	429c      	cmp	r4, r3
 8008d14:	bf08      	it	eq
 8008d16:	68fc      	ldreq	r4, [r7, #12]
 8008d18:	e78e      	b.n	8008c38 <setvbuf+0x24>
 8008d1a:	2e00      	cmp	r6, #0
 8008d1c:	d0cd      	beq.n	8008cba <setvbuf+0xa6>
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	b913      	cbnz	r3, 8008d28 <setvbuf+0x114>
 8008d22:	4638      	mov	r0, r7
 8008d24:	f000 fa54 	bl	80091d0 <__sinit>
 8008d28:	f1b8 0f01 	cmp.w	r8, #1
 8008d2c:	bf08      	it	eq
 8008d2e:	89a3      	ldrheq	r3, [r4, #12]
 8008d30:	6026      	str	r6, [r4, #0]
 8008d32:	bf04      	itt	eq
 8008d34:	f043 0301 	orreq.w	r3, r3, #1
 8008d38:	81a3      	strheq	r3, [r4, #12]
 8008d3a:	89a2      	ldrh	r2, [r4, #12]
 8008d3c:	f012 0308 	ands.w	r3, r2, #8
 8008d40:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8008d44:	d01c      	beq.n	8008d80 <setvbuf+0x16c>
 8008d46:	07d3      	lsls	r3, r2, #31
 8008d48:	bf41      	itttt	mi
 8008d4a:	2300      	movmi	r3, #0
 8008d4c:	426d      	negmi	r5, r5
 8008d4e:	60a3      	strmi	r3, [r4, #8]
 8008d50:	61a5      	strmi	r5, [r4, #24]
 8008d52:	bf58      	it	pl
 8008d54:	60a5      	strpl	r5, [r4, #8]
 8008d56:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8008d58:	f015 0501 	ands.w	r5, r5, #1
 8008d5c:	d115      	bne.n	8008d8a <setvbuf+0x176>
 8008d5e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8008d62:	e7c8      	b.n	8008cf6 <setvbuf+0xe2>
 8008d64:	4648      	mov	r0, r9
 8008d66:	f000 fb4b 	bl	8009400 <malloc>
 8008d6a:	4606      	mov	r6, r0
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	d0ae      	beq.n	8008cce <setvbuf+0xba>
 8008d70:	464d      	mov	r5, r9
 8008d72:	89a3      	ldrh	r3, [r4, #12]
 8008d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d78:	81a3      	strh	r3, [r4, #12]
 8008d7a:	e7d0      	b.n	8008d1e <setvbuf+0x10a>
 8008d7c:	2500      	movs	r5, #0
 8008d7e:	e7a8      	b.n	8008cd2 <setvbuf+0xbe>
 8008d80:	60a3      	str	r3, [r4, #8]
 8008d82:	e7e8      	b.n	8008d56 <setvbuf+0x142>
 8008d84:	f04f 35ff 	mov.w	r5, #4294967295
 8008d88:	e7b9      	b.n	8008cfe <setvbuf+0xea>
 8008d8a:	2500      	movs	r5, #0
 8008d8c:	e7b7      	b.n	8008cfe <setvbuf+0xea>
 8008d8e:	bf00      	nop
 8008d90:	20000020 	.word	0x20000020
 8008d94:	08079024 	.word	0x08079024
 8008d98:	08079044 	.word	0x08079044
 8008d9c:	08079004 	.word	0x08079004

08008da0 <siprintf>:
 8008da0:	b40e      	push	{r1, r2, r3}
 8008da2:	b500      	push	{lr}
 8008da4:	b09c      	sub	sp, #112	; 0x70
 8008da6:	ab1d      	add	r3, sp, #116	; 0x74
 8008da8:	9002      	str	r0, [sp, #8]
 8008daa:	9006      	str	r0, [sp, #24]
 8008dac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008db0:	4809      	ldr	r0, [pc, #36]	; (8008dd8 <siprintf+0x38>)
 8008db2:	9107      	str	r1, [sp, #28]
 8008db4:	9104      	str	r1, [sp, #16]
 8008db6:	4909      	ldr	r1, [pc, #36]	; (8008ddc <siprintf+0x3c>)
 8008db8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dbc:	9105      	str	r1, [sp, #20]
 8008dbe:	6800      	ldr	r0, [r0, #0]
 8008dc0:	9301      	str	r3, [sp, #4]
 8008dc2:	a902      	add	r1, sp, #8
 8008dc4:	f000 fc60 	bl	8009688 <_svfiprintf_r>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	701a      	strb	r2, [r3, #0]
 8008dce:	b01c      	add	sp, #112	; 0x70
 8008dd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dd4:	b003      	add	sp, #12
 8008dd6:	4770      	bx	lr
 8008dd8:	20000020 	.word	0x20000020
 8008ddc:	ffff0208 	.word	0xffff0208

08008de0 <__swbuf_r>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	460e      	mov	r6, r1
 8008de4:	4614      	mov	r4, r2
 8008de6:	4605      	mov	r5, r0
 8008de8:	b118      	cbz	r0, 8008df2 <__swbuf_r+0x12>
 8008dea:	6983      	ldr	r3, [r0, #24]
 8008dec:	b90b      	cbnz	r3, 8008df2 <__swbuf_r+0x12>
 8008dee:	f000 f9ef 	bl	80091d0 <__sinit>
 8008df2:	4b21      	ldr	r3, [pc, #132]	; (8008e78 <__swbuf_r+0x98>)
 8008df4:	429c      	cmp	r4, r3
 8008df6:	d12b      	bne.n	8008e50 <__swbuf_r+0x70>
 8008df8:	686c      	ldr	r4, [r5, #4]
 8008dfa:	69a3      	ldr	r3, [r4, #24]
 8008dfc:	60a3      	str	r3, [r4, #8]
 8008dfe:	89a3      	ldrh	r3, [r4, #12]
 8008e00:	071a      	lsls	r2, r3, #28
 8008e02:	d52f      	bpl.n	8008e64 <__swbuf_r+0x84>
 8008e04:	6923      	ldr	r3, [r4, #16]
 8008e06:	b36b      	cbz	r3, 8008e64 <__swbuf_r+0x84>
 8008e08:	6923      	ldr	r3, [r4, #16]
 8008e0a:	6820      	ldr	r0, [r4, #0]
 8008e0c:	1ac0      	subs	r0, r0, r3
 8008e0e:	6963      	ldr	r3, [r4, #20]
 8008e10:	b2f6      	uxtb	r6, r6
 8008e12:	4283      	cmp	r3, r0
 8008e14:	4637      	mov	r7, r6
 8008e16:	dc04      	bgt.n	8008e22 <__swbuf_r+0x42>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	4628      	mov	r0, r5
 8008e1c:	f000 f944 	bl	80090a8 <_fflush_r>
 8008e20:	bb30      	cbnz	r0, 8008e70 <__swbuf_r+0x90>
 8008e22:	68a3      	ldr	r3, [r4, #8]
 8008e24:	3b01      	subs	r3, #1
 8008e26:	60a3      	str	r3, [r4, #8]
 8008e28:	6823      	ldr	r3, [r4, #0]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	6022      	str	r2, [r4, #0]
 8008e2e:	701e      	strb	r6, [r3, #0]
 8008e30:	6963      	ldr	r3, [r4, #20]
 8008e32:	3001      	adds	r0, #1
 8008e34:	4283      	cmp	r3, r0
 8008e36:	d004      	beq.n	8008e42 <__swbuf_r+0x62>
 8008e38:	89a3      	ldrh	r3, [r4, #12]
 8008e3a:	07db      	lsls	r3, r3, #31
 8008e3c:	d506      	bpl.n	8008e4c <__swbuf_r+0x6c>
 8008e3e:	2e0a      	cmp	r6, #10
 8008e40:	d104      	bne.n	8008e4c <__swbuf_r+0x6c>
 8008e42:	4621      	mov	r1, r4
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 f92f 	bl	80090a8 <_fflush_r>
 8008e4a:	b988      	cbnz	r0, 8008e70 <__swbuf_r+0x90>
 8008e4c:	4638      	mov	r0, r7
 8008e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <__swbuf_r+0x9c>)
 8008e52:	429c      	cmp	r4, r3
 8008e54:	d101      	bne.n	8008e5a <__swbuf_r+0x7a>
 8008e56:	68ac      	ldr	r4, [r5, #8]
 8008e58:	e7cf      	b.n	8008dfa <__swbuf_r+0x1a>
 8008e5a:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <__swbuf_r+0xa0>)
 8008e5c:	429c      	cmp	r4, r3
 8008e5e:	bf08      	it	eq
 8008e60:	68ec      	ldreq	r4, [r5, #12]
 8008e62:	e7ca      	b.n	8008dfa <__swbuf_r+0x1a>
 8008e64:	4621      	mov	r1, r4
 8008e66:	4628      	mov	r0, r5
 8008e68:	f000 f80c 	bl	8008e84 <__swsetup_r>
 8008e6c:	2800      	cmp	r0, #0
 8008e6e:	d0cb      	beq.n	8008e08 <__swbuf_r+0x28>
 8008e70:	f04f 37ff 	mov.w	r7, #4294967295
 8008e74:	e7ea      	b.n	8008e4c <__swbuf_r+0x6c>
 8008e76:	bf00      	nop
 8008e78:	08079024 	.word	0x08079024
 8008e7c:	08079044 	.word	0x08079044
 8008e80:	08079004 	.word	0x08079004

08008e84 <__swsetup_r>:
 8008e84:	4b32      	ldr	r3, [pc, #200]	; (8008f50 <__swsetup_r+0xcc>)
 8008e86:	b570      	push	{r4, r5, r6, lr}
 8008e88:	681d      	ldr	r5, [r3, #0]
 8008e8a:	4606      	mov	r6, r0
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	b125      	cbz	r5, 8008e9a <__swsetup_r+0x16>
 8008e90:	69ab      	ldr	r3, [r5, #24]
 8008e92:	b913      	cbnz	r3, 8008e9a <__swsetup_r+0x16>
 8008e94:	4628      	mov	r0, r5
 8008e96:	f000 f99b 	bl	80091d0 <__sinit>
 8008e9a:	4b2e      	ldr	r3, [pc, #184]	; (8008f54 <__swsetup_r+0xd0>)
 8008e9c:	429c      	cmp	r4, r3
 8008e9e:	d10f      	bne.n	8008ec0 <__swsetup_r+0x3c>
 8008ea0:	686c      	ldr	r4, [r5, #4]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ea8:	0719      	lsls	r1, r3, #28
 8008eaa:	d42c      	bmi.n	8008f06 <__swsetup_r+0x82>
 8008eac:	06dd      	lsls	r5, r3, #27
 8008eae:	d411      	bmi.n	8008ed4 <__swsetup_r+0x50>
 8008eb0:	2309      	movs	r3, #9
 8008eb2:	6033      	str	r3, [r6, #0]
 8008eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	e03e      	b.n	8008f3e <__swsetup_r+0xba>
 8008ec0:	4b25      	ldr	r3, [pc, #148]	; (8008f58 <__swsetup_r+0xd4>)
 8008ec2:	429c      	cmp	r4, r3
 8008ec4:	d101      	bne.n	8008eca <__swsetup_r+0x46>
 8008ec6:	68ac      	ldr	r4, [r5, #8]
 8008ec8:	e7eb      	b.n	8008ea2 <__swsetup_r+0x1e>
 8008eca:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <__swsetup_r+0xd8>)
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	bf08      	it	eq
 8008ed0:	68ec      	ldreq	r4, [r5, #12]
 8008ed2:	e7e6      	b.n	8008ea2 <__swsetup_r+0x1e>
 8008ed4:	0758      	lsls	r0, r3, #29
 8008ed6:	d512      	bpl.n	8008efe <__swsetup_r+0x7a>
 8008ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008eda:	b141      	cbz	r1, 8008eee <__swsetup_r+0x6a>
 8008edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__swsetup_r+0x66>
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 fa93 	bl	8009410 <_free_r>
 8008eea:	2300      	movs	r3, #0
 8008eec:	6363      	str	r3, [r4, #52]	; 0x34
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ef4:	81a3      	strh	r3, [r4, #12]
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	6063      	str	r3, [r4, #4]
 8008efa:	6923      	ldr	r3, [r4, #16]
 8008efc:	6023      	str	r3, [r4, #0]
 8008efe:	89a3      	ldrh	r3, [r4, #12]
 8008f00:	f043 0308 	orr.w	r3, r3, #8
 8008f04:	81a3      	strh	r3, [r4, #12]
 8008f06:	6923      	ldr	r3, [r4, #16]
 8008f08:	b94b      	cbnz	r3, 8008f1e <__swsetup_r+0x9a>
 8008f0a:	89a3      	ldrh	r3, [r4, #12]
 8008f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f14:	d003      	beq.n	8008f1e <__swsetup_r+0x9a>
 8008f16:	4621      	mov	r1, r4
 8008f18:	4630      	mov	r0, r6
 8008f1a:	f000 fa31 	bl	8009380 <__smakebuf_r>
 8008f1e:	89a0      	ldrh	r0, [r4, #12]
 8008f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f24:	f010 0301 	ands.w	r3, r0, #1
 8008f28:	d00a      	beq.n	8008f40 <__swsetup_r+0xbc>
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60a3      	str	r3, [r4, #8]
 8008f2e:	6963      	ldr	r3, [r4, #20]
 8008f30:	425b      	negs	r3, r3
 8008f32:	61a3      	str	r3, [r4, #24]
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	b943      	cbnz	r3, 8008f4a <__swsetup_r+0xc6>
 8008f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008f3c:	d1ba      	bne.n	8008eb4 <__swsetup_r+0x30>
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	0781      	lsls	r1, r0, #30
 8008f42:	bf58      	it	pl
 8008f44:	6963      	ldrpl	r3, [r4, #20]
 8008f46:	60a3      	str	r3, [r4, #8]
 8008f48:	e7f4      	b.n	8008f34 <__swsetup_r+0xb0>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e7f7      	b.n	8008f3e <__swsetup_r+0xba>
 8008f4e:	bf00      	nop
 8008f50:	20000020 	.word	0x20000020
 8008f54:	08079024 	.word	0x08079024
 8008f58:	08079044 	.word	0x08079044
 8008f5c:	08079004 	.word	0x08079004

08008f60 <__assert_func>:
 8008f60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f62:	4614      	mov	r4, r2
 8008f64:	461a      	mov	r2, r3
 8008f66:	4b09      	ldr	r3, [pc, #36]	; (8008f8c <__assert_func+0x2c>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4605      	mov	r5, r0
 8008f6c:	68d8      	ldr	r0, [r3, #12]
 8008f6e:	b14c      	cbz	r4, 8008f84 <__assert_func+0x24>
 8008f70:	4b07      	ldr	r3, [pc, #28]	; (8008f90 <__assert_func+0x30>)
 8008f72:	9100      	str	r1, [sp, #0]
 8008f74:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f78:	4906      	ldr	r1, [pc, #24]	; (8008f94 <__assert_func+0x34>)
 8008f7a:	462b      	mov	r3, r5
 8008f7c:	f000 f9a6 	bl	80092cc <fiprintf>
 8008f80:	f000 ffd6 	bl	8009f30 <abort>
 8008f84:	4b04      	ldr	r3, [pc, #16]	; (8008f98 <__assert_func+0x38>)
 8008f86:	461c      	mov	r4, r3
 8008f88:	e7f3      	b.n	8008f72 <__assert_func+0x12>
 8008f8a:	bf00      	nop
 8008f8c:	20000020 	.word	0x20000020
 8008f90:	08078fc6 	.word	0x08078fc6
 8008f94:	08078fd3 	.word	0x08078fd3
 8008f98:	08079001 	.word	0x08079001

08008f9c <__sflush_r>:
 8008f9c:	898a      	ldrh	r2, [r1, #12]
 8008f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	0710      	lsls	r0, r2, #28
 8008fa6:	460c      	mov	r4, r1
 8008fa8:	d458      	bmi.n	800905c <__sflush_r+0xc0>
 8008faa:	684b      	ldr	r3, [r1, #4]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	dc05      	bgt.n	8008fbc <__sflush_r+0x20>
 8008fb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dc02      	bgt.n	8008fbc <__sflush_r+0x20>
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fbe:	2e00      	cmp	r6, #0
 8008fc0:	d0f9      	beq.n	8008fb6 <__sflush_r+0x1a>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008fc8:	682f      	ldr	r7, [r5, #0]
 8008fca:	602b      	str	r3, [r5, #0]
 8008fcc:	d032      	beq.n	8009034 <__sflush_r+0x98>
 8008fce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	075a      	lsls	r2, r3, #29
 8008fd4:	d505      	bpl.n	8008fe2 <__sflush_r+0x46>
 8008fd6:	6863      	ldr	r3, [r4, #4]
 8008fd8:	1ac0      	subs	r0, r0, r3
 8008fda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008fdc:	b10b      	cbz	r3, 8008fe2 <__sflush_r+0x46>
 8008fde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008fe0:	1ac0      	subs	r0, r0, r3
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008fe8:	6a21      	ldr	r1, [r4, #32]
 8008fea:	4628      	mov	r0, r5
 8008fec:	47b0      	blx	r6
 8008fee:	1c43      	adds	r3, r0, #1
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	d106      	bne.n	8009002 <__sflush_r+0x66>
 8008ff4:	6829      	ldr	r1, [r5, #0]
 8008ff6:	291d      	cmp	r1, #29
 8008ff8:	d82c      	bhi.n	8009054 <__sflush_r+0xb8>
 8008ffa:	4a2a      	ldr	r2, [pc, #168]	; (80090a4 <__sflush_r+0x108>)
 8008ffc:	40ca      	lsrs	r2, r1
 8008ffe:	07d6      	lsls	r6, r2, #31
 8009000:	d528      	bpl.n	8009054 <__sflush_r+0xb8>
 8009002:	2200      	movs	r2, #0
 8009004:	6062      	str	r2, [r4, #4]
 8009006:	04d9      	lsls	r1, r3, #19
 8009008:	6922      	ldr	r2, [r4, #16]
 800900a:	6022      	str	r2, [r4, #0]
 800900c:	d504      	bpl.n	8009018 <__sflush_r+0x7c>
 800900e:	1c42      	adds	r2, r0, #1
 8009010:	d101      	bne.n	8009016 <__sflush_r+0x7a>
 8009012:	682b      	ldr	r3, [r5, #0]
 8009014:	b903      	cbnz	r3, 8009018 <__sflush_r+0x7c>
 8009016:	6560      	str	r0, [r4, #84]	; 0x54
 8009018:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800901a:	602f      	str	r7, [r5, #0]
 800901c:	2900      	cmp	r1, #0
 800901e:	d0ca      	beq.n	8008fb6 <__sflush_r+0x1a>
 8009020:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009024:	4299      	cmp	r1, r3
 8009026:	d002      	beq.n	800902e <__sflush_r+0x92>
 8009028:	4628      	mov	r0, r5
 800902a:	f000 f9f1 	bl	8009410 <_free_r>
 800902e:	2000      	movs	r0, #0
 8009030:	6360      	str	r0, [r4, #52]	; 0x34
 8009032:	e7c1      	b.n	8008fb8 <__sflush_r+0x1c>
 8009034:	6a21      	ldr	r1, [r4, #32]
 8009036:	2301      	movs	r3, #1
 8009038:	4628      	mov	r0, r5
 800903a:	47b0      	blx	r6
 800903c:	1c41      	adds	r1, r0, #1
 800903e:	d1c7      	bne.n	8008fd0 <__sflush_r+0x34>
 8009040:	682b      	ldr	r3, [r5, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d0c4      	beq.n	8008fd0 <__sflush_r+0x34>
 8009046:	2b1d      	cmp	r3, #29
 8009048:	d001      	beq.n	800904e <__sflush_r+0xb2>
 800904a:	2b16      	cmp	r3, #22
 800904c:	d101      	bne.n	8009052 <__sflush_r+0xb6>
 800904e:	602f      	str	r7, [r5, #0]
 8009050:	e7b1      	b.n	8008fb6 <__sflush_r+0x1a>
 8009052:	89a3      	ldrh	r3, [r4, #12]
 8009054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	e7ad      	b.n	8008fb8 <__sflush_r+0x1c>
 800905c:	690f      	ldr	r7, [r1, #16]
 800905e:	2f00      	cmp	r7, #0
 8009060:	d0a9      	beq.n	8008fb6 <__sflush_r+0x1a>
 8009062:	0793      	lsls	r3, r2, #30
 8009064:	680e      	ldr	r6, [r1, #0]
 8009066:	bf08      	it	eq
 8009068:	694b      	ldreq	r3, [r1, #20]
 800906a:	600f      	str	r7, [r1, #0]
 800906c:	bf18      	it	ne
 800906e:	2300      	movne	r3, #0
 8009070:	eba6 0807 	sub.w	r8, r6, r7
 8009074:	608b      	str	r3, [r1, #8]
 8009076:	f1b8 0f00 	cmp.w	r8, #0
 800907a:	dd9c      	ble.n	8008fb6 <__sflush_r+0x1a>
 800907c:	6a21      	ldr	r1, [r4, #32]
 800907e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009080:	4643      	mov	r3, r8
 8009082:	463a      	mov	r2, r7
 8009084:	4628      	mov	r0, r5
 8009086:	47b0      	blx	r6
 8009088:	2800      	cmp	r0, #0
 800908a:	dc06      	bgt.n	800909a <__sflush_r+0xfe>
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009092:	81a3      	strh	r3, [r4, #12]
 8009094:	f04f 30ff 	mov.w	r0, #4294967295
 8009098:	e78e      	b.n	8008fb8 <__sflush_r+0x1c>
 800909a:	4407      	add	r7, r0
 800909c:	eba8 0800 	sub.w	r8, r8, r0
 80090a0:	e7e9      	b.n	8009076 <__sflush_r+0xda>
 80090a2:	bf00      	nop
 80090a4:	20400001 	.word	0x20400001

080090a8 <_fflush_r>:
 80090a8:	b538      	push	{r3, r4, r5, lr}
 80090aa:	690b      	ldr	r3, [r1, #16]
 80090ac:	4605      	mov	r5, r0
 80090ae:	460c      	mov	r4, r1
 80090b0:	b913      	cbnz	r3, 80090b8 <_fflush_r+0x10>
 80090b2:	2500      	movs	r5, #0
 80090b4:	4628      	mov	r0, r5
 80090b6:	bd38      	pop	{r3, r4, r5, pc}
 80090b8:	b118      	cbz	r0, 80090c2 <_fflush_r+0x1a>
 80090ba:	6983      	ldr	r3, [r0, #24]
 80090bc:	b90b      	cbnz	r3, 80090c2 <_fflush_r+0x1a>
 80090be:	f000 f887 	bl	80091d0 <__sinit>
 80090c2:	4b14      	ldr	r3, [pc, #80]	; (8009114 <_fflush_r+0x6c>)
 80090c4:	429c      	cmp	r4, r3
 80090c6:	d11b      	bne.n	8009100 <_fflush_r+0x58>
 80090c8:	686c      	ldr	r4, [r5, #4]
 80090ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d0ef      	beq.n	80090b2 <_fflush_r+0xa>
 80090d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80090d4:	07d0      	lsls	r0, r2, #31
 80090d6:	d404      	bmi.n	80090e2 <_fflush_r+0x3a>
 80090d8:	0599      	lsls	r1, r3, #22
 80090da:	d402      	bmi.n	80090e2 <_fflush_r+0x3a>
 80090dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090de:	f000 f927 	bl	8009330 <__retarget_lock_acquire_recursive>
 80090e2:	4628      	mov	r0, r5
 80090e4:	4621      	mov	r1, r4
 80090e6:	f7ff ff59 	bl	8008f9c <__sflush_r>
 80090ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80090ec:	07da      	lsls	r2, r3, #31
 80090ee:	4605      	mov	r5, r0
 80090f0:	d4e0      	bmi.n	80090b4 <_fflush_r+0xc>
 80090f2:	89a3      	ldrh	r3, [r4, #12]
 80090f4:	059b      	lsls	r3, r3, #22
 80090f6:	d4dd      	bmi.n	80090b4 <_fflush_r+0xc>
 80090f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80090fa:	f000 f91a 	bl	8009332 <__retarget_lock_release_recursive>
 80090fe:	e7d9      	b.n	80090b4 <_fflush_r+0xc>
 8009100:	4b05      	ldr	r3, [pc, #20]	; (8009118 <_fflush_r+0x70>)
 8009102:	429c      	cmp	r4, r3
 8009104:	d101      	bne.n	800910a <_fflush_r+0x62>
 8009106:	68ac      	ldr	r4, [r5, #8]
 8009108:	e7df      	b.n	80090ca <_fflush_r+0x22>
 800910a:	4b04      	ldr	r3, [pc, #16]	; (800911c <_fflush_r+0x74>)
 800910c:	429c      	cmp	r4, r3
 800910e:	bf08      	it	eq
 8009110:	68ec      	ldreq	r4, [r5, #12]
 8009112:	e7da      	b.n	80090ca <_fflush_r+0x22>
 8009114:	08079024 	.word	0x08079024
 8009118:	08079044 	.word	0x08079044
 800911c:	08079004 	.word	0x08079004

08009120 <std>:
 8009120:	2300      	movs	r3, #0
 8009122:	b510      	push	{r4, lr}
 8009124:	4604      	mov	r4, r0
 8009126:	e9c0 3300 	strd	r3, r3, [r0]
 800912a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800912e:	6083      	str	r3, [r0, #8]
 8009130:	8181      	strh	r1, [r0, #12]
 8009132:	6643      	str	r3, [r0, #100]	; 0x64
 8009134:	81c2      	strh	r2, [r0, #14]
 8009136:	6183      	str	r3, [r0, #24]
 8009138:	4619      	mov	r1, r3
 800913a:	2208      	movs	r2, #8
 800913c:	305c      	adds	r0, #92	; 0x5c
 800913e:	f7ff fcf5 	bl	8008b2c <memset>
 8009142:	4b05      	ldr	r3, [pc, #20]	; (8009158 <std+0x38>)
 8009144:	6263      	str	r3, [r4, #36]	; 0x24
 8009146:	4b05      	ldr	r3, [pc, #20]	; (800915c <std+0x3c>)
 8009148:	62a3      	str	r3, [r4, #40]	; 0x28
 800914a:	4b05      	ldr	r3, [pc, #20]	; (8009160 <std+0x40>)
 800914c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800914e:	4b05      	ldr	r3, [pc, #20]	; (8009164 <std+0x44>)
 8009150:	6224      	str	r4, [r4, #32]
 8009152:	6323      	str	r3, [r4, #48]	; 0x30
 8009154:	bd10      	pop	{r4, pc}
 8009156:	bf00      	nop
 8009158:	08009e85 	.word	0x08009e85
 800915c:	08009ea7 	.word	0x08009ea7
 8009160:	08009edf 	.word	0x08009edf
 8009164:	08009f03 	.word	0x08009f03

08009168 <_cleanup_r>:
 8009168:	4901      	ldr	r1, [pc, #4]	; (8009170 <_cleanup_r+0x8>)
 800916a:	f000 b8c1 	b.w	80092f0 <_fwalk_reent>
 800916e:	bf00      	nop
 8009170:	080090a9 	.word	0x080090a9

08009174 <__sfmoreglue>:
 8009174:	b570      	push	{r4, r5, r6, lr}
 8009176:	2268      	movs	r2, #104	; 0x68
 8009178:	1e4d      	subs	r5, r1, #1
 800917a:	4355      	muls	r5, r2
 800917c:	460e      	mov	r6, r1
 800917e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009182:	f000 f9b1 	bl	80094e8 <_malloc_r>
 8009186:	4604      	mov	r4, r0
 8009188:	b140      	cbz	r0, 800919c <__sfmoreglue+0x28>
 800918a:	2100      	movs	r1, #0
 800918c:	e9c0 1600 	strd	r1, r6, [r0]
 8009190:	300c      	adds	r0, #12
 8009192:	60a0      	str	r0, [r4, #8]
 8009194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009198:	f7ff fcc8 	bl	8008b2c <memset>
 800919c:	4620      	mov	r0, r4
 800919e:	bd70      	pop	{r4, r5, r6, pc}

080091a0 <__sfp_lock_acquire>:
 80091a0:	4801      	ldr	r0, [pc, #4]	; (80091a8 <__sfp_lock_acquire+0x8>)
 80091a2:	f000 b8c5 	b.w	8009330 <__retarget_lock_acquire_recursive>
 80091a6:	bf00      	nop
 80091a8:	2001de8d 	.word	0x2001de8d

080091ac <__sfp_lock_release>:
 80091ac:	4801      	ldr	r0, [pc, #4]	; (80091b4 <__sfp_lock_release+0x8>)
 80091ae:	f000 b8c0 	b.w	8009332 <__retarget_lock_release_recursive>
 80091b2:	bf00      	nop
 80091b4:	2001de8d 	.word	0x2001de8d

080091b8 <__sinit_lock_acquire>:
 80091b8:	4801      	ldr	r0, [pc, #4]	; (80091c0 <__sinit_lock_acquire+0x8>)
 80091ba:	f000 b8b9 	b.w	8009330 <__retarget_lock_acquire_recursive>
 80091be:	bf00      	nop
 80091c0:	2001de8e 	.word	0x2001de8e

080091c4 <__sinit_lock_release>:
 80091c4:	4801      	ldr	r0, [pc, #4]	; (80091cc <__sinit_lock_release+0x8>)
 80091c6:	f000 b8b4 	b.w	8009332 <__retarget_lock_release_recursive>
 80091ca:	bf00      	nop
 80091cc:	2001de8e 	.word	0x2001de8e

080091d0 <__sinit>:
 80091d0:	b510      	push	{r4, lr}
 80091d2:	4604      	mov	r4, r0
 80091d4:	f7ff fff0 	bl	80091b8 <__sinit_lock_acquire>
 80091d8:	69a3      	ldr	r3, [r4, #24]
 80091da:	b11b      	cbz	r3, 80091e4 <__sinit+0x14>
 80091dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e0:	f7ff bff0 	b.w	80091c4 <__sinit_lock_release>
 80091e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80091e8:	6523      	str	r3, [r4, #80]	; 0x50
 80091ea:	4b13      	ldr	r3, [pc, #76]	; (8009238 <__sinit+0x68>)
 80091ec:	4a13      	ldr	r2, [pc, #76]	; (800923c <__sinit+0x6c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	bf04      	itt	eq
 80091f6:	2301      	moveq	r3, #1
 80091f8:	61a3      	streq	r3, [r4, #24]
 80091fa:	4620      	mov	r0, r4
 80091fc:	f000 f820 	bl	8009240 <__sfp>
 8009200:	6060      	str	r0, [r4, #4]
 8009202:	4620      	mov	r0, r4
 8009204:	f000 f81c 	bl	8009240 <__sfp>
 8009208:	60a0      	str	r0, [r4, #8]
 800920a:	4620      	mov	r0, r4
 800920c:	f000 f818 	bl	8009240 <__sfp>
 8009210:	2200      	movs	r2, #0
 8009212:	60e0      	str	r0, [r4, #12]
 8009214:	2104      	movs	r1, #4
 8009216:	6860      	ldr	r0, [r4, #4]
 8009218:	f7ff ff82 	bl	8009120 <std>
 800921c:	68a0      	ldr	r0, [r4, #8]
 800921e:	2201      	movs	r2, #1
 8009220:	2109      	movs	r1, #9
 8009222:	f7ff ff7d 	bl	8009120 <std>
 8009226:	68e0      	ldr	r0, [r4, #12]
 8009228:	2202      	movs	r2, #2
 800922a:	2112      	movs	r1, #18
 800922c:	f7ff ff78 	bl	8009120 <std>
 8009230:	2301      	movs	r3, #1
 8009232:	61a3      	str	r3, [r4, #24]
 8009234:	e7d2      	b.n	80091dc <__sinit+0xc>
 8009236:	bf00      	nop
 8009238:	08078f50 	.word	0x08078f50
 800923c:	08009169 	.word	0x08009169

08009240 <__sfp>:
 8009240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009242:	4607      	mov	r7, r0
 8009244:	f7ff ffac 	bl	80091a0 <__sfp_lock_acquire>
 8009248:	4b1e      	ldr	r3, [pc, #120]	; (80092c4 <__sfp+0x84>)
 800924a:	681e      	ldr	r6, [r3, #0]
 800924c:	69b3      	ldr	r3, [r6, #24]
 800924e:	b913      	cbnz	r3, 8009256 <__sfp+0x16>
 8009250:	4630      	mov	r0, r6
 8009252:	f7ff ffbd 	bl	80091d0 <__sinit>
 8009256:	3648      	adds	r6, #72	; 0x48
 8009258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800925c:	3b01      	subs	r3, #1
 800925e:	d503      	bpl.n	8009268 <__sfp+0x28>
 8009260:	6833      	ldr	r3, [r6, #0]
 8009262:	b30b      	cbz	r3, 80092a8 <__sfp+0x68>
 8009264:	6836      	ldr	r6, [r6, #0]
 8009266:	e7f7      	b.n	8009258 <__sfp+0x18>
 8009268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800926c:	b9d5      	cbnz	r5, 80092a4 <__sfp+0x64>
 800926e:	4b16      	ldr	r3, [pc, #88]	; (80092c8 <__sfp+0x88>)
 8009270:	60e3      	str	r3, [r4, #12]
 8009272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009276:	6665      	str	r5, [r4, #100]	; 0x64
 8009278:	f000 f859 	bl	800932e <__retarget_lock_init_recursive>
 800927c:	f7ff ff96 	bl	80091ac <__sfp_lock_release>
 8009280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009288:	6025      	str	r5, [r4, #0]
 800928a:	61a5      	str	r5, [r4, #24]
 800928c:	2208      	movs	r2, #8
 800928e:	4629      	mov	r1, r5
 8009290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009294:	f7ff fc4a 	bl	8008b2c <memset>
 8009298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800929c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092a0:	4620      	mov	r0, r4
 80092a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092a4:	3468      	adds	r4, #104	; 0x68
 80092a6:	e7d9      	b.n	800925c <__sfp+0x1c>
 80092a8:	2104      	movs	r1, #4
 80092aa:	4638      	mov	r0, r7
 80092ac:	f7ff ff62 	bl	8009174 <__sfmoreglue>
 80092b0:	4604      	mov	r4, r0
 80092b2:	6030      	str	r0, [r6, #0]
 80092b4:	2800      	cmp	r0, #0
 80092b6:	d1d5      	bne.n	8009264 <__sfp+0x24>
 80092b8:	f7ff ff78 	bl	80091ac <__sfp_lock_release>
 80092bc:	230c      	movs	r3, #12
 80092be:	603b      	str	r3, [r7, #0]
 80092c0:	e7ee      	b.n	80092a0 <__sfp+0x60>
 80092c2:	bf00      	nop
 80092c4:	08078f50 	.word	0x08078f50
 80092c8:	ffff0001 	.word	0xffff0001

080092cc <fiprintf>:
 80092cc:	b40e      	push	{r1, r2, r3}
 80092ce:	b503      	push	{r0, r1, lr}
 80092d0:	4601      	mov	r1, r0
 80092d2:	ab03      	add	r3, sp, #12
 80092d4:	4805      	ldr	r0, [pc, #20]	; (80092ec <fiprintf+0x20>)
 80092d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092da:	6800      	ldr	r0, [r0, #0]
 80092dc:	9301      	str	r3, [sp, #4]
 80092de:	f000 fafd 	bl	80098dc <_vfiprintf_r>
 80092e2:	b002      	add	sp, #8
 80092e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092e8:	b003      	add	sp, #12
 80092ea:	4770      	bx	lr
 80092ec:	20000020 	.word	0x20000020

080092f0 <_fwalk_reent>:
 80092f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f4:	4606      	mov	r6, r0
 80092f6:	4688      	mov	r8, r1
 80092f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092fc:	2700      	movs	r7, #0
 80092fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009302:	f1b9 0901 	subs.w	r9, r9, #1
 8009306:	d505      	bpl.n	8009314 <_fwalk_reent+0x24>
 8009308:	6824      	ldr	r4, [r4, #0]
 800930a:	2c00      	cmp	r4, #0
 800930c:	d1f7      	bne.n	80092fe <_fwalk_reent+0xe>
 800930e:	4638      	mov	r0, r7
 8009310:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009314:	89ab      	ldrh	r3, [r5, #12]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d907      	bls.n	800932a <_fwalk_reent+0x3a>
 800931a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800931e:	3301      	adds	r3, #1
 8009320:	d003      	beq.n	800932a <_fwalk_reent+0x3a>
 8009322:	4629      	mov	r1, r5
 8009324:	4630      	mov	r0, r6
 8009326:	47c0      	blx	r8
 8009328:	4307      	orrs	r7, r0
 800932a:	3568      	adds	r5, #104	; 0x68
 800932c:	e7e9      	b.n	8009302 <_fwalk_reent+0x12>

0800932e <__retarget_lock_init_recursive>:
 800932e:	4770      	bx	lr

08009330 <__retarget_lock_acquire_recursive>:
 8009330:	4770      	bx	lr

08009332 <__retarget_lock_release_recursive>:
 8009332:	4770      	bx	lr

08009334 <__swhatbuf_r>:
 8009334:	b570      	push	{r4, r5, r6, lr}
 8009336:	460e      	mov	r6, r1
 8009338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800933c:	2900      	cmp	r1, #0
 800933e:	b096      	sub	sp, #88	; 0x58
 8009340:	4614      	mov	r4, r2
 8009342:	461d      	mov	r5, r3
 8009344:	da08      	bge.n	8009358 <__swhatbuf_r+0x24>
 8009346:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800934a:	2200      	movs	r2, #0
 800934c:	602a      	str	r2, [r5, #0]
 800934e:	061a      	lsls	r2, r3, #24
 8009350:	d410      	bmi.n	8009374 <__swhatbuf_r+0x40>
 8009352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009356:	e00e      	b.n	8009376 <__swhatbuf_r+0x42>
 8009358:	466a      	mov	r2, sp
 800935a:	f000 fe01 	bl	8009f60 <_fstat_r>
 800935e:	2800      	cmp	r0, #0
 8009360:	dbf1      	blt.n	8009346 <__swhatbuf_r+0x12>
 8009362:	9a01      	ldr	r2, [sp, #4]
 8009364:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009368:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800936c:	425a      	negs	r2, r3
 800936e:	415a      	adcs	r2, r3
 8009370:	602a      	str	r2, [r5, #0]
 8009372:	e7ee      	b.n	8009352 <__swhatbuf_r+0x1e>
 8009374:	2340      	movs	r3, #64	; 0x40
 8009376:	2000      	movs	r0, #0
 8009378:	6023      	str	r3, [r4, #0]
 800937a:	b016      	add	sp, #88	; 0x58
 800937c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009380 <__smakebuf_r>:
 8009380:	898b      	ldrh	r3, [r1, #12]
 8009382:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009384:	079d      	lsls	r5, r3, #30
 8009386:	4606      	mov	r6, r0
 8009388:	460c      	mov	r4, r1
 800938a:	d507      	bpl.n	800939c <__smakebuf_r+0x1c>
 800938c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009390:	6023      	str	r3, [r4, #0]
 8009392:	6123      	str	r3, [r4, #16]
 8009394:	2301      	movs	r3, #1
 8009396:	6163      	str	r3, [r4, #20]
 8009398:	b002      	add	sp, #8
 800939a:	bd70      	pop	{r4, r5, r6, pc}
 800939c:	ab01      	add	r3, sp, #4
 800939e:	466a      	mov	r2, sp
 80093a0:	f7ff ffc8 	bl	8009334 <__swhatbuf_r>
 80093a4:	9900      	ldr	r1, [sp, #0]
 80093a6:	4605      	mov	r5, r0
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f89d 	bl	80094e8 <_malloc_r>
 80093ae:	b948      	cbnz	r0, 80093c4 <__smakebuf_r+0x44>
 80093b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093b4:	059a      	lsls	r2, r3, #22
 80093b6:	d4ef      	bmi.n	8009398 <__smakebuf_r+0x18>
 80093b8:	f023 0303 	bic.w	r3, r3, #3
 80093bc:	f043 0302 	orr.w	r3, r3, #2
 80093c0:	81a3      	strh	r3, [r4, #12]
 80093c2:	e7e3      	b.n	800938c <__smakebuf_r+0xc>
 80093c4:	4b0d      	ldr	r3, [pc, #52]	; (80093fc <__smakebuf_r+0x7c>)
 80093c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80093c8:	89a3      	ldrh	r3, [r4, #12]
 80093ca:	6020      	str	r0, [r4, #0]
 80093cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093d0:	81a3      	strh	r3, [r4, #12]
 80093d2:	9b00      	ldr	r3, [sp, #0]
 80093d4:	6163      	str	r3, [r4, #20]
 80093d6:	9b01      	ldr	r3, [sp, #4]
 80093d8:	6120      	str	r0, [r4, #16]
 80093da:	b15b      	cbz	r3, 80093f4 <__smakebuf_r+0x74>
 80093dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093e0:	4630      	mov	r0, r6
 80093e2:	f000 fdcf 	bl	8009f84 <_isatty_r>
 80093e6:	b128      	cbz	r0, 80093f4 <__smakebuf_r+0x74>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f023 0303 	bic.w	r3, r3, #3
 80093ee:	f043 0301 	orr.w	r3, r3, #1
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	89a0      	ldrh	r0, [r4, #12]
 80093f6:	4305      	orrs	r5, r0
 80093f8:	81a5      	strh	r5, [r4, #12]
 80093fa:	e7cd      	b.n	8009398 <__smakebuf_r+0x18>
 80093fc:	08009169 	.word	0x08009169

08009400 <malloc>:
 8009400:	4b02      	ldr	r3, [pc, #8]	; (800940c <malloc+0xc>)
 8009402:	4601      	mov	r1, r0
 8009404:	6818      	ldr	r0, [r3, #0]
 8009406:	f000 b86f 	b.w	80094e8 <_malloc_r>
 800940a:	bf00      	nop
 800940c:	20000020 	.word	0x20000020

08009410 <_free_r>:
 8009410:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009412:	2900      	cmp	r1, #0
 8009414:	d044      	beq.n	80094a0 <_free_r+0x90>
 8009416:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800941a:	9001      	str	r0, [sp, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f1a1 0404 	sub.w	r4, r1, #4
 8009422:	bfb8      	it	lt
 8009424:	18e4      	addlt	r4, r4, r3
 8009426:	f000 fde9 	bl	8009ffc <__malloc_lock>
 800942a:	4a1e      	ldr	r2, [pc, #120]	; (80094a4 <_free_r+0x94>)
 800942c:	9801      	ldr	r0, [sp, #4]
 800942e:	6813      	ldr	r3, [r2, #0]
 8009430:	b933      	cbnz	r3, 8009440 <_free_r+0x30>
 8009432:	6063      	str	r3, [r4, #4]
 8009434:	6014      	str	r4, [r2, #0]
 8009436:	b003      	add	sp, #12
 8009438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800943c:	f000 bde4 	b.w	800a008 <__malloc_unlock>
 8009440:	42a3      	cmp	r3, r4
 8009442:	d908      	bls.n	8009456 <_free_r+0x46>
 8009444:	6825      	ldr	r5, [r4, #0]
 8009446:	1961      	adds	r1, r4, r5
 8009448:	428b      	cmp	r3, r1
 800944a:	bf01      	itttt	eq
 800944c:	6819      	ldreq	r1, [r3, #0]
 800944e:	685b      	ldreq	r3, [r3, #4]
 8009450:	1949      	addeq	r1, r1, r5
 8009452:	6021      	streq	r1, [r4, #0]
 8009454:	e7ed      	b.n	8009432 <_free_r+0x22>
 8009456:	461a      	mov	r2, r3
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	b10b      	cbz	r3, 8009460 <_free_r+0x50>
 800945c:	42a3      	cmp	r3, r4
 800945e:	d9fa      	bls.n	8009456 <_free_r+0x46>
 8009460:	6811      	ldr	r1, [r2, #0]
 8009462:	1855      	adds	r5, r2, r1
 8009464:	42a5      	cmp	r5, r4
 8009466:	d10b      	bne.n	8009480 <_free_r+0x70>
 8009468:	6824      	ldr	r4, [r4, #0]
 800946a:	4421      	add	r1, r4
 800946c:	1854      	adds	r4, r2, r1
 800946e:	42a3      	cmp	r3, r4
 8009470:	6011      	str	r1, [r2, #0]
 8009472:	d1e0      	bne.n	8009436 <_free_r+0x26>
 8009474:	681c      	ldr	r4, [r3, #0]
 8009476:	685b      	ldr	r3, [r3, #4]
 8009478:	6053      	str	r3, [r2, #4]
 800947a:	4421      	add	r1, r4
 800947c:	6011      	str	r1, [r2, #0]
 800947e:	e7da      	b.n	8009436 <_free_r+0x26>
 8009480:	d902      	bls.n	8009488 <_free_r+0x78>
 8009482:	230c      	movs	r3, #12
 8009484:	6003      	str	r3, [r0, #0]
 8009486:	e7d6      	b.n	8009436 <_free_r+0x26>
 8009488:	6825      	ldr	r5, [r4, #0]
 800948a:	1961      	adds	r1, r4, r5
 800948c:	428b      	cmp	r3, r1
 800948e:	bf04      	itt	eq
 8009490:	6819      	ldreq	r1, [r3, #0]
 8009492:	685b      	ldreq	r3, [r3, #4]
 8009494:	6063      	str	r3, [r4, #4]
 8009496:	bf04      	itt	eq
 8009498:	1949      	addeq	r1, r1, r5
 800949a:	6021      	streq	r1, [r4, #0]
 800949c:	6054      	str	r4, [r2, #4]
 800949e:	e7ca      	b.n	8009436 <_free_r+0x26>
 80094a0:	b003      	add	sp, #12
 80094a2:	bd30      	pop	{r4, r5, pc}
 80094a4:	2001de90 	.word	0x2001de90

080094a8 <sbrk_aligned>:
 80094a8:	b570      	push	{r4, r5, r6, lr}
 80094aa:	4e0e      	ldr	r6, [pc, #56]	; (80094e4 <sbrk_aligned+0x3c>)
 80094ac:	460c      	mov	r4, r1
 80094ae:	6831      	ldr	r1, [r6, #0]
 80094b0:	4605      	mov	r5, r0
 80094b2:	b911      	cbnz	r1, 80094ba <sbrk_aligned+0x12>
 80094b4:	f000 fcd6 	bl	8009e64 <_sbrk_r>
 80094b8:	6030      	str	r0, [r6, #0]
 80094ba:	4621      	mov	r1, r4
 80094bc:	4628      	mov	r0, r5
 80094be:	f000 fcd1 	bl	8009e64 <_sbrk_r>
 80094c2:	1c43      	adds	r3, r0, #1
 80094c4:	d00a      	beq.n	80094dc <sbrk_aligned+0x34>
 80094c6:	1cc4      	adds	r4, r0, #3
 80094c8:	f024 0403 	bic.w	r4, r4, #3
 80094cc:	42a0      	cmp	r0, r4
 80094ce:	d007      	beq.n	80094e0 <sbrk_aligned+0x38>
 80094d0:	1a21      	subs	r1, r4, r0
 80094d2:	4628      	mov	r0, r5
 80094d4:	f000 fcc6 	bl	8009e64 <_sbrk_r>
 80094d8:	3001      	adds	r0, #1
 80094da:	d101      	bne.n	80094e0 <sbrk_aligned+0x38>
 80094dc:	f04f 34ff 	mov.w	r4, #4294967295
 80094e0:	4620      	mov	r0, r4
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	2001de94 	.word	0x2001de94

080094e8 <_malloc_r>:
 80094e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ec:	1ccd      	adds	r5, r1, #3
 80094ee:	f025 0503 	bic.w	r5, r5, #3
 80094f2:	3508      	adds	r5, #8
 80094f4:	2d0c      	cmp	r5, #12
 80094f6:	bf38      	it	cc
 80094f8:	250c      	movcc	r5, #12
 80094fa:	2d00      	cmp	r5, #0
 80094fc:	4607      	mov	r7, r0
 80094fe:	db01      	blt.n	8009504 <_malloc_r+0x1c>
 8009500:	42a9      	cmp	r1, r5
 8009502:	d905      	bls.n	8009510 <_malloc_r+0x28>
 8009504:	230c      	movs	r3, #12
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	2600      	movs	r6, #0
 800950a:	4630      	mov	r0, r6
 800950c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009510:	4e2e      	ldr	r6, [pc, #184]	; (80095cc <_malloc_r+0xe4>)
 8009512:	f000 fd73 	bl	8009ffc <__malloc_lock>
 8009516:	6833      	ldr	r3, [r6, #0]
 8009518:	461c      	mov	r4, r3
 800951a:	bb34      	cbnz	r4, 800956a <_malloc_r+0x82>
 800951c:	4629      	mov	r1, r5
 800951e:	4638      	mov	r0, r7
 8009520:	f7ff ffc2 	bl	80094a8 <sbrk_aligned>
 8009524:	1c43      	adds	r3, r0, #1
 8009526:	4604      	mov	r4, r0
 8009528:	d14d      	bne.n	80095c6 <_malloc_r+0xde>
 800952a:	6834      	ldr	r4, [r6, #0]
 800952c:	4626      	mov	r6, r4
 800952e:	2e00      	cmp	r6, #0
 8009530:	d140      	bne.n	80095b4 <_malloc_r+0xcc>
 8009532:	6823      	ldr	r3, [r4, #0]
 8009534:	4631      	mov	r1, r6
 8009536:	4638      	mov	r0, r7
 8009538:	eb04 0803 	add.w	r8, r4, r3
 800953c:	f000 fc92 	bl	8009e64 <_sbrk_r>
 8009540:	4580      	cmp	r8, r0
 8009542:	d13a      	bne.n	80095ba <_malloc_r+0xd2>
 8009544:	6821      	ldr	r1, [r4, #0]
 8009546:	3503      	adds	r5, #3
 8009548:	1a6d      	subs	r5, r5, r1
 800954a:	f025 0503 	bic.w	r5, r5, #3
 800954e:	3508      	adds	r5, #8
 8009550:	2d0c      	cmp	r5, #12
 8009552:	bf38      	it	cc
 8009554:	250c      	movcc	r5, #12
 8009556:	4629      	mov	r1, r5
 8009558:	4638      	mov	r0, r7
 800955a:	f7ff ffa5 	bl	80094a8 <sbrk_aligned>
 800955e:	3001      	adds	r0, #1
 8009560:	d02b      	beq.n	80095ba <_malloc_r+0xd2>
 8009562:	6823      	ldr	r3, [r4, #0]
 8009564:	442b      	add	r3, r5
 8009566:	6023      	str	r3, [r4, #0]
 8009568:	e00e      	b.n	8009588 <_malloc_r+0xa0>
 800956a:	6822      	ldr	r2, [r4, #0]
 800956c:	1b52      	subs	r2, r2, r5
 800956e:	d41e      	bmi.n	80095ae <_malloc_r+0xc6>
 8009570:	2a0b      	cmp	r2, #11
 8009572:	d916      	bls.n	80095a2 <_malloc_r+0xba>
 8009574:	1961      	adds	r1, r4, r5
 8009576:	42a3      	cmp	r3, r4
 8009578:	6025      	str	r5, [r4, #0]
 800957a:	bf18      	it	ne
 800957c:	6059      	strne	r1, [r3, #4]
 800957e:	6863      	ldr	r3, [r4, #4]
 8009580:	bf08      	it	eq
 8009582:	6031      	streq	r1, [r6, #0]
 8009584:	5162      	str	r2, [r4, r5]
 8009586:	604b      	str	r3, [r1, #4]
 8009588:	4638      	mov	r0, r7
 800958a:	f104 060b 	add.w	r6, r4, #11
 800958e:	f000 fd3b 	bl	800a008 <__malloc_unlock>
 8009592:	f026 0607 	bic.w	r6, r6, #7
 8009596:	1d23      	adds	r3, r4, #4
 8009598:	1af2      	subs	r2, r6, r3
 800959a:	d0b6      	beq.n	800950a <_malloc_r+0x22>
 800959c:	1b9b      	subs	r3, r3, r6
 800959e:	50a3      	str	r3, [r4, r2]
 80095a0:	e7b3      	b.n	800950a <_malloc_r+0x22>
 80095a2:	6862      	ldr	r2, [r4, #4]
 80095a4:	42a3      	cmp	r3, r4
 80095a6:	bf0c      	ite	eq
 80095a8:	6032      	streq	r2, [r6, #0]
 80095aa:	605a      	strne	r2, [r3, #4]
 80095ac:	e7ec      	b.n	8009588 <_malloc_r+0xa0>
 80095ae:	4623      	mov	r3, r4
 80095b0:	6864      	ldr	r4, [r4, #4]
 80095b2:	e7b2      	b.n	800951a <_malloc_r+0x32>
 80095b4:	4634      	mov	r4, r6
 80095b6:	6876      	ldr	r6, [r6, #4]
 80095b8:	e7b9      	b.n	800952e <_malloc_r+0x46>
 80095ba:	230c      	movs	r3, #12
 80095bc:	603b      	str	r3, [r7, #0]
 80095be:	4638      	mov	r0, r7
 80095c0:	f000 fd22 	bl	800a008 <__malloc_unlock>
 80095c4:	e7a1      	b.n	800950a <_malloc_r+0x22>
 80095c6:	6025      	str	r5, [r4, #0]
 80095c8:	e7de      	b.n	8009588 <_malloc_r+0xa0>
 80095ca:	bf00      	nop
 80095cc:	2001de90 	.word	0x2001de90

080095d0 <__ssputs_r>:
 80095d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095d4:	688e      	ldr	r6, [r1, #8]
 80095d6:	429e      	cmp	r6, r3
 80095d8:	4682      	mov	sl, r0
 80095da:	460c      	mov	r4, r1
 80095dc:	4690      	mov	r8, r2
 80095de:	461f      	mov	r7, r3
 80095e0:	d838      	bhi.n	8009654 <__ssputs_r+0x84>
 80095e2:	898a      	ldrh	r2, [r1, #12]
 80095e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095e8:	d032      	beq.n	8009650 <__ssputs_r+0x80>
 80095ea:	6825      	ldr	r5, [r4, #0]
 80095ec:	6909      	ldr	r1, [r1, #16]
 80095ee:	eba5 0901 	sub.w	r9, r5, r1
 80095f2:	6965      	ldr	r5, [r4, #20]
 80095f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095fc:	3301      	adds	r3, #1
 80095fe:	444b      	add	r3, r9
 8009600:	106d      	asrs	r5, r5, #1
 8009602:	429d      	cmp	r5, r3
 8009604:	bf38      	it	cc
 8009606:	461d      	movcc	r5, r3
 8009608:	0553      	lsls	r3, r2, #21
 800960a:	d531      	bpl.n	8009670 <__ssputs_r+0xa0>
 800960c:	4629      	mov	r1, r5
 800960e:	f7ff ff6b 	bl	80094e8 <_malloc_r>
 8009612:	4606      	mov	r6, r0
 8009614:	b950      	cbnz	r0, 800962c <__ssputs_r+0x5c>
 8009616:	230c      	movs	r3, #12
 8009618:	f8ca 3000 	str.w	r3, [sl]
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009622:	81a3      	strh	r3, [r4, #12]
 8009624:	f04f 30ff 	mov.w	r0, #4294967295
 8009628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962c:	6921      	ldr	r1, [r4, #16]
 800962e:	464a      	mov	r2, r9
 8009630:	f7ff fa6e 	bl	8008b10 <memcpy>
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800963a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800963e:	81a3      	strh	r3, [r4, #12]
 8009640:	6126      	str	r6, [r4, #16]
 8009642:	6165      	str	r5, [r4, #20]
 8009644:	444e      	add	r6, r9
 8009646:	eba5 0509 	sub.w	r5, r5, r9
 800964a:	6026      	str	r6, [r4, #0]
 800964c:	60a5      	str	r5, [r4, #8]
 800964e:	463e      	mov	r6, r7
 8009650:	42be      	cmp	r6, r7
 8009652:	d900      	bls.n	8009656 <__ssputs_r+0x86>
 8009654:	463e      	mov	r6, r7
 8009656:	6820      	ldr	r0, [r4, #0]
 8009658:	4632      	mov	r2, r6
 800965a:	4641      	mov	r1, r8
 800965c:	f000 fcb4 	bl	8009fc8 <memmove>
 8009660:	68a3      	ldr	r3, [r4, #8]
 8009662:	1b9b      	subs	r3, r3, r6
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	6823      	ldr	r3, [r4, #0]
 8009668:	4433      	add	r3, r6
 800966a:	6023      	str	r3, [r4, #0]
 800966c:	2000      	movs	r0, #0
 800966e:	e7db      	b.n	8009628 <__ssputs_r+0x58>
 8009670:	462a      	mov	r2, r5
 8009672:	f000 fccf 	bl	800a014 <_realloc_r>
 8009676:	4606      	mov	r6, r0
 8009678:	2800      	cmp	r0, #0
 800967a:	d1e1      	bne.n	8009640 <__ssputs_r+0x70>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	4650      	mov	r0, sl
 8009680:	f7ff fec6 	bl	8009410 <_free_r>
 8009684:	e7c7      	b.n	8009616 <__ssputs_r+0x46>
	...

08009688 <_svfiprintf_r>:
 8009688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	4698      	mov	r8, r3
 800968e:	898b      	ldrh	r3, [r1, #12]
 8009690:	061b      	lsls	r3, r3, #24
 8009692:	b09d      	sub	sp, #116	; 0x74
 8009694:	4607      	mov	r7, r0
 8009696:	460d      	mov	r5, r1
 8009698:	4614      	mov	r4, r2
 800969a:	d50e      	bpl.n	80096ba <_svfiprintf_r+0x32>
 800969c:	690b      	ldr	r3, [r1, #16]
 800969e:	b963      	cbnz	r3, 80096ba <_svfiprintf_r+0x32>
 80096a0:	2140      	movs	r1, #64	; 0x40
 80096a2:	f7ff ff21 	bl	80094e8 <_malloc_r>
 80096a6:	6028      	str	r0, [r5, #0]
 80096a8:	6128      	str	r0, [r5, #16]
 80096aa:	b920      	cbnz	r0, 80096b6 <_svfiprintf_r+0x2e>
 80096ac:	230c      	movs	r3, #12
 80096ae:	603b      	str	r3, [r7, #0]
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295
 80096b4:	e0d1      	b.n	800985a <_svfiprintf_r+0x1d2>
 80096b6:	2340      	movs	r3, #64	; 0x40
 80096b8:	616b      	str	r3, [r5, #20]
 80096ba:	2300      	movs	r3, #0
 80096bc:	9309      	str	r3, [sp, #36]	; 0x24
 80096be:	2320      	movs	r3, #32
 80096c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80096c8:	2330      	movs	r3, #48	; 0x30
 80096ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009874 <_svfiprintf_r+0x1ec>
 80096ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096d2:	f04f 0901 	mov.w	r9, #1
 80096d6:	4623      	mov	r3, r4
 80096d8:	469a      	mov	sl, r3
 80096da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096de:	b10a      	cbz	r2, 80096e4 <_svfiprintf_r+0x5c>
 80096e0:	2a25      	cmp	r2, #37	; 0x25
 80096e2:	d1f9      	bne.n	80096d8 <_svfiprintf_r+0x50>
 80096e4:	ebba 0b04 	subs.w	fp, sl, r4
 80096e8:	d00b      	beq.n	8009702 <_svfiprintf_r+0x7a>
 80096ea:	465b      	mov	r3, fp
 80096ec:	4622      	mov	r2, r4
 80096ee:	4629      	mov	r1, r5
 80096f0:	4638      	mov	r0, r7
 80096f2:	f7ff ff6d 	bl	80095d0 <__ssputs_r>
 80096f6:	3001      	adds	r0, #1
 80096f8:	f000 80aa 	beq.w	8009850 <_svfiprintf_r+0x1c8>
 80096fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096fe:	445a      	add	r2, fp
 8009700:	9209      	str	r2, [sp, #36]	; 0x24
 8009702:	f89a 3000 	ldrb.w	r3, [sl]
 8009706:	2b00      	cmp	r3, #0
 8009708:	f000 80a2 	beq.w	8009850 <_svfiprintf_r+0x1c8>
 800970c:	2300      	movs	r3, #0
 800970e:	f04f 32ff 	mov.w	r2, #4294967295
 8009712:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009716:	f10a 0a01 	add.w	sl, sl, #1
 800971a:	9304      	str	r3, [sp, #16]
 800971c:	9307      	str	r3, [sp, #28]
 800971e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009722:	931a      	str	r3, [sp, #104]	; 0x68
 8009724:	4654      	mov	r4, sl
 8009726:	2205      	movs	r2, #5
 8009728:	f814 1b01 	ldrb.w	r1, [r4], #1
 800972c:	4851      	ldr	r0, [pc, #324]	; (8009874 <_svfiprintf_r+0x1ec>)
 800972e:	f7f6 fd7f 	bl	8000230 <memchr>
 8009732:	9a04      	ldr	r2, [sp, #16]
 8009734:	b9d8      	cbnz	r0, 800976e <_svfiprintf_r+0xe6>
 8009736:	06d0      	lsls	r0, r2, #27
 8009738:	bf44      	itt	mi
 800973a:	2320      	movmi	r3, #32
 800973c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009740:	0711      	lsls	r1, r2, #28
 8009742:	bf44      	itt	mi
 8009744:	232b      	movmi	r3, #43	; 0x2b
 8009746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800974a:	f89a 3000 	ldrb.w	r3, [sl]
 800974e:	2b2a      	cmp	r3, #42	; 0x2a
 8009750:	d015      	beq.n	800977e <_svfiprintf_r+0xf6>
 8009752:	9a07      	ldr	r2, [sp, #28]
 8009754:	4654      	mov	r4, sl
 8009756:	2000      	movs	r0, #0
 8009758:	f04f 0c0a 	mov.w	ip, #10
 800975c:	4621      	mov	r1, r4
 800975e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009762:	3b30      	subs	r3, #48	; 0x30
 8009764:	2b09      	cmp	r3, #9
 8009766:	d94e      	bls.n	8009806 <_svfiprintf_r+0x17e>
 8009768:	b1b0      	cbz	r0, 8009798 <_svfiprintf_r+0x110>
 800976a:	9207      	str	r2, [sp, #28]
 800976c:	e014      	b.n	8009798 <_svfiprintf_r+0x110>
 800976e:	eba0 0308 	sub.w	r3, r0, r8
 8009772:	fa09 f303 	lsl.w	r3, r9, r3
 8009776:	4313      	orrs	r3, r2
 8009778:	9304      	str	r3, [sp, #16]
 800977a:	46a2      	mov	sl, r4
 800977c:	e7d2      	b.n	8009724 <_svfiprintf_r+0x9c>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	1d19      	adds	r1, r3, #4
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	9103      	str	r1, [sp, #12]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bfbb      	ittet	lt
 800978a:	425b      	neglt	r3, r3
 800978c:	f042 0202 	orrlt.w	r2, r2, #2
 8009790:	9307      	strge	r3, [sp, #28]
 8009792:	9307      	strlt	r3, [sp, #28]
 8009794:	bfb8      	it	lt
 8009796:	9204      	strlt	r2, [sp, #16]
 8009798:	7823      	ldrb	r3, [r4, #0]
 800979a:	2b2e      	cmp	r3, #46	; 0x2e
 800979c:	d10c      	bne.n	80097b8 <_svfiprintf_r+0x130>
 800979e:	7863      	ldrb	r3, [r4, #1]
 80097a0:	2b2a      	cmp	r3, #42	; 0x2a
 80097a2:	d135      	bne.n	8009810 <_svfiprintf_r+0x188>
 80097a4:	9b03      	ldr	r3, [sp, #12]
 80097a6:	1d1a      	adds	r2, r3, #4
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	9203      	str	r2, [sp, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	bfb8      	it	lt
 80097b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80097b4:	3402      	adds	r4, #2
 80097b6:	9305      	str	r3, [sp, #20]
 80097b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009884 <_svfiprintf_r+0x1fc>
 80097bc:	7821      	ldrb	r1, [r4, #0]
 80097be:	2203      	movs	r2, #3
 80097c0:	4650      	mov	r0, sl
 80097c2:	f7f6 fd35 	bl	8000230 <memchr>
 80097c6:	b140      	cbz	r0, 80097da <_svfiprintf_r+0x152>
 80097c8:	2340      	movs	r3, #64	; 0x40
 80097ca:	eba0 000a 	sub.w	r0, r0, sl
 80097ce:	fa03 f000 	lsl.w	r0, r3, r0
 80097d2:	9b04      	ldr	r3, [sp, #16]
 80097d4:	4303      	orrs	r3, r0
 80097d6:	3401      	adds	r4, #1
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097de:	4826      	ldr	r0, [pc, #152]	; (8009878 <_svfiprintf_r+0x1f0>)
 80097e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097e4:	2206      	movs	r2, #6
 80097e6:	f7f6 fd23 	bl	8000230 <memchr>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	d038      	beq.n	8009860 <_svfiprintf_r+0x1d8>
 80097ee:	4b23      	ldr	r3, [pc, #140]	; (800987c <_svfiprintf_r+0x1f4>)
 80097f0:	bb1b      	cbnz	r3, 800983a <_svfiprintf_r+0x1b2>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	3307      	adds	r3, #7
 80097f6:	f023 0307 	bic.w	r3, r3, #7
 80097fa:	3308      	adds	r3, #8
 80097fc:	9303      	str	r3, [sp, #12]
 80097fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009800:	4433      	add	r3, r6
 8009802:	9309      	str	r3, [sp, #36]	; 0x24
 8009804:	e767      	b.n	80096d6 <_svfiprintf_r+0x4e>
 8009806:	fb0c 3202 	mla	r2, ip, r2, r3
 800980a:	460c      	mov	r4, r1
 800980c:	2001      	movs	r0, #1
 800980e:	e7a5      	b.n	800975c <_svfiprintf_r+0xd4>
 8009810:	2300      	movs	r3, #0
 8009812:	3401      	adds	r4, #1
 8009814:	9305      	str	r3, [sp, #20]
 8009816:	4619      	mov	r1, r3
 8009818:	f04f 0c0a 	mov.w	ip, #10
 800981c:	4620      	mov	r0, r4
 800981e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009822:	3a30      	subs	r2, #48	; 0x30
 8009824:	2a09      	cmp	r2, #9
 8009826:	d903      	bls.n	8009830 <_svfiprintf_r+0x1a8>
 8009828:	2b00      	cmp	r3, #0
 800982a:	d0c5      	beq.n	80097b8 <_svfiprintf_r+0x130>
 800982c:	9105      	str	r1, [sp, #20]
 800982e:	e7c3      	b.n	80097b8 <_svfiprintf_r+0x130>
 8009830:	fb0c 2101 	mla	r1, ip, r1, r2
 8009834:	4604      	mov	r4, r0
 8009836:	2301      	movs	r3, #1
 8009838:	e7f0      	b.n	800981c <_svfiprintf_r+0x194>
 800983a:	ab03      	add	r3, sp, #12
 800983c:	9300      	str	r3, [sp, #0]
 800983e:	462a      	mov	r2, r5
 8009840:	4b0f      	ldr	r3, [pc, #60]	; (8009880 <_svfiprintf_r+0x1f8>)
 8009842:	a904      	add	r1, sp, #16
 8009844:	4638      	mov	r0, r7
 8009846:	f3af 8000 	nop.w
 800984a:	1c42      	adds	r2, r0, #1
 800984c:	4606      	mov	r6, r0
 800984e:	d1d6      	bne.n	80097fe <_svfiprintf_r+0x176>
 8009850:	89ab      	ldrh	r3, [r5, #12]
 8009852:	065b      	lsls	r3, r3, #25
 8009854:	f53f af2c 	bmi.w	80096b0 <_svfiprintf_r+0x28>
 8009858:	9809      	ldr	r0, [sp, #36]	; 0x24
 800985a:	b01d      	add	sp, #116	; 0x74
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	ab03      	add	r3, sp, #12
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	462a      	mov	r2, r5
 8009866:	4b06      	ldr	r3, [pc, #24]	; (8009880 <_svfiprintf_r+0x1f8>)
 8009868:	a904      	add	r1, sp, #16
 800986a:	4638      	mov	r0, r7
 800986c:	f000 f9d4 	bl	8009c18 <_printf_i>
 8009870:	e7eb      	b.n	800984a <_svfiprintf_r+0x1c2>
 8009872:	bf00      	nop
 8009874:	08079064 	.word	0x08079064
 8009878:	0807906e 	.word	0x0807906e
 800987c:	00000000 	.word	0x00000000
 8009880:	080095d1 	.word	0x080095d1
 8009884:	0807906a 	.word	0x0807906a

08009888 <__sfputc_r>:
 8009888:	6893      	ldr	r3, [r2, #8]
 800988a:	3b01      	subs	r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	b410      	push	{r4}
 8009890:	6093      	str	r3, [r2, #8]
 8009892:	da08      	bge.n	80098a6 <__sfputc_r+0x1e>
 8009894:	6994      	ldr	r4, [r2, #24]
 8009896:	42a3      	cmp	r3, r4
 8009898:	db01      	blt.n	800989e <__sfputc_r+0x16>
 800989a:	290a      	cmp	r1, #10
 800989c:	d103      	bne.n	80098a6 <__sfputc_r+0x1e>
 800989e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a2:	f7ff ba9d 	b.w	8008de0 <__swbuf_r>
 80098a6:	6813      	ldr	r3, [r2, #0]
 80098a8:	1c58      	adds	r0, r3, #1
 80098aa:	6010      	str	r0, [r2, #0]
 80098ac:	7019      	strb	r1, [r3, #0]
 80098ae:	4608      	mov	r0, r1
 80098b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <__sfputs_r>:
 80098b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b8:	4606      	mov	r6, r0
 80098ba:	460f      	mov	r7, r1
 80098bc:	4614      	mov	r4, r2
 80098be:	18d5      	adds	r5, r2, r3
 80098c0:	42ac      	cmp	r4, r5
 80098c2:	d101      	bne.n	80098c8 <__sfputs_r+0x12>
 80098c4:	2000      	movs	r0, #0
 80098c6:	e007      	b.n	80098d8 <__sfputs_r+0x22>
 80098c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098cc:	463a      	mov	r2, r7
 80098ce:	4630      	mov	r0, r6
 80098d0:	f7ff ffda 	bl	8009888 <__sfputc_r>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d1f3      	bne.n	80098c0 <__sfputs_r+0xa>
 80098d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098dc <_vfiprintf_r>:
 80098dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e0:	460d      	mov	r5, r1
 80098e2:	b09d      	sub	sp, #116	; 0x74
 80098e4:	4614      	mov	r4, r2
 80098e6:	4698      	mov	r8, r3
 80098e8:	4606      	mov	r6, r0
 80098ea:	b118      	cbz	r0, 80098f4 <_vfiprintf_r+0x18>
 80098ec:	6983      	ldr	r3, [r0, #24]
 80098ee:	b90b      	cbnz	r3, 80098f4 <_vfiprintf_r+0x18>
 80098f0:	f7ff fc6e 	bl	80091d0 <__sinit>
 80098f4:	4b89      	ldr	r3, [pc, #548]	; (8009b1c <_vfiprintf_r+0x240>)
 80098f6:	429d      	cmp	r5, r3
 80098f8:	d11b      	bne.n	8009932 <_vfiprintf_r+0x56>
 80098fa:	6875      	ldr	r5, [r6, #4]
 80098fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098fe:	07d9      	lsls	r1, r3, #31
 8009900:	d405      	bmi.n	800990e <_vfiprintf_r+0x32>
 8009902:	89ab      	ldrh	r3, [r5, #12]
 8009904:	059a      	lsls	r2, r3, #22
 8009906:	d402      	bmi.n	800990e <_vfiprintf_r+0x32>
 8009908:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990a:	f7ff fd11 	bl	8009330 <__retarget_lock_acquire_recursive>
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	071b      	lsls	r3, r3, #28
 8009912:	d501      	bpl.n	8009918 <_vfiprintf_r+0x3c>
 8009914:	692b      	ldr	r3, [r5, #16]
 8009916:	b9eb      	cbnz	r3, 8009954 <_vfiprintf_r+0x78>
 8009918:	4629      	mov	r1, r5
 800991a:	4630      	mov	r0, r6
 800991c:	f7ff fab2 	bl	8008e84 <__swsetup_r>
 8009920:	b1c0      	cbz	r0, 8009954 <_vfiprintf_r+0x78>
 8009922:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009924:	07dc      	lsls	r4, r3, #31
 8009926:	d50e      	bpl.n	8009946 <_vfiprintf_r+0x6a>
 8009928:	f04f 30ff 	mov.w	r0, #4294967295
 800992c:	b01d      	add	sp, #116	; 0x74
 800992e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009932:	4b7b      	ldr	r3, [pc, #492]	; (8009b20 <_vfiprintf_r+0x244>)
 8009934:	429d      	cmp	r5, r3
 8009936:	d101      	bne.n	800993c <_vfiprintf_r+0x60>
 8009938:	68b5      	ldr	r5, [r6, #8]
 800993a:	e7df      	b.n	80098fc <_vfiprintf_r+0x20>
 800993c:	4b79      	ldr	r3, [pc, #484]	; (8009b24 <_vfiprintf_r+0x248>)
 800993e:	429d      	cmp	r5, r3
 8009940:	bf08      	it	eq
 8009942:	68f5      	ldreq	r5, [r6, #12]
 8009944:	e7da      	b.n	80098fc <_vfiprintf_r+0x20>
 8009946:	89ab      	ldrh	r3, [r5, #12]
 8009948:	0598      	lsls	r0, r3, #22
 800994a:	d4ed      	bmi.n	8009928 <_vfiprintf_r+0x4c>
 800994c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800994e:	f7ff fcf0 	bl	8009332 <__retarget_lock_release_recursive>
 8009952:	e7e9      	b.n	8009928 <_vfiprintf_r+0x4c>
 8009954:	2300      	movs	r3, #0
 8009956:	9309      	str	r3, [sp, #36]	; 0x24
 8009958:	2320      	movs	r3, #32
 800995a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800995e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009962:	2330      	movs	r3, #48	; 0x30
 8009964:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b28 <_vfiprintf_r+0x24c>
 8009968:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800996c:	f04f 0901 	mov.w	r9, #1
 8009970:	4623      	mov	r3, r4
 8009972:	469a      	mov	sl, r3
 8009974:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009978:	b10a      	cbz	r2, 800997e <_vfiprintf_r+0xa2>
 800997a:	2a25      	cmp	r2, #37	; 0x25
 800997c:	d1f9      	bne.n	8009972 <_vfiprintf_r+0x96>
 800997e:	ebba 0b04 	subs.w	fp, sl, r4
 8009982:	d00b      	beq.n	800999c <_vfiprintf_r+0xc0>
 8009984:	465b      	mov	r3, fp
 8009986:	4622      	mov	r2, r4
 8009988:	4629      	mov	r1, r5
 800998a:	4630      	mov	r0, r6
 800998c:	f7ff ff93 	bl	80098b6 <__sfputs_r>
 8009990:	3001      	adds	r0, #1
 8009992:	f000 80aa 	beq.w	8009aea <_vfiprintf_r+0x20e>
 8009996:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009998:	445a      	add	r2, fp
 800999a:	9209      	str	r2, [sp, #36]	; 0x24
 800999c:	f89a 3000 	ldrb.w	r3, [sl]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 80a2 	beq.w	8009aea <_vfiprintf_r+0x20e>
 80099a6:	2300      	movs	r3, #0
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b0:	f10a 0a01 	add.w	sl, sl, #1
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	9307      	str	r3, [sp, #28]
 80099b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099bc:	931a      	str	r3, [sp, #104]	; 0x68
 80099be:	4654      	mov	r4, sl
 80099c0:	2205      	movs	r2, #5
 80099c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099c6:	4858      	ldr	r0, [pc, #352]	; (8009b28 <_vfiprintf_r+0x24c>)
 80099c8:	f7f6 fc32 	bl	8000230 <memchr>
 80099cc:	9a04      	ldr	r2, [sp, #16]
 80099ce:	b9d8      	cbnz	r0, 8009a08 <_vfiprintf_r+0x12c>
 80099d0:	06d1      	lsls	r1, r2, #27
 80099d2:	bf44      	itt	mi
 80099d4:	2320      	movmi	r3, #32
 80099d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099da:	0713      	lsls	r3, r2, #28
 80099dc:	bf44      	itt	mi
 80099de:	232b      	movmi	r3, #43	; 0x2b
 80099e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e4:	f89a 3000 	ldrb.w	r3, [sl]
 80099e8:	2b2a      	cmp	r3, #42	; 0x2a
 80099ea:	d015      	beq.n	8009a18 <_vfiprintf_r+0x13c>
 80099ec:	9a07      	ldr	r2, [sp, #28]
 80099ee:	4654      	mov	r4, sl
 80099f0:	2000      	movs	r0, #0
 80099f2:	f04f 0c0a 	mov.w	ip, #10
 80099f6:	4621      	mov	r1, r4
 80099f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099fc:	3b30      	subs	r3, #48	; 0x30
 80099fe:	2b09      	cmp	r3, #9
 8009a00:	d94e      	bls.n	8009aa0 <_vfiprintf_r+0x1c4>
 8009a02:	b1b0      	cbz	r0, 8009a32 <_vfiprintf_r+0x156>
 8009a04:	9207      	str	r2, [sp, #28]
 8009a06:	e014      	b.n	8009a32 <_vfiprintf_r+0x156>
 8009a08:	eba0 0308 	sub.w	r3, r0, r8
 8009a0c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a10:	4313      	orrs	r3, r2
 8009a12:	9304      	str	r3, [sp, #16]
 8009a14:	46a2      	mov	sl, r4
 8009a16:	e7d2      	b.n	80099be <_vfiprintf_r+0xe2>
 8009a18:	9b03      	ldr	r3, [sp, #12]
 8009a1a:	1d19      	adds	r1, r3, #4
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	9103      	str	r1, [sp, #12]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bfbb      	ittet	lt
 8009a24:	425b      	neglt	r3, r3
 8009a26:	f042 0202 	orrlt.w	r2, r2, #2
 8009a2a:	9307      	strge	r3, [sp, #28]
 8009a2c:	9307      	strlt	r3, [sp, #28]
 8009a2e:	bfb8      	it	lt
 8009a30:	9204      	strlt	r2, [sp, #16]
 8009a32:	7823      	ldrb	r3, [r4, #0]
 8009a34:	2b2e      	cmp	r3, #46	; 0x2e
 8009a36:	d10c      	bne.n	8009a52 <_vfiprintf_r+0x176>
 8009a38:	7863      	ldrb	r3, [r4, #1]
 8009a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a3c:	d135      	bne.n	8009aaa <_vfiprintf_r+0x1ce>
 8009a3e:	9b03      	ldr	r3, [sp, #12]
 8009a40:	1d1a      	adds	r2, r3, #4
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	9203      	str	r2, [sp, #12]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	bfb8      	it	lt
 8009a4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a4e:	3402      	adds	r4, #2
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b38 <_vfiprintf_r+0x25c>
 8009a56:	7821      	ldrb	r1, [r4, #0]
 8009a58:	2203      	movs	r2, #3
 8009a5a:	4650      	mov	r0, sl
 8009a5c:	f7f6 fbe8 	bl	8000230 <memchr>
 8009a60:	b140      	cbz	r0, 8009a74 <_vfiprintf_r+0x198>
 8009a62:	2340      	movs	r3, #64	; 0x40
 8009a64:	eba0 000a 	sub.w	r0, r0, sl
 8009a68:	fa03 f000 	lsl.w	r0, r3, r0
 8009a6c:	9b04      	ldr	r3, [sp, #16]
 8009a6e:	4303      	orrs	r3, r0
 8009a70:	3401      	adds	r4, #1
 8009a72:	9304      	str	r3, [sp, #16]
 8009a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a78:	482c      	ldr	r0, [pc, #176]	; (8009b2c <_vfiprintf_r+0x250>)
 8009a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a7e:	2206      	movs	r2, #6
 8009a80:	f7f6 fbd6 	bl	8000230 <memchr>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d03f      	beq.n	8009b08 <_vfiprintf_r+0x22c>
 8009a88:	4b29      	ldr	r3, [pc, #164]	; (8009b30 <_vfiprintf_r+0x254>)
 8009a8a:	bb1b      	cbnz	r3, 8009ad4 <_vfiprintf_r+0x1f8>
 8009a8c:	9b03      	ldr	r3, [sp, #12]
 8009a8e:	3307      	adds	r3, #7
 8009a90:	f023 0307 	bic.w	r3, r3, #7
 8009a94:	3308      	adds	r3, #8
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9a:	443b      	add	r3, r7
 8009a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8009a9e:	e767      	b.n	8009970 <_vfiprintf_r+0x94>
 8009aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	e7a5      	b.n	80099f6 <_vfiprintf_r+0x11a>
 8009aaa:	2300      	movs	r3, #0
 8009aac:	3401      	adds	r4, #1
 8009aae:	9305      	str	r3, [sp, #20]
 8009ab0:	4619      	mov	r1, r3
 8009ab2:	f04f 0c0a 	mov.w	ip, #10
 8009ab6:	4620      	mov	r0, r4
 8009ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009abc:	3a30      	subs	r2, #48	; 0x30
 8009abe:	2a09      	cmp	r2, #9
 8009ac0:	d903      	bls.n	8009aca <_vfiprintf_r+0x1ee>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d0c5      	beq.n	8009a52 <_vfiprintf_r+0x176>
 8009ac6:	9105      	str	r1, [sp, #20]
 8009ac8:	e7c3      	b.n	8009a52 <_vfiprintf_r+0x176>
 8009aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ace:	4604      	mov	r4, r0
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7f0      	b.n	8009ab6 <_vfiprintf_r+0x1da>
 8009ad4:	ab03      	add	r3, sp, #12
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	462a      	mov	r2, r5
 8009ada:	4b16      	ldr	r3, [pc, #88]	; (8009b34 <_vfiprintf_r+0x258>)
 8009adc:	a904      	add	r1, sp, #16
 8009ade:	4630      	mov	r0, r6
 8009ae0:	f3af 8000 	nop.w
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	1c78      	adds	r0, r7, #1
 8009ae8:	d1d6      	bne.n	8009a98 <_vfiprintf_r+0x1bc>
 8009aea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aec:	07d9      	lsls	r1, r3, #31
 8009aee:	d405      	bmi.n	8009afc <_vfiprintf_r+0x220>
 8009af0:	89ab      	ldrh	r3, [r5, #12]
 8009af2:	059a      	lsls	r2, r3, #22
 8009af4:	d402      	bmi.n	8009afc <_vfiprintf_r+0x220>
 8009af6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009af8:	f7ff fc1b 	bl	8009332 <__retarget_lock_release_recursive>
 8009afc:	89ab      	ldrh	r3, [r5, #12]
 8009afe:	065b      	lsls	r3, r3, #25
 8009b00:	f53f af12 	bmi.w	8009928 <_vfiprintf_r+0x4c>
 8009b04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b06:	e711      	b.n	800992c <_vfiprintf_r+0x50>
 8009b08:	ab03      	add	r3, sp, #12
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	462a      	mov	r2, r5
 8009b0e:	4b09      	ldr	r3, [pc, #36]	; (8009b34 <_vfiprintf_r+0x258>)
 8009b10:	a904      	add	r1, sp, #16
 8009b12:	4630      	mov	r0, r6
 8009b14:	f000 f880 	bl	8009c18 <_printf_i>
 8009b18:	e7e4      	b.n	8009ae4 <_vfiprintf_r+0x208>
 8009b1a:	bf00      	nop
 8009b1c:	08079024 	.word	0x08079024
 8009b20:	08079044 	.word	0x08079044
 8009b24:	08079004 	.word	0x08079004
 8009b28:	08079064 	.word	0x08079064
 8009b2c:	0807906e 	.word	0x0807906e
 8009b30:	00000000 	.word	0x00000000
 8009b34:	080098b7 	.word	0x080098b7
 8009b38:	0807906a 	.word	0x0807906a

08009b3c <_printf_common>:
 8009b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b40:	4616      	mov	r6, r2
 8009b42:	4699      	mov	r9, r3
 8009b44:	688a      	ldr	r2, [r1, #8]
 8009b46:	690b      	ldr	r3, [r1, #16]
 8009b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	bfb8      	it	lt
 8009b50:	4613      	movlt	r3, r2
 8009b52:	6033      	str	r3, [r6, #0]
 8009b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009b58:	4607      	mov	r7, r0
 8009b5a:	460c      	mov	r4, r1
 8009b5c:	b10a      	cbz	r2, 8009b62 <_printf_common+0x26>
 8009b5e:	3301      	adds	r3, #1
 8009b60:	6033      	str	r3, [r6, #0]
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	0699      	lsls	r1, r3, #26
 8009b66:	bf42      	ittt	mi
 8009b68:	6833      	ldrmi	r3, [r6, #0]
 8009b6a:	3302      	addmi	r3, #2
 8009b6c:	6033      	strmi	r3, [r6, #0]
 8009b6e:	6825      	ldr	r5, [r4, #0]
 8009b70:	f015 0506 	ands.w	r5, r5, #6
 8009b74:	d106      	bne.n	8009b84 <_printf_common+0x48>
 8009b76:	f104 0a19 	add.w	sl, r4, #25
 8009b7a:	68e3      	ldr	r3, [r4, #12]
 8009b7c:	6832      	ldr	r2, [r6, #0]
 8009b7e:	1a9b      	subs	r3, r3, r2
 8009b80:	42ab      	cmp	r3, r5
 8009b82:	dc26      	bgt.n	8009bd2 <_printf_common+0x96>
 8009b84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b88:	1e13      	subs	r3, r2, #0
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	bf18      	it	ne
 8009b8e:	2301      	movne	r3, #1
 8009b90:	0692      	lsls	r2, r2, #26
 8009b92:	d42b      	bmi.n	8009bec <_printf_common+0xb0>
 8009b94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b98:	4649      	mov	r1, r9
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	47c0      	blx	r8
 8009b9e:	3001      	adds	r0, #1
 8009ba0:	d01e      	beq.n	8009be0 <_printf_common+0xa4>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	68e5      	ldr	r5, [r4, #12]
 8009ba6:	6832      	ldr	r2, [r6, #0]
 8009ba8:	f003 0306 	and.w	r3, r3, #6
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	bf08      	it	eq
 8009bb0:	1aad      	subeq	r5, r5, r2
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	6922      	ldr	r2, [r4, #16]
 8009bb6:	bf0c      	ite	eq
 8009bb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bbc:	2500      	movne	r5, #0
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	bfc4      	itt	gt
 8009bc2:	1a9b      	subgt	r3, r3, r2
 8009bc4:	18ed      	addgt	r5, r5, r3
 8009bc6:	2600      	movs	r6, #0
 8009bc8:	341a      	adds	r4, #26
 8009bca:	42b5      	cmp	r5, r6
 8009bcc:	d11a      	bne.n	8009c04 <_printf_common+0xc8>
 8009bce:	2000      	movs	r0, #0
 8009bd0:	e008      	b.n	8009be4 <_printf_common+0xa8>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4652      	mov	r2, sl
 8009bd6:	4649      	mov	r1, r9
 8009bd8:	4638      	mov	r0, r7
 8009bda:	47c0      	blx	r8
 8009bdc:	3001      	adds	r0, #1
 8009bde:	d103      	bne.n	8009be8 <_printf_common+0xac>
 8009be0:	f04f 30ff 	mov.w	r0, #4294967295
 8009be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009be8:	3501      	adds	r5, #1
 8009bea:	e7c6      	b.n	8009b7a <_printf_common+0x3e>
 8009bec:	18e1      	adds	r1, r4, r3
 8009bee:	1c5a      	adds	r2, r3, #1
 8009bf0:	2030      	movs	r0, #48	; 0x30
 8009bf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009bf6:	4422      	add	r2, r4
 8009bf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009bfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009c00:	3302      	adds	r3, #2
 8009c02:	e7c7      	b.n	8009b94 <_printf_common+0x58>
 8009c04:	2301      	movs	r3, #1
 8009c06:	4622      	mov	r2, r4
 8009c08:	4649      	mov	r1, r9
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	47c0      	blx	r8
 8009c0e:	3001      	adds	r0, #1
 8009c10:	d0e6      	beq.n	8009be0 <_printf_common+0xa4>
 8009c12:	3601      	adds	r6, #1
 8009c14:	e7d9      	b.n	8009bca <_printf_common+0x8e>
	...

08009c18 <_printf_i>:
 8009c18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c1c:	7e0f      	ldrb	r7, [r1, #24]
 8009c1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009c20:	2f78      	cmp	r7, #120	; 0x78
 8009c22:	4691      	mov	r9, r2
 8009c24:	4680      	mov	r8, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	469a      	mov	sl, r3
 8009c2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009c2e:	d807      	bhi.n	8009c40 <_printf_i+0x28>
 8009c30:	2f62      	cmp	r7, #98	; 0x62
 8009c32:	d80a      	bhi.n	8009c4a <_printf_i+0x32>
 8009c34:	2f00      	cmp	r7, #0
 8009c36:	f000 80d8 	beq.w	8009dea <_printf_i+0x1d2>
 8009c3a:	2f58      	cmp	r7, #88	; 0x58
 8009c3c:	f000 80a3 	beq.w	8009d86 <_printf_i+0x16e>
 8009c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009c48:	e03a      	b.n	8009cc0 <_printf_i+0xa8>
 8009c4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009c4e:	2b15      	cmp	r3, #21
 8009c50:	d8f6      	bhi.n	8009c40 <_printf_i+0x28>
 8009c52:	a101      	add	r1, pc, #4	; (adr r1, 8009c58 <_printf_i+0x40>)
 8009c54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c58:	08009cb1 	.word	0x08009cb1
 8009c5c:	08009cc5 	.word	0x08009cc5
 8009c60:	08009c41 	.word	0x08009c41
 8009c64:	08009c41 	.word	0x08009c41
 8009c68:	08009c41 	.word	0x08009c41
 8009c6c:	08009c41 	.word	0x08009c41
 8009c70:	08009cc5 	.word	0x08009cc5
 8009c74:	08009c41 	.word	0x08009c41
 8009c78:	08009c41 	.word	0x08009c41
 8009c7c:	08009c41 	.word	0x08009c41
 8009c80:	08009c41 	.word	0x08009c41
 8009c84:	08009dd1 	.word	0x08009dd1
 8009c88:	08009cf5 	.word	0x08009cf5
 8009c8c:	08009db3 	.word	0x08009db3
 8009c90:	08009c41 	.word	0x08009c41
 8009c94:	08009c41 	.word	0x08009c41
 8009c98:	08009df3 	.word	0x08009df3
 8009c9c:	08009c41 	.word	0x08009c41
 8009ca0:	08009cf5 	.word	0x08009cf5
 8009ca4:	08009c41 	.word	0x08009c41
 8009ca8:	08009c41 	.word	0x08009c41
 8009cac:	08009dbb 	.word	0x08009dbb
 8009cb0:	682b      	ldr	r3, [r5, #0]
 8009cb2:	1d1a      	adds	r2, r3, #4
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	602a      	str	r2, [r5, #0]
 8009cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009cbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009cc0:	2301      	movs	r3, #1
 8009cc2:	e0a3      	b.n	8009e0c <_printf_i+0x1f4>
 8009cc4:	6820      	ldr	r0, [r4, #0]
 8009cc6:	6829      	ldr	r1, [r5, #0]
 8009cc8:	0606      	lsls	r6, r0, #24
 8009cca:	f101 0304 	add.w	r3, r1, #4
 8009cce:	d50a      	bpl.n	8009ce6 <_printf_i+0xce>
 8009cd0:	680e      	ldr	r6, [r1, #0]
 8009cd2:	602b      	str	r3, [r5, #0]
 8009cd4:	2e00      	cmp	r6, #0
 8009cd6:	da03      	bge.n	8009ce0 <_printf_i+0xc8>
 8009cd8:	232d      	movs	r3, #45	; 0x2d
 8009cda:	4276      	negs	r6, r6
 8009cdc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ce0:	485e      	ldr	r0, [pc, #376]	; (8009e5c <_printf_i+0x244>)
 8009ce2:	230a      	movs	r3, #10
 8009ce4:	e019      	b.n	8009d1a <_printf_i+0x102>
 8009ce6:	680e      	ldr	r6, [r1, #0]
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009cee:	bf18      	it	ne
 8009cf0:	b236      	sxthne	r6, r6
 8009cf2:	e7ef      	b.n	8009cd4 <_printf_i+0xbc>
 8009cf4:	682b      	ldr	r3, [r5, #0]
 8009cf6:	6820      	ldr	r0, [r4, #0]
 8009cf8:	1d19      	adds	r1, r3, #4
 8009cfa:	6029      	str	r1, [r5, #0]
 8009cfc:	0601      	lsls	r1, r0, #24
 8009cfe:	d501      	bpl.n	8009d04 <_printf_i+0xec>
 8009d00:	681e      	ldr	r6, [r3, #0]
 8009d02:	e002      	b.n	8009d0a <_printf_i+0xf2>
 8009d04:	0646      	lsls	r6, r0, #25
 8009d06:	d5fb      	bpl.n	8009d00 <_printf_i+0xe8>
 8009d08:	881e      	ldrh	r6, [r3, #0]
 8009d0a:	4854      	ldr	r0, [pc, #336]	; (8009e5c <_printf_i+0x244>)
 8009d0c:	2f6f      	cmp	r7, #111	; 0x6f
 8009d0e:	bf0c      	ite	eq
 8009d10:	2308      	moveq	r3, #8
 8009d12:	230a      	movne	r3, #10
 8009d14:	2100      	movs	r1, #0
 8009d16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009d1a:	6865      	ldr	r5, [r4, #4]
 8009d1c:	60a5      	str	r5, [r4, #8]
 8009d1e:	2d00      	cmp	r5, #0
 8009d20:	bfa2      	ittt	ge
 8009d22:	6821      	ldrge	r1, [r4, #0]
 8009d24:	f021 0104 	bicge.w	r1, r1, #4
 8009d28:	6021      	strge	r1, [r4, #0]
 8009d2a:	b90e      	cbnz	r6, 8009d30 <_printf_i+0x118>
 8009d2c:	2d00      	cmp	r5, #0
 8009d2e:	d04d      	beq.n	8009dcc <_printf_i+0x1b4>
 8009d30:	4615      	mov	r5, r2
 8009d32:	fbb6 f1f3 	udiv	r1, r6, r3
 8009d36:	fb03 6711 	mls	r7, r3, r1, r6
 8009d3a:	5dc7      	ldrb	r7, [r0, r7]
 8009d3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009d40:	4637      	mov	r7, r6
 8009d42:	42bb      	cmp	r3, r7
 8009d44:	460e      	mov	r6, r1
 8009d46:	d9f4      	bls.n	8009d32 <_printf_i+0x11a>
 8009d48:	2b08      	cmp	r3, #8
 8009d4a:	d10b      	bne.n	8009d64 <_printf_i+0x14c>
 8009d4c:	6823      	ldr	r3, [r4, #0]
 8009d4e:	07de      	lsls	r6, r3, #31
 8009d50:	d508      	bpl.n	8009d64 <_printf_i+0x14c>
 8009d52:	6923      	ldr	r3, [r4, #16]
 8009d54:	6861      	ldr	r1, [r4, #4]
 8009d56:	4299      	cmp	r1, r3
 8009d58:	bfde      	ittt	le
 8009d5a:	2330      	movle	r3, #48	; 0x30
 8009d5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009d60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009d64:	1b52      	subs	r2, r2, r5
 8009d66:	6122      	str	r2, [r4, #16]
 8009d68:	f8cd a000 	str.w	sl, [sp]
 8009d6c:	464b      	mov	r3, r9
 8009d6e:	aa03      	add	r2, sp, #12
 8009d70:	4621      	mov	r1, r4
 8009d72:	4640      	mov	r0, r8
 8009d74:	f7ff fee2 	bl	8009b3c <_printf_common>
 8009d78:	3001      	adds	r0, #1
 8009d7a:	d14c      	bne.n	8009e16 <_printf_i+0x1fe>
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	b004      	add	sp, #16
 8009d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d86:	4835      	ldr	r0, [pc, #212]	; (8009e5c <_printf_i+0x244>)
 8009d88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d8c:	6829      	ldr	r1, [r5, #0]
 8009d8e:	6823      	ldr	r3, [r4, #0]
 8009d90:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d94:	6029      	str	r1, [r5, #0]
 8009d96:	061d      	lsls	r5, r3, #24
 8009d98:	d514      	bpl.n	8009dc4 <_printf_i+0x1ac>
 8009d9a:	07df      	lsls	r7, r3, #31
 8009d9c:	bf44      	itt	mi
 8009d9e:	f043 0320 	orrmi.w	r3, r3, #32
 8009da2:	6023      	strmi	r3, [r4, #0]
 8009da4:	b91e      	cbnz	r6, 8009dae <_printf_i+0x196>
 8009da6:	6823      	ldr	r3, [r4, #0]
 8009da8:	f023 0320 	bic.w	r3, r3, #32
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	2310      	movs	r3, #16
 8009db0:	e7b0      	b.n	8009d14 <_printf_i+0xfc>
 8009db2:	6823      	ldr	r3, [r4, #0]
 8009db4:	f043 0320 	orr.w	r3, r3, #32
 8009db8:	6023      	str	r3, [r4, #0]
 8009dba:	2378      	movs	r3, #120	; 0x78
 8009dbc:	4828      	ldr	r0, [pc, #160]	; (8009e60 <_printf_i+0x248>)
 8009dbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009dc2:	e7e3      	b.n	8009d8c <_printf_i+0x174>
 8009dc4:	0659      	lsls	r1, r3, #25
 8009dc6:	bf48      	it	mi
 8009dc8:	b2b6      	uxthmi	r6, r6
 8009dca:	e7e6      	b.n	8009d9a <_printf_i+0x182>
 8009dcc:	4615      	mov	r5, r2
 8009dce:	e7bb      	b.n	8009d48 <_printf_i+0x130>
 8009dd0:	682b      	ldr	r3, [r5, #0]
 8009dd2:	6826      	ldr	r6, [r4, #0]
 8009dd4:	6961      	ldr	r1, [r4, #20]
 8009dd6:	1d18      	adds	r0, r3, #4
 8009dd8:	6028      	str	r0, [r5, #0]
 8009dda:	0635      	lsls	r5, r6, #24
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	d501      	bpl.n	8009de4 <_printf_i+0x1cc>
 8009de0:	6019      	str	r1, [r3, #0]
 8009de2:	e002      	b.n	8009dea <_printf_i+0x1d2>
 8009de4:	0670      	lsls	r0, r6, #25
 8009de6:	d5fb      	bpl.n	8009de0 <_printf_i+0x1c8>
 8009de8:	8019      	strh	r1, [r3, #0]
 8009dea:	2300      	movs	r3, #0
 8009dec:	6123      	str	r3, [r4, #16]
 8009dee:	4615      	mov	r5, r2
 8009df0:	e7ba      	b.n	8009d68 <_printf_i+0x150>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	1d1a      	adds	r2, r3, #4
 8009df6:	602a      	str	r2, [r5, #0]
 8009df8:	681d      	ldr	r5, [r3, #0]
 8009dfa:	6862      	ldr	r2, [r4, #4]
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4628      	mov	r0, r5
 8009e00:	f7f6 fa16 	bl	8000230 <memchr>
 8009e04:	b108      	cbz	r0, 8009e0a <_printf_i+0x1f2>
 8009e06:	1b40      	subs	r0, r0, r5
 8009e08:	6060      	str	r0, [r4, #4]
 8009e0a:	6863      	ldr	r3, [r4, #4]
 8009e0c:	6123      	str	r3, [r4, #16]
 8009e0e:	2300      	movs	r3, #0
 8009e10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e14:	e7a8      	b.n	8009d68 <_printf_i+0x150>
 8009e16:	6923      	ldr	r3, [r4, #16]
 8009e18:	462a      	mov	r2, r5
 8009e1a:	4649      	mov	r1, r9
 8009e1c:	4640      	mov	r0, r8
 8009e1e:	47d0      	blx	sl
 8009e20:	3001      	adds	r0, #1
 8009e22:	d0ab      	beq.n	8009d7c <_printf_i+0x164>
 8009e24:	6823      	ldr	r3, [r4, #0]
 8009e26:	079b      	lsls	r3, r3, #30
 8009e28:	d413      	bmi.n	8009e52 <_printf_i+0x23a>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	9b03      	ldr	r3, [sp, #12]
 8009e2e:	4298      	cmp	r0, r3
 8009e30:	bfb8      	it	lt
 8009e32:	4618      	movlt	r0, r3
 8009e34:	e7a4      	b.n	8009d80 <_printf_i+0x168>
 8009e36:	2301      	movs	r3, #1
 8009e38:	4632      	mov	r2, r6
 8009e3a:	4649      	mov	r1, r9
 8009e3c:	4640      	mov	r0, r8
 8009e3e:	47d0      	blx	sl
 8009e40:	3001      	adds	r0, #1
 8009e42:	d09b      	beq.n	8009d7c <_printf_i+0x164>
 8009e44:	3501      	adds	r5, #1
 8009e46:	68e3      	ldr	r3, [r4, #12]
 8009e48:	9903      	ldr	r1, [sp, #12]
 8009e4a:	1a5b      	subs	r3, r3, r1
 8009e4c:	42ab      	cmp	r3, r5
 8009e4e:	dcf2      	bgt.n	8009e36 <_printf_i+0x21e>
 8009e50:	e7eb      	b.n	8009e2a <_printf_i+0x212>
 8009e52:	2500      	movs	r5, #0
 8009e54:	f104 0619 	add.w	r6, r4, #25
 8009e58:	e7f5      	b.n	8009e46 <_printf_i+0x22e>
 8009e5a:	bf00      	nop
 8009e5c:	08079075 	.word	0x08079075
 8009e60:	08079086 	.word	0x08079086

08009e64 <_sbrk_r>:
 8009e64:	b538      	push	{r3, r4, r5, lr}
 8009e66:	4d06      	ldr	r5, [pc, #24]	; (8009e80 <_sbrk_r+0x1c>)
 8009e68:	2300      	movs	r3, #0
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	4608      	mov	r0, r1
 8009e6e:	602b      	str	r3, [r5, #0]
 8009e70:	f7f7 fe48 	bl	8001b04 <_sbrk>
 8009e74:	1c43      	adds	r3, r0, #1
 8009e76:	d102      	bne.n	8009e7e <_sbrk_r+0x1a>
 8009e78:	682b      	ldr	r3, [r5, #0]
 8009e7a:	b103      	cbz	r3, 8009e7e <_sbrk_r+0x1a>
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	bd38      	pop	{r3, r4, r5, pc}
 8009e80:	2001de98 	.word	0x2001de98

08009e84 <__sread>:
 8009e84:	b510      	push	{r4, lr}
 8009e86:	460c      	mov	r4, r1
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	f000 f8f2 	bl	800a074 <_read_r>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	bfab      	itete	ge
 8009e94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e96:	89a3      	ldrhlt	r3, [r4, #12]
 8009e98:	181b      	addge	r3, r3, r0
 8009e9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e9e:	bfac      	ite	ge
 8009ea0:	6563      	strge	r3, [r4, #84]	; 0x54
 8009ea2:	81a3      	strhlt	r3, [r4, #12]
 8009ea4:	bd10      	pop	{r4, pc}

08009ea6 <__swrite>:
 8009ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	461f      	mov	r7, r3
 8009eac:	898b      	ldrh	r3, [r1, #12]
 8009eae:	05db      	lsls	r3, r3, #23
 8009eb0:	4605      	mov	r5, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	4616      	mov	r6, r2
 8009eb6:	d505      	bpl.n	8009ec4 <__swrite+0x1e>
 8009eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f000 f870 	bl	8009fa4 <_lseek_r>
 8009ec4:	89a3      	ldrh	r3, [r4, #12]
 8009ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009eca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	4632      	mov	r2, r6
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eda:	f000 b817 	b.w	8009f0c <_write_r>

08009ede <__sseek>:
 8009ede:	b510      	push	{r4, lr}
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee6:	f000 f85d 	bl	8009fa4 <_lseek_r>
 8009eea:	1c43      	adds	r3, r0, #1
 8009eec:	89a3      	ldrh	r3, [r4, #12]
 8009eee:	bf15      	itete	ne
 8009ef0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ef2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ef6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009efa:	81a3      	strheq	r3, [r4, #12]
 8009efc:	bf18      	it	ne
 8009efe:	81a3      	strhne	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__sclose>:
 8009f02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f06:	f000 b81b 	b.w	8009f40 <_close_r>
	...

08009f0c <_write_r>:
 8009f0c:	b538      	push	{r3, r4, r5, lr}
 8009f0e:	4d07      	ldr	r5, [pc, #28]	; (8009f2c <_write_r+0x20>)
 8009f10:	4604      	mov	r4, r0
 8009f12:	4608      	mov	r0, r1
 8009f14:	4611      	mov	r1, r2
 8009f16:	2200      	movs	r2, #0
 8009f18:	602a      	str	r2, [r5, #0]
 8009f1a:	461a      	mov	r2, r3
 8009f1c:	f7fb fba2 	bl	8005664 <_write>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_write_r+0x1e>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_write_r+0x1e>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	2001de98 	.word	0x2001de98

08009f30 <abort>:
 8009f30:	b508      	push	{r3, lr}
 8009f32:	2006      	movs	r0, #6
 8009f34:	f000 f8d8 	bl	800a0e8 <raise>
 8009f38:	2001      	movs	r0, #1
 8009f3a:	f7f7 fdc1 	bl	8001ac0 <_exit>
	...

08009f40 <_close_r>:
 8009f40:	b538      	push	{r3, r4, r5, lr}
 8009f42:	4d06      	ldr	r5, [pc, #24]	; (8009f5c <_close_r+0x1c>)
 8009f44:	2300      	movs	r3, #0
 8009f46:	4604      	mov	r4, r0
 8009f48:	4608      	mov	r0, r1
 8009f4a:	602b      	str	r3, [r5, #0]
 8009f4c:	f7f7 fdce 	bl	8001aec <_close>
 8009f50:	1c43      	adds	r3, r0, #1
 8009f52:	d102      	bne.n	8009f5a <_close_r+0x1a>
 8009f54:	682b      	ldr	r3, [r5, #0]
 8009f56:	b103      	cbz	r3, 8009f5a <_close_r+0x1a>
 8009f58:	6023      	str	r3, [r4, #0]
 8009f5a:	bd38      	pop	{r3, r4, r5, pc}
 8009f5c:	2001de98 	.word	0x2001de98

08009f60 <_fstat_r>:
 8009f60:	b538      	push	{r3, r4, r5, lr}
 8009f62:	4d07      	ldr	r5, [pc, #28]	; (8009f80 <_fstat_r+0x20>)
 8009f64:	2300      	movs	r3, #0
 8009f66:	4604      	mov	r4, r0
 8009f68:	4608      	mov	r0, r1
 8009f6a:	4611      	mov	r1, r2
 8009f6c:	602b      	str	r3, [r5, #0]
 8009f6e:	f7f7 fdc0 	bl	8001af2 <_fstat>
 8009f72:	1c43      	adds	r3, r0, #1
 8009f74:	d102      	bne.n	8009f7c <_fstat_r+0x1c>
 8009f76:	682b      	ldr	r3, [r5, #0]
 8009f78:	b103      	cbz	r3, 8009f7c <_fstat_r+0x1c>
 8009f7a:	6023      	str	r3, [r4, #0]
 8009f7c:	bd38      	pop	{r3, r4, r5, pc}
 8009f7e:	bf00      	nop
 8009f80:	2001de98 	.word	0x2001de98

08009f84 <_isatty_r>:
 8009f84:	b538      	push	{r3, r4, r5, lr}
 8009f86:	4d06      	ldr	r5, [pc, #24]	; (8009fa0 <_isatty_r+0x1c>)
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4608      	mov	r0, r1
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	f7f7 fdb4 	bl	8001afc <_isatty>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	d102      	bne.n	8009f9e <_isatty_r+0x1a>
 8009f98:	682b      	ldr	r3, [r5, #0]
 8009f9a:	b103      	cbz	r3, 8009f9e <_isatty_r+0x1a>
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	bd38      	pop	{r3, r4, r5, pc}
 8009fa0:	2001de98 	.word	0x2001de98

08009fa4 <_lseek_r>:
 8009fa4:	b538      	push	{r3, r4, r5, lr}
 8009fa6:	4d07      	ldr	r5, [pc, #28]	; (8009fc4 <_lseek_r+0x20>)
 8009fa8:	4604      	mov	r4, r0
 8009faa:	4608      	mov	r0, r1
 8009fac:	4611      	mov	r1, r2
 8009fae:	2200      	movs	r2, #0
 8009fb0:	602a      	str	r2, [r5, #0]
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	f7f7 fda4 	bl	8001b00 <_lseek>
 8009fb8:	1c43      	adds	r3, r0, #1
 8009fba:	d102      	bne.n	8009fc2 <_lseek_r+0x1e>
 8009fbc:	682b      	ldr	r3, [r5, #0]
 8009fbe:	b103      	cbz	r3, 8009fc2 <_lseek_r+0x1e>
 8009fc0:	6023      	str	r3, [r4, #0]
 8009fc2:	bd38      	pop	{r3, r4, r5, pc}
 8009fc4:	2001de98 	.word	0x2001de98

08009fc8 <memmove>:
 8009fc8:	4288      	cmp	r0, r1
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	eb01 0402 	add.w	r4, r1, r2
 8009fd0:	d902      	bls.n	8009fd8 <memmove+0x10>
 8009fd2:	4284      	cmp	r4, r0
 8009fd4:	4623      	mov	r3, r4
 8009fd6:	d807      	bhi.n	8009fe8 <memmove+0x20>
 8009fd8:	1e43      	subs	r3, r0, #1
 8009fda:	42a1      	cmp	r1, r4
 8009fdc:	d008      	beq.n	8009ff0 <memmove+0x28>
 8009fde:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009fe2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009fe6:	e7f8      	b.n	8009fda <memmove+0x12>
 8009fe8:	4402      	add	r2, r0
 8009fea:	4601      	mov	r1, r0
 8009fec:	428a      	cmp	r2, r1
 8009fee:	d100      	bne.n	8009ff2 <memmove+0x2a>
 8009ff0:	bd10      	pop	{r4, pc}
 8009ff2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ff6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ffa:	e7f7      	b.n	8009fec <memmove+0x24>

08009ffc <__malloc_lock>:
 8009ffc:	4801      	ldr	r0, [pc, #4]	; (800a004 <__malloc_lock+0x8>)
 8009ffe:	f7ff b997 	b.w	8009330 <__retarget_lock_acquire_recursive>
 800a002:	bf00      	nop
 800a004:	2001de8c 	.word	0x2001de8c

0800a008 <__malloc_unlock>:
 800a008:	4801      	ldr	r0, [pc, #4]	; (800a010 <__malloc_unlock+0x8>)
 800a00a:	f7ff b992 	b.w	8009332 <__retarget_lock_release_recursive>
 800a00e:	bf00      	nop
 800a010:	2001de8c 	.word	0x2001de8c

0800a014 <_realloc_r>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	4680      	mov	r8, r0
 800a01a:	4614      	mov	r4, r2
 800a01c:	460e      	mov	r6, r1
 800a01e:	b921      	cbnz	r1, 800a02a <_realloc_r+0x16>
 800a020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a024:	4611      	mov	r1, r2
 800a026:	f7ff ba5f 	b.w	80094e8 <_malloc_r>
 800a02a:	b92a      	cbnz	r2, 800a038 <_realloc_r+0x24>
 800a02c:	f7ff f9f0 	bl	8009410 <_free_r>
 800a030:	4625      	mov	r5, r4
 800a032:	4628      	mov	r0, r5
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	f000 f872 	bl	800a120 <_malloc_usable_size_r>
 800a03c:	4284      	cmp	r4, r0
 800a03e:	4607      	mov	r7, r0
 800a040:	d802      	bhi.n	800a048 <_realloc_r+0x34>
 800a042:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a046:	d812      	bhi.n	800a06e <_realloc_r+0x5a>
 800a048:	4621      	mov	r1, r4
 800a04a:	4640      	mov	r0, r8
 800a04c:	f7ff fa4c 	bl	80094e8 <_malloc_r>
 800a050:	4605      	mov	r5, r0
 800a052:	2800      	cmp	r0, #0
 800a054:	d0ed      	beq.n	800a032 <_realloc_r+0x1e>
 800a056:	42bc      	cmp	r4, r7
 800a058:	4622      	mov	r2, r4
 800a05a:	4631      	mov	r1, r6
 800a05c:	bf28      	it	cs
 800a05e:	463a      	movcs	r2, r7
 800a060:	f7fe fd56 	bl	8008b10 <memcpy>
 800a064:	4631      	mov	r1, r6
 800a066:	4640      	mov	r0, r8
 800a068:	f7ff f9d2 	bl	8009410 <_free_r>
 800a06c:	e7e1      	b.n	800a032 <_realloc_r+0x1e>
 800a06e:	4635      	mov	r5, r6
 800a070:	e7df      	b.n	800a032 <_realloc_r+0x1e>
	...

0800a074 <_read_r>:
 800a074:	b538      	push	{r3, r4, r5, lr}
 800a076:	4d07      	ldr	r5, [pc, #28]	; (800a094 <_read_r+0x20>)
 800a078:	4604      	mov	r4, r0
 800a07a:	4608      	mov	r0, r1
 800a07c:	4611      	mov	r1, r2
 800a07e:	2200      	movs	r2, #0
 800a080:	602a      	str	r2, [r5, #0]
 800a082:	461a      	mov	r2, r3
 800a084:	f7f7 fd22 	bl	8001acc <_read>
 800a088:	1c43      	adds	r3, r0, #1
 800a08a:	d102      	bne.n	800a092 <_read_r+0x1e>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	b103      	cbz	r3, 800a092 <_read_r+0x1e>
 800a090:	6023      	str	r3, [r4, #0]
 800a092:	bd38      	pop	{r3, r4, r5, pc}
 800a094:	2001de98 	.word	0x2001de98

0800a098 <_raise_r>:
 800a098:	291f      	cmp	r1, #31
 800a09a:	b538      	push	{r3, r4, r5, lr}
 800a09c:	4604      	mov	r4, r0
 800a09e:	460d      	mov	r5, r1
 800a0a0:	d904      	bls.n	800a0ac <_raise_r+0x14>
 800a0a2:	2316      	movs	r3, #22
 800a0a4:	6003      	str	r3, [r0, #0]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295
 800a0aa:	bd38      	pop	{r3, r4, r5, pc}
 800a0ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a0ae:	b112      	cbz	r2, 800a0b6 <_raise_r+0x1e>
 800a0b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a0b4:	b94b      	cbnz	r3, 800a0ca <_raise_r+0x32>
 800a0b6:	4620      	mov	r0, r4
 800a0b8:	f000 f830 	bl	800a11c <_getpid_r>
 800a0bc:	462a      	mov	r2, r5
 800a0be:	4601      	mov	r1, r0
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0c6:	f000 b817 	b.w	800a0f8 <_kill_r>
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d00a      	beq.n	800a0e4 <_raise_r+0x4c>
 800a0ce:	1c59      	adds	r1, r3, #1
 800a0d0:	d103      	bne.n	800a0da <_raise_r+0x42>
 800a0d2:	2316      	movs	r3, #22
 800a0d4:	6003      	str	r3, [r0, #0]
 800a0d6:	2001      	movs	r0, #1
 800a0d8:	e7e7      	b.n	800a0aa <_raise_r+0x12>
 800a0da:	2400      	movs	r4, #0
 800a0dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	4798      	blx	r3
 800a0e4:	2000      	movs	r0, #0
 800a0e6:	e7e0      	b.n	800a0aa <_raise_r+0x12>

0800a0e8 <raise>:
 800a0e8:	4b02      	ldr	r3, [pc, #8]	; (800a0f4 <raise+0xc>)
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	6818      	ldr	r0, [r3, #0]
 800a0ee:	f7ff bfd3 	b.w	800a098 <_raise_r>
 800a0f2:	bf00      	nop
 800a0f4:	20000020 	.word	0x20000020

0800a0f8 <_kill_r>:
 800a0f8:	b538      	push	{r3, r4, r5, lr}
 800a0fa:	4d07      	ldr	r5, [pc, #28]	; (800a118 <_kill_r+0x20>)
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	4604      	mov	r4, r0
 800a100:	4608      	mov	r0, r1
 800a102:	4611      	mov	r1, r2
 800a104:	602b      	str	r3, [r5, #0]
 800a106:	f7f7 fcd3 	bl	8001ab0 <_kill>
 800a10a:	1c43      	adds	r3, r0, #1
 800a10c:	d102      	bne.n	800a114 <_kill_r+0x1c>
 800a10e:	682b      	ldr	r3, [r5, #0]
 800a110:	b103      	cbz	r3, 800a114 <_kill_r+0x1c>
 800a112:	6023      	str	r3, [r4, #0]
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	bf00      	nop
 800a118:	2001de98 	.word	0x2001de98

0800a11c <_getpid_r>:
 800a11c:	f7f7 bcc6 	b.w	8001aac <_getpid>

0800a120 <_malloc_usable_size_r>:
 800a120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a124:	1f18      	subs	r0, r3, #4
 800a126:	2b00      	cmp	r3, #0
 800a128:	bfbc      	itt	lt
 800a12a:	580b      	ldrlt	r3, [r1, r0]
 800a12c:	18c0      	addlt	r0, r0, r3
 800a12e:	4770      	bx	lr

0800a130 <atanf>:
 800a130:	b538      	push	{r3, r4, r5, lr}
 800a132:	ee10 5a10 	vmov	r5, s0
 800a136:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800a13a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800a13e:	eef0 7a40 	vmov.f32	s15, s0
 800a142:	db10      	blt.n	800a166 <atanf+0x36>
 800a144:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a148:	dd04      	ble.n	800a154 <atanf+0x24>
 800a14a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a14e:	eeb0 0a67 	vmov.f32	s0, s15
 800a152:	bd38      	pop	{r3, r4, r5, pc}
 800a154:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800a28c <atanf+0x15c>
 800a158:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800a290 <atanf+0x160>
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	bfd8      	it	le
 800a160:	eef0 7a40 	vmovle.f32	s15, s0
 800a164:	e7f3      	b.n	800a14e <atanf+0x1e>
 800a166:	4b4b      	ldr	r3, [pc, #300]	; (800a294 <atanf+0x164>)
 800a168:	429c      	cmp	r4, r3
 800a16a:	dc10      	bgt.n	800a18e <atanf+0x5e>
 800a16c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800a170:	da0a      	bge.n	800a188 <atanf+0x58>
 800a172:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800a298 <atanf+0x168>
 800a176:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a17a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a17e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a186:	dce2      	bgt.n	800a14e <atanf+0x1e>
 800a188:	f04f 33ff 	mov.w	r3, #4294967295
 800a18c:	e013      	b.n	800a1b6 <atanf+0x86>
 800a18e:	f000 f8e7 	bl	800a360 <fabsf>
 800a192:	4b42      	ldr	r3, [pc, #264]	; (800a29c <atanf+0x16c>)
 800a194:	429c      	cmp	r4, r3
 800a196:	dc4f      	bgt.n	800a238 <atanf+0x108>
 800a198:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800a19c:	429c      	cmp	r4, r3
 800a19e:	dc41      	bgt.n	800a224 <atanf+0xf4>
 800a1a0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800a1a4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a1a8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a1b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a1b6:	1c5a      	adds	r2, r3, #1
 800a1b8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a1bc:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a2a0 <atanf+0x170>
 800a1c0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800a2a4 <atanf+0x174>
 800a1c4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800a2a8 <atanf+0x178>
 800a1c8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a1cc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a1d0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a2ac <atanf+0x17c>
 800a1d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a1d8:	eddf 5a35 	vldr	s11, [pc, #212]	; 800a2b0 <atanf+0x180>
 800a1dc:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a1e0:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800a2b4 <atanf+0x184>
 800a1e4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a1e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800a2b8 <atanf+0x188>
 800a1ec:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a1f0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800a2bc <atanf+0x18c>
 800a1f4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a1f8:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a2c0 <atanf+0x190>
 800a1fc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a200:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800a2c4 <atanf+0x194>
 800a204:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a208:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800a2c8 <atanf+0x198>
 800a20c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a210:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a214:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a218:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a21c:	d121      	bne.n	800a262 <atanf+0x132>
 800a21e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a222:	e794      	b.n	800a14e <atanf+0x1e>
 800a224:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a228:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a22c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a230:	2301      	movs	r3, #1
 800a232:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a236:	e7be      	b.n	800a1b6 <atanf+0x86>
 800a238:	4b24      	ldr	r3, [pc, #144]	; (800a2cc <atanf+0x19c>)
 800a23a:	429c      	cmp	r4, r3
 800a23c:	dc0b      	bgt.n	800a256 <atanf+0x126>
 800a23e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800a242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a246:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a24a:	2302      	movs	r3, #2
 800a24c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a254:	e7af      	b.n	800a1b6 <atanf+0x86>
 800a256:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800a25a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a25e:	2303      	movs	r3, #3
 800a260:	e7a9      	b.n	800a1b6 <atanf+0x86>
 800a262:	4a1b      	ldr	r2, [pc, #108]	; (800a2d0 <atanf+0x1a0>)
 800a264:	491b      	ldr	r1, [pc, #108]	; (800a2d4 <atanf+0x1a4>)
 800a266:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a26a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a26e:	ed93 0a00 	vldr	s0, [r3]
 800a272:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a276:	ed92 0a00 	vldr	s0, [r2]
 800a27a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a27e:	2d00      	cmp	r5, #0
 800a280:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a284:	bfb8      	it	lt
 800a286:	eef1 7a67 	vneglt.f32	s15, s15
 800a28a:	e760      	b.n	800a14e <atanf+0x1e>
 800a28c:	3fc90fdb 	.word	0x3fc90fdb
 800a290:	bfc90fdb 	.word	0xbfc90fdb
 800a294:	3edfffff 	.word	0x3edfffff
 800a298:	7149f2ca 	.word	0x7149f2ca
 800a29c:	3f97ffff 	.word	0x3f97ffff
 800a2a0:	3c8569d7 	.word	0x3c8569d7
 800a2a4:	3d4bda59 	.word	0x3d4bda59
 800a2a8:	bd6ef16b 	.word	0xbd6ef16b
 800a2ac:	3d886b35 	.word	0x3d886b35
 800a2b0:	3dba2e6e 	.word	0x3dba2e6e
 800a2b4:	3e124925 	.word	0x3e124925
 800a2b8:	3eaaaaab 	.word	0x3eaaaaab
 800a2bc:	bd15a221 	.word	0xbd15a221
 800a2c0:	bd9d8795 	.word	0xbd9d8795
 800a2c4:	bde38e38 	.word	0xbde38e38
 800a2c8:	be4ccccd 	.word	0xbe4ccccd
 800a2cc:	401bffff 	.word	0x401bffff
 800a2d0:	08079098 	.word	0x08079098
 800a2d4:	080790a8 	.word	0x080790a8

0800a2d8 <cosf>:
 800a2d8:	ee10 3a10 	vmov	r3, s0
 800a2dc:	b507      	push	{r0, r1, r2, lr}
 800a2de:	4a1e      	ldr	r2, [pc, #120]	; (800a358 <cosf+0x80>)
 800a2e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	dc06      	bgt.n	800a2f6 <cosf+0x1e>
 800a2e8:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800a35c <cosf+0x84>
 800a2ec:	b003      	add	sp, #12
 800a2ee:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2f2:	f001 ba35 	b.w	800b760 <__kernel_cosf>
 800a2f6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a2fa:	db04      	blt.n	800a306 <cosf+0x2e>
 800a2fc:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a300:	b003      	add	sp, #12
 800a302:	f85d fb04 	ldr.w	pc, [sp], #4
 800a306:	4668      	mov	r0, sp
 800a308:	f001 f8ee 	bl	800b4e8 <__ieee754_rem_pio2f>
 800a30c:	f000 0003 	and.w	r0, r0, #3
 800a310:	2801      	cmp	r0, #1
 800a312:	d009      	beq.n	800a328 <cosf+0x50>
 800a314:	2802      	cmp	r0, #2
 800a316:	d010      	beq.n	800a33a <cosf+0x62>
 800a318:	b9b0      	cbnz	r0, 800a348 <cosf+0x70>
 800a31a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a31e:	ed9d 0a00 	vldr	s0, [sp]
 800a322:	f001 fa1d 	bl	800b760 <__kernel_cosf>
 800a326:	e7eb      	b.n	800a300 <cosf+0x28>
 800a328:	eddd 0a01 	vldr	s1, [sp, #4]
 800a32c:	ed9d 0a00 	vldr	s0, [sp]
 800a330:	f001 fcec 	bl	800bd0c <__kernel_sinf>
 800a334:	eeb1 0a40 	vneg.f32	s0, s0
 800a338:	e7e2      	b.n	800a300 <cosf+0x28>
 800a33a:	eddd 0a01 	vldr	s1, [sp, #4]
 800a33e:	ed9d 0a00 	vldr	s0, [sp]
 800a342:	f001 fa0d 	bl	800b760 <__kernel_cosf>
 800a346:	e7f5      	b.n	800a334 <cosf+0x5c>
 800a348:	eddd 0a01 	vldr	s1, [sp, #4]
 800a34c:	ed9d 0a00 	vldr	s0, [sp]
 800a350:	2001      	movs	r0, #1
 800a352:	f001 fcdb 	bl	800bd0c <__kernel_sinf>
 800a356:	e7d3      	b.n	800a300 <cosf+0x28>
 800a358:	3f490fd8 	.word	0x3f490fd8
 800a35c:	00000000 	.word	0x00000000

0800a360 <fabsf>:
 800a360:	ee10 3a10 	vmov	r3, s0
 800a364:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a368:	ee00 3a10 	vmov	s0, r3
 800a36c:	4770      	bx	lr
	...

0800a370 <sinf>:
 800a370:	ee10 3a10 	vmov	r3, s0
 800a374:	b507      	push	{r0, r1, r2, lr}
 800a376:	4a1f      	ldr	r2, [pc, #124]	; (800a3f4 <sinf+0x84>)
 800a378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a37c:	4293      	cmp	r3, r2
 800a37e:	dc07      	bgt.n	800a390 <sinf+0x20>
 800a380:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800a3f8 <sinf+0x88>
 800a384:	2000      	movs	r0, #0
 800a386:	b003      	add	sp, #12
 800a388:	f85d eb04 	ldr.w	lr, [sp], #4
 800a38c:	f001 bcbe 	b.w	800bd0c <__kernel_sinf>
 800a390:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a394:	db04      	blt.n	800a3a0 <sinf+0x30>
 800a396:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a39a:	b003      	add	sp, #12
 800a39c:	f85d fb04 	ldr.w	pc, [sp], #4
 800a3a0:	4668      	mov	r0, sp
 800a3a2:	f001 f8a1 	bl	800b4e8 <__ieee754_rem_pio2f>
 800a3a6:	f000 0003 	and.w	r0, r0, #3
 800a3aa:	2801      	cmp	r0, #1
 800a3ac:	d00a      	beq.n	800a3c4 <sinf+0x54>
 800a3ae:	2802      	cmp	r0, #2
 800a3b0:	d00f      	beq.n	800a3d2 <sinf+0x62>
 800a3b2:	b9c0      	cbnz	r0, 800a3e6 <sinf+0x76>
 800a3b4:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3b8:	ed9d 0a00 	vldr	s0, [sp]
 800a3bc:	2001      	movs	r0, #1
 800a3be:	f001 fca5 	bl	800bd0c <__kernel_sinf>
 800a3c2:	e7ea      	b.n	800a39a <sinf+0x2a>
 800a3c4:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3c8:	ed9d 0a00 	vldr	s0, [sp]
 800a3cc:	f001 f9c8 	bl	800b760 <__kernel_cosf>
 800a3d0:	e7e3      	b.n	800a39a <sinf+0x2a>
 800a3d2:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3d6:	ed9d 0a00 	vldr	s0, [sp]
 800a3da:	2001      	movs	r0, #1
 800a3dc:	f001 fc96 	bl	800bd0c <__kernel_sinf>
 800a3e0:	eeb1 0a40 	vneg.f32	s0, s0
 800a3e4:	e7d9      	b.n	800a39a <sinf+0x2a>
 800a3e6:	eddd 0a01 	vldr	s1, [sp, #4]
 800a3ea:	ed9d 0a00 	vldr	s0, [sp]
 800a3ee:	f001 f9b7 	bl	800b760 <__kernel_cosf>
 800a3f2:	e7f5      	b.n	800a3e0 <sinf+0x70>
 800a3f4:	3f490fd8 	.word	0x3f490fd8
 800a3f8:	00000000 	.word	0x00000000

0800a3fc <tanf>:
 800a3fc:	ee10 3a10 	vmov	r3, s0
 800a400:	b507      	push	{r0, r1, r2, lr}
 800a402:	4a12      	ldr	r2, [pc, #72]	; (800a44c <tanf+0x50>)
 800a404:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a408:	4293      	cmp	r3, r2
 800a40a:	dc07      	bgt.n	800a41c <tanf+0x20>
 800a40c:	eddf 0a10 	vldr	s1, [pc, #64]	; 800a450 <tanf+0x54>
 800a410:	2001      	movs	r0, #1
 800a412:	b003      	add	sp, #12
 800a414:	f85d eb04 	ldr.w	lr, [sp], #4
 800a418:	f001 bcc0 	b.w	800bd9c <__kernel_tanf>
 800a41c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a420:	db04      	blt.n	800a42c <tanf+0x30>
 800a422:	ee30 0a40 	vsub.f32	s0, s0, s0
 800a426:	b003      	add	sp, #12
 800a428:	f85d fb04 	ldr.w	pc, [sp], #4
 800a42c:	4668      	mov	r0, sp
 800a42e:	f001 f85b 	bl	800b4e8 <__ieee754_rem_pio2f>
 800a432:	0040      	lsls	r0, r0, #1
 800a434:	f000 0002 	and.w	r0, r0, #2
 800a438:	eddd 0a01 	vldr	s1, [sp, #4]
 800a43c:	ed9d 0a00 	vldr	s0, [sp]
 800a440:	f1c0 0001 	rsb	r0, r0, #1
 800a444:	f001 fcaa 	bl	800bd9c <__kernel_tanf>
 800a448:	e7ed      	b.n	800a426 <tanf+0x2a>
 800a44a:	bf00      	nop
 800a44c:	3f490fda 	.word	0x3f490fda
 800a450:	00000000 	.word	0x00000000

0800a454 <sqrtl>:
 800a454:	f000 b8b8 	b.w	800a5c8 <sqrt>

0800a458 <exp>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	ed2d 8b02 	vpush	{d8}
 800a45e:	ec55 4b10 	vmov	r4, r5, d0
 800a462:	f000 f8dd 	bl	800a620 <__ieee754_exp>
 800a466:	eeb0 8a40 	vmov.f32	s16, s0
 800a46a:	eef0 8a60 	vmov.f32	s17, s1
 800a46e:	ec45 4b10 	vmov	d0, r4, r5
 800a472:	f001 fdac 	bl	800bfce <finite>
 800a476:	b168      	cbz	r0, 800a494 <exp+0x3c>
 800a478:	a317      	add	r3, pc, #92	; (adr r3, 800a4d8 <exp+0x80>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	4620      	mov	r0, r4
 800a480:	4629      	mov	r1, r5
 800a482:	f7f6 fb71 	bl	8000b68 <__aeabi_dcmpgt>
 800a486:	b160      	cbz	r0, 800a4a2 <exp+0x4a>
 800a488:	f7fe fb18 	bl	8008abc <__errno>
 800a48c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 800a4c8 <exp+0x70>
 800a490:	2322      	movs	r3, #34	; 0x22
 800a492:	6003      	str	r3, [r0, #0]
 800a494:	eeb0 0a48 	vmov.f32	s0, s16
 800a498:	eef0 0a68 	vmov.f32	s1, s17
 800a49c:	ecbd 8b02 	vpop	{d8}
 800a4a0:	bd38      	pop	{r3, r4, r5, pc}
 800a4a2:	a30f      	add	r3, pc, #60	; (adr r3, 800a4e0 <exp+0x88>)
 800a4a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a8:	4620      	mov	r0, r4
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	f7f6 fb3e 	bl	8000b2c <__aeabi_dcmplt>
 800a4b0:	2800      	cmp	r0, #0
 800a4b2:	d0ef      	beq.n	800a494 <exp+0x3c>
 800a4b4:	f7fe fb02 	bl	8008abc <__errno>
 800a4b8:	2322      	movs	r3, #34	; 0x22
 800a4ba:	ed9f 8b05 	vldr	d8, [pc, #20]	; 800a4d0 <exp+0x78>
 800a4be:	6003      	str	r3, [r0, #0]
 800a4c0:	e7e8      	b.n	800a494 <exp+0x3c>
 800a4c2:	bf00      	nop
 800a4c4:	f3af 8000 	nop.w
 800a4c8:	00000000 	.word	0x00000000
 800a4cc:	7ff00000 	.word	0x7ff00000
	...
 800a4d8:	fefa39ef 	.word	0xfefa39ef
 800a4dc:	40862e42 	.word	0x40862e42
 800a4e0:	d52d3051 	.word	0xd52d3051
 800a4e4:	c0874910 	.word	0xc0874910

0800a4e8 <pow>:
 800a4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ea:	ed2d 8b02 	vpush	{d8}
 800a4ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a4f2:	eef0 8a60 	vmov.f32	s17, s1
 800a4f6:	ec55 4b11 	vmov	r4, r5, d1
 800a4fa:	f000 fa15 	bl	800a928 <__ieee754_pow>
 800a4fe:	4622      	mov	r2, r4
 800a500:	462b      	mov	r3, r5
 800a502:	4620      	mov	r0, r4
 800a504:	4629      	mov	r1, r5
 800a506:	ec57 6b10 	vmov	r6, r7, d0
 800a50a:	f7f6 fb37 	bl	8000b7c <__aeabi_dcmpun>
 800a50e:	2800      	cmp	r0, #0
 800a510:	d13b      	bne.n	800a58a <pow+0xa2>
 800a512:	ec51 0b18 	vmov	r0, r1, d8
 800a516:	2200      	movs	r2, #0
 800a518:	2300      	movs	r3, #0
 800a51a:	f7f6 fafd 	bl	8000b18 <__aeabi_dcmpeq>
 800a51e:	b1b8      	cbz	r0, 800a550 <pow+0x68>
 800a520:	2200      	movs	r2, #0
 800a522:	2300      	movs	r3, #0
 800a524:	4620      	mov	r0, r4
 800a526:	4629      	mov	r1, r5
 800a528:	f7f6 faf6 	bl	8000b18 <__aeabi_dcmpeq>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d146      	bne.n	800a5be <pow+0xd6>
 800a530:	ec45 4b10 	vmov	d0, r4, r5
 800a534:	f001 fd4b 	bl	800bfce <finite>
 800a538:	b338      	cbz	r0, 800a58a <pow+0xa2>
 800a53a:	2200      	movs	r2, #0
 800a53c:	2300      	movs	r3, #0
 800a53e:	4620      	mov	r0, r4
 800a540:	4629      	mov	r1, r5
 800a542:	f7f6 faf3 	bl	8000b2c <__aeabi_dcmplt>
 800a546:	b300      	cbz	r0, 800a58a <pow+0xa2>
 800a548:	f7fe fab8 	bl	8008abc <__errno>
 800a54c:	2322      	movs	r3, #34	; 0x22
 800a54e:	e01b      	b.n	800a588 <pow+0xa0>
 800a550:	ec47 6b10 	vmov	d0, r6, r7
 800a554:	f001 fd3b 	bl	800bfce <finite>
 800a558:	b9e0      	cbnz	r0, 800a594 <pow+0xac>
 800a55a:	eeb0 0a48 	vmov.f32	s0, s16
 800a55e:	eef0 0a68 	vmov.f32	s1, s17
 800a562:	f001 fd34 	bl	800bfce <finite>
 800a566:	b1a8      	cbz	r0, 800a594 <pow+0xac>
 800a568:	ec45 4b10 	vmov	d0, r4, r5
 800a56c:	f001 fd2f 	bl	800bfce <finite>
 800a570:	b180      	cbz	r0, 800a594 <pow+0xac>
 800a572:	4632      	mov	r2, r6
 800a574:	463b      	mov	r3, r7
 800a576:	4630      	mov	r0, r6
 800a578:	4639      	mov	r1, r7
 800a57a:	f7f6 faff 	bl	8000b7c <__aeabi_dcmpun>
 800a57e:	2800      	cmp	r0, #0
 800a580:	d0e2      	beq.n	800a548 <pow+0x60>
 800a582:	f7fe fa9b 	bl	8008abc <__errno>
 800a586:	2321      	movs	r3, #33	; 0x21
 800a588:	6003      	str	r3, [r0, #0]
 800a58a:	ecbd 8b02 	vpop	{d8}
 800a58e:	ec47 6b10 	vmov	d0, r6, r7
 800a592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a594:	2200      	movs	r2, #0
 800a596:	2300      	movs	r3, #0
 800a598:	4630      	mov	r0, r6
 800a59a:	4639      	mov	r1, r7
 800a59c:	f7f6 fabc 	bl	8000b18 <__aeabi_dcmpeq>
 800a5a0:	2800      	cmp	r0, #0
 800a5a2:	d0f2      	beq.n	800a58a <pow+0xa2>
 800a5a4:	eeb0 0a48 	vmov.f32	s0, s16
 800a5a8:	eef0 0a68 	vmov.f32	s1, s17
 800a5ac:	f001 fd0f 	bl	800bfce <finite>
 800a5b0:	2800      	cmp	r0, #0
 800a5b2:	d0ea      	beq.n	800a58a <pow+0xa2>
 800a5b4:	ec45 4b10 	vmov	d0, r4, r5
 800a5b8:	f001 fd09 	bl	800bfce <finite>
 800a5bc:	e7c3      	b.n	800a546 <pow+0x5e>
 800a5be:	4f01      	ldr	r7, [pc, #4]	; (800a5c4 <pow+0xdc>)
 800a5c0:	2600      	movs	r6, #0
 800a5c2:	e7e2      	b.n	800a58a <pow+0xa2>
 800a5c4:	3ff00000 	.word	0x3ff00000

0800a5c8 <sqrt>:
 800a5c8:	b538      	push	{r3, r4, r5, lr}
 800a5ca:	ed2d 8b02 	vpush	{d8}
 800a5ce:	ec55 4b10 	vmov	r4, r5, d0
 800a5d2:	f000 fed7 	bl	800b384 <__ieee754_sqrt>
 800a5d6:	4622      	mov	r2, r4
 800a5d8:	462b      	mov	r3, r5
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4629      	mov	r1, r5
 800a5de:	eeb0 8a40 	vmov.f32	s16, s0
 800a5e2:	eef0 8a60 	vmov.f32	s17, s1
 800a5e6:	f7f6 fac9 	bl	8000b7c <__aeabi_dcmpun>
 800a5ea:	b990      	cbnz	r0, 800a612 <sqrt+0x4a>
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	4620      	mov	r0, r4
 800a5f2:	4629      	mov	r1, r5
 800a5f4:	f7f6 fa9a 	bl	8000b2c <__aeabi_dcmplt>
 800a5f8:	b158      	cbz	r0, 800a612 <sqrt+0x4a>
 800a5fa:	f7fe fa5f 	bl	8008abc <__errno>
 800a5fe:	2321      	movs	r3, #33	; 0x21
 800a600:	6003      	str	r3, [r0, #0]
 800a602:	2200      	movs	r2, #0
 800a604:	2300      	movs	r3, #0
 800a606:	4610      	mov	r0, r2
 800a608:	4619      	mov	r1, r3
 800a60a:	f7f6 f947 	bl	800089c <__aeabi_ddiv>
 800a60e:	ec41 0b18 	vmov	d8, r0, r1
 800a612:	eeb0 0a48 	vmov.f32	s0, s16
 800a616:	eef0 0a68 	vmov.f32	s1, s17
 800a61a:	ecbd 8b02 	vpop	{d8}
 800a61e:	bd38      	pop	{r3, r4, r5, pc}

0800a620 <__ieee754_exp>:
 800a620:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a624:	ec55 4b10 	vmov	r4, r5, d0
 800a628:	49b5      	ldr	r1, [pc, #724]	; (800a900 <__ieee754_exp+0x2e0>)
 800a62a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a62e:	428b      	cmp	r3, r1
 800a630:	ed2d 8b04 	vpush	{d8-d9}
 800a634:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800a638:	d93d      	bls.n	800a6b6 <__ieee754_exp+0x96>
 800a63a:	49b2      	ldr	r1, [pc, #712]	; (800a904 <__ieee754_exp+0x2e4>)
 800a63c:	428b      	cmp	r3, r1
 800a63e:	d918      	bls.n	800a672 <__ieee754_exp+0x52>
 800a640:	ee10 3a10 	vmov	r3, s0
 800a644:	f3c5 0213 	ubfx	r2, r5, #0, #20
 800a648:	4313      	orrs	r3, r2
 800a64a:	d009      	beq.n	800a660 <__ieee754_exp+0x40>
 800a64c:	ee10 2a10 	vmov	r2, s0
 800a650:	462b      	mov	r3, r5
 800a652:	4620      	mov	r0, r4
 800a654:	4629      	mov	r1, r5
 800a656:	f7f5 fe41 	bl	80002dc <__adddf3>
 800a65a:	4604      	mov	r4, r0
 800a65c:	460d      	mov	r5, r1
 800a65e:	e002      	b.n	800a666 <__ieee754_exp+0x46>
 800a660:	b10e      	cbz	r6, 800a666 <__ieee754_exp+0x46>
 800a662:	2400      	movs	r4, #0
 800a664:	2500      	movs	r5, #0
 800a666:	ecbd 8b04 	vpop	{d8-d9}
 800a66a:	ec45 4b10 	vmov	d0, r4, r5
 800a66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a672:	a38d      	add	r3, pc, #564	; (adr r3, 800a8a8 <__ieee754_exp+0x288>)
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	ee10 0a10 	vmov	r0, s0
 800a67c:	4629      	mov	r1, r5
 800a67e:	f7f6 fa73 	bl	8000b68 <__aeabi_dcmpgt>
 800a682:	4607      	mov	r7, r0
 800a684:	b130      	cbz	r0, 800a694 <__ieee754_exp+0x74>
 800a686:	ecbd 8b04 	vpop	{d8-d9}
 800a68a:	2000      	movs	r0, #0
 800a68c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a690:	f001 bc8b 	b.w	800bfaa <__math_oflow>
 800a694:	a386      	add	r3, pc, #536	; (adr r3, 800a8b0 <__ieee754_exp+0x290>)
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	4620      	mov	r0, r4
 800a69c:	4629      	mov	r1, r5
 800a69e:	f7f6 fa45 	bl	8000b2c <__aeabi_dcmplt>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	f000 808b 	beq.w	800a7be <__ieee754_exp+0x19e>
 800a6a8:	ecbd 8b04 	vpop	{d8-d9}
 800a6ac:	4638      	mov	r0, r7
 800a6ae:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b2:	f001 bc71 	b.w	800bf98 <__math_uflow>
 800a6b6:	4a94      	ldr	r2, [pc, #592]	; (800a908 <__ieee754_exp+0x2e8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	f240 80ac 	bls.w	800a816 <__ieee754_exp+0x1f6>
 800a6be:	4a93      	ldr	r2, [pc, #588]	; (800a90c <__ieee754_exp+0x2ec>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d87c      	bhi.n	800a7be <__ieee754_exp+0x19e>
 800a6c4:	4b92      	ldr	r3, [pc, #584]	; (800a910 <__ieee754_exp+0x2f0>)
 800a6c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	ee10 0a10 	vmov	r0, s0
 800a6d2:	4629      	mov	r1, r5
 800a6d4:	f7f5 fe00 	bl	80002d8 <__aeabi_dsub>
 800a6d8:	4b8e      	ldr	r3, [pc, #568]	; (800a914 <__ieee754_exp+0x2f4>)
 800a6da:	00f7      	lsls	r7, r6, #3
 800a6dc:	443b      	add	r3, r7
 800a6de:	ed93 7b00 	vldr	d7, [r3]
 800a6e2:	f1c6 0a01 	rsb	sl, r6, #1
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	ebaa 0a06 	sub.w	sl, sl, r6
 800a6ee:	eeb0 8a47 	vmov.f32	s16, s14
 800a6f2:	eef0 8a67 	vmov.f32	s17, s15
 800a6f6:	ec53 2b18 	vmov	r2, r3, d8
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	f7f5 fdeb 	bl	80002d8 <__aeabi_dsub>
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	4622      	mov	r2, r4
 800a708:	462b      	mov	r3, r5
 800a70a:	4620      	mov	r0, r4
 800a70c:	4629      	mov	r1, r5
 800a70e:	f7f5 ff9b 	bl	8000648 <__aeabi_dmul>
 800a712:	a369      	add	r3, pc, #420	; (adr r3, 800a8b8 <__ieee754_exp+0x298>)
 800a714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a718:	4606      	mov	r6, r0
 800a71a:	460f      	mov	r7, r1
 800a71c:	f7f5 ff94 	bl	8000648 <__aeabi_dmul>
 800a720:	a367      	add	r3, pc, #412	; (adr r3, 800a8c0 <__ieee754_exp+0x2a0>)
 800a722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a726:	f7f5 fdd7 	bl	80002d8 <__aeabi_dsub>
 800a72a:	4632      	mov	r2, r6
 800a72c:	463b      	mov	r3, r7
 800a72e:	f7f5 ff8b 	bl	8000648 <__aeabi_dmul>
 800a732:	a365      	add	r3, pc, #404	; (adr r3, 800a8c8 <__ieee754_exp+0x2a8>)
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	f7f5 fdd0 	bl	80002dc <__adddf3>
 800a73c:	4632      	mov	r2, r6
 800a73e:	463b      	mov	r3, r7
 800a740:	f7f5 ff82 	bl	8000648 <__aeabi_dmul>
 800a744:	a362      	add	r3, pc, #392	; (adr r3, 800a8d0 <__ieee754_exp+0x2b0>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fdc5 	bl	80002d8 <__aeabi_dsub>
 800a74e:	4632      	mov	r2, r6
 800a750:	463b      	mov	r3, r7
 800a752:	f7f5 ff79 	bl	8000648 <__aeabi_dmul>
 800a756:	a360      	add	r3, pc, #384	; (adr r3, 800a8d8 <__ieee754_exp+0x2b8>)
 800a758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a75c:	f7f5 fdbe 	bl	80002dc <__adddf3>
 800a760:	4632      	mov	r2, r6
 800a762:	463b      	mov	r3, r7
 800a764:	f7f5 ff70 	bl	8000648 <__aeabi_dmul>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4620      	mov	r0, r4
 800a76e:	4629      	mov	r1, r5
 800a770:	f7f5 fdb2 	bl	80002d8 <__aeabi_dsub>
 800a774:	4602      	mov	r2, r0
 800a776:	460b      	mov	r3, r1
 800a778:	4606      	mov	r6, r0
 800a77a:	460f      	mov	r7, r1
 800a77c:	4620      	mov	r0, r4
 800a77e:	4629      	mov	r1, r5
 800a780:	f7f5 ff62 	bl	8000648 <__aeabi_dmul>
 800a784:	ec41 0b19 	vmov	d9, r0, r1
 800a788:	f1ba 0f00 	cmp.w	sl, #0
 800a78c:	d15d      	bne.n	800a84a <__ieee754_exp+0x22a>
 800a78e:	2200      	movs	r2, #0
 800a790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a794:	4630      	mov	r0, r6
 800a796:	4639      	mov	r1, r7
 800a798:	f7f5 fd9e 	bl	80002d8 <__aeabi_dsub>
 800a79c:	4602      	mov	r2, r0
 800a79e:	460b      	mov	r3, r1
 800a7a0:	ec51 0b19 	vmov	r0, r1, d9
 800a7a4:	f7f6 f87a 	bl	800089c <__aeabi_ddiv>
 800a7a8:	4622      	mov	r2, r4
 800a7aa:	462b      	mov	r3, r5
 800a7ac:	f7f5 fd94 	bl	80002d8 <__aeabi_dsub>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	2000      	movs	r0, #0
 800a7b6:	4958      	ldr	r1, [pc, #352]	; (800a918 <__ieee754_exp+0x2f8>)
 800a7b8:	f7f5 fd8e 	bl	80002d8 <__aeabi_dsub>
 800a7bc:	e74d      	b.n	800a65a <__ieee754_exp+0x3a>
 800a7be:	4857      	ldr	r0, [pc, #348]	; (800a91c <__ieee754_exp+0x2fc>)
 800a7c0:	a347      	add	r3, pc, #284	; (adr r3, 800a8e0 <__ieee754_exp+0x2c0>)
 800a7c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7c6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 800a7ca:	4629      	mov	r1, r5
 800a7cc:	4620      	mov	r0, r4
 800a7ce:	f7f5 ff3b 	bl	8000648 <__aeabi_dmul>
 800a7d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a7d6:	f7f5 fd81 	bl	80002dc <__adddf3>
 800a7da:	f7f6 f9e5 	bl	8000ba8 <__aeabi_d2iz>
 800a7de:	4682      	mov	sl, r0
 800a7e0:	f7f5 fec8 	bl	8000574 <__aeabi_i2d>
 800a7e4:	a340      	add	r3, pc, #256	; (adr r3, 800a8e8 <__ieee754_exp+0x2c8>)
 800a7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ea:	4606      	mov	r6, r0
 800a7ec:	460f      	mov	r7, r1
 800a7ee:	f7f5 ff2b 	bl	8000648 <__aeabi_dmul>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	460b      	mov	r3, r1
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f7f5 fd6d 	bl	80002d8 <__aeabi_dsub>
 800a7fe:	a33c      	add	r3, pc, #240	; (adr r3, 800a8f0 <__ieee754_exp+0x2d0>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	4680      	mov	r8, r0
 800a806:	4689      	mov	r9, r1
 800a808:	4630      	mov	r0, r6
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f5 ff1c 	bl	8000648 <__aeabi_dmul>
 800a810:	ec41 0b18 	vmov	d8, r0, r1
 800a814:	e76f      	b.n	800a6f6 <__ieee754_exp+0xd6>
 800a816:	4a42      	ldr	r2, [pc, #264]	; (800a920 <__ieee754_exp+0x300>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d811      	bhi.n	800a840 <__ieee754_exp+0x220>
 800a81c:	a336      	add	r3, pc, #216	; (adr r3, 800a8f8 <__ieee754_exp+0x2d8>)
 800a81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a822:	ee10 0a10 	vmov	r0, s0
 800a826:	4629      	mov	r1, r5
 800a828:	f7f5 fd58 	bl	80002dc <__adddf3>
 800a82c:	4b3a      	ldr	r3, [pc, #232]	; (800a918 <__ieee754_exp+0x2f8>)
 800a82e:	2200      	movs	r2, #0
 800a830:	f7f6 f99a 	bl	8000b68 <__aeabi_dcmpgt>
 800a834:	b138      	cbz	r0, 800a846 <__ieee754_exp+0x226>
 800a836:	4b38      	ldr	r3, [pc, #224]	; (800a918 <__ieee754_exp+0x2f8>)
 800a838:	2200      	movs	r2, #0
 800a83a:	4620      	mov	r0, r4
 800a83c:	4629      	mov	r1, r5
 800a83e:	e70a      	b.n	800a656 <__ieee754_exp+0x36>
 800a840:	f04f 0a00 	mov.w	sl, #0
 800a844:	e75f      	b.n	800a706 <__ieee754_exp+0xe6>
 800a846:	4682      	mov	sl, r0
 800a848:	e75d      	b.n	800a706 <__ieee754_exp+0xe6>
 800a84a:	4632      	mov	r2, r6
 800a84c:	463b      	mov	r3, r7
 800a84e:	2000      	movs	r0, #0
 800a850:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a854:	f7f5 fd40 	bl	80002d8 <__aeabi_dsub>
 800a858:	4602      	mov	r2, r0
 800a85a:	460b      	mov	r3, r1
 800a85c:	ec51 0b19 	vmov	r0, r1, d9
 800a860:	f7f6 f81c 	bl	800089c <__aeabi_ddiv>
 800a864:	4602      	mov	r2, r0
 800a866:	460b      	mov	r3, r1
 800a868:	ec51 0b18 	vmov	r0, r1, d8
 800a86c:	f7f5 fd34 	bl	80002d8 <__aeabi_dsub>
 800a870:	4642      	mov	r2, r8
 800a872:	464b      	mov	r3, r9
 800a874:	f7f5 fd30 	bl	80002d8 <__aeabi_dsub>
 800a878:	4602      	mov	r2, r0
 800a87a:	460b      	mov	r3, r1
 800a87c:	2000      	movs	r0, #0
 800a87e:	4926      	ldr	r1, [pc, #152]	; (800a918 <__ieee754_exp+0x2f8>)
 800a880:	f7f5 fd2a 	bl	80002d8 <__aeabi_dsub>
 800a884:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 800a888:	4592      	cmp	sl, r2
 800a88a:	db02      	blt.n	800a892 <__ieee754_exp+0x272>
 800a88c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a890:	e6e3      	b.n	800a65a <__ieee754_exp+0x3a>
 800a892:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 800a896:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800a89a:	2200      	movs	r2, #0
 800a89c:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800a8a0:	f7f5 fed2 	bl	8000648 <__aeabi_dmul>
 800a8a4:	e6d9      	b.n	800a65a <__ieee754_exp+0x3a>
 800a8a6:	bf00      	nop
 800a8a8:	fefa39ef 	.word	0xfefa39ef
 800a8ac:	40862e42 	.word	0x40862e42
 800a8b0:	d52d3051 	.word	0xd52d3051
 800a8b4:	c0874910 	.word	0xc0874910
 800a8b8:	72bea4d0 	.word	0x72bea4d0
 800a8bc:	3e663769 	.word	0x3e663769
 800a8c0:	c5d26bf1 	.word	0xc5d26bf1
 800a8c4:	3ebbbd41 	.word	0x3ebbbd41
 800a8c8:	af25de2c 	.word	0xaf25de2c
 800a8cc:	3f11566a 	.word	0x3f11566a
 800a8d0:	16bebd93 	.word	0x16bebd93
 800a8d4:	3f66c16c 	.word	0x3f66c16c
 800a8d8:	5555553e 	.word	0x5555553e
 800a8dc:	3fc55555 	.word	0x3fc55555
 800a8e0:	652b82fe 	.word	0x652b82fe
 800a8e4:	3ff71547 	.word	0x3ff71547
 800a8e8:	fee00000 	.word	0xfee00000
 800a8ec:	3fe62e42 	.word	0x3fe62e42
 800a8f0:	35793c76 	.word	0x35793c76
 800a8f4:	3dea39ef 	.word	0x3dea39ef
 800a8f8:	8800759c 	.word	0x8800759c
 800a8fc:	7e37e43c 	.word	0x7e37e43c
 800a900:	40862e41 	.word	0x40862e41
 800a904:	7fefffff 	.word	0x7fefffff
 800a908:	3fd62e42 	.word	0x3fd62e42
 800a90c:	3ff0a2b1 	.word	0x3ff0a2b1
 800a910:	080790c8 	.word	0x080790c8
 800a914:	080790d8 	.word	0x080790d8
 800a918:	3ff00000 	.word	0x3ff00000
 800a91c:	080790b8 	.word	0x080790b8
 800a920:	3defffff 	.word	0x3defffff
 800a924:	00000000 	.word	0x00000000

0800a928 <__ieee754_pow>:
 800a928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a92c:	ed2d 8b06 	vpush	{d8-d10}
 800a930:	b089      	sub	sp, #36	; 0x24
 800a932:	ed8d 1b00 	vstr	d1, [sp]
 800a936:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a93a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a93e:	ea58 0102 	orrs.w	r1, r8, r2
 800a942:	ec57 6b10 	vmov	r6, r7, d0
 800a946:	d115      	bne.n	800a974 <__ieee754_pow+0x4c>
 800a948:	19b3      	adds	r3, r6, r6
 800a94a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a94e:	4152      	adcs	r2, r2
 800a950:	4299      	cmp	r1, r3
 800a952:	4b89      	ldr	r3, [pc, #548]	; (800ab78 <__ieee754_pow+0x250>)
 800a954:	4193      	sbcs	r3, r2
 800a956:	f080 84d2 	bcs.w	800b2fe <__ieee754_pow+0x9d6>
 800a95a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a95e:	4630      	mov	r0, r6
 800a960:	4639      	mov	r1, r7
 800a962:	f7f5 fcbb 	bl	80002dc <__adddf3>
 800a966:	ec41 0b10 	vmov	d0, r0, r1
 800a96a:	b009      	add	sp, #36	; 0x24
 800a96c:	ecbd 8b06 	vpop	{d8-d10}
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	4b81      	ldr	r3, [pc, #516]	; (800ab7c <__ieee754_pow+0x254>)
 800a976:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a97a:	429c      	cmp	r4, r3
 800a97c:	ee10 aa10 	vmov	sl, s0
 800a980:	463d      	mov	r5, r7
 800a982:	dc06      	bgt.n	800a992 <__ieee754_pow+0x6a>
 800a984:	d101      	bne.n	800a98a <__ieee754_pow+0x62>
 800a986:	2e00      	cmp	r6, #0
 800a988:	d1e7      	bne.n	800a95a <__ieee754_pow+0x32>
 800a98a:	4598      	cmp	r8, r3
 800a98c:	dc01      	bgt.n	800a992 <__ieee754_pow+0x6a>
 800a98e:	d10f      	bne.n	800a9b0 <__ieee754_pow+0x88>
 800a990:	b172      	cbz	r2, 800a9b0 <__ieee754_pow+0x88>
 800a992:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a996:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a99a:	ea55 050a 	orrs.w	r5, r5, sl
 800a99e:	d1dc      	bne.n	800a95a <__ieee754_pow+0x32>
 800a9a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a9a4:	18db      	adds	r3, r3, r3
 800a9a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a9aa:	4152      	adcs	r2, r2
 800a9ac:	429d      	cmp	r5, r3
 800a9ae:	e7d0      	b.n	800a952 <__ieee754_pow+0x2a>
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	da3b      	bge.n	800aa2c <__ieee754_pow+0x104>
 800a9b4:	4b72      	ldr	r3, [pc, #456]	; (800ab80 <__ieee754_pow+0x258>)
 800a9b6:	4598      	cmp	r8, r3
 800a9b8:	dc51      	bgt.n	800aa5e <__ieee754_pow+0x136>
 800a9ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a9be:	4598      	cmp	r8, r3
 800a9c0:	f340 84ac 	ble.w	800b31c <__ieee754_pow+0x9f4>
 800a9c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a9c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a9cc:	2b14      	cmp	r3, #20
 800a9ce:	dd0f      	ble.n	800a9f0 <__ieee754_pow+0xc8>
 800a9d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a9d4:	fa22 f103 	lsr.w	r1, r2, r3
 800a9d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	f040 849d 	bne.w	800b31c <__ieee754_pow+0x9f4>
 800a9e2:	f001 0101 	and.w	r1, r1, #1
 800a9e6:	f1c1 0302 	rsb	r3, r1, #2
 800a9ea:	9304      	str	r3, [sp, #16]
 800a9ec:	b182      	cbz	r2, 800aa10 <__ieee754_pow+0xe8>
 800a9ee:	e05f      	b.n	800aab0 <__ieee754_pow+0x188>
 800a9f0:	2a00      	cmp	r2, #0
 800a9f2:	d15b      	bne.n	800aaac <__ieee754_pow+0x184>
 800a9f4:	f1c3 0314 	rsb	r3, r3, #20
 800a9f8:	fa48 f103 	asr.w	r1, r8, r3
 800a9fc:	fa01 f303 	lsl.w	r3, r1, r3
 800aa00:	4543      	cmp	r3, r8
 800aa02:	f040 8488 	bne.w	800b316 <__ieee754_pow+0x9ee>
 800aa06:	f001 0101 	and.w	r1, r1, #1
 800aa0a:	f1c1 0302 	rsb	r3, r1, #2
 800aa0e:	9304      	str	r3, [sp, #16]
 800aa10:	4b5c      	ldr	r3, [pc, #368]	; (800ab84 <__ieee754_pow+0x25c>)
 800aa12:	4598      	cmp	r8, r3
 800aa14:	d132      	bne.n	800aa7c <__ieee754_pow+0x154>
 800aa16:	f1b9 0f00 	cmp.w	r9, #0
 800aa1a:	f280 8478 	bge.w	800b30e <__ieee754_pow+0x9e6>
 800aa1e:	4959      	ldr	r1, [pc, #356]	; (800ab84 <__ieee754_pow+0x25c>)
 800aa20:	4632      	mov	r2, r6
 800aa22:	463b      	mov	r3, r7
 800aa24:	2000      	movs	r0, #0
 800aa26:	f7f5 ff39 	bl	800089c <__aeabi_ddiv>
 800aa2a:	e79c      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9304      	str	r3, [sp, #16]
 800aa30:	2a00      	cmp	r2, #0
 800aa32:	d13d      	bne.n	800aab0 <__ieee754_pow+0x188>
 800aa34:	4b51      	ldr	r3, [pc, #324]	; (800ab7c <__ieee754_pow+0x254>)
 800aa36:	4598      	cmp	r8, r3
 800aa38:	d1ea      	bne.n	800aa10 <__ieee754_pow+0xe8>
 800aa3a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800aa3e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800aa42:	ea53 030a 	orrs.w	r3, r3, sl
 800aa46:	f000 845a 	beq.w	800b2fe <__ieee754_pow+0x9d6>
 800aa4a:	4b4f      	ldr	r3, [pc, #316]	; (800ab88 <__ieee754_pow+0x260>)
 800aa4c:	429c      	cmp	r4, r3
 800aa4e:	dd08      	ble.n	800aa62 <__ieee754_pow+0x13a>
 800aa50:	f1b9 0f00 	cmp.w	r9, #0
 800aa54:	f2c0 8457 	blt.w	800b306 <__ieee754_pow+0x9de>
 800aa58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa5c:	e783      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa5e:	2302      	movs	r3, #2
 800aa60:	e7e5      	b.n	800aa2e <__ieee754_pow+0x106>
 800aa62:	f1b9 0f00 	cmp.w	r9, #0
 800aa66:	f04f 0000 	mov.w	r0, #0
 800aa6a:	f04f 0100 	mov.w	r1, #0
 800aa6e:	f6bf af7a 	bge.w	800a966 <__ieee754_pow+0x3e>
 800aa72:	e9dd 0300 	ldrd	r0, r3, [sp]
 800aa76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800aa7a:	e774      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa7c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800aa80:	d106      	bne.n	800aa90 <__ieee754_pow+0x168>
 800aa82:	4632      	mov	r2, r6
 800aa84:	463b      	mov	r3, r7
 800aa86:	4630      	mov	r0, r6
 800aa88:	4639      	mov	r1, r7
 800aa8a:	f7f5 fddd 	bl	8000648 <__aeabi_dmul>
 800aa8e:	e76a      	b.n	800a966 <__ieee754_pow+0x3e>
 800aa90:	4b3e      	ldr	r3, [pc, #248]	; (800ab8c <__ieee754_pow+0x264>)
 800aa92:	4599      	cmp	r9, r3
 800aa94:	d10c      	bne.n	800aab0 <__ieee754_pow+0x188>
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	db0a      	blt.n	800aab0 <__ieee754_pow+0x188>
 800aa9a:	ec47 6b10 	vmov	d0, r6, r7
 800aa9e:	b009      	add	sp, #36	; 0x24
 800aaa0:	ecbd 8b06 	vpop	{d8-d10}
 800aaa4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaa8:	f000 bc6c 	b.w	800b384 <__ieee754_sqrt>
 800aaac:	2300      	movs	r3, #0
 800aaae:	9304      	str	r3, [sp, #16]
 800aab0:	ec47 6b10 	vmov	d0, r6, r7
 800aab4:	f001 fa82 	bl	800bfbc <fabs>
 800aab8:	ec51 0b10 	vmov	r0, r1, d0
 800aabc:	f1ba 0f00 	cmp.w	sl, #0
 800aac0:	d129      	bne.n	800ab16 <__ieee754_pow+0x1ee>
 800aac2:	b124      	cbz	r4, 800aace <__ieee754_pow+0x1a6>
 800aac4:	4b2f      	ldr	r3, [pc, #188]	; (800ab84 <__ieee754_pow+0x25c>)
 800aac6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d123      	bne.n	800ab16 <__ieee754_pow+0x1ee>
 800aace:	f1b9 0f00 	cmp.w	r9, #0
 800aad2:	da05      	bge.n	800aae0 <__ieee754_pow+0x1b8>
 800aad4:	4602      	mov	r2, r0
 800aad6:	460b      	mov	r3, r1
 800aad8:	2000      	movs	r0, #0
 800aada:	492a      	ldr	r1, [pc, #168]	; (800ab84 <__ieee754_pow+0x25c>)
 800aadc:	f7f5 fede 	bl	800089c <__aeabi_ddiv>
 800aae0:	2d00      	cmp	r5, #0
 800aae2:	f6bf af40 	bge.w	800a966 <__ieee754_pow+0x3e>
 800aae6:	9b04      	ldr	r3, [sp, #16]
 800aae8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aaec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aaf0:	4323      	orrs	r3, r4
 800aaf2:	d108      	bne.n	800ab06 <__ieee754_pow+0x1de>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4619      	mov	r1, r3
 800aafc:	f7f5 fbec 	bl	80002d8 <__aeabi_dsub>
 800ab00:	4602      	mov	r2, r0
 800ab02:	460b      	mov	r3, r1
 800ab04:	e78f      	b.n	800aa26 <__ieee754_pow+0xfe>
 800ab06:	9b04      	ldr	r3, [sp, #16]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	f47f af2c 	bne.w	800a966 <__ieee754_pow+0x3e>
 800ab0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab12:	4619      	mov	r1, r3
 800ab14:	e727      	b.n	800a966 <__ieee754_pow+0x3e>
 800ab16:	0feb      	lsrs	r3, r5, #31
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	9306      	str	r3, [sp, #24]
 800ab1c:	9a06      	ldr	r2, [sp, #24]
 800ab1e:	9b04      	ldr	r3, [sp, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	d102      	bne.n	800ab2a <__ieee754_pow+0x202>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	e7e6      	b.n	800aaf8 <__ieee754_pow+0x1d0>
 800ab2a:	4b19      	ldr	r3, [pc, #100]	; (800ab90 <__ieee754_pow+0x268>)
 800ab2c:	4598      	cmp	r8, r3
 800ab2e:	f340 80fb 	ble.w	800ad28 <__ieee754_pow+0x400>
 800ab32:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ab36:	4598      	cmp	r8, r3
 800ab38:	4b13      	ldr	r3, [pc, #76]	; (800ab88 <__ieee754_pow+0x260>)
 800ab3a:	dd0c      	ble.n	800ab56 <__ieee754_pow+0x22e>
 800ab3c:	429c      	cmp	r4, r3
 800ab3e:	dc0f      	bgt.n	800ab60 <__ieee754_pow+0x238>
 800ab40:	f1b9 0f00 	cmp.w	r9, #0
 800ab44:	da0f      	bge.n	800ab66 <__ieee754_pow+0x23e>
 800ab46:	2000      	movs	r0, #0
 800ab48:	b009      	add	sp, #36	; 0x24
 800ab4a:	ecbd 8b06 	vpop	{d8-d10}
 800ab4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab52:	f001 ba2a 	b.w	800bfaa <__math_oflow>
 800ab56:	429c      	cmp	r4, r3
 800ab58:	dbf2      	blt.n	800ab40 <__ieee754_pow+0x218>
 800ab5a:	4b0a      	ldr	r3, [pc, #40]	; (800ab84 <__ieee754_pow+0x25c>)
 800ab5c:	429c      	cmp	r4, r3
 800ab5e:	dd19      	ble.n	800ab94 <__ieee754_pow+0x26c>
 800ab60:	f1b9 0f00 	cmp.w	r9, #0
 800ab64:	dcef      	bgt.n	800ab46 <__ieee754_pow+0x21e>
 800ab66:	2000      	movs	r0, #0
 800ab68:	b009      	add	sp, #36	; 0x24
 800ab6a:	ecbd 8b06 	vpop	{d8-d10}
 800ab6e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab72:	f001 ba11 	b.w	800bf98 <__math_uflow>
 800ab76:	bf00      	nop
 800ab78:	fff00000 	.word	0xfff00000
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	433fffff 	.word	0x433fffff
 800ab84:	3ff00000 	.word	0x3ff00000
 800ab88:	3fefffff 	.word	0x3fefffff
 800ab8c:	3fe00000 	.word	0x3fe00000
 800ab90:	41e00000 	.word	0x41e00000
 800ab94:	4b60      	ldr	r3, [pc, #384]	; (800ad18 <__ieee754_pow+0x3f0>)
 800ab96:	2200      	movs	r2, #0
 800ab98:	f7f5 fb9e 	bl	80002d8 <__aeabi_dsub>
 800ab9c:	a354      	add	r3, pc, #336	; (adr r3, 800acf0 <__ieee754_pow+0x3c8>)
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	4604      	mov	r4, r0
 800aba4:	460d      	mov	r5, r1
 800aba6:	f7f5 fd4f 	bl	8000648 <__aeabi_dmul>
 800abaa:	a353      	add	r3, pc, #332	; (adr r3, 800acf8 <__ieee754_pow+0x3d0>)
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	4606      	mov	r6, r0
 800abb2:	460f      	mov	r7, r1
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fd46 	bl	8000648 <__aeabi_dmul>
 800abbc:	4b57      	ldr	r3, [pc, #348]	; (800ad1c <__ieee754_pow+0x3f4>)
 800abbe:	4682      	mov	sl, r0
 800abc0:	468b      	mov	fp, r1
 800abc2:	2200      	movs	r2, #0
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f7f5 fd3e 	bl	8000648 <__aeabi_dmul>
 800abcc:	4602      	mov	r2, r0
 800abce:	460b      	mov	r3, r1
 800abd0:	a14b      	add	r1, pc, #300	; (adr r1, 800ad00 <__ieee754_pow+0x3d8>)
 800abd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abd6:	f7f5 fb7f 	bl	80002d8 <__aeabi_dsub>
 800abda:	4622      	mov	r2, r4
 800abdc:	462b      	mov	r3, r5
 800abde:	f7f5 fd33 	bl	8000648 <__aeabi_dmul>
 800abe2:	4602      	mov	r2, r0
 800abe4:	460b      	mov	r3, r1
 800abe6:	2000      	movs	r0, #0
 800abe8:	494d      	ldr	r1, [pc, #308]	; (800ad20 <__ieee754_pow+0x3f8>)
 800abea:	f7f5 fb75 	bl	80002d8 <__aeabi_dsub>
 800abee:	4622      	mov	r2, r4
 800abf0:	4680      	mov	r8, r0
 800abf2:	4689      	mov	r9, r1
 800abf4:	462b      	mov	r3, r5
 800abf6:	4620      	mov	r0, r4
 800abf8:	4629      	mov	r1, r5
 800abfa:	f7f5 fd25 	bl	8000648 <__aeabi_dmul>
 800abfe:	4602      	mov	r2, r0
 800ac00:	460b      	mov	r3, r1
 800ac02:	4640      	mov	r0, r8
 800ac04:	4649      	mov	r1, r9
 800ac06:	f7f5 fd1f 	bl	8000648 <__aeabi_dmul>
 800ac0a:	a33f      	add	r3, pc, #252	; (adr r3, 800ad08 <__ieee754_pow+0x3e0>)
 800ac0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac10:	f7f5 fd1a 	bl	8000648 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4650      	mov	r0, sl
 800ac1a:	4659      	mov	r1, fp
 800ac1c:	f7f5 fb5c 	bl	80002d8 <__aeabi_dsub>
 800ac20:	4602      	mov	r2, r0
 800ac22:	460b      	mov	r3, r1
 800ac24:	4680      	mov	r8, r0
 800ac26:	4689      	mov	r9, r1
 800ac28:	4630      	mov	r0, r6
 800ac2a:	4639      	mov	r1, r7
 800ac2c:	f7f5 fb56 	bl	80002dc <__adddf3>
 800ac30:	2000      	movs	r0, #0
 800ac32:	4632      	mov	r2, r6
 800ac34:	463b      	mov	r3, r7
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	f7f5 fb4d 	bl	80002d8 <__aeabi_dsub>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	460b      	mov	r3, r1
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	f7f5 fb47 	bl	80002d8 <__aeabi_dsub>
 800ac4a:	9b04      	ldr	r3, [sp, #16]
 800ac4c:	9a06      	ldr	r2, [sp, #24]
 800ac4e:	3b01      	subs	r3, #1
 800ac50:	4313      	orrs	r3, r2
 800ac52:	4682      	mov	sl, r0
 800ac54:	468b      	mov	fp, r1
 800ac56:	f040 81e7 	bne.w	800b028 <__ieee754_pow+0x700>
 800ac5a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ad10 <__ieee754_pow+0x3e8>
 800ac5e:	eeb0 8a47 	vmov.f32	s16, s14
 800ac62:	eef0 8a67 	vmov.f32	s17, s15
 800ac66:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ac6a:	2600      	movs	r6, #0
 800ac6c:	4632      	mov	r2, r6
 800ac6e:	463b      	mov	r3, r7
 800ac70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac74:	f7f5 fb30 	bl	80002d8 <__aeabi_dsub>
 800ac78:	4622      	mov	r2, r4
 800ac7a:	462b      	mov	r3, r5
 800ac7c:	f7f5 fce4 	bl	8000648 <__aeabi_dmul>
 800ac80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac84:	4680      	mov	r8, r0
 800ac86:	4689      	mov	r9, r1
 800ac88:	4650      	mov	r0, sl
 800ac8a:	4659      	mov	r1, fp
 800ac8c:	f7f5 fcdc 	bl	8000648 <__aeabi_dmul>
 800ac90:	4602      	mov	r2, r0
 800ac92:	460b      	mov	r3, r1
 800ac94:	4640      	mov	r0, r8
 800ac96:	4649      	mov	r1, r9
 800ac98:	f7f5 fb20 	bl	80002dc <__adddf3>
 800ac9c:	4632      	mov	r2, r6
 800ac9e:	463b      	mov	r3, r7
 800aca0:	4680      	mov	r8, r0
 800aca2:	4689      	mov	r9, r1
 800aca4:	4620      	mov	r0, r4
 800aca6:	4629      	mov	r1, r5
 800aca8:	f7f5 fcce 	bl	8000648 <__aeabi_dmul>
 800acac:	460b      	mov	r3, r1
 800acae:	4604      	mov	r4, r0
 800acb0:	460d      	mov	r5, r1
 800acb2:	4602      	mov	r2, r0
 800acb4:	4649      	mov	r1, r9
 800acb6:	4640      	mov	r0, r8
 800acb8:	f7f5 fb10 	bl	80002dc <__adddf3>
 800acbc:	4b19      	ldr	r3, [pc, #100]	; (800ad24 <__ieee754_pow+0x3fc>)
 800acbe:	4299      	cmp	r1, r3
 800acc0:	ec45 4b19 	vmov	d9, r4, r5
 800acc4:	4606      	mov	r6, r0
 800acc6:	460f      	mov	r7, r1
 800acc8:	468b      	mov	fp, r1
 800acca:	f340 82f1 	ble.w	800b2b0 <__ieee754_pow+0x988>
 800acce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800acd2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800acd6:	4303      	orrs	r3, r0
 800acd8:	f000 81e4 	beq.w	800b0a4 <__ieee754_pow+0x77c>
 800acdc:	ec51 0b18 	vmov	r0, r1, d8
 800ace0:	2200      	movs	r2, #0
 800ace2:	2300      	movs	r3, #0
 800ace4:	f7f5 ff22 	bl	8000b2c <__aeabi_dcmplt>
 800ace8:	3800      	subs	r0, #0
 800acea:	bf18      	it	ne
 800acec:	2001      	movne	r0, #1
 800acee:	e72b      	b.n	800ab48 <__ieee754_pow+0x220>
 800acf0:	60000000 	.word	0x60000000
 800acf4:	3ff71547 	.word	0x3ff71547
 800acf8:	f85ddf44 	.word	0xf85ddf44
 800acfc:	3e54ae0b 	.word	0x3e54ae0b
 800ad00:	55555555 	.word	0x55555555
 800ad04:	3fd55555 	.word	0x3fd55555
 800ad08:	652b82fe 	.word	0x652b82fe
 800ad0c:	3ff71547 	.word	0x3ff71547
 800ad10:	00000000 	.word	0x00000000
 800ad14:	bff00000 	.word	0xbff00000
 800ad18:	3ff00000 	.word	0x3ff00000
 800ad1c:	3fd00000 	.word	0x3fd00000
 800ad20:	3fe00000 	.word	0x3fe00000
 800ad24:	408fffff 	.word	0x408fffff
 800ad28:	4bd5      	ldr	r3, [pc, #852]	; (800b080 <__ieee754_pow+0x758>)
 800ad2a:	402b      	ands	r3, r5
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	b92b      	cbnz	r3, 800ad3c <__ieee754_pow+0x414>
 800ad30:	4bd4      	ldr	r3, [pc, #848]	; (800b084 <__ieee754_pow+0x75c>)
 800ad32:	f7f5 fc89 	bl	8000648 <__aeabi_dmul>
 800ad36:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ad3a:	460c      	mov	r4, r1
 800ad3c:	1523      	asrs	r3, r4, #20
 800ad3e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ad42:	4413      	add	r3, r2
 800ad44:	9305      	str	r3, [sp, #20]
 800ad46:	4bd0      	ldr	r3, [pc, #832]	; (800b088 <__ieee754_pow+0x760>)
 800ad48:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ad4c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ad50:	429c      	cmp	r4, r3
 800ad52:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ad56:	dd08      	ble.n	800ad6a <__ieee754_pow+0x442>
 800ad58:	4bcc      	ldr	r3, [pc, #816]	; (800b08c <__ieee754_pow+0x764>)
 800ad5a:	429c      	cmp	r4, r3
 800ad5c:	f340 8162 	ble.w	800b024 <__ieee754_pow+0x6fc>
 800ad60:	9b05      	ldr	r3, [sp, #20]
 800ad62:	3301      	adds	r3, #1
 800ad64:	9305      	str	r3, [sp, #20]
 800ad66:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	00e3      	lsls	r3, r4, #3
 800ad6e:	9307      	str	r3, [sp, #28]
 800ad70:	4bc7      	ldr	r3, [pc, #796]	; (800b090 <__ieee754_pow+0x768>)
 800ad72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ad76:	ed93 7b00 	vldr	d7, [r3]
 800ad7a:	4629      	mov	r1, r5
 800ad7c:	ec53 2b17 	vmov	r2, r3, d7
 800ad80:	eeb0 9a47 	vmov.f32	s18, s14
 800ad84:	eef0 9a67 	vmov.f32	s19, s15
 800ad88:	4682      	mov	sl, r0
 800ad8a:	f7f5 faa5 	bl	80002d8 <__aeabi_dsub>
 800ad8e:	4652      	mov	r2, sl
 800ad90:	4606      	mov	r6, r0
 800ad92:	460f      	mov	r7, r1
 800ad94:	462b      	mov	r3, r5
 800ad96:	ec51 0b19 	vmov	r0, r1, d9
 800ad9a:	f7f5 fa9f 	bl	80002dc <__adddf3>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	460b      	mov	r3, r1
 800ada2:	2000      	movs	r0, #0
 800ada4:	49bb      	ldr	r1, [pc, #748]	; (800b094 <__ieee754_pow+0x76c>)
 800ada6:	f7f5 fd79 	bl	800089c <__aeabi_ddiv>
 800adaa:	ec41 0b1a 	vmov	d10, r0, r1
 800adae:	4602      	mov	r2, r0
 800adb0:	460b      	mov	r3, r1
 800adb2:	4630      	mov	r0, r6
 800adb4:	4639      	mov	r1, r7
 800adb6:	f7f5 fc47 	bl	8000648 <__aeabi_dmul>
 800adba:	2300      	movs	r3, #0
 800adbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adc0:	9302      	str	r3, [sp, #8]
 800adc2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800adc6:	46ab      	mov	fp, r5
 800adc8:	106d      	asrs	r5, r5, #1
 800adca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800adce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800add2:	ec41 0b18 	vmov	d8, r0, r1
 800add6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800adda:	2200      	movs	r2, #0
 800addc:	4640      	mov	r0, r8
 800adde:	4649      	mov	r1, r9
 800ade0:	4614      	mov	r4, r2
 800ade2:	461d      	mov	r5, r3
 800ade4:	f7f5 fc30 	bl	8000648 <__aeabi_dmul>
 800ade8:	4602      	mov	r2, r0
 800adea:	460b      	mov	r3, r1
 800adec:	4630      	mov	r0, r6
 800adee:	4639      	mov	r1, r7
 800adf0:	f7f5 fa72 	bl	80002d8 <__aeabi_dsub>
 800adf4:	ec53 2b19 	vmov	r2, r3, d9
 800adf8:	4606      	mov	r6, r0
 800adfa:	460f      	mov	r7, r1
 800adfc:	4620      	mov	r0, r4
 800adfe:	4629      	mov	r1, r5
 800ae00:	f7f5 fa6a 	bl	80002d8 <__aeabi_dsub>
 800ae04:	4602      	mov	r2, r0
 800ae06:	460b      	mov	r3, r1
 800ae08:	4650      	mov	r0, sl
 800ae0a:	4659      	mov	r1, fp
 800ae0c:	f7f5 fa64 	bl	80002d8 <__aeabi_dsub>
 800ae10:	4642      	mov	r2, r8
 800ae12:	464b      	mov	r3, r9
 800ae14:	f7f5 fc18 	bl	8000648 <__aeabi_dmul>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 fa5a 	bl	80002d8 <__aeabi_dsub>
 800ae24:	ec53 2b1a 	vmov	r2, r3, d10
 800ae28:	f7f5 fc0e 	bl	8000648 <__aeabi_dmul>
 800ae2c:	ec53 2b18 	vmov	r2, r3, d8
 800ae30:	ec41 0b19 	vmov	d9, r0, r1
 800ae34:	ec51 0b18 	vmov	r0, r1, d8
 800ae38:	f7f5 fc06 	bl	8000648 <__aeabi_dmul>
 800ae3c:	a37c      	add	r3, pc, #496	; (adr r3, 800b030 <__ieee754_pow+0x708>)
 800ae3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae42:	4604      	mov	r4, r0
 800ae44:	460d      	mov	r5, r1
 800ae46:	f7f5 fbff 	bl	8000648 <__aeabi_dmul>
 800ae4a:	a37b      	add	r3, pc, #492	; (adr r3, 800b038 <__ieee754_pow+0x710>)
 800ae4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae50:	f7f5 fa44 	bl	80002dc <__adddf3>
 800ae54:	4622      	mov	r2, r4
 800ae56:	462b      	mov	r3, r5
 800ae58:	f7f5 fbf6 	bl	8000648 <__aeabi_dmul>
 800ae5c:	a378      	add	r3, pc, #480	; (adr r3, 800b040 <__ieee754_pow+0x718>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fa3b 	bl	80002dc <__adddf3>
 800ae66:	4622      	mov	r2, r4
 800ae68:	462b      	mov	r3, r5
 800ae6a:	f7f5 fbed 	bl	8000648 <__aeabi_dmul>
 800ae6e:	a376      	add	r3, pc, #472	; (adr r3, 800b048 <__ieee754_pow+0x720>)
 800ae70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae74:	f7f5 fa32 	bl	80002dc <__adddf3>
 800ae78:	4622      	mov	r2, r4
 800ae7a:	462b      	mov	r3, r5
 800ae7c:	f7f5 fbe4 	bl	8000648 <__aeabi_dmul>
 800ae80:	a373      	add	r3, pc, #460	; (adr r3, 800b050 <__ieee754_pow+0x728>)
 800ae82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae86:	f7f5 fa29 	bl	80002dc <__adddf3>
 800ae8a:	4622      	mov	r2, r4
 800ae8c:	462b      	mov	r3, r5
 800ae8e:	f7f5 fbdb 	bl	8000648 <__aeabi_dmul>
 800ae92:	a371      	add	r3, pc, #452	; (adr r3, 800b058 <__ieee754_pow+0x730>)
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f7f5 fa20 	bl	80002dc <__adddf3>
 800ae9c:	4622      	mov	r2, r4
 800ae9e:	4606      	mov	r6, r0
 800aea0:	460f      	mov	r7, r1
 800aea2:	462b      	mov	r3, r5
 800aea4:	4620      	mov	r0, r4
 800aea6:	4629      	mov	r1, r5
 800aea8:	f7f5 fbce 	bl	8000648 <__aeabi_dmul>
 800aeac:	4602      	mov	r2, r0
 800aeae:	460b      	mov	r3, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 fbc8 	bl	8000648 <__aeabi_dmul>
 800aeb8:	4642      	mov	r2, r8
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	464b      	mov	r3, r9
 800aec0:	ec51 0b18 	vmov	r0, r1, d8
 800aec4:	f7f5 fa0a 	bl	80002dc <__adddf3>
 800aec8:	ec53 2b19 	vmov	r2, r3, d9
 800aecc:	f7f5 fbbc 	bl	8000648 <__aeabi_dmul>
 800aed0:	4622      	mov	r2, r4
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fa02 	bl	80002dc <__adddf3>
 800aed8:	4642      	mov	r2, r8
 800aeda:	4682      	mov	sl, r0
 800aedc:	468b      	mov	fp, r1
 800aede:	464b      	mov	r3, r9
 800aee0:	4640      	mov	r0, r8
 800aee2:	4649      	mov	r1, r9
 800aee4:	f7f5 fbb0 	bl	8000648 <__aeabi_dmul>
 800aee8:	4b6b      	ldr	r3, [pc, #428]	; (800b098 <__ieee754_pow+0x770>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	4606      	mov	r6, r0
 800aeee:	460f      	mov	r7, r1
 800aef0:	f7f5 f9f4 	bl	80002dc <__adddf3>
 800aef4:	4652      	mov	r2, sl
 800aef6:	465b      	mov	r3, fp
 800aef8:	f7f5 f9f0 	bl	80002dc <__adddf3>
 800aefc:	2000      	movs	r0, #0
 800aefe:	4604      	mov	r4, r0
 800af00:	460d      	mov	r5, r1
 800af02:	4602      	mov	r2, r0
 800af04:	460b      	mov	r3, r1
 800af06:	4640      	mov	r0, r8
 800af08:	4649      	mov	r1, r9
 800af0a:	f7f5 fb9d 	bl	8000648 <__aeabi_dmul>
 800af0e:	4b62      	ldr	r3, [pc, #392]	; (800b098 <__ieee754_pow+0x770>)
 800af10:	4680      	mov	r8, r0
 800af12:	4689      	mov	r9, r1
 800af14:	2200      	movs	r2, #0
 800af16:	4620      	mov	r0, r4
 800af18:	4629      	mov	r1, r5
 800af1a:	f7f5 f9dd 	bl	80002d8 <__aeabi_dsub>
 800af1e:	4632      	mov	r2, r6
 800af20:	463b      	mov	r3, r7
 800af22:	f7f5 f9d9 	bl	80002d8 <__aeabi_dsub>
 800af26:	4602      	mov	r2, r0
 800af28:	460b      	mov	r3, r1
 800af2a:	4650      	mov	r0, sl
 800af2c:	4659      	mov	r1, fp
 800af2e:	f7f5 f9d3 	bl	80002d8 <__aeabi_dsub>
 800af32:	ec53 2b18 	vmov	r2, r3, d8
 800af36:	f7f5 fb87 	bl	8000648 <__aeabi_dmul>
 800af3a:	4622      	mov	r2, r4
 800af3c:	4606      	mov	r6, r0
 800af3e:	460f      	mov	r7, r1
 800af40:	462b      	mov	r3, r5
 800af42:	ec51 0b19 	vmov	r0, r1, d9
 800af46:	f7f5 fb7f 	bl	8000648 <__aeabi_dmul>
 800af4a:	4602      	mov	r2, r0
 800af4c:	460b      	mov	r3, r1
 800af4e:	4630      	mov	r0, r6
 800af50:	4639      	mov	r1, r7
 800af52:	f7f5 f9c3 	bl	80002dc <__adddf3>
 800af56:	4606      	mov	r6, r0
 800af58:	460f      	mov	r7, r1
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4640      	mov	r0, r8
 800af60:	4649      	mov	r1, r9
 800af62:	f7f5 f9bb 	bl	80002dc <__adddf3>
 800af66:	a33e      	add	r3, pc, #248	; (adr r3, 800b060 <__ieee754_pow+0x738>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	2000      	movs	r0, #0
 800af6e:	4604      	mov	r4, r0
 800af70:	460d      	mov	r5, r1
 800af72:	f7f5 fb69 	bl	8000648 <__aeabi_dmul>
 800af76:	4642      	mov	r2, r8
 800af78:	ec41 0b18 	vmov	d8, r0, r1
 800af7c:	464b      	mov	r3, r9
 800af7e:	4620      	mov	r0, r4
 800af80:	4629      	mov	r1, r5
 800af82:	f7f5 f9a9 	bl	80002d8 <__aeabi_dsub>
 800af86:	4602      	mov	r2, r0
 800af88:	460b      	mov	r3, r1
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 f9a3 	bl	80002d8 <__aeabi_dsub>
 800af92:	a335      	add	r3, pc, #212	; (adr r3, 800b068 <__ieee754_pow+0x740>)
 800af94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af98:	f7f5 fb56 	bl	8000648 <__aeabi_dmul>
 800af9c:	a334      	add	r3, pc, #208	; (adr r3, 800b070 <__ieee754_pow+0x748>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	4606      	mov	r6, r0
 800afa4:	460f      	mov	r7, r1
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 fb4d 	bl	8000648 <__aeabi_dmul>
 800afae:	4602      	mov	r2, r0
 800afb0:	460b      	mov	r3, r1
 800afb2:	4630      	mov	r0, r6
 800afb4:	4639      	mov	r1, r7
 800afb6:	f7f5 f991 	bl	80002dc <__adddf3>
 800afba:	9a07      	ldr	r2, [sp, #28]
 800afbc:	4b37      	ldr	r3, [pc, #220]	; (800b09c <__ieee754_pow+0x774>)
 800afbe:	4413      	add	r3, r2
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f7f5 f98a 	bl	80002dc <__adddf3>
 800afc8:	4682      	mov	sl, r0
 800afca:	9805      	ldr	r0, [sp, #20]
 800afcc:	468b      	mov	fp, r1
 800afce:	f7f5 fad1 	bl	8000574 <__aeabi_i2d>
 800afd2:	9a07      	ldr	r2, [sp, #28]
 800afd4:	4b32      	ldr	r3, [pc, #200]	; (800b0a0 <__ieee754_pow+0x778>)
 800afd6:	4413      	add	r3, r2
 800afd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800afdc:	4606      	mov	r6, r0
 800afde:	460f      	mov	r7, r1
 800afe0:	4652      	mov	r2, sl
 800afe2:	465b      	mov	r3, fp
 800afe4:	ec51 0b18 	vmov	r0, r1, d8
 800afe8:	f7f5 f978 	bl	80002dc <__adddf3>
 800afec:	4642      	mov	r2, r8
 800afee:	464b      	mov	r3, r9
 800aff0:	f7f5 f974 	bl	80002dc <__adddf3>
 800aff4:	4632      	mov	r2, r6
 800aff6:	463b      	mov	r3, r7
 800aff8:	f7f5 f970 	bl	80002dc <__adddf3>
 800affc:	2000      	movs	r0, #0
 800affe:	4632      	mov	r2, r6
 800b000:	463b      	mov	r3, r7
 800b002:	4604      	mov	r4, r0
 800b004:	460d      	mov	r5, r1
 800b006:	f7f5 f967 	bl	80002d8 <__aeabi_dsub>
 800b00a:	4642      	mov	r2, r8
 800b00c:	464b      	mov	r3, r9
 800b00e:	f7f5 f963 	bl	80002d8 <__aeabi_dsub>
 800b012:	ec53 2b18 	vmov	r2, r3, d8
 800b016:	f7f5 f95f 	bl	80002d8 <__aeabi_dsub>
 800b01a:	4602      	mov	r2, r0
 800b01c:	460b      	mov	r3, r1
 800b01e:	4650      	mov	r0, sl
 800b020:	4659      	mov	r1, fp
 800b022:	e610      	b.n	800ac46 <__ieee754_pow+0x31e>
 800b024:	2401      	movs	r4, #1
 800b026:	e6a1      	b.n	800ad6c <__ieee754_pow+0x444>
 800b028:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b078 <__ieee754_pow+0x750>
 800b02c:	e617      	b.n	800ac5e <__ieee754_pow+0x336>
 800b02e:	bf00      	nop
 800b030:	4a454eef 	.word	0x4a454eef
 800b034:	3fca7e28 	.word	0x3fca7e28
 800b038:	93c9db65 	.word	0x93c9db65
 800b03c:	3fcd864a 	.word	0x3fcd864a
 800b040:	a91d4101 	.word	0xa91d4101
 800b044:	3fd17460 	.word	0x3fd17460
 800b048:	518f264d 	.word	0x518f264d
 800b04c:	3fd55555 	.word	0x3fd55555
 800b050:	db6fabff 	.word	0xdb6fabff
 800b054:	3fdb6db6 	.word	0x3fdb6db6
 800b058:	33333303 	.word	0x33333303
 800b05c:	3fe33333 	.word	0x3fe33333
 800b060:	e0000000 	.word	0xe0000000
 800b064:	3feec709 	.word	0x3feec709
 800b068:	dc3a03fd 	.word	0xdc3a03fd
 800b06c:	3feec709 	.word	0x3feec709
 800b070:	145b01f5 	.word	0x145b01f5
 800b074:	be3e2fe0 	.word	0xbe3e2fe0
 800b078:	00000000 	.word	0x00000000
 800b07c:	3ff00000 	.word	0x3ff00000
 800b080:	7ff00000 	.word	0x7ff00000
 800b084:	43400000 	.word	0x43400000
 800b088:	0003988e 	.word	0x0003988e
 800b08c:	000bb679 	.word	0x000bb679
 800b090:	080790e8 	.word	0x080790e8
 800b094:	3ff00000 	.word	0x3ff00000
 800b098:	40080000 	.word	0x40080000
 800b09c:	08079108 	.word	0x08079108
 800b0a0:	080790f8 	.word	0x080790f8
 800b0a4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b37c <__ieee754_pow+0xa54>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	4640      	mov	r0, r8
 800b0ac:	4649      	mov	r1, r9
 800b0ae:	f7f5 f915 	bl	80002dc <__adddf3>
 800b0b2:	4622      	mov	r2, r4
 800b0b4:	ec41 0b1a 	vmov	d10, r0, r1
 800b0b8:	462b      	mov	r3, r5
 800b0ba:	4630      	mov	r0, r6
 800b0bc:	4639      	mov	r1, r7
 800b0be:	f7f5 f90b 	bl	80002d8 <__aeabi_dsub>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	ec51 0b1a 	vmov	r0, r1, d10
 800b0ca:	f7f5 fd4d 	bl	8000b68 <__aeabi_dcmpgt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f47f ae04 	bne.w	800acdc <__ieee754_pow+0x3b4>
 800b0d4:	4aa4      	ldr	r2, [pc, #656]	; (800b368 <__ieee754_pow+0xa40>)
 800b0d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	f340 8108 	ble.w	800b2f0 <__ieee754_pow+0x9c8>
 800b0e0:	151b      	asrs	r3, r3, #20
 800b0e2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b0e6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b0ea:	fa4a f303 	asr.w	r3, sl, r3
 800b0ee:	445b      	add	r3, fp
 800b0f0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b0f4:	4e9d      	ldr	r6, [pc, #628]	; (800b36c <__ieee754_pow+0xa44>)
 800b0f6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b0fa:	4116      	asrs	r6, r2
 800b0fc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b100:	2000      	movs	r0, #0
 800b102:	ea23 0106 	bic.w	r1, r3, r6
 800b106:	f1c2 0214 	rsb	r2, r2, #20
 800b10a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b10e:	fa4a fa02 	asr.w	sl, sl, r2
 800b112:	f1bb 0f00 	cmp.w	fp, #0
 800b116:	4602      	mov	r2, r0
 800b118:	460b      	mov	r3, r1
 800b11a:	4620      	mov	r0, r4
 800b11c:	4629      	mov	r1, r5
 800b11e:	bfb8      	it	lt
 800b120:	f1ca 0a00 	rsblt	sl, sl, #0
 800b124:	f7f5 f8d8 	bl	80002d8 <__aeabi_dsub>
 800b128:	ec41 0b19 	vmov	d9, r0, r1
 800b12c:	4642      	mov	r2, r8
 800b12e:	464b      	mov	r3, r9
 800b130:	ec51 0b19 	vmov	r0, r1, d9
 800b134:	f7f5 f8d2 	bl	80002dc <__adddf3>
 800b138:	a37b      	add	r3, pc, #492	; (adr r3, 800b328 <__ieee754_pow+0xa00>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	2000      	movs	r0, #0
 800b140:	4604      	mov	r4, r0
 800b142:	460d      	mov	r5, r1
 800b144:	f7f5 fa80 	bl	8000648 <__aeabi_dmul>
 800b148:	ec53 2b19 	vmov	r2, r3, d9
 800b14c:	4606      	mov	r6, r0
 800b14e:	460f      	mov	r7, r1
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 f8c0 	bl	80002d8 <__aeabi_dsub>
 800b158:	4602      	mov	r2, r0
 800b15a:	460b      	mov	r3, r1
 800b15c:	4640      	mov	r0, r8
 800b15e:	4649      	mov	r1, r9
 800b160:	f7f5 f8ba 	bl	80002d8 <__aeabi_dsub>
 800b164:	a372      	add	r3, pc, #456	; (adr r3, 800b330 <__ieee754_pow+0xa08>)
 800b166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b16a:	f7f5 fa6d 	bl	8000648 <__aeabi_dmul>
 800b16e:	a372      	add	r3, pc, #456	; (adr r3, 800b338 <__ieee754_pow+0xa10>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	4680      	mov	r8, r0
 800b176:	4689      	mov	r9, r1
 800b178:	4620      	mov	r0, r4
 800b17a:	4629      	mov	r1, r5
 800b17c:	f7f5 fa64 	bl	8000648 <__aeabi_dmul>
 800b180:	4602      	mov	r2, r0
 800b182:	460b      	mov	r3, r1
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 f8a8 	bl	80002dc <__adddf3>
 800b18c:	4604      	mov	r4, r0
 800b18e:	460d      	mov	r5, r1
 800b190:	4602      	mov	r2, r0
 800b192:	460b      	mov	r3, r1
 800b194:	4630      	mov	r0, r6
 800b196:	4639      	mov	r1, r7
 800b198:	f7f5 f8a0 	bl	80002dc <__adddf3>
 800b19c:	4632      	mov	r2, r6
 800b19e:	463b      	mov	r3, r7
 800b1a0:	4680      	mov	r8, r0
 800b1a2:	4689      	mov	r9, r1
 800b1a4:	f7f5 f898 	bl	80002d8 <__aeabi_dsub>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	4629      	mov	r1, r5
 800b1b0:	f7f5 f892 	bl	80002d8 <__aeabi_dsub>
 800b1b4:	4642      	mov	r2, r8
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	460f      	mov	r7, r1
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	4640      	mov	r0, r8
 800b1be:	4649      	mov	r1, r9
 800b1c0:	f7f5 fa42 	bl	8000648 <__aeabi_dmul>
 800b1c4:	a35e      	add	r3, pc, #376	; (adr r3, 800b340 <__ieee754_pow+0xa18>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	460d      	mov	r5, r1
 800b1ce:	f7f5 fa3b 	bl	8000648 <__aeabi_dmul>
 800b1d2:	a35d      	add	r3, pc, #372	; (adr r3, 800b348 <__ieee754_pow+0xa20>)
 800b1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d8:	f7f5 f87e 	bl	80002d8 <__aeabi_dsub>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	462b      	mov	r3, r5
 800b1e0:	f7f5 fa32 	bl	8000648 <__aeabi_dmul>
 800b1e4:	a35a      	add	r3, pc, #360	; (adr r3, 800b350 <__ieee754_pow+0xa28>)
 800b1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ea:	f7f5 f877 	bl	80002dc <__adddf3>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	462b      	mov	r3, r5
 800b1f2:	f7f5 fa29 	bl	8000648 <__aeabi_dmul>
 800b1f6:	a358      	add	r3, pc, #352	; (adr r3, 800b358 <__ieee754_pow+0xa30>)
 800b1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fc:	f7f5 f86c 	bl	80002d8 <__aeabi_dsub>
 800b200:	4622      	mov	r2, r4
 800b202:	462b      	mov	r3, r5
 800b204:	f7f5 fa20 	bl	8000648 <__aeabi_dmul>
 800b208:	a355      	add	r3, pc, #340	; (adr r3, 800b360 <__ieee754_pow+0xa38>)
 800b20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20e:	f7f5 f865 	bl	80002dc <__adddf3>
 800b212:	4622      	mov	r2, r4
 800b214:	462b      	mov	r3, r5
 800b216:	f7f5 fa17 	bl	8000648 <__aeabi_dmul>
 800b21a:	4602      	mov	r2, r0
 800b21c:	460b      	mov	r3, r1
 800b21e:	4640      	mov	r0, r8
 800b220:	4649      	mov	r1, r9
 800b222:	f7f5 f859 	bl	80002d8 <__aeabi_dsub>
 800b226:	4604      	mov	r4, r0
 800b228:	460d      	mov	r5, r1
 800b22a:	4602      	mov	r2, r0
 800b22c:	460b      	mov	r3, r1
 800b22e:	4640      	mov	r0, r8
 800b230:	4649      	mov	r1, r9
 800b232:	f7f5 fa09 	bl	8000648 <__aeabi_dmul>
 800b236:	2200      	movs	r2, #0
 800b238:	ec41 0b19 	vmov	d9, r0, r1
 800b23c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b240:	4620      	mov	r0, r4
 800b242:	4629      	mov	r1, r5
 800b244:	f7f5 f848 	bl	80002d8 <__aeabi_dsub>
 800b248:	4602      	mov	r2, r0
 800b24a:	460b      	mov	r3, r1
 800b24c:	ec51 0b19 	vmov	r0, r1, d9
 800b250:	f7f5 fb24 	bl	800089c <__aeabi_ddiv>
 800b254:	4632      	mov	r2, r6
 800b256:	4604      	mov	r4, r0
 800b258:	460d      	mov	r5, r1
 800b25a:	463b      	mov	r3, r7
 800b25c:	4640      	mov	r0, r8
 800b25e:	4649      	mov	r1, r9
 800b260:	f7f5 f9f2 	bl	8000648 <__aeabi_dmul>
 800b264:	4632      	mov	r2, r6
 800b266:	463b      	mov	r3, r7
 800b268:	f7f5 f838 	bl	80002dc <__adddf3>
 800b26c:	4602      	mov	r2, r0
 800b26e:	460b      	mov	r3, r1
 800b270:	4620      	mov	r0, r4
 800b272:	4629      	mov	r1, r5
 800b274:	f7f5 f830 	bl	80002d8 <__aeabi_dsub>
 800b278:	4642      	mov	r2, r8
 800b27a:	464b      	mov	r3, r9
 800b27c:	f7f5 f82c 	bl	80002d8 <__aeabi_dsub>
 800b280:	460b      	mov	r3, r1
 800b282:	4602      	mov	r2, r0
 800b284:	493a      	ldr	r1, [pc, #232]	; (800b370 <__ieee754_pow+0xa48>)
 800b286:	2000      	movs	r0, #0
 800b288:	f7f5 f826 	bl	80002d8 <__aeabi_dsub>
 800b28c:	ec41 0b10 	vmov	d0, r0, r1
 800b290:	ee10 3a90 	vmov	r3, s1
 800b294:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b29c:	da2b      	bge.n	800b2f6 <__ieee754_pow+0x9ce>
 800b29e:	4650      	mov	r0, sl
 800b2a0:	f000 fea2 	bl	800bfe8 <scalbn>
 800b2a4:	ec51 0b10 	vmov	r0, r1, d0
 800b2a8:	ec53 2b18 	vmov	r2, r3, d8
 800b2ac:	f7ff bbed 	b.w	800aa8a <__ieee754_pow+0x162>
 800b2b0:	4b30      	ldr	r3, [pc, #192]	; (800b374 <__ieee754_pow+0xa4c>)
 800b2b2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b2b6:	429e      	cmp	r6, r3
 800b2b8:	f77f af0c 	ble.w	800b0d4 <__ieee754_pow+0x7ac>
 800b2bc:	4b2e      	ldr	r3, [pc, #184]	; (800b378 <__ieee754_pow+0xa50>)
 800b2be:	440b      	add	r3, r1
 800b2c0:	4303      	orrs	r3, r0
 800b2c2:	d009      	beq.n	800b2d8 <__ieee754_pow+0x9b0>
 800b2c4:	ec51 0b18 	vmov	r0, r1, d8
 800b2c8:	2200      	movs	r2, #0
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	f7f5 fc2e 	bl	8000b2c <__aeabi_dcmplt>
 800b2d0:	3800      	subs	r0, #0
 800b2d2:	bf18      	it	ne
 800b2d4:	2001      	movne	r0, #1
 800b2d6:	e447      	b.n	800ab68 <__ieee754_pow+0x240>
 800b2d8:	4622      	mov	r2, r4
 800b2da:	462b      	mov	r3, r5
 800b2dc:	f7f4 fffc 	bl	80002d8 <__aeabi_dsub>
 800b2e0:	4642      	mov	r2, r8
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f7f5 fc36 	bl	8000b54 <__aeabi_dcmpge>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f43f aef3 	beq.w	800b0d4 <__ieee754_pow+0x7ac>
 800b2ee:	e7e9      	b.n	800b2c4 <__ieee754_pow+0x99c>
 800b2f0:	f04f 0a00 	mov.w	sl, #0
 800b2f4:	e71a      	b.n	800b12c <__ieee754_pow+0x804>
 800b2f6:	ec51 0b10 	vmov	r0, r1, d0
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	e7d4      	b.n	800b2a8 <__ieee754_pow+0x980>
 800b2fe:	491c      	ldr	r1, [pc, #112]	; (800b370 <__ieee754_pow+0xa48>)
 800b300:	2000      	movs	r0, #0
 800b302:	f7ff bb30 	b.w	800a966 <__ieee754_pow+0x3e>
 800b306:	2000      	movs	r0, #0
 800b308:	2100      	movs	r1, #0
 800b30a:	f7ff bb2c 	b.w	800a966 <__ieee754_pow+0x3e>
 800b30e:	4630      	mov	r0, r6
 800b310:	4639      	mov	r1, r7
 800b312:	f7ff bb28 	b.w	800a966 <__ieee754_pow+0x3e>
 800b316:	9204      	str	r2, [sp, #16]
 800b318:	f7ff bb7a 	b.w	800aa10 <__ieee754_pow+0xe8>
 800b31c:	2300      	movs	r3, #0
 800b31e:	f7ff bb64 	b.w	800a9ea <__ieee754_pow+0xc2>
 800b322:	bf00      	nop
 800b324:	f3af 8000 	nop.w
 800b328:	00000000 	.word	0x00000000
 800b32c:	3fe62e43 	.word	0x3fe62e43
 800b330:	fefa39ef 	.word	0xfefa39ef
 800b334:	3fe62e42 	.word	0x3fe62e42
 800b338:	0ca86c39 	.word	0x0ca86c39
 800b33c:	be205c61 	.word	0xbe205c61
 800b340:	72bea4d0 	.word	0x72bea4d0
 800b344:	3e663769 	.word	0x3e663769
 800b348:	c5d26bf1 	.word	0xc5d26bf1
 800b34c:	3ebbbd41 	.word	0x3ebbbd41
 800b350:	af25de2c 	.word	0xaf25de2c
 800b354:	3f11566a 	.word	0x3f11566a
 800b358:	16bebd93 	.word	0x16bebd93
 800b35c:	3f66c16c 	.word	0x3f66c16c
 800b360:	5555553e 	.word	0x5555553e
 800b364:	3fc55555 	.word	0x3fc55555
 800b368:	3fe00000 	.word	0x3fe00000
 800b36c:	000fffff 	.word	0x000fffff
 800b370:	3ff00000 	.word	0x3ff00000
 800b374:	4090cbff 	.word	0x4090cbff
 800b378:	3f6f3400 	.word	0x3f6f3400
 800b37c:	652b82fe 	.word	0x652b82fe
 800b380:	3c971547 	.word	0x3c971547

0800b384 <__ieee754_sqrt>:
 800b384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b388:	ec55 4b10 	vmov	r4, r5, d0
 800b38c:	4e55      	ldr	r6, [pc, #340]	; (800b4e4 <__ieee754_sqrt+0x160>)
 800b38e:	43ae      	bics	r6, r5
 800b390:	ee10 0a10 	vmov	r0, s0
 800b394:	ee10 3a10 	vmov	r3, s0
 800b398:	462a      	mov	r2, r5
 800b39a:	4629      	mov	r1, r5
 800b39c:	d110      	bne.n	800b3c0 <__ieee754_sqrt+0x3c>
 800b39e:	ee10 2a10 	vmov	r2, s0
 800b3a2:	462b      	mov	r3, r5
 800b3a4:	f7f5 f950 	bl	8000648 <__aeabi_dmul>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	f7f4 ff94 	bl	80002dc <__adddf3>
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	ec45 4b10 	vmov	d0, r4, r5
 800b3bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3c0:	2d00      	cmp	r5, #0
 800b3c2:	dc10      	bgt.n	800b3e6 <__ieee754_sqrt+0x62>
 800b3c4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b3c8:	4330      	orrs	r0, r6
 800b3ca:	d0f5      	beq.n	800b3b8 <__ieee754_sqrt+0x34>
 800b3cc:	b15d      	cbz	r5, 800b3e6 <__ieee754_sqrt+0x62>
 800b3ce:	ee10 2a10 	vmov	r2, s0
 800b3d2:	462b      	mov	r3, r5
 800b3d4:	ee10 0a10 	vmov	r0, s0
 800b3d8:	f7f4 ff7e 	bl	80002d8 <__aeabi_dsub>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	460b      	mov	r3, r1
 800b3e0:	f7f5 fa5c 	bl	800089c <__aeabi_ddiv>
 800b3e4:	e7e6      	b.n	800b3b4 <__ieee754_sqrt+0x30>
 800b3e6:	1512      	asrs	r2, r2, #20
 800b3e8:	d074      	beq.n	800b4d4 <__ieee754_sqrt+0x150>
 800b3ea:	07d4      	lsls	r4, r2, #31
 800b3ec:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b3f0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b3f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b3f8:	bf5e      	ittt	pl
 800b3fa:	0fda      	lsrpl	r2, r3, #31
 800b3fc:	005b      	lslpl	r3, r3, #1
 800b3fe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b402:	2400      	movs	r4, #0
 800b404:	0fda      	lsrs	r2, r3, #31
 800b406:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b40a:	107f      	asrs	r7, r7, #1
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	2516      	movs	r5, #22
 800b410:	4620      	mov	r0, r4
 800b412:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b416:	1886      	adds	r6, r0, r2
 800b418:	428e      	cmp	r6, r1
 800b41a:	bfde      	ittt	le
 800b41c:	1b89      	suble	r1, r1, r6
 800b41e:	18b0      	addle	r0, r6, r2
 800b420:	18a4      	addle	r4, r4, r2
 800b422:	0049      	lsls	r1, r1, #1
 800b424:	3d01      	subs	r5, #1
 800b426:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b42a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b42e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b432:	d1f0      	bne.n	800b416 <__ieee754_sqrt+0x92>
 800b434:	462a      	mov	r2, r5
 800b436:	f04f 0e20 	mov.w	lr, #32
 800b43a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b43e:	4281      	cmp	r1, r0
 800b440:	eb06 0c05 	add.w	ip, r6, r5
 800b444:	dc02      	bgt.n	800b44c <__ieee754_sqrt+0xc8>
 800b446:	d113      	bne.n	800b470 <__ieee754_sqrt+0xec>
 800b448:	459c      	cmp	ip, r3
 800b44a:	d811      	bhi.n	800b470 <__ieee754_sqrt+0xec>
 800b44c:	f1bc 0f00 	cmp.w	ip, #0
 800b450:	eb0c 0506 	add.w	r5, ip, r6
 800b454:	da43      	bge.n	800b4de <__ieee754_sqrt+0x15a>
 800b456:	2d00      	cmp	r5, #0
 800b458:	db41      	blt.n	800b4de <__ieee754_sqrt+0x15a>
 800b45a:	f100 0801 	add.w	r8, r0, #1
 800b45e:	1a09      	subs	r1, r1, r0
 800b460:	459c      	cmp	ip, r3
 800b462:	bf88      	it	hi
 800b464:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b468:	eba3 030c 	sub.w	r3, r3, ip
 800b46c:	4432      	add	r2, r6
 800b46e:	4640      	mov	r0, r8
 800b470:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b474:	f1be 0e01 	subs.w	lr, lr, #1
 800b478:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b47c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b480:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b484:	d1db      	bne.n	800b43e <__ieee754_sqrt+0xba>
 800b486:	430b      	orrs	r3, r1
 800b488:	d006      	beq.n	800b498 <__ieee754_sqrt+0x114>
 800b48a:	1c50      	adds	r0, r2, #1
 800b48c:	bf13      	iteet	ne
 800b48e:	3201      	addne	r2, #1
 800b490:	3401      	addeq	r4, #1
 800b492:	4672      	moveq	r2, lr
 800b494:	f022 0201 	bicne.w	r2, r2, #1
 800b498:	1063      	asrs	r3, r4, #1
 800b49a:	0852      	lsrs	r2, r2, #1
 800b49c:	07e1      	lsls	r1, r4, #31
 800b49e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b4a2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b4a6:	bf48      	it	mi
 800b4a8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b4ac:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	e781      	b.n	800b3b8 <__ieee754_sqrt+0x34>
 800b4b4:	0ad9      	lsrs	r1, r3, #11
 800b4b6:	3815      	subs	r0, #21
 800b4b8:	055b      	lsls	r3, r3, #21
 800b4ba:	2900      	cmp	r1, #0
 800b4bc:	d0fa      	beq.n	800b4b4 <__ieee754_sqrt+0x130>
 800b4be:	02cd      	lsls	r5, r1, #11
 800b4c0:	d50a      	bpl.n	800b4d8 <__ieee754_sqrt+0x154>
 800b4c2:	f1c2 0420 	rsb	r4, r2, #32
 800b4c6:	fa23 f404 	lsr.w	r4, r3, r4
 800b4ca:	1e55      	subs	r5, r2, #1
 800b4cc:	4093      	lsls	r3, r2
 800b4ce:	4321      	orrs	r1, r4
 800b4d0:	1b42      	subs	r2, r0, r5
 800b4d2:	e78a      	b.n	800b3ea <__ieee754_sqrt+0x66>
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	e7f0      	b.n	800b4ba <__ieee754_sqrt+0x136>
 800b4d8:	0049      	lsls	r1, r1, #1
 800b4da:	3201      	adds	r2, #1
 800b4dc:	e7ef      	b.n	800b4be <__ieee754_sqrt+0x13a>
 800b4de:	4680      	mov	r8, r0
 800b4e0:	e7bd      	b.n	800b45e <__ieee754_sqrt+0xda>
 800b4e2:	bf00      	nop
 800b4e4:	7ff00000 	.word	0x7ff00000

0800b4e8 <__ieee754_rem_pio2f>:
 800b4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b4ea:	ee10 6a10 	vmov	r6, s0
 800b4ee:	4b8e      	ldr	r3, [pc, #568]	; (800b728 <__ieee754_rem_pio2f+0x240>)
 800b4f0:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b4f4:	429d      	cmp	r5, r3
 800b4f6:	b087      	sub	sp, #28
 800b4f8:	eef0 7a40 	vmov.f32	s15, s0
 800b4fc:	4604      	mov	r4, r0
 800b4fe:	dc05      	bgt.n	800b50c <__ieee754_rem_pio2f+0x24>
 800b500:	2300      	movs	r3, #0
 800b502:	ed80 0a00 	vstr	s0, [r0]
 800b506:	6043      	str	r3, [r0, #4]
 800b508:	2000      	movs	r0, #0
 800b50a:	e01a      	b.n	800b542 <__ieee754_rem_pio2f+0x5a>
 800b50c:	4b87      	ldr	r3, [pc, #540]	; (800b72c <__ieee754_rem_pio2f+0x244>)
 800b50e:	429d      	cmp	r5, r3
 800b510:	dc46      	bgt.n	800b5a0 <__ieee754_rem_pio2f+0xb8>
 800b512:	2e00      	cmp	r6, #0
 800b514:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b730 <__ieee754_rem_pio2f+0x248>
 800b518:	4b86      	ldr	r3, [pc, #536]	; (800b734 <__ieee754_rem_pio2f+0x24c>)
 800b51a:	f025 050f 	bic.w	r5, r5, #15
 800b51e:	dd1f      	ble.n	800b560 <__ieee754_rem_pio2f+0x78>
 800b520:	429d      	cmp	r5, r3
 800b522:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b526:	d00e      	beq.n	800b546 <__ieee754_rem_pio2f+0x5e>
 800b528:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b738 <__ieee754_rem_pio2f+0x250>
 800b52c:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b530:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b534:	ed80 0a00 	vstr	s0, [r0]
 800b538:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b53c:	2001      	movs	r0, #1
 800b53e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b542:	b007      	add	sp, #28
 800b544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b546:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b73c <__ieee754_rem_pio2f+0x254>
 800b54a:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b740 <__ieee754_rem_pio2f+0x258>
 800b54e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b552:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b556:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b55a:	edc0 6a00 	vstr	s13, [r0]
 800b55e:	e7eb      	b.n	800b538 <__ieee754_rem_pio2f+0x50>
 800b560:	429d      	cmp	r5, r3
 800b562:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b566:	d00e      	beq.n	800b586 <__ieee754_rem_pio2f+0x9e>
 800b568:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b738 <__ieee754_rem_pio2f+0x250>
 800b56c:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b570:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b574:	ed80 0a00 	vstr	s0, [r0]
 800b578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b57c:	f04f 30ff 	mov.w	r0, #4294967295
 800b580:	edc4 7a01 	vstr	s15, [r4, #4]
 800b584:	e7dd      	b.n	800b542 <__ieee754_rem_pio2f+0x5a>
 800b586:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b73c <__ieee754_rem_pio2f+0x254>
 800b58a:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b740 <__ieee754_rem_pio2f+0x258>
 800b58e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b592:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b596:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b59a:	edc0 6a00 	vstr	s13, [r0]
 800b59e:	e7eb      	b.n	800b578 <__ieee754_rem_pio2f+0x90>
 800b5a0:	4b68      	ldr	r3, [pc, #416]	; (800b744 <__ieee754_rem_pio2f+0x25c>)
 800b5a2:	429d      	cmp	r5, r3
 800b5a4:	dc72      	bgt.n	800b68c <__ieee754_rem_pio2f+0x1a4>
 800b5a6:	f7fe fedb 	bl	800a360 <fabsf>
 800b5aa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b748 <__ieee754_rem_pio2f+0x260>
 800b5ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b5b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b5b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b5ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b5be:	ee17 0a90 	vmov	r0, s15
 800b5c2:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b730 <__ieee754_rem_pio2f+0x248>
 800b5c6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b5ca:	281f      	cmp	r0, #31
 800b5cc:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b738 <__ieee754_rem_pio2f+0x250>
 800b5d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5d4:	eeb1 6a47 	vneg.f32	s12, s14
 800b5d8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b5dc:	ee16 2a90 	vmov	r2, s13
 800b5e0:	dc1c      	bgt.n	800b61c <__ieee754_rem_pio2f+0x134>
 800b5e2:	495a      	ldr	r1, [pc, #360]	; (800b74c <__ieee754_rem_pio2f+0x264>)
 800b5e4:	1e47      	subs	r7, r0, #1
 800b5e6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b5ea:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b5ee:	428b      	cmp	r3, r1
 800b5f0:	d014      	beq.n	800b61c <__ieee754_rem_pio2f+0x134>
 800b5f2:	6022      	str	r2, [r4, #0]
 800b5f4:	ed94 7a00 	vldr	s14, [r4]
 800b5f8:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b5fc:	2e00      	cmp	r6, #0
 800b5fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b602:	ed84 0a01 	vstr	s0, [r4, #4]
 800b606:	da9c      	bge.n	800b542 <__ieee754_rem_pio2f+0x5a>
 800b608:	eeb1 7a47 	vneg.f32	s14, s14
 800b60c:	eeb1 0a40 	vneg.f32	s0, s0
 800b610:	ed84 7a00 	vstr	s14, [r4]
 800b614:	ed84 0a01 	vstr	s0, [r4, #4]
 800b618:	4240      	negs	r0, r0
 800b61a:	e792      	b.n	800b542 <__ieee754_rem_pio2f+0x5a>
 800b61c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b620:	15eb      	asrs	r3, r5, #23
 800b622:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b626:	2d08      	cmp	r5, #8
 800b628:	dde3      	ble.n	800b5f2 <__ieee754_rem_pio2f+0x10a>
 800b62a:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b73c <__ieee754_rem_pio2f+0x254>
 800b62e:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b740 <__ieee754_rem_pio2f+0x258>
 800b632:	eef0 6a40 	vmov.f32	s13, s0
 800b636:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b63a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b63e:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b642:	eef0 7a40 	vmov.f32	s15, s0
 800b646:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b64a:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b64e:	ee15 2a90 	vmov	r2, s11
 800b652:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b656:	1a5b      	subs	r3, r3, r1
 800b658:	2b19      	cmp	r3, #25
 800b65a:	dc04      	bgt.n	800b666 <__ieee754_rem_pio2f+0x17e>
 800b65c:	edc4 5a00 	vstr	s11, [r4]
 800b660:	eeb0 0a66 	vmov.f32	s0, s13
 800b664:	e7c6      	b.n	800b5f4 <__ieee754_rem_pio2f+0x10c>
 800b666:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b750 <__ieee754_rem_pio2f+0x268>
 800b66a:	eeb0 0a66 	vmov.f32	s0, s13
 800b66e:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b672:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b676:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b754 <__ieee754_rem_pio2f+0x26c>
 800b67a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b67e:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b682:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b686:	ed84 7a00 	vstr	s14, [r4]
 800b68a:	e7b3      	b.n	800b5f4 <__ieee754_rem_pio2f+0x10c>
 800b68c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b690:	db06      	blt.n	800b6a0 <__ieee754_rem_pio2f+0x1b8>
 800b692:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b696:	edc0 7a01 	vstr	s15, [r0, #4]
 800b69a:	edc0 7a00 	vstr	s15, [r0]
 800b69e:	e733      	b.n	800b508 <__ieee754_rem_pio2f+0x20>
 800b6a0:	15ea      	asrs	r2, r5, #23
 800b6a2:	3a86      	subs	r2, #134	; 0x86
 800b6a4:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b6a8:	ee07 3a90 	vmov	s15, r3
 800b6ac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b6b0:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b758 <__ieee754_rem_pio2f+0x270>
 800b6b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b6b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6bc:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b6c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6c4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b6c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b6cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6d0:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b6d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b6dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6e0:	edcd 7a05 	vstr	s15, [sp, #20]
 800b6e4:	d11e      	bne.n	800b724 <__ieee754_rem_pio2f+0x23c>
 800b6e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b6ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ee:	bf14      	ite	ne
 800b6f0:	2302      	movne	r3, #2
 800b6f2:	2301      	moveq	r3, #1
 800b6f4:	4919      	ldr	r1, [pc, #100]	; (800b75c <__ieee754_rem_pio2f+0x274>)
 800b6f6:	9101      	str	r1, [sp, #4]
 800b6f8:	2102      	movs	r1, #2
 800b6fa:	9100      	str	r1, [sp, #0]
 800b6fc:	a803      	add	r0, sp, #12
 800b6fe:	4621      	mov	r1, r4
 800b700:	f000 f88e 	bl	800b820 <__kernel_rem_pio2f>
 800b704:	2e00      	cmp	r6, #0
 800b706:	f6bf af1c 	bge.w	800b542 <__ieee754_rem_pio2f+0x5a>
 800b70a:	edd4 7a00 	vldr	s15, [r4]
 800b70e:	eef1 7a67 	vneg.f32	s15, s15
 800b712:	edc4 7a00 	vstr	s15, [r4]
 800b716:	edd4 7a01 	vldr	s15, [r4, #4]
 800b71a:	eef1 7a67 	vneg.f32	s15, s15
 800b71e:	edc4 7a01 	vstr	s15, [r4, #4]
 800b722:	e779      	b.n	800b618 <__ieee754_rem_pio2f+0x130>
 800b724:	2303      	movs	r3, #3
 800b726:	e7e5      	b.n	800b6f4 <__ieee754_rem_pio2f+0x20c>
 800b728:	3f490fd8 	.word	0x3f490fd8
 800b72c:	4016cbe3 	.word	0x4016cbe3
 800b730:	3fc90f80 	.word	0x3fc90f80
 800b734:	3fc90fd0 	.word	0x3fc90fd0
 800b738:	37354443 	.word	0x37354443
 800b73c:	37354400 	.word	0x37354400
 800b740:	2e85a308 	.word	0x2e85a308
 800b744:	43490f80 	.word	0x43490f80
 800b748:	3f22f984 	.word	0x3f22f984
 800b74c:	08079118 	.word	0x08079118
 800b750:	2e85a300 	.word	0x2e85a300
 800b754:	248d3132 	.word	0x248d3132
 800b758:	43800000 	.word	0x43800000
 800b75c:	08079198 	.word	0x08079198

0800b760 <__kernel_cosf>:
 800b760:	ee10 3a10 	vmov	r3, s0
 800b764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b768:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b76c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b770:	da05      	bge.n	800b77e <__kernel_cosf+0x1e>
 800b772:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b776:	ee17 2a90 	vmov	r2, s15
 800b77a:	2a00      	cmp	r2, #0
 800b77c:	d03d      	beq.n	800b7fa <__kernel_cosf+0x9a>
 800b77e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b782:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b800 <__kernel_cosf+0xa0>
 800b786:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b804 <__kernel_cosf+0xa4>
 800b78a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b808 <__kernel_cosf+0xa8>
 800b78e:	4a1f      	ldr	r2, [pc, #124]	; (800b80c <__kernel_cosf+0xac>)
 800b790:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b794:	4293      	cmp	r3, r2
 800b796:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b810 <__kernel_cosf+0xb0>
 800b79a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b79e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b814 <__kernel_cosf+0xb4>
 800b7a2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b7a6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b818 <__kernel_cosf+0xb8>
 800b7aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b7ae:	eeb0 7a66 	vmov.f32	s14, s13
 800b7b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b7b6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b7ba:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b7be:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b7c2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b7c6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b7ca:	dc04      	bgt.n	800b7d6 <__kernel_cosf+0x76>
 800b7cc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b7d0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b7d4:	4770      	bx	lr
 800b7d6:	4a11      	ldr	r2, [pc, #68]	; (800b81c <__kernel_cosf+0xbc>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	bfda      	itte	le
 800b7dc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b7e0:	ee06 3a90 	vmovle	s13, r3
 800b7e4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b7e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b7ec:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b7f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7f4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b7f8:	4770      	bx	lr
 800b7fa:	eeb0 0a46 	vmov.f32	s0, s12
 800b7fe:	4770      	bx	lr
 800b800:	ad47d74e 	.word	0xad47d74e
 800b804:	310f74f6 	.word	0x310f74f6
 800b808:	3d2aaaab 	.word	0x3d2aaaab
 800b80c:	3e999999 	.word	0x3e999999
 800b810:	b493f27c 	.word	0xb493f27c
 800b814:	37d00d01 	.word	0x37d00d01
 800b818:	bab60b61 	.word	0xbab60b61
 800b81c:	3f480000 	.word	0x3f480000

0800b820 <__kernel_rem_pio2f>:
 800b820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b824:	ed2d 8b04 	vpush	{d8-d9}
 800b828:	b0d9      	sub	sp, #356	; 0x164
 800b82a:	4688      	mov	r8, r1
 800b82c:	9002      	str	r0, [sp, #8]
 800b82e:	49bb      	ldr	r1, [pc, #748]	; (800bb1c <__kernel_rem_pio2f+0x2fc>)
 800b830:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b838:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b83c:	1e59      	subs	r1, r3, #1
 800b83e:	1d13      	adds	r3, r2, #4
 800b840:	db27      	blt.n	800b892 <__kernel_rem_pio2f+0x72>
 800b842:	f1b2 0b03 	subs.w	fp, r2, #3
 800b846:	bf48      	it	mi
 800b848:	f102 0b04 	addmi.w	fp, r2, #4
 800b84c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b850:	1c45      	adds	r5, r0, #1
 800b852:	00ec      	lsls	r4, r5, #3
 800b854:	1a47      	subs	r7, r0, r1
 800b856:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800b85a:	9403      	str	r4, [sp, #12]
 800b85c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b860:	eb0a 0c01 	add.w	ip, sl, r1
 800b864:	ae1c      	add	r6, sp, #112	; 0x70
 800b866:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b86a:	2400      	movs	r4, #0
 800b86c:	4564      	cmp	r4, ip
 800b86e:	dd12      	ble.n	800b896 <__kernel_rem_pio2f+0x76>
 800b870:	9b01      	ldr	r3, [sp, #4]
 800b872:	ac1c      	add	r4, sp, #112	; 0x70
 800b874:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b878:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b87c:	f04f 0c00 	mov.w	ip, #0
 800b880:	45d4      	cmp	ip, sl
 800b882:	dc27      	bgt.n	800b8d4 <__kernel_rem_pio2f+0xb4>
 800b884:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b888:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800b88c:	4627      	mov	r7, r4
 800b88e:	2600      	movs	r6, #0
 800b890:	e016      	b.n	800b8c0 <__kernel_rem_pio2f+0xa0>
 800b892:	2000      	movs	r0, #0
 800b894:	e7dc      	b.n	800b850 <__kernel_rem_pio2f+0x30>
 800b896:	42e7      	cmn	r7, r4
 800b898:	bf5d      	ittte	pl
 800b89a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b89e:	ee07 3a90 	vmovpl	s15, r3
 800b8a2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b8a6:	eef0 7a47 	vmovmi.f32	s15, s14
 800b8aa:	ece6 7a01 	vstmia	r6!, {s15}
 800b8ae:	3401      	adds	r4, #1
 800b8b0:	e7dc      	b.n	800b86c <__kernel_rem_pio2f+0x4c>
 800b8b2:	ecf9 6a01 	vldmia	r9!, {s13}
 800b8b6:	ed97 7a00 	vldr	s14, [r7]
 800b8ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b8be:	3601      	adds	r6, #1
 800b8c0:	428e      	cmp	r6, r1
 800b8c2:	f1a7 0704 	sub.w	r7, r7, #4
 800b8c6:	ddf4      	ble.n	800b8b2 <__kernel_rem_pio2f+0x92>
 800b8c8:	eceb 7a01 	vstmia	fp!, {s15}
 800b8cc:	f10c 0c01 	add.w	ip, ip, #1
 800b8d0:	3404      	adds	r4, #4
 800b8d2:	e7d5      	b.n	800b880 <__kernel_rem_pio2f+0x60>
 800b8d4:	ab08      	add	r3, sp, #32
 800b8d6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b8da:	eddf 8a93 	vldr	s17, [pc, #588]	; 800bb28 <__kernel_rem_pio2f+0x308>
 800b8de:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800bb24 <__kernel_rem_pio2f+0x304>
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b8e8:	4656      	mov	r6, sl
 800b8ea:	00b3      	lsls	r3, r6, #2
 800b8ec:	9305      	str	r3, [sp, #20]
 800b8ee:	ab58      	add	r3, sp, #352	; 0x160
 800b8f0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b8f4:	ac08      	add	r4, sp, #32
 800b8f6:	ab44      	add	r3, sp, #272	; 0x110
 800b8f8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b8fc:	46a4      	mov	ip, r4
 800b8fe:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b902:	4637      	mov	r7, r6
 800b904:	2f00      	cmp	r7, #0
 800b906:	f1a0 0004 	sub.w	r0, r0, #4
 800b90a:	dc4f      	bgt.n	800b9ac <__kernel_rem_pio2f+0x18c>
 800b90c:	4628      	mov	r0, r5
 800b90e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b912:	f000 fc31 	bl	800c178 <scalbnf>
 800b916:	eeb0 8a40 	vmov.f32	s16, s0
 800b91a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b91e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b922:	f000 fbe7 	bl	800c0f4 <floorf>
 800b926:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b92a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b92e:	2d00      	cmp	r5, #0
 800b930:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b934:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b938:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b93c:	ee17 9a90 	vmov	r9, s15
 800b940:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b944:	dd44      	ble.n	800b9d0 <__kernel_rem_pio2f+0x1b0>
 800b946:	f106 3cff 	add.w	ip, r6, #4294967295
 800b94a:	ab08      	add	r3, sp, #32
 800b94c:	f1c5 0e08 	rsb	lr, r5, #8
 800b950:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b954:	fa47 f00e 	asr.w	r0, r7, lr
 800b958:	4481      	add	r9, r0
 800b95a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b95e:	1a3f      	subs	r7, r7, r0
 800b960:	f1c5 0007 	rsb	r0, r5, #7
 800b964:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b968:	4107      	asrs	r7, r0
 800b96a:	2f00      	cmp	r7, #0
 800b96c:	dd3f      	ble.n	800b9ee <__kernel_rem_pio2f+0x1ce>
 800b96e:	f04f 0e00 	mov.w	lr, #0
 800b972:	f109 0901 	add.w	r9, r9, #1
 800b976:	4673      	mov	r3, lr
 800b978:	4576      	cmp	r6, lr
 800b97a:	dc6b      	bgt.n	800ba54 <__kernel_rem_pio2f+0x234>
 800b97c:	2d00      	cmp	r5, #0
 800b97e:	dd04      	ble.n	800b98a <__kernel_rem_pio2f+0x16a>
 800b980:	2d01      	cmp	r5, #1
 800b982:	d078      	beq.n	800ba76 <__kernel_rem_pio2f+0x256>
 800b984:	2d02      	cmp	r5, #2
 800b986:	f000 8081 	beq.w	800ba8c <__kernel_rem_pio2f+0x26c>
 800b98a:	2f02      	cmp	r7, #2
 800b98c:	d12f      	bne.n	800b9ee <__kernel_rem_pio2f+0x1ce>
 800b98e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b992:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b996:	b353      	cbz	r3, 800b9ee <__kernel_rem_pio2f+0x1ce>
 800b998:	4628      	mov	r0, r5
 800b99a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b99e:	f000 fbeb 	bl	800c178 <scalbnf>
 800b9a2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b9a6:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b9aa:	e020      	b.n	800b9ee <__kernel_rem_pio2f+0x1ce>
 800b9ac:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b9b0:	3f01      	subs	r7, #1
 800b9b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b9b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9ba:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b9be:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b9c2:	ecac 0a01 	vstmia	ip!, {s0}
 800b9c6:	ed90 0a00 	vldr	s0, [r0]
 800b9ca:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b9ce:	e799      	b.n	800b904 <__kernel_rem_pio2f+0xe4>
 800b9d0:	d105      	bne.n	800b9de <__kernel_rem_pio2f+0x1be>
 800b9d2:	1e70      	subs	r0, r6, #1
 800b9d4:	ab08      	add	r3, sp, #32
 800b9d6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b9da:	11ff      	asrs	r7, r7, #7
 800b9dc:	e7c5      	b.n	800b96a <__kernel_rem_pio2f+0x14a>
 800b9de:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b9e2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ea:	da31      	bge.n	800ba50 <__kernel_rem_pio2f+0x230>
 800b9ec:	2700      	movs	r7, #0
 800b9ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f6:	f040 809b 	bne.w	800bb30 <__kernel_rem_pio2f+0x310>
 800b9fa:	1e74      	subs	r4, r6, #1
 800b9fc:	46a4      	mov	ip, r4
 800b9fe:	2000      	movs	r0, #0
 800ba00:	45d4      	cmp	ip, sl
 800ba02:	da4a      	bge.n	800ba9a <__kernel_rem_pio2f+0x27a>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d07a      	beq.n	800bafe <__kernel_rem_pio2f+0x2de>
 800ba08:	ab08      	add	r3, sp, #32
 800ba0a:	3d08      	subs	r5, #8
 800ba0c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	f000 8081 	beq.w	800bb18 <__kernel_rem_pio2f+0x2f8>
 800ba16:	4628      	mov	r0, r5
 800ba18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba1c:	00a5      	lsls	r5, r4, #2
 800ba1e:	f000 fbab 	bl	800c178 <scalbnf>
 800ba22:	aa44      	add	r2, sp, #272	; 0x110
 800ba24:	1d2b      	adds	r3, r5, #4
 800ba26:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bb28 <__kernel_rem_pio2f+0x308>
 800ba2a:	18d1      	adds	r1, r2, r3
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	2a00      	cmp	r2, #0
 800ba30:	f280 80ae 	bge.w	800bb90 <__kernel_rem_pio2f+0x370>
 800ba34:	4622      	mov	r2, r4
 800ba36:	2a00      	cmp	r2, #0
 800ba38:	f2c0 80cc 	blt.w	800bbd4 <__kernel_rem_pio2f+0x3b4>
 800ba3c:	a944      	add	r1, sp, #272	; 0x110
 800ba3e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ba42:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800bb20 <__kernel_rem_pio2f+0x300>
 800ba46:	eddf 7a39 	vldr	s15, [pc, #228]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800ba4a:	2000      	movs	r0, #0
 800ba4c:	1aa1      	subs	r1, r4, r2
 800ba4e:	e0b6      	b.n	800bbbe <__kernel_rem_pio2f+0x39e>
 800ba50:	2702      	movs	r7, #2
 800ba52:	e78c      	b.n	800b96e <__kernel_rem_pio2f+0x14e>
 800ba54:	6820      	ldr	r0, [r4, #0]
 800ba56:	b94b      	cbnz	r3, 800ba6c <__kernel_rem_pio2f+0x24c>
 800ba58:	b118      	cbz	r0, 800ba62 <__kernel_rem_pio2f+0x242>
 800ba5a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800ba5e:	6020      	str	r0, [r4, #0]
 800ba60:	2001      	movs	r0, #1
 800ba62:	f10e 0e01 	add.w	lr, lr, #1
 800ba66:	3404      	adds	r4, #4
 800ba68:	4603      	mov	r3, r0
 800ba6a:	e785      	b.n	800b978 <__kernel_rem_pio2f+0x158>
 800ba6c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ba70:	6020      	str	r0, [r4, #0]
 800ba72:	4618      	mov	r0, r3
 800ba74:	e7f5      	b.n	800ba62 <__kernel_rem_pio2f+0x242>
 800ba76:	1e74      	subs	r4, r6, #1
 800ba78:	a808      	add	r0, sp, #32
 800ba7a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ba7e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800ba82:	f10d 0c20 	add.w	ip, sp, #32
 800ba86:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800ba8a:	e77e      	b.n	800b98a <__kernel_rem_pio2f+0x16a>
 800ba8c:	1e74      	subs	r4, r6, #1
 800ba8e:	a808      	add	r0, sp, #32
 800ba90:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800ba94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800ba98:	e7f3      	b.n	800ba82 <__kernel_rem_pio2f+0x262>
 800ba9a:	ab08      	add	r3, sp, #32
 800ba9c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800baa0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800baa4:	4318      	orrs	r0, r3
 800baa6:	e7ab      	b.n	800ba00 <__kernel_rem_pio2f+0x1e0>
 800baa8:	f10c 0c01 	add.w	ip, ip, #1
 800baac:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800bab0:	2c00      	cmp	r4, #0
 800bab2:	d0f9      	beq.n	800baa8 <__kernel_rem_pio2f+0x288>
 800bab4:	9b05      	ldr	r3, [sp, #20]
 800bab6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800baba:	eb0d 0003 	add.w	r0, sp, r3
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	18f4      	adds	r4, r6, r3
 800bac2:	ab1c      	add	r3, sp, #112	; 0x70
 800bac4:	1c77      	adds	r7, r6, #1
 800bac6:	384c      	subs	r0, #76	; 0x4c
 800bac8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bacc:	4466      	add	r6, ip
 800bace:	42be      	cmp	r6, r7
 800bad0:	f6ff af0b 	blt.w	800b8ea <__kernel_rem_pio2f+0xca>
 800bad4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800bad8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800badc:	ee07 3a90 	vmov	s15, r3
 800bae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bae4:	f04f 0c00 	mov.w	ip, #0
 800bae8:	ece4 7a01 	vstmia	r4!, {s15}
 800baec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800baf0:	46a1      	mov	r9, r4
 800baf2:	458c      	cmp	ip, r1
 800baf4:	dd07      	ble.n	800bb06 <__kernel_rem_pio2f+0x2e6>
 800baf6:	ece0 7a01 	vstmia	r0!, {s15}
 800bafa:	3701      	adds	r7, #1
 800bafc:	e7e7      	b.n	800bace <__kernel_rem_pio2f+0x2ae>
 800bafe:	9804      	ldr	r0, [sp, #16]
 800bb00:	f04f 0c01 	mov.w	ip, #1
 800bb04:	e7d2      	b.n	800baac <__kernel_rem_pio2f+0x28c>
 800bb06:	ecfe 6a01 	vldmia	lr!, {s13}
 800bb0a:	ed39 7a01 	vldmdb	r9!, {s14}
 800bb0e:	f10c 0c01 	add.w	ip, ip, #1
 800bb12:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bb16:	e7ec      	b.n	800baf2 <__kernel_rem_pio2f+0x2d2>
 800bb18:	3c01      	subs	r4, #1
 800bb1a:	e775      	b.n	800ba08 <__kernel_rem_pio2f+0x1e8>
 800bb1c:	080794dc 	.word	0x080794dc
 800bb20:	080794b0 	.word	0x080794b0
 800bb24:	43800000 	.word	0x43800000
 800bb28:	3b800000 	.word	0x3b800000
 800bb2c:	00000000 	.word	0x00000000
 800bb30:	9b03      	ldr	r3, [sp, #12]
 800bb32:	eeb0 0a48 	vmov.f32	s0, s16
 800bb36:	1a98      	subs	r0, r3, r2
 800bb38:	f000 fb1e 	bl	800c178 <scalbnf>
 800bb3c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800bb24 <__kernel_rem_pio2f+0x304>
 800bb40:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb48:	db19      	blt.n	800bb7e <__kernel_rem_pio2f+0x35e>
 800bb4a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800bb28 <__kernel_rem_pio2f+0x308>
 800bb4e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800bb52:	aa08      	add	r2, sp, #32
 800bb54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb58:	1c74      	adds	r4, r6, #1
 800bb5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb5e:	3508      	adds	r5, #8
 800bb60:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bb64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb68:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bb6c:	ee10 3a10 	vmov	r3, s0
 800bb70:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bb74:	ee17 3a90 	vmov	r3, s15
 800bb78:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800bb7c:	e74b      	b.n	800ba16 <__kernel_rem_pio2f+0x1f6>
 800bb7e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bb82:	aa08      	add	r2, sp, #32
 800bb84:	ee10 3a10 	vmov	r3, s0
 800bb88:	4634      	mov	r4, r6
 800bb8a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800bb8e:	e742      	b.n	800ba16 <__kernel_rem_pio2f+0x1f6>
 800bb90:	a808      	add	r0, sp, #32
 800bb92:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800bb96:	9001      	str	r0, [sp, #4]
 800bb98:	ee07 0a90 	vmov	s15, r0
 800bb9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bba0:	3a01      	subs	r2, #1
 800bba2:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bba6:	ee20 0a07 	vmul.f32	s0, s0, s14
 800bbaa:	ed61 7a01 	vstmdb	r1!, {s15}
 800bbae:	e73e      	b.n	800ba2e <__kernel_rem_pio2f+0x20e>
 800bbb0:	ecfc 6a01 	vldmia	ip!, {s13}
 800bbb4:	ecb6 7a01 	vldmia	r6!, {s14}
 800bbb8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	4550      	cmp	r0, sl
 800bbc0:	dc01      	bgt.n	800bbc6 <__kernel_rem_pio2f+0x3a6>
 800bbc2:	4288      	cmp	r0, r1
 800bbc4:	ddf4      	ble.n	800bbb0 <__kernel_rem_pio2f+0x390>
 800bbc6:	a858      	add	r0, sp, #352	; 0x160
 800bbc8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bbcc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bbd0:	3a01      	subs	r2, #1
 800bbd2:	e730      	b.n	800ba36 <__kernel_rem_pio2f+0x216>
 800bbd4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800bbd6:	2a02      	cmp	r2, #2
 800bbd8:	dc09      	bgt.n	800bbee <__kernel_rem_pio2f+0x3ce>
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	dc2a      	bgt.n	800bc34 <__kernel_rem_pio2f+0x414>
 800bbde:	d043      	beq.n	800bc68 <__kernel_rem_pio2f+0x448>
 800bbe0:	f009 0007 	and.w	r0, r9, #7
 800bbe4:	b059      	add	sp, #356	; 0x164
 800bbe6:	ecbd 8b04 	vpop	{d8-d9}
 800bbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbee:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bbf0:	2b03      	cmp	r3, #3
 800bbf2:	d1f5      	bne.n	800bbe0 <__kernel_rem_pio2f+0x3c0>
 800bbf4:	ab30      	add	r3, sp, #192	; 0xc0
 800bbf6:	442b      	add	r3, r5
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	4619      	mov	r1, r3
 800bbfc:	4620      	mov	r0, r4
 800bbfe:	2800      	cmp	r0, #0
 800bc00:	f1a1 0104 	sub.w	r1, r1, #4
 800bc04:	dc51      	bgt.n	800bcaa <__kernel_rem_pio2f+0x48a>
 800bc06:	4621      	mov	r1, r4
 800bc08:	2901      	cmp	r1, #1
 800bc0a:	f1a2 0204 	sub.w	r2, r2, #4
 800bc0e:	dc5c      	bgt.n	800bcca <__kernel_rem_pio2f+0x4aa>
 800bc10:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800bc14:	3304      	adds	r3, #4
 800bc16:	2c01      	cmp	r4, #1
 800bc18:	dc67      	bgt.n	800bcea <__kernel_rem_pio2f+0x4ca>
 800bc1a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bc1e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800bc22:	2f00      	cmp	r7, #0
 800bc24:	d167      	bne.n	800bcf6 <__kernel_rem_pio2f+0x4d6>
 800bc26:	edc8 6a00 	vstr	s13, [r8]
 800bc2a:	ed88 7a01 	vstr	s14, [r8, #4]
 800bc2e:	edc8 7a02 	vstr	s15, [r8, #8]
 800bc32:	e7d5      	b.n	800bbe0 <__kernel_rem_pio2f+0x3c0>
 800bc34:	aa30      	add	r2, sp, #192	; 0xc0
 800bc36:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800bc3a:	4413      	add	r3, r2
 800bc3c:	4622      	mov	r2, r4
 800bc3e:	2a00      	cmp	r2, #0
 800bc40:	da24      	bge.n	800bc8c <__kernel_rem_pio2f+0x46c>
 800bc42:	b34f      	cbz	r7, 800bc98 <__kernel_rem_pio2f+0x478>
 800bc44:	eef1 7a47 	vneg.f32	s15, s14
 800bc48:	edc8 7a00 	vstr	s15, [r8]
 800bc4c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800bc50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bc54:	aa31      	add	r2, sp, #196	; 0xc4
 800bc56:	2301      	movs	r3, #1
 800bc58:	429c      	cmp	r4, r3
 800bc5a:	da20      	bge.n	800bc9e <__kernel_rem_pio2f+0x47e>
 800bc5c:	b10f      	cbz	r7, 800bc62 <__kernel_rem_pio2f+0x442>
 800bc5e:	eef1 7a67 	vneg.f32	s15, s15
 800bc62:	edc8 7a01 	vstr	s15, [r8, #4]
 800bc66:	e7bb      	b.n	800bbe0 <__kernel_rem_pio2f+0x3c0>
 800bc68:	aa30      	add	r2, sp, #192	; 0xc0
 800bc6a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800bb2c <__kernel_rem_pio2f+0x30c>
 800bc6e:	4413      	add	r3, r2
 800bc70:	2c00      	cmp	r4, #0
 800bc72:	da05      	bge.n	800bc80 <__kernel_rem_pio2f+0x460>
 800bc74:	b10f      	cbz	r7, 800bc7a <__kernel_rem_pio2f+0x45a>
 800bc76:	eef1 7a67 	vneg.f32	s15, s15
 800bc7a:	edc8 7a00 	vstr	s15, [r8]
 800bc7e:	e7af      	b.n	800bbe0 <__kernel_rem_pio2f+0x3c0>
 800bc80:	ed33 7a01 	vldmdb	r3!, {s14}
 800bc84:	3c01      	subs	r4, #1
 800bc86:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc8a:	e7f1      	b.n	800bc70 <__kernel_rem_pio2f+0x450>
 800bc8c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bc90:	3a01      	subs	r2, #1
 800bc92:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bc96:	e7d2      	b.n	800bc3e <__kernel_rem_pio2f+0x41e>
 800bc98:	eef0 7a47 	vmov.f32	s15, s14
 800bc9c:	e7d4      	b.n	800bc48 <__kernel_rem_pio2f+0x428>
 800bc9e:	ecb2 7a01 	vldmia	r2!, {s14}
 800bca2:	3301      	adds	r3, #1
 800bca4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bca8:	e7d6      	b.n	800bc58 <__kernel_rem_pio2f+0x438>
 800bcaa:	edd1 7a00 	vldr	s15, [r1]
 800bcae:	edd1 6a01 	vldr	s13, [r1, #4]
 800bcb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bcb6:	3801      	subs	r0, #1
 800bcb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcbc:	ed81 7a00 	vstr	s14, [r1]
 800bcc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc4:	edc1 7a01 	vstr	s15, [r1, #4]
 800bcc8:	e799      	b.n	800bbfe <__kernel_rem_pio2f+0x3de>
 800bcca:	edd2 7a00 	vldr	s15, [r2]
 800bcce:	edd2 6a01 	vldr	s13, [r2, #4]
 800bcd2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bcd6:	3901      	subs	r1, #1
 800bcd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcdc:	ed82 7a00 	vstr	s14, [r2]
 800bce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bce4:	edc2 7a01 	vstr	s15, [r2, #4]
 800bce8:	e78e      	b.n	800bc08 <__kernel_rem_pio2f+0x3e8>
 800bcea:	ed33 7a01 	vldmdb	r3!, {s14}
 800bcee:	3c01      	subs	r4, #1
 800bcf0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bcf4:	e78f      	b.n	800bc16 <__kernel_rem_pio2f+0x3f6>
 800bcf6:	eef1 6a66 	vneg.f32	s13, s13
 800bcfa:	eeb1 7a47 	vneg.f32	s14, s14
 800bcfe:	edc8 6a00 	vstr	s13, [r8]
 800bd02:	ed88 7a01 	vstr	s14, [r8, #4]
 800bd06:	eef1 7a67 	vneg.f32	s15, s15
 800bd0a:	e790      	b.n	800bc2e <__kernel_rem_pio2f+0x40e>

0800bd0c <__kernel_sinf>:
 800bd0c:	ee10 3a10 	vmov	r3, s0
 800bd10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd14:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bd18:	da04      	bge.n	800bd24 <__kernel_sinf+0x18>
 800bd1a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd1e:	ee17 3a90 	vmov	r3, s15
 800bd22:	b35b      	cbz	r3, 800bd7c <__kernel_sinf+0x70>
 800bd24:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd28:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bd80 <__kernel_sinf+0x74>
 800bd2c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bd84 <__kernel_sinf+0x78>
 800bd30:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd34:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bd88 <__kernel_sinf+0x7c>
 800bd38:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd3c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bd8c <__kernel_sinf+0x80>
 800bd40:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd44:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bd90 <__kernel_sinf+0x84>
 800bd48:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bd4c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd50:	b930      	cbnz	r0, 800bd60 <__kernel_sinf+0x54>
 800bd52:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bd94 <__kernel_sinf+0x88>
 800bd56:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd5a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bd5e:	4770      	bx	lr
 800bd60:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bd64:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bd68:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bd6c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bd70:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bd98 <__kernel_sinf+0x8c>
 800bd74:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bd78:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	2f2ec9d3 	.word	0x2f2ec9d3
 800bd84:	b2d72f34 	.word	0xb2d72f34
 800bd88:	3638ef1b 	.word	0x3638ef1b
 800bd8c:	b9500d01 	.word	0xb9500d01
 800bd90:	3c088889 	.word	0x3c088889
 800bd94:	be2aaaab 	.word	0xbe2aaaab
 800bd98:	3e2aaaab 	.word	0x3e2aaaab

0800bd9c <__kernel_tanf>:
 800bd9c:	b508      	push	{r3, lr}
 800bd9e:	ee10 3a10 	vmov	r3, s0
 800bda2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bda6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800bdaa:	eef0 7a40 	vmov.f32	s15, s0
 800bdae:	da17      	bge.n	800bde0 <__kernel_tanf+0x44>
 800bdb0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800bdb4:	ee17 1a10 	vmov	r1, s14
 800bdb8:	bb41      	cbnz	r1, 800be0c <__kernel_tanf+0x70>
 800bdba:	1c43      	adds	r3, r0, #1
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	d108      	bne.n	800bdd2 <__kernel_tanf+0x36>
 800bdc0:	f7fe face 	bl	800a360 <fabsf>
 800bdc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdc8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bdcc:	eeb0 0a67 	vmov.f32	s0, s15
 800bdd0:	bd08      	pop	{r3, pc}
 800bdd2:	2801      	cmp	r0, #1
 800bdd4:	d0fa      	beq.n	800bdcc <__kernel_tanf+0x30>
 800bdd6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800bdda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800bdde:	e7f5      	b.n	800bdcc <__kernel_tanf+0x30>
 800bde0:	494c      	ldr	r1, [pc, #304]	; (800bf14 <__kernel_tanf+0x178>)
 800bde2:	428a      	cmp	r2, r1
 800bde4:	db12      	blt.n	800be0c <__kernel_tanf+0x70>
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfb8      	it	lt
 800bdea:	eef1 7a40 	vneglt.f32	s15, s0
 800bdee:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800bf18 <__kernel_tanf+0x17c>
 800bdf2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800bdf6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800bf1c <__kernel_tanf+0x180>
 800bdfa:	bfb8      	it	lt
 800bdfc:	eef1 0a60 	vneglt.f32	s1, s1
 800be00:	ee70 0a60 	vsub.f32	s1, s0, s1
 800be04:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800be08:	eddf 0a45 	vldr	s1, [pc, #276]	; 800bf20 <__kernel_tanf+0x184>
 800be0c:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bf24 <__kernel_tanf+0x188>
 800be10:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800bf28 <__kernel_tanf+0x18c>
 800be14:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800bf2c <__kernel_tanf+0x190>
 800be18:	493e      	ldr	r1, [pc, #248]	; (800bf14 <__kernel_tanf+0x178>)
 800be1a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800be1e:	428a      	cmp	r2, r1
 800be20:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800be24:	eea7 6a25 	vfma.f32	s12, s14, s11
 800be28:	eddf 5a41 	vldr	s11, [pc, #260]	; 800bf30 <__kernel_tanf+0x194>
 800be2c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800be30:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800bf34 <__kernel_tanf+0x198>
 800be34:	eea5 6a87 	vfma.f32	s12, s11, s14
 800be38:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bf38 <__kernel_tanf+0x19c>
 800be3c:	eee6 5a07 	vfma.f32	s11, s12, s14
 800be40:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800bf3c <__kernel_tanf+0x1a0>
 800be44:	eea5 6a87 	vfma.f32	s12, s11, s14
 800be48:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800bf40 <__kernel_tanf+0x1a4>
 800be4c:	eee7 5a05 	vfma.f32	s11, s14, s10
 800be50:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800bf44 <__kernel_tanf+0x1a8>
 800be54:	eea5 5a87 	vfma.f32	s10, s11, s14
 800be58:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800bf48 <__kernel_tanf+0x1ac>
 800be5c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800be60:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800bf4c <__kernel_tanf+0x1b0>
 800be64:	eea5 5a87 	vfma.f32	s10, s11, s14
 800be68:	eddf 5a39 	vldr	s11, [pc, #228]	; 800bf50 <__kernel_tanf+0x1b4>
 800be6c:	eee5 5a07 	vfma.f32	s11, s10, s14
 800be70:	eeb0 7a46 	vmov.f32	s14, s12
 800be74:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800be78:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800be7c:	eeb0 6a60 	vmov.f32	s12, s1
 800be80:	eea7 6a05 	vfma.f32	s12, s14, s10
 800be84:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800bf54 <__kernel_tanf+0x1b8>
 800be88:	eee6 0a26 	vfma.f32	s1, s12, s13
 800be8c:	eee5 0a07 	vfma.f32	s1, s10, s14
 800be90:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800be94:	db1d      	blt.n	800bed2 <__kernel_tanf+0x136>
 800be96:	ee06 0a90 	vmov	s13, r0
 800be9a:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800be9e:	ee27 6a07 	vmul.f32	s12, s14, s14
 800bea2:	ee37 7a00 	vadd.f32	s14, s14, s0
 800bea6:	179b      	asrs	r3, r3, #30
 800bea8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	f1c3 0301 	rsb	r3, r3, #1
 800beb4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800beb8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800bebc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bec0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800bec4:	ee07 3a90 	vmov	s15, r3
 800bec8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800becc:	ee67 7a80 	vmul.f32	s15, s15, s0
 800bed0:	e77c      	b.n	800bdcc <__kernel_tanf+0x30>
 800bed2:	2801      	cmp	r0, #1
 800bed4:	d01b      	beq.n	800bf0e <__kernel_tanf+0x172>
 800bed6:	4b20      	ldr	r3, [pc, #128]	; (800bf58 <__kernel_tanf+0x1bc>)
 800bed8:	ee17 2a10 	vmov	r2, s14
 800bedc:	401a      	ands	r2, r3
 800bede:	ee06 2a10 	vmov	s12, r2
 800bee2:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bee6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800beea:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800beee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800bef2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bef6:	ee16 2a90 	vmov	r2, s13
 800befa:	4013      	ands	r3, r2
 800befc:	ee07 3a90 	vmov	s15, r3
 800bf00:	eea6 7a27 	vfma.f32	s14, s12, s15
 800bf04:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800bf08:	eee7 7a26 	vfma.f32	s15, s14, s13
 800bf0c:	e75e      	b.n	800bdcc <__kernel_tanf+0x30>
 800bf0e:	eef0 7a47 	vmov.f32	s15, s14
 800bf12:	e75b      	b.n	800bdcc <__kernel_tanf+0x30>
 800bf14:	3f2ca140 	.word	0x3f2ca140
 800bf18:	3f490fda 	.word	0x3f490fda
 800bf1c:	33222168 	.word	0x33222168
 800bf20:	00000000 	.word	0x00000000
 800bf24:	b79bae5f 	.word	0xb79bae5f
 800bf28:	38a3f445 	.word	0x38a3f445
 800bf2c:	37d95384 	.word	0x37d95384
 800bf30:	3a1a26c8 	.word	0x3a1a26c8
 800bf34:	3b6b6916 	.word	0x3b6b6916
 800bf38:	3cb327a4 	.word	0x3cb327a4
 800bf3c:	3e088889 	.word	0x3e088889
 800bf40:	3895c07a 	.word	0x3895c07a
 800bf44:	398137b9 	.word	0x398137b9
 800bf48:	3abede48 	.word	0x3abede48
 800bf4c:	3c11371f 	.word	0x3c11371f
 800bf50:	3d5d0dd1 	.word	0x3d5d0dd1
 800bf54:	3eaaaaab 	.word	0x3eaaaaab
 800bf58:	fffff000 	.word	0xfffff000

0800bf5c <with_errno>:
 800bf5c:	b570      	push	{r4, r5, r6, lr}
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	4616      	mov	r6, r2
 800bf64:	f7fc fdaa 	bl	8008abc <__errno>
 800bf68:	4629      	mov	r1, r5
 800bf6a:	6006      	str	r6, [r0, #0]
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}

0800bf70 <xflow>:
 800bf70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf72:	4614      	mov	r4, r2
 800bf74:	461d      	mov	r5, r3
 800bf76:	b108      	cbz	r0, 800bf7c <xflow+0xc>
 800bf78:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bf7c:	e9cd 2300 	strd	r2, r3, [sp]
 800bf80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf84:	4620      	mov	r0, r4
 800bf86:	4629      	mov	r1, r5
 800bf88:	f7f4 fb5e 	bl	8000648 <__aeabi_dmul>
 800bf8c:	2222      	movs	r2, #34	; 0x22
 800bf8e:	b003      	add	sp, #12
 800bf90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bf94:	f7ff bfe2 	b.w	800bf5c <with_errno>

0800bf98 <__math_uflow>:
 800bf98:	b508      	push	{r3, lr}
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bfa0:	f7ff ffe6 	bl	800bf70 <xflow>
 800bfa4:	ec41 0b10 	vmov	d0, r0, r1
 800bfa8:	bd08      	pop	{r3, pc}

0800bfaa <__math_oflow>:
 800bfaa:	b508      	push	{r3, lr}
 800bfac:	2200      	movs	r2, #0
 800bfae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bfb2:	f7ff ffdd 	bl	800bf70 <xflow>
 800bfb6:	ec41 0b10 	vmov	d0, r0, r1
 800bfba:	bd08      	pop	{r3, pc}

0800bfbc <fabs>:
 800bfbc:	ec51 0b10 	vmov	r0, r1, d0
 800bfc0:	ee10 2a10 	vmov	r2, s0
 800bfc4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bfc8:	ec43 2b10 	vmov	d0, r2, r3
 800bfcc:	4770      	bx	lr

0800bfce <finite>:
 800bfce:	b082      	sub	sp, #8
 800bfd0:	ed8d 0b00 	vstr	d0, [sp]
 800bfd4:	9801      	ldr	r0, [sp, #4]
 800bfd6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800bfda:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800bfde:	0fc0      	lsrs	r0, r0, #31
 800bfe0:	b002      	add	sp, #8
 800bfe2:	4770      	bx	lr
 800bfe4:	0000      	movs	r0, r0
	...

0800bfe8 <scalbn>:
 800bfe8:	b570      	push	{r4, r5, r6, lr}
 800bfea:	ec55 4b10 	vmov	r4, r5, d0
 800bfee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800bff2:	4606      	mov	r6, r0
 800bff4:	462b      	mov	r3, r5
 800bff6:	b99a      	cbnz	r2, 800c020 <scalbn+0x38>
 800bff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bffc:	4323      	orrs	r3, r4
 800bffe:	d036      	beq.n	800c06e <scalbn+0x86>
 800c000:	4b39      	ldr	r3, [pc, #228]	; (800c0e8 <scalbn+0x100>)
 800c002:	4629      	mov	r1, r5
 800c004:	ee10 0a10 	vmov	r0, s0
 800c008:	2200      	movs	r2, #0
 800c00a:	f7f4 fb1d 	bl	8000648 <__aeabi_dmul>
 800c00e:	4b37      	ldr	r3, [pc, #220]	; (800c0ec <scalbn+0x104>)
 800c010:	429e      	cmp	r6, r3
 800c012:	4604      	mov	r4, r0
 800c014:	460d      	mov	r5, r1
 800c016:	da10      	bge.n	800c03a <scalbn+0x52>
 800c018:	a32b      	add	r3, pc, #172	; (adr r3, 800c0c8 <scalbn+0xe0>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	e03a      	b.n	800c096 <scalbn+0xae>
 800c020:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c024:	428a      	cmp	r2, r1
 800c026:	d10c      	bne.n	800c042 <scalbn+0x5a>
 800c028:	ee10 2a10 	vmov	r2, s0
 800c02c:	4620      	mov	r0, r4
 800c02e:	4629      	mov	r1, r5
 800c030:	f7f4 f954 	bl	80002dc <__adddf3>
 800c034:	4604      	mov	r4, r0
 800c036:	460d      	mov	r5, r1
 800c038:	e019      	b.n	800c06e <scalbn+0x86>
 800c03a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c03e:	460b      	mov	r3, r1
 800c040:	3a36      	subs	r2, #54	; 0x36
 800c042:	4432      	add	r2, r6
 800c044:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c048:	428a      	cmp	r2, r1
 800c04a:	dd08      	ble.n	800c05e <scalbn+0x76>
 800c04c:	2d00      	cmp	r5, #0
 800c04e:	a120      	add	r1, pc, #128	; (adr r1, 800c0d0 <scalbn+0xe8>)
 800c050:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c054:	da1c      	bge.n	800c090 <scalbn+0xa8>
 800c056:	a120      	add	r1, pc, #128	; (adr r1, 800c0d8 <scalbn+0xf0>)
 800c058:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c05c:	e018      	b.n	800c090 <scalbn+0xa8>
 800c05e:	2a00      	cmp	r2, #0
 800c060:	dd08      	ble.n	800c074 <scalbn+0x8c>
 800c062:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c066:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c06a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c06e:	ec45 4b10 	vmov	d0, r4, r5
 800c072:	bd70      	pop	{r4, r5, r6, pc}
 800c074:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c078:	da19      	bge.n	800c0ae <scalbn+0xc6>
 800c07a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c07e:	429e      	cmp	r6, r3
 800c080:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c084:	dd0a      	ble.n	800c09c <scalbn+0xb4>
 800c086:	a112      	add	r1, pc, #72	; (adr r1, 800c0d0 <scalbn+0xe8>)
 800c088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d1e2      	bne.n	800c056 <scalbn+0x6e>
 800c090:	a30f      	add	r3, pc, #60	; (adr r3, 800c0d0 <scalbn+0xe8>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	f7f4 fad7 	bl	8000648 <__aeabi_dmul>
 800c09a:	e7cb      	b.n	800c034 <scalbn+0x4c>
 800c09c:	a10a      	add	r1, pc, #40	; (adr r1, 800c0c8 <scalbn+0xe0>)
 800c09e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d0b8      	beq.n	800c018 <scalbn+0x30>
 800c0a6:	a10e      	add	r1, pc, #56	; (adr r1, 800c0e0 <scalbn+0xf8>)
 800c0a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0ac:	e7b4      	b.n	800c018 <scalbn+0x30>
 800c0ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c0b2:	3236      	adds	r2, #54	; 0x36
 800c0b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c0b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4b0c      	ldr	r3, [pc, #48]	; (800c0f0 <scalbn+0x108>)
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	e7e8      	b.n	800c096 <scalbn+0xae>
 800c0c4:	f3af 8000 	nop.w
 800c0c8:	c2f8f359 	.word	0xc2f8f359
 800c0cc:	01a56e1f 	.word	0x01a56e1f
 800c0d0:	8800759c 	.word	0x8800759c
 800c0d4:	7e37e43c 	.word	0x7e37e43c
 800c0d8:	8800759c 	.word	0x8800759c
 800c0dc:	fe37e43c 	.word	0xfe37e43c
 800c0e0:	c2f8f359 	.word	0xc2f8f359
 800c0e4:	81a56e1f 	.word	0x81a56e1f
 800c0e8:	43500000 	.word	0x43500000
 800c0ec:	ffff3cb0 	.word	0xffff3cb0
 800c0f0:	3c900000 	.word	0x3c900000

0800c0f4 <floorf>:
 800c0f4:	ee10 3a10 	vmov	r3, s0
 800c0f8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c0fc:	3a7f      	subs	r2, #127	; 0x7f
 800c0fe:	2a16      	cmp	r2, #22
 800c100:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c104:	dc2a      	bgt.n	800c15c <floorf+0x68>
 800c106:	2a00      	cmp	r2, #0
 800c108:	da11      	bge.n	800c12e <floorf+0x3a>
 800c10a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800c16c <floorf+0x78>
 800c10e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c112:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c11a:	dd05      	ble.n	800c128 <floorf+0x34>
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	da23      	bge.n	800c168 <floorf+0x74>
 800c120:	4a13      	ldr	r2, [pc, #76]	; (800c170 <floorf+0x7c>)
 800c122:	2900      	cmp	r1, #0
 800c124:	bf18      	it	ne
 800c126:	4613      	movne	r3, r2
 800c128:	ee00 3a10 	vmov	s0, r3
 800c12c:	4770      	bx	lr
 800c12e:	4911      	ldr	r1, [pc, #68]	; (800c174 <floorf+0x80>)
 800c130:	4111      	asrs	r1, r2
 800c132:	420b      	tst	r3, r1
 800c134:	d0fa      	beq.n	800c12c <floorf+0x38>
 800c136:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800c16c <floorf+0x78>
 800c13a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c13e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c146:	ddef      	ble.n	800c128 <floorf+0x34>
 800c148:	2b00      	cmp	r3, #0
 800c14a:	bfbe      	ittt	lt
 800c14c:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800c150:	fa40 f202 	asrlt.w	r2, r0, r2
 800c154:	189b      	addlt	r3, r3, r2
 800c156:	ea23 0301 	bic.w	r3, r3, r1
 800c15a:	e7e5      	b.n	800c128 <floorf+0x34>
 800c15c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c160:	d3e4      	bcc.n	800c12c <floorf+0x38>
 800c162:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c166:	4770      	bx	lr
 800c168:	2300      	movs	r3, #0
 800c16a:	e7dd      	b.n	800c128 <floorf+0x34>
 800c16c:	7149f2ca 	.word	0x7149f2ca
 800c170:	bf800000 	.word	0xbf800000
 800c174:	007fffff 	.word	0x007fffff

0800c178 <scalbnf>:
 800c178:	ee10 3a10 	vmov	r3, s0
 800c17c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800c180:	d025      	beq.n	800c1ce <scalbnf+0x56>
 800c182:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c186:	d302      	bcc.n	800c18e <scalbnf+0x16>
 800c188:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c18c:	4770      	bx	lr
 800c18e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800c192:	d122      	bne.n	800c1da <scalbnf+0x62>
 800c194:	4b2a      	ldr	r3, [pc, #168]	; (800c240 <scalbnf+0xc8>)
 800c196:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800c244 <scalbnf+0xcc>
 800c19a:	4298      	cmp	r0, r3
 800c19c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1a0:	db16      	blt.n	800c1d0 <scalbnf+0x58>
 800c1a2:	ee10 3a10 	vmov	r3, s0
 800c1a6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1aa:	3a19      	subs	r2, #25
 800c1ac:	4402      	add	r2, r0
 800c1ae:	2afe      	cmp	r2, #254	; 0xfe
 800c1b0:	dd15      	ble.n	800c1de <scalbnf+0x66>
 800c1b2:	ee10 3a10 	vmov	r3, s0
 800c1b6:	eddf 7a24 	vldr	s15, [pc, #144]	; 800c248 <scalbnf+0xd0>
 800c1ba:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c24c <scalbnf+0xd4>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	eeb0 7a67 	vmov.f32	s14, s15
 800c1c4:	bfb8      	it	lt
 800c1c6:	eef0 7a66 	vmovlt.f32	s15, s13
 800c1ca:	ee27 0a27 	vmul.f32	s0, s14, s15
 800c1ce:	4770      	bx	lr
 800c1d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800c250 <scalbnf+0xd8>
 800c1d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c1d8:	4770      	bx	lr
 800c1da:	0dd2      	lsrs	r2, r2, #23
 800c1dc:	e7e6      	b.n	800c1ac <scalbnf+0x34>
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	dd06      	ble.n	800c1f0 <scalbnf+0x78>
 800c1e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1e6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c1ea:	ee00 3a10 	vmov	s0, r3
 800c1ee:	4770      	bx	lr
 800c1f0:	f112 0f16 	cmn.w	r2, #22
 800c1f4:	da1a      	bge.n	800c22c <scalbnf+0xb4>
 800c1f6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c1fa:	4298      	cmp	r0, r3
 800c1fc:	ee10 3a10 	vmov	r3, s0
 800c200:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c204:	dd0a      	ble.n	800c21c <scalbnf+0xa4>
 800c206:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800c248 <scalbnf+0xd0>
 800c20a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800c24c <scalbnf+0xd4>
 800c20e:	eef0 7a40 	vmov.f32	s15, s0
 800c212:	2b00      	cmp	r3, #0
 800c214:	bf18      	it	ne
 800c216:	eeb0 0a47 	vmovne.f32	s0, s14
 800c21a:	e7db      	b.n	800c1d4 <scalbnf+0x5c>
 800c21c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800c250 <scalbnf+0xd8>
 800c220:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800c254 <scalbnf+0xdc>
 800c224:	eef0 7a40 	vmov.f32	s15, s0
 800c228:	2b00      	cmp	r3, #0
 800c22a:	e7f3      	b.n	800c214 <scalbnf+0x9c>
 800c22c:	3219      	adds	r2, #25
 800c22e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c232:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c236:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c258 <scalbnf+0xe0>
 800c23a:	ee07 3a10 	vmov	s14, r3
 800c23e:	e7c4      	b.n	800c1ca <scalbnf+0x52>
 800c240:	ffff3cb0 	.word	0xffff3cb0
 800c244:	4c000000 	.word	0x4c000000
 800c248:	7149f2ca 	.word	0x7149f2ca
 800c24c:	f149f2ca 	.word	0xf149f2ca
 800c250:	0da24260 	.word	0x0da24260
 800c254:	8da24260 	.word	0x8da24260
 800c258:	33000000 	.word	0x33000000

0800c25c <_init>:
 800c25c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c25e:	bf00      	nop
 800c260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c262:	bc08      	pop	{r3}
 800c264:	469e      	mov	lr, r3
 800c266:	4770      	bx	lr

0800c268 <_fini>:
 800c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c26a:	bf00      	nop
 800c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c26e:	bc08      	pop	{r3}
 800c270:	469e      	mov	lr, r3
 800c272:	4770      	bx	lr
