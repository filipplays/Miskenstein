
OME_projekt_Filip_Zevnik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b98  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000100a8  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017e18  08017e18  000300e8  2**0
                  CONTENTS
  4 .ARM          00000000  08017e18  08017e18  000300e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08017e18  08017e18  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017e18  08017e18  00027e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017e1c  08017e1c  00027e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08017e20  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001caec  200000e8  08017f08  000300e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2001cbd4  08017f08  0003cbd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004183d  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007730  00000000  00000000  00071955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00035301  00000000  00000000  00079085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b88  00000000  00000000  000ae388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007e38  00000000  00000000  000aff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00032b9f  00000000  00000000  000b7d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003a954  00000000  00000000  000ea8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00132009  00000000  00000000  0012523b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00257244  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006a90  00000000  00000000  00257298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000e8 	.word	0x200000e8
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007d58 	.word	0x08007d58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000ec 	.word	0x200000ec
 8000214:	08007d58 	.word	0x08007d58

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000be0:	b530      	push	{r4, r5, lr}
 8000be2:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be4:	2238      	movs	r2, #56	; 0x38
 8000be6:	2100      	movs	r1, #0
 8000be8:	a806      	add	r0, sp, #24
 8000bea:	f005 fd01 	bl	80065f0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bee:	2000      	movs	r0, #0
 8000bf0:	e9cd 0000 	strd	r0, r0, [sp]
 8000bf4:	e9cd 0002 	strd	r0, r0, [sp, #8]
 8000bf8:	9004      	str	r0, [sp, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bfa:	f001 ff1d 	bl	8002a38 <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bfe:	2302      	movs	r3, #2
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c00:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c04:	2404      	movs	r4, #4
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c06:	f44f 7580 	mov.w	r5, #256	; 0x100
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c0a:	2140      	movs	r1, #64	; 0x40
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	9306      	str	r3, [sp, #24]
	RCC_OscInitStruct.PLL.PLLN = 85;
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0e:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c10:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c12:	2255      	movs	r2, #85	; 0x55
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000c14:	2306      	movs	r3, #6
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c16:	a806      	add	r0, sp, #24
	RCC_OscInitStruct.PLL.PLLN = 85;
 8000c18:	e9cd 420f 	strd	r4, r2, [sp, #60]	; 0x3c
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c1c:	9509      	str	r5, [sp, #36]	; 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1e:	910a      	str	r1, [sp, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000c20:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c22:	f001 ff8f 	bl	8002b44 <HAL_RCC_OscConfig>
 8000c26:	b108      	cbz	r0, 8000c2c <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
void Error_Handler(void)
{
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c2a:	e7fe      	b.n	8000c2a <SystemClock_Config+0x4a>
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c2c:	4603      	mov	r3, r0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c2e:	4621      	mov	r1, r4
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	2503      	movs	r5, #3
 8000c32:	240f      	movs	r4, #15
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c34:	9304      	str	r3, [sp, #16]
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c3a:	4668      	mov	r0, sp
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c3c:	e9cd 4500 	strd	r4, r5, [sp]
 8000c40:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c44:	f002 fa02 	bl	800304c <HAL_RCC_ClockConfig>
 8000c48:	b108      	cbz	r0, 8000c4e <SystemClock_Config+0x6e>
 8000c4a:	b672      	cpsid	i
	while (1)
 8000c4c:	e7fe      	b.n	8000c4c <SystemClock_Config+0x6c>
}
 8000c4e:	b015      	add	sp, #84	; 0x54
 8000c50:	bd30      	pop	{r4, r5, pc}
 8000c52:	bf00      	nop
 8000c54:	0000      	movs	r0, r0
	...

08000c58 <main>:
{
 8000c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	2500      	movs	r5, #0
{
 8000c5e:	b0b3      	sub	sp, #204	; 0xcc
	HAL_Init();
 8000c60:	f000 fe90 	bl	8001984 <HAL_Init>
	SystemClock_Config();
 8000c64:	f7ff ffbc 	bl	8000be0 <SystemClock_Config>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c68:	e9cd 551e 	strd	r5, r5, [sp, #120]	; 0x78
 8000c6c:	e9cd 5520 	strd	r5, r5, [sp, #128]	; 0x80
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c70:	4c98      	ldr	r4, [pc, #608]	; (8000ed4 <main+0x27c>)
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8000c72:	4f99      	ldr	r7, [pc, #612]	; (8000ed8 <main+0x280>)
 8000c74:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c76:	4e99      	ldr	r6, [pc, #612]	; (8000edc <main+0x284>)
 8000c78:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8000ee8 <main+0x290>
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c82:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c84:	f003 0304 	and.w	r3, r3, #4
 8000c88:	9308      	str	r3, [sp, #32]
  (void)tmpreg;
 8000c8a:	9b08      	ldr	r3, [sp, #32]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c8c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c8e:	f043 0320 	orr.w	r3, r3, #32
 8000c92:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000c96:	f003 0320 	and.w	r3, r3, #32
 8000c9a:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8000c9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c9e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ca6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	930a      	str	r3, [sp, #40]	; 0x28
  (void)tmpreg;
 8000cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cb8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cba:	f003 0302 	and.w	r3, r3, #2
 8000cbe:	930b      	str	r3, [sp, #44]	; 0x2c
  (void)tmpreg;
 8000cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cc2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cc4:	f043 0308 	orr.w	r3, r3, #8
 8000cc8:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cca:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000ccc:	f003 0308 	and.w	r3, r3, #8
 8000cd0:	930c      	str	r3, [sp, #48]	; 0x30
  (void)tmpreg;
 8000cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cd4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cda:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cdc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8000cde:	f04f 0c10 	mov.w	ip, #16
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	f001 0140 	and.w	r1, r1, #64	; 0x40
 8000ce8:	2220      	movs	r2, #32
 8000cea:	f04f 0e02 	mov.w	lr, #2
 8000cee:	910d      	str	r1, [sp, #52]	; 0x34
 8000cf0:	f04f 0901 	mov.w	r9, #1
  (void)tmpreg;
 8000cf4:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000cf6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000cf8:	f8c7 c028 	str.w	ip, [r7, #40]	; 0x28
 8000cfc:	62ba      	str	r2, [r7, #40]	; 0x28
 8000cfe:	2204      	movs	r2, #4
 8000d00:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8000d04:	f8c6 e028 	str.w	lr, [r6, #40]	; 0x28
 8000d08:	62b2      	str	r2, [r6, #40]	; 0x28
 8000d0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8000d0c:	62ba      	str	r2, [r7, #40]	; 0x28
 8000d0e:	f8c8 3028 	str.w	r3, [r8, #40]	; 0x28
 8000d12:	4b73      	ldr	r3, [pc, #460]	; (8000ee0 <main+0x288>)
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d14:	4630      	mov	r0, r6
 8000d16:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
 8000d1a:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 8000d1c:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
 8000d20:	f04f 0b00 	mov.w	fp, #0
 8000d24:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d28:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f002 ffbc 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000d30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d34:	2300      	movs	r3, #0
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	a91c      	add	r1, sp, #112	; 0x70
 8000d38:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000d3a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d3e:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d42:	f002 ffb1 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d46:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d4a:	2300      	movs	r3, #0
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	a91c      	add	r1, sp, #112	; 0x70
 8000d4e:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d50:	f04f 0a00 	mov.w	sl, #0
 8000d54:	f04f 0b00 	mov.w	fp, #0
	GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d58:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000d5c:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f002 ffa2 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d64:	2208      	movs	r2, #8
 8000d66:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d68:	a91c      	add	r1, sp, #112	; 0x70
 8000d6a:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000d6c:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000d70:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d74:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d76:	f002 ff97 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d7a:	2210      	movs	r2, #16
 8000d7c:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d7e:	a91c      	add	r1, sp, #112	; 0x70
 8000d80:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000d82:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000d86:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d8a:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d8c:	f002 ff8c 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d90:	2220      	movs	r2, #32
 8000d92:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d94:	a91c      	add	r1, sp, #112	; 0x70
 8000d96:	4638      	mov	r0, r7
	GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000d98:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000d9c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da0:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da2:	f002 ff81 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000da6:	2201      	movs	r2, #1
 8000da8:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	a91c      	add	r1, sp, #112	; 0x70
 8000dac:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000dae:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000db2:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db6:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db8:	f002 ff76 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000dbc:	2202      	movs	r2, #2
 8000dbe:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc0:	a91c      	add	r1, sp, #112	; 0x70
 8000dc2:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000dc4:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000dc8:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dcc:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dce:	f002 ff6b 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000dd2:	2204      	movs	r2, #4
 8000dd4:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	a91c      	add	r1, sp, #112	; 0x70
 8000dd8:	4630      	mov	r0, r6
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000dda:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000dde:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de2:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de4:	f002 ff60 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000de8:	2208      	movs	r2, #8
 8000dea:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	4630      	mov	r0, r6
 8000dee:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000df0:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000df4:	2604      	movs	r6, #4
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000df6:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000dfa:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f002 ff53 	bl	8003ca8 <LL_GPIO_Init>
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e02:	4638      	mov	r0, r7
 8000e04:	a91c      	add	r1, sp, #112	; 0x70
	GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000e06:	2701      	movs	r7, #1
 8000e08:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
 8000e0c:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e10:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e12:	f002 ff49 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e16:	2201      	movs	r2, #1
 8000e18:	2300      	movs	r3, #0
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e1a:	a91c      	add	r1, sp, #112	; 0x70
 8000e1c:	4831      	ldr	r0, [pc, #196]	; (8000ee4 <main+0x28c>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e1e:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000e22:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e26:	f002 ff3f 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	2300      	movs	r3, #0
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2e:	a91c      	add	r1, sp, #112	; 0x70
 8000e30:	482c      	ldr	r0, [pc, #176]	; (8000ee4 <main+0x28c>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e32:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e36:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e3a:	2640      	movs	r6, #64	; 0x40
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3c:	f002 ff34 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e40:	2700      	movs	r7, #0
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e42:	a91c      	add	r1, sp, #112	; 0x70
 8000e44:	4827      	ldr	r0, [pc, #156]	; (8000ee4 <main+0x28c>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e46:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e4a:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e4e:	f002 ff2b 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000e52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e56:	2300      	movs	r3, #0
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e58:	a91c      	add	r1, sp, #112	; 0x70
 8000e5a:	4822      	ldr	r0, [pc, #136]	; (8000ee4 <main+0x28c>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e5c:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000e60:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e64:	f002 ff20 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000e68:	2208      	movs	r2, #8
 8000e6a:	2301      	movs	r3, #1
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	a91c      	add	r1, sp, #112	; 0x70
 8000e6e:	4640      	mov	r0, r8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000e70:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000e74:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e78:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7a:	f002 ff15 	bl	8003ca8 <LL_GPIO_Init>
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e7e:	a91c      	add	r1, sp, #112	; 0x70
 8000e80:	4640      	mov	r0, r8
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000e82:	e9cd 671c 	strd	r6, r7, [sp, #112]	; 0x70
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e86:	9520      	str	r5, [sp, #128]	; 0x80
	LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e88:	f002 ff0e 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	2202      	movs	r2, #2
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e90:	a91c      	add	r1, sp, #112	; 0x70
 8000e92:	4813      	ldr	r0, [pc, #76]	; (8000ee0 <main+0x288>)
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e94:	9520      	str	r5, [sp, #128]	; 0x80
	GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000e96:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000e9a:	e9cd ab1e 	strd	sl, fp, [sp, #120]	; 0x78
	LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e9e:	f002 ff03 	bl	8003ca8 <LL_GPIO_Init>
	LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ea2:	2220      	movs	r2, #32
 8000ea4:	4629      	mov	r1, r5
 8000ea6:	a814      	add	r0, sp, #80	; 0x50
 8000ea8:	f005 fba2 	bl	80065f0 <memset>
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eac:	4629      	mov	r1, r5
 8000eae:	2250      	movs	r2, #80	; 0x50
 8000eb0:	a81d      	add	r0, sp, #116	; 0x74
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 8000eb6:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
 8000eba:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ebe:	f005 fb97 	bl	80065f0 <memset>
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec2:	2304      	movs	r3, #4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec4:	a81c      	add	r0, sp, #112	; 0x70
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ec6:	931c      	str	r3, [sp, #112]	; 0x70
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec8:	f002 f9d2 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 8000ecc:	b170      	cbz	r0, 8000eec <main+0x294>
 8000ece:	b672      	cpsid	i
	while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <main+0x278>
 8000ed2:	bf00      	nop
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48001400 	.word	0x48001400
 8000edc:	48000800 	.word	0x48000800
 8000ee0:	48001000 	.word	0x48001000
 8000ee4:	48001800 	.word	0x48001800
 8000ee8:	48000c00 	.word	0x48000c00
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000eec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000eee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ef2:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000efa:	9306      	str	r3, [sp, #24]
  (void)tmpreg;
 8000efc:	9b06      	ldr	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000efe:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	9307      	str	r3, [sp, #28]
 8000f0e:	4605      	mov	r5, r0
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000f10:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f14:	2302      	movs	r3, #2
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	a90e      	add	r1, sp, #56	; 0x38
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000f18:	2600      	movs	r6, #0
 8000f1a:	2707      	movs	r7, #7
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1c:	48c4      	ldr	r0, [pc, #784]	; (8001230 <main+0x5d8>)
  (void)tmpreg;
 8000f1e:	9c07      	ldr	r4, [sp, #28]
	GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000f20:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000f24:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
 8000f28:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f002 febc 	bl	8003ca8 <LL_GPIO_Init>
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f34:	2302      	movs	r3, #2
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	a90e      	add	r1, sp, #56	; 0x38
 8000f38:	48bd      	ldr	r0, [pc, #756]	; (8001230 <main+0x5d8>)
	GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000f3a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8000f3e:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8000f42:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f002 feaf 	bl	8003ca8 <LL_GPIO_Init>
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f4a:	4bba      	ldr	r3, [pc, #744]	; (8001234 <main+0x5dc>)
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f4c:	4aba      	ldr	r2, [pc, #744]	; (8001238 <main+0x5e0>)
 8000f4e:	68d2      	ldr	r2, [r2, #12]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	f883 5327 	strb.w	r5, [r3, #807]	; 0x327
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	605a      	str	r2, [r3, #4]
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000f58:	230c      	movs	r3, #12
 8000f5a:	2200      	movs	r2, #0
	LL_USART_Init(USART3, &USART_InitStruct);
 8000f5c:	48b7      	ldr	r0, [pc, #732]	; (800123c <main+0x5e4>)
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000f5e:	2400      	movs	r4, #0
 8000f60:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
	LL_USART_Init(USART3, &USART_InitStruct);
 8000f64:	a914      	add	r1, sp, #80	; 0x50
	USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8000f66:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000f6a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 8000f6e:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
 8000f72:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
	LL_USART_Init(USART3, &USART_InitStruct);
 8000f76:	f003 fb39 	bl	80045ec <LL_USART_Init>
  *         @arg @ref LL_USART_FIFOTHRESHOLD_3_4
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
 8000f7a:	4bb1      	ldr	r3, [pc, #708]	; (8001240 <main+0x5e8>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f7c:	e853 2f00 	ldrex	r2, [r3]
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8000f80:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f84:	e843 2100 	strex	r1, r2, [r3]
 8000f88:	2900      	cmp	r1, #0
 8000f8a:	d1f7      	bne.n	8000f7c <main+0x324>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000f8c:	e853 2f00 	ldrex	r2, [r3]
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8000f90:	f022 6260 	bic.w	r2, r2, #234881024	; 0xe000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000f94:	e843 2600 	strex	r6, r2, [r3]
 8000f98:	2e00      	cmp	r6, #0
 8000f9a:	d1f7      	bne.n	8000f8c <main+0x334>
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8000f9c:	4ba7      	ldr	r3, [pc, #668]	; (800123c <main+0x5e4>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000fa4:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableOverrunDetect(USART_TypeDef *USARTx)
{
  SET_BIT(USARTx->CR3, USART_CR3_OVRDIS);
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000fac:	609a      	str	r2, [r3, #8]
{
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000fae:	685a      	ldr	r2, [r3, #4]
 8000fb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fb4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000fb6:	689a      	ldr	r2, [r3, #8]
 8000fb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000fbc:	609a      	str	r2, [r3, #8]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f042 0201 	orr.w	r2, r2, #1
 8000fc4:	601a      	str	r2, [r3, #0]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TEACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8000fc6:	69da      	ldr	r2, [r3, #28]
 8000fc8:	0291      	lsls	r1, r2, #10
 8000fca:	d5fc      	bpl.n	8000fc6 <main+0x36e>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_REACK(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8000fcc:	69da      	ldr	r2, [r3, #28]
 8000fce:	0252      	lsls	r2, r2, #9
 8000fd0:	d5f9      	bpl.n	8000fc6 <main+0x36e>
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 8000fd8:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000fdc:	4a99      	ldr	r2, [pc, #612]	; (8001244 <main+0x5ec>)
 8000fde:	9320      	str	r3, [sp, #128]	; 0x80
 8000fe0:	6d91      	ldr	r1, [r2, #88]	; 0x58
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fe2:	4895      	ldr	r0, [pc, #596]	; (8001238 <main+0x5e0>)
 8000fe4:	f041 0110 	orr.w	r1, r1, #16
 8000fe8:	6591      	str	r1, [r2, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000fea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8000fec:	f002 0210 	and.w	r2, r2, #16
 8000ff0:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000ff2:	9a05      	ldr	r2, [sp, #20]
 8000ff4:	68c2      	ldr	r2, [r0, #12]
 8000ff6:	f3c2 2202 	ubfx	r2, r2, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ffa:	f1c2 0107 	rsb	r1, r2, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	1d10      	adds	r0, r2, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	2904      	cmp	r1, #4
 8001002:	bf28      	it	cs
 8001004:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001006:	2806      	cmp	r0, #6
 8001008:	bf98      	it	ls
 800100a:	461a      	movls	r2, r3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 33ff 	mov.w	r3, #4294967295
 8001010:	fa03 f301 	lsl.w	r3, r3, r1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001014:	bf88      	it	hi
 8001016:	3a03      	subhi	r2, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	43db      	mvns	r3, r3
 800101a:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101c:	011b      	lsls	r3, r3, #4
 800101e:	4a85      	ldr	r2, [pc, #532]	; (8001234 <main+0x5dc>)
 8001020:	b2db      	uxtb	r3, r3
 8001022:	f882 3336 	strb.w	r3, [r2, #822]	; 0x336
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800102a:	6053      	str	r3, [r2, #4]
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 800102c:	4c86      	ldr	r4, [pc, #536]	; (8001248 <main+0x5f0>)
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800102e:	f8df 9228 	ldr.w	r9, [pc, #552]	; 8001258 <main+0x600>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001032:	f8df a210 	ldr.w	sl, [pc, #528]	; 8001244 <main+0x5ec>
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001036:	f8df 8224 	ldr.w	r8, [pc, #548]	; 800125c <main+0x604>
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800103a:	2700      	movs	r7, #0
	TIM_InitStruct.Prescaler = 144;
 800103c:	2290      	movs	r2, #144	; 0x90
	TIM_InitStruct.Autoreload = 49999;
 800103e:	f24c 334f 	movw	r3, #49999	; 0xc34f
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 8001042:	a91c      	add	r1, sp, #112	; 0x70
 8001044:	4620      	mov	r0, r4
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001046:	e9cd 731d 	strd	r7, r3, [sp, #116]	; 0x74
	TIM_InitStruct.Prescaler = 144;
 800104a:	f8ad 2070 	strh.w	r2, [sp, #112]	; 0x70
	LL_TIM_Init(TIM6, &TIM_InitStruct);
 800104e:	f003 f89d 	bl	800418c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001052:	6823      	ldr	r3, [r4, #0]
 8001054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001058:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800105a:	6863      	ldr	r3, [r4, #4]
 800105c:	ea03 0309 	and.w	r3, r3, r9
 8001060:	6063      	str	r3, [r4, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001062:	68a3      	ldr	r3, [r4, #8]
 8001064:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001068:	60a3      	str	r3, [r4, #8]
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800106a:	4639      	mov	r1, r7
 800106c:	2220      	movs	r2, #32
 800106e:	a81c      	add	r0, sp, #112	; 0x70
	LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001070:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
 8001074:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
 8001078:	9712      	str	r7, [sp, #72]	; 0x48
	LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800107a:	f005 fab9 	bl	80065f0 <memset>
	LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	e9cd 7714 	strd	r7, r7, [sp, #80]	; 0x50
 8001082:	e9cd 7716 	strd	r7, r7, [sp, #88]	; 0x58
 8001086:	e9cd 7718 	strd	r7, r7, [sp, #96]	; 0x60
 800108a:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
 800108e:	f043 0304 	orr.w	r3, r3, #4
 8001092:	f8ca 3058 	str.w	r3, [sl, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001096:	f8da 3058 	ldr.w	r3, [sl, #88]	; 0x58
	TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800109a:	970f      	str	r7, [sp, #60]	; 0x3c
 800109c:	f003 0304 	and.w	r3, r3, #4
 80010a0:	9303      	str	r3, [sp, #12]
	TIM_InitStruct.Prescaler = 1440;
 80010a2:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
	TIM_InitStruct.Autoreload = 99;
 80010a6:	2363      	movs	r3, #99	; 0x63
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80010a8:	a90e      	add	r1, sp, #56	; 0x38
 80010aa:	4640      	mov	r0, r8
  (void)tmpreg;
 80010ac:	9c03      	ldr	r4, [sp, #12]
	TIM_InitStruct.Prescaler = 1440;
 80010ae:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
	TIM_InitStruct.Autoreload = 99;
 80010b2:	9310      	str	r3, [sp, #64]	; 0x40
	TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80010b4:	9711      	str	r7, [sp, #68]	; 0x44
	LL_TIM_Init(TIM4, &TIM_InitStruct);
 80010b6:	f003 f869 	bl	800418c <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010ba:	f8d8 3000 	ldr.w	r3, [r8]
 80010be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80010c2:	f8c8 3000 	str.w	r3, [r8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80010ca:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80010ce:	f023 0307 	bic.w	r3, r3, #7
 80010d2:	f8c8 3008 	str.w	r3, [r8, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80010d6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	f8c8 3018 	str.w	r3, [r8, #24]
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80010e2:	f04f 0c00 	mov.w	ip, #0
 80010e6:	2400      	movs	r4, #0
 80010e8:	2500      	movs	r5, #0
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80010ea:	aa1c      	add	r2, sp, #112	; 0x70
 80010ec:	4640      	mov	r0, r8
 80010ee:	2101      	movs	r1, #1
	TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80010f0:	f04f 0b60 	mov.w	fp, #96	; 0x60
 80010f4:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 80010f8:	e9cd bc1c 	strd	fp, ip, [sp, #112]	; 0x70
	TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80010fc:	9720      	str	r7, [sp, #128]	; 0x80
	LL_TIM_OC_Init(TIM4, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80010fe:	f003 f8a7 	bl	8004250 <LL_TIM_OC_Init>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001102:	f8d8 3018 	ldr.w	r3, [r8, #24]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	484a      	ldr	r0, [pc, #296]	; (8001230 <main+0x5d8>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	f8c8 3018 	str.w	r3, [r8, #24]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001110:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8001114:	ea03 0309 	and.w	r3, r3, r9
 8001118:	f8c8 3004 	str.w	r3, [r8, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800111c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8001120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001124:	f8c8 3008 	str.w	r3, [r8, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001128:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001134:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
 8001138:	f003 0302 	and.w	r3, r3, #2
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800113c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
 8001140:	9304      	str	r3, [sp, #16]
 8001142:	2200      	movs	r2, #0
 8001144:	2302      	movs	r3, #2
 8001146:	f04f 0840 	mov.w	r8, #64	; 0x40
 800114a:	f04f 0902 	mov.w	r9, #2
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114e:	a914      	add	r1, sp, #80	; 0x50
	Timing.AddressSetupTime = 1;
 8001150:	2401      	movs	r4, #1
 8001152:	2501      	movs	r5, #1
	GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001154:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8001158:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  (void)tmpreg;
 800115c:	f8dd c010 	ldr.w	ip, [sp, #16]
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001160:	f002 fda2 	bl	8003ca8 <LL_GPIO_Init>
	Timing.AddressSetupTime = 1;
 8001164:	e9cd 451e 	strd	r4, r5, [sp, #120]	; 0x78
 8001168:	2401      	movs	r4, #1
 800116a:	2510      	movs	r5, #16
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800116c:	4837      	ldr	r0, [pc, #220]	; (800124c <main+0x5f4>)
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800116e:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8001260 <main+0x608>
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001172:	6087      	str	r7, [r0, #8]
	Timing.AddressSetupTime = 1;
 8001174:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8001178:	2411      	movs	r4, #17
 800117a:	2500      	movs	r5, #0
 800117c:	e9cd 4522 	strd	r4, r5, [sp, #136]	; 0x88
 8001180:	f04f 0801 	mov.w	r8, #1
 8001184:	f04f 090f 	mov.w	r9, #15
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001188:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800118c:	f04f 0e10 	mov.w	lr, #16
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001190:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001194:	a91c      	add	r1, sp, #112	; 0x70
 8001196:	463a      	mov	r2, r7
	Timing.AddressSetupTime = 1;
 8001198:	e9cd 891c 	strd	r8, r9, [sp, #112]	; 0x70
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800119c:	e9c0 7703 	strd	r7, r7, [r0, #12]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80011a0:	e9c0 7706 	strd	r7, r7, [r0, #24]
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80011a4:	e9c0 770a 	strd	r7, r7, [r0, #40]	; 0x28
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80011a8:	e9c0 770c 	strd	r7, r7, [r0, #48]	; 0x30
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80011ac:	e9c0 770e 	strd	r7, r7, [r0, #56]	; 0x38
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80011b0:	e9c0 7710 	strd	r7, r7, [r0, #64]	; 0x40
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80011b4:	e9c0 3c00 	strd	r3, ip, [r0]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80011b8:	6207      	str	r7, [r0, #32]
	hsram1.Init.MaxChipSelectPulse = DISABLE;
 80011ba:	f880 7048 	strb.w	r7, [r0, #72]	; 0x48
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80011be:	f8c0 e014 	str.w	lr, [r0, #20]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80011c2:	6244      	str	r4, [r0, #36]	; 0x24
	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80011c4:	f002 fa62 	bl	800368c <HAL_SRAM_Init>
 80011c8:	bb80      	cbnz	r0, 800122c <main+0x5d4>
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011ca:	f8da 2048 	ldr.w	r2, [sl, #72]	; 0x48
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <main+0x5f8>)
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011d0:	f042 0204 	orr.w	r2, r2, #4
 80011d4:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
 80011d8:	f8da 2048 	ldr.w	r2, [sl, #72]	; 0x48
	hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 80011dc:	6058      	str	r0, [r3, #4]
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80011de:	f002 0204 	and.w	r2, r2, #4
 80011e2:	9202      	str	r2, [sp, #8]
 80011e4:	9a02      	ldr	r2, [sp, #8]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011e6:	f8da 2048 	ldr.w	r2, [sl, #72]	; 0x48
	hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_DISABLE;
 80011ea:	6118      	str	r0, [r3, #16]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011ec:	f042 0201 	orr.w	r2, r2, #1
 80011f0:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
 80011f4:	f8da 2048 	ldr.w	r2, [sl, #72]	; 0x48
	hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 80011f8:	61d8      	str	r0, [r3, #28]
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011fa:	f002 0201 	and.w	r2, r2, #1
 80011fe:	920e      	str	r2, [sp, #56]	; 0x38
	hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8001200:	6218      	str	r0, [r3, #32]
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8001202:	4a14      	ldr	r2, [pc, #80]	; (8001254 <main+0x5fc>)
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001204:	990e      	ldr	r1, [sp, #56]	; 0x38
	hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8001206:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001208:	f44f 4080 	mov.w	r0, #16384	; 0x4000
	hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 800120c:	2140      	movs	r1, #64	; 0x40
	hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800120e:	f44f 7280 	mov.w	r2, #256	; 0x100
	hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8001212:	6098      	str	r0, [r3, #8]
	hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001214:	f44f 6780 	mov.w	r7, #1024	; 0x400
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8001218:	4618      	mov	r0, r3
	hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121a:	e9c3 2705 	strd	r2, r7, [r3, #20]
	hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 800121e:	60d9      	str	r1, [r3, #12]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8001220:	f001 f9ca 	bl	80025b8 <HAL_DMA_Init>
 8001224:	4605      	mov	r5, r0
 8001226:	b1e8      	cbz	r0, 8001264 <main+0x60c>
  __ASM volatile ("cpsid i" : : : "memory");
 8001228:	b672      	cpsid	i
	while (1)
 800122a:	e7fe      	b.n	800122a <main+0x5d2>
 800122c:	b672      	cpsid	i
 800122e:	e7fe      	b.n	800122e <main+0x5d6>
 8001230:	48000400 	.word	0x48000400
 8001234:	e000e100 	.word	0xe000e100
 8001238:	e000ed00 	.word	0xe000ed00
 800123c:	40004800 	.word	0x40004800
 8001240:	40004808 	.word	0x40004808
 8001244:	40021000 	.word	0x40021000
 8001248:	40001000 	.word	0x40001000
 800124c:	2000018c 	.word	0x2000018c
 8001250:	20000258 	.word	0x20000258
 8001254:	4002001c 	.word	0x4002001c
 8001258:	fdffff8f 	.word	0xfdffff8f
 800125c:	40000800 	.word	0x40000800
 8001260:	a0000104 	.word	0xa0000104
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001264:	4602      	mov	r2, r0
 8001266:	4601      	mov	r1, r0
 8001268:	200b      	movs	r0, #11
 800126a:	f001 f945 	bl	80024f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800126e:	200b      	movs	r0, #11
 8001270:	f001 f97a 	bl	8002568 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001274:	462a      	mov	r2, r5
 8001276:	4629      	mov	r1, r5
 8001278:	200c      	movs	r0, #12
 800127a:	f001 f93d 	bl	80024f8 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800127e:	200c      	movs	r0, #12
 8001280:	f001 f972 	bl	8002568 <HAL_NVIC_EnableIRQ>
	hspi1.Instance = SPI1;
 8001284:	4baa      	ldr	r3, [pc, #680]	; (8001530 <main+0x8d8>)
 8001286:	49ab      	ldr	r1, [pc, #684]	; (8001534 <main+0x8dc>)
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001288:	609d      	str	r5, [r3, #8]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800128a:	f44f 7282 	mov.w	r2, #260	; 0x104
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800128e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001292:	e9c3 5504 	strd	r5, r5, [r3, #16]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001296:	e9c3 5508 	strd	r5, r5, [r3, #32]
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800129a:	e9c3 550c 	strd	r5, r5, [r3, #48]	; 0x30
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800129e:	629d      	str	r5, [r3, #40]	; 0x28
	hspi1.Instance = SPI1;
 80012a0:	6019      	str	r1, [r3, #0]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80012a2:	f44f 7500 	mov.w	r5, #512	; 0x200
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012a6:	2128      	movs	r1, #40	; 0x28
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80012a8:	605a      	str	r2, [r3, #4]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012aa:	60d8      	str	r0, [r3, #12]
	hspi1.Init.CRCPolynomial = 7;
 80012ac:	2207      	movs	r2, #7
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012ae:	4618      	mov	r0, r3
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80012b0:	e9c3 5106 	strd	r5, r1, [r3, #24]
	hspi1.Init.CRCPolynomial = 7;
 80012b4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b6:	f002 f963 	bl	8003580 <HAL_SPI_Init>
 80012ba:	b938      	cbnz	r0, 80012cc <main+0x674>
	hcordic.Instance = CORDIC;
 80012bc:	489e      	ldr	r0, [pc, #632]	; (8001538 <main+0x8e0>)
 80012be:	4b9f      	ldr	r3, [pc, #636]	; (800153c <main+0x8e4>)
 80012c0:	6003      	str	r3, [r0, #0]
	if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80012c2:	f001 f8eb 	bl	800249c <HAL_CORDIC_Init>
 80012c6:	b118      	cbz	r0, 80012d0 <main+0x678>
 80012c8:	b672      	cpsid	i
	while (1)
 80012ca:	e7fe      	b.n	80012ca <main+0x672>
 80012cc:	b672      	cpsid	i
 80012ce:	e7fe      	b.n	80012ce <main+0x676>
	htim1.Instance = TIM1;
 80012d0:	4d9b      	ldr	r5, [pc, #620]	; (8001540 <main+0x8e8>)
 80012d2:	4a9c      	ldr	r2, [pc, #624]	; (8001544 <main+0x8ec>)
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	9016      	str	r0, [sp, #88]	; 0x58
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
 80012da:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012de:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e2:	e9c5 0001 	strd	r0, r0, [r5, #4]
	htim1.Init.RepetitionCounter = 0;
 80012e6:	e9c5 0004 	strd	r0, r0, [r5, #16]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	61a8      	str	r0, [r5, #24]
	htim1.Init.Period = 9999;
 80012ec:	f242 730f 	movw	r3, #9999	; 0x270f
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f0:	4628      	mov	r0, r5
	htim1.Instance = TIM1;
 80012f2:	602a      	str	r2, [r5, #0]
	htim1.Init.Period = 9999;
 80012f4:	60eb      	str	r3, [r5, #12]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012f6:	f002 f9f7 	bl	80036e8 <HAL_TIM_Base_Init>
 80012fa:	b108      	cbz	r0, 8001300 <main+0x6a8>
 80012fc:	b672      	cpsid	i
	while (1)
 80012fe:	e7fe      	b.n	80012fe <main+0x6a6>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001300:	a91c      	add	r1, sp, #112	; 0x70
 8001302:	4628      	mov	r0, r5
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001304:	941c      	str	r4, [sp, #112]	; 0x70
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001306:	f002 fac3 	bl	8003890 <HAL_TIM_ConfigClockSource>
 800130a:	4603      	mov	r3, r0
 800130c:	b108      	cbz	r0, 8001312 <main+0x6ba>
 800130e:	b672      	cpsid	i
	while (1)
 8001310:	e7fe      	b.n	8001310 <main+0x6b8>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001312:	4628      	mov	r0, r5
 8001314:	a914      	add	r1, sp, #80	; 0x50
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001316:	2500      	movs	r5, #0
 8001318:	2420      	movs	r4, #32
 800131a:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	9316      	str	r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001320:	f002 fb98 	bl	8003a54 <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4605      	mov	r5, r0
 8001326:	b108      	cbz	r0, 800132c <main+0x6d4>
 8001328:	b672      	cpsid	i
	while (1)
 800132a:	e7fe      	b.n	800132a <main+0x6d2>
	hadc4.Instance = ADC4;
 800132c:	4c86      	ldr	r4, [pc, #536]	; (8001548 <main+0x8f0>)
	ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	4601      	mov	r1, r0
 8001330:	2220      	movs	r2, #32
 8001332:	a81c      	add	r0, sp, #112	; 0x70
 8001334:	f005 f95c 	bl	80065f0 <memset>
	hadc4.Instance = ADC4;
 8001338:	4884      	ldr	r0, [pc, #528]	; (800154c <main+0x8f4>)
 800133a:	6020      	str	r0, [r4, #0]
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800133c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001340:	f04f 0c04 	mov.w	ip, #4
	hadc4.Init.NbrOfConversion = 2;
 8001344:	2102      	movs	r1, #2
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001346:	f44f 62a4 	mov.w	r2, #1312	; 0x520
	hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800134a:	6063      	str	r3, [r4, #4]
	hadc4.Init.LowPowerAutoWait = DISABLE;
 800134c:	83a5      	strh	r5, [r4, #28]
	hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800134e:	2301      	movs	r3, #1
	if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001350:	4620      	mov	r0, r4
	hadc4.Init.GainCompensation = 0;
 8001352:	e9c4 5503 	strd	r5, r5, [r4, #12]
	hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8001356:	60a5      	str	r5, [r4, #8]
	hadc4.Init.DiscontinuousConvMode = DISABLE;
 8001358:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800135c:	6327      	str	r7, [r4, #48]	; 0x30
	hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800135e:	63e5      	str	r5, [r4, #60]	; 0x3c
	hadc4.Init.OversamplingMode = DISABLE;
 8001360:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
	hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001364:	f8c4 c018 	str.w	ip, [r4, #24]
	hadc4.Init.NbrOfConversion = 2;
 8001368:	6221      	str	r1, [r4, #32]
	hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800136a:	62e2      	str	r2, [r4, #44]	; 0x2c
	hadc4.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800136c:	6163      	str	r3, [r4, #20]
	hadc4.Init.DMAContinuousRequests = ENABLE;
 800136e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001372:	f000 fb3b 	bl	80019ec <HAL_ADC_Init>
 8001376:	b108      	cbz	r0, 800137c <main+0x724>
 8001378:	b672      	cpsid	i
	while (1)
 800137a:	e7fe      	b.n	800137a <main+0x722>
	sConfig.Channel = ADC_CHANNEL_4;
 800137c:	4a74      	ldr	r2, [pc, #464]	; (8001550 <main+0x8f8>)
 800137e:	2306      	movs	r3, #6
 8001380:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8001384:	2207      	movs	r2, #7
 8001386:	237f      	movs	r3, #127	; 0x7f
 8001388:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800138c:	a91c      	add	r1, sp, #112	; 0x70
	sConfig.Channel = ADC_CHANNEL_4;
 800138e:	2204      	movs	r2, #4
 8001390:	2300      	movs	r3, #0
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001392:	4620      	mov	r0, r4
	sConfig.Channel = ADC_CHANNEL_4;
 8001394:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8001398:	f000 fca0 	bl	8001cdc <HAL_ADC_ConfigChannel>
 800139c:	b108      	cbz	r0, 80013a2 <main+0x74a>
 800139e:	b672      	cpsid	i
	while (1)
 80013a0:	e7fe      	b.n	80013a0 <main+0x748>
	sConfig.Channel = ADC_CHANNEL_5;
 80013a2:	a361      	add	r3, pc, #388	; (adr r3, 8001528 <main+0x8d0>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013a8:	4620      	mov	r0, r4
 80013aa:	a91c      	add	r1, sp, #112	; 0x70
	sConfig.Channel = ADC_CHANNEL_5;
 80013ac:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
	if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80013b0:	f000 fc94 	bl	8001cdc <HAL_ADC_ConfigChannel>
 80013b4:	b108      	cbz	r0, 80013ba <main+0x762>
 80013b6:	b672      	cpsid	i
	while (1)
 80013b8:	e7fe      	b.n	80013b8 <main+0x760>
	LED_init();
 80013ba:	f003 f9a1 	bl	8004700 <LED_init>
	KBD_init();
 80013be:	f003 fb17 	bl	80049f0 <KBD_init>
	SCI_init();
 80013c2:	f003 f9ed 	bl	80047a0 <SCI_init>
	PSERV_init();
 80013c6:	f003 fec1 	bl	800514c <PSERV_init>
	PSERV_enable();
 80013ca:	f003 fecb 	bl	8005164 <PSERV_enable>
	JOY_init(&hadc4, &htim1);
 80013ce:	495c      	ldr	r1, [pc, #368]	; (8001540 <main+0x8e8>)
 80013d0:	485d      	ldr	r0, [pc, #372]	; (8001548 <main+0x8f0>)
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 80013d2:	4c60      	ldr	r4, [pc, #384]	; (8001554 <main+0x8fc>)
	sp[0].damadgedTime = 0; sp[0].damadgedTimeMax = 300000;
 80013d4:	f8df a194 	ldr.w	sl, [pc, #404]	; 800156c <main+0x914>
	JOY_init(&hadc4, &htim1);
 80013d8:	f003 fa98 	bl	800490c <JOY_init>
	LCD_Init();
 80013dc:	f003 fcc4 	bl	8004d68 <LCD_Init>
	LCD_uGUI_init();
 80013e0:	f003 fcf6 	bl	8004dd0 <LCD_uGUI_init>
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 80013e4:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <main+0x900>)
 80013e6:	681f      	ldr	r7, [r3, #0]
 80013e8:	2500      	movs	r5, #0
 80013ea:	4638      	mov	r0, r7
 80013ec:	e9c4 5500 	strd	r5, r5, [r4]
 80013f0:	f7ff f864 	bl	80004bc <__aeabi_i2d>
 80013f4:	4b59      	ldr	r3, [pc, #356]	; (800155c <main+0x904>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	4680      	mov	r8, r0
 80013fa:	4689      	mov	r9, r1
 80013fc:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8001400:	f7ff f8c6 	bl	8000590 <__aeabi_dmul>
 8001404:	f7ff fb9c 	bl	8000b40 <__aeabi_d2f>
 8001408:	ee07 7a90 	vmov	s15, r7
 800140c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001410:	4684      	mov	ip, r0
 8001412:	f04f 4b86 	mov.w	fp, #1124073472	; 0x43000000
 8001416:	2703      	movs	r7, #3
 8001418:	edc4 7a03 	vstr	s15, [r4, #12]
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 800141c:	4b50      	ldr	r3, [pc, #320]	; (8001560 <main+0x908>)
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 800141e:	f8c4 c008 	str.w	ip, [r4, #8]
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 8001422:	2200      	movs	r2, #0
 8001424:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
 8001428:	4640      	mov	r0, r8
 800142a:	4649      	mov	r1, r9
	sp[0].damadgedTime = 0; sp[0].damadgedTimeMax = 300000;
 800142c:	6225      	str	r5, [r4, #32]
	sp[0].tip = 0; sp[0].map = 0; sp[0].x = 1.5 * Blocksize; sp[0].y = 5 * Blocksize; sp[0].sizeX = 128; sp[0].sizeY = 128; sp[0].life = 3;
 800142e:	f8c4 b014 	str.w	fp, [r4, #20]
 8001432:	f8c4 b018 	str.w	fp, [r4, #24]
 8001436:	61e7      	str	r7, [r4, #28]
	sp[0].damadgedTime = 0; sp[0].damadgedTimeMax = 300000;
 8001438:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 800143c:	f7ff f8a8 	bl	8000590 <__aeabi_dmul>
 8001440:	f7ff fb7e 	bl	8000b40 <__aeabi_d2f>
 8001444:	4684      	mov	ip, r0
 8001446:	4b47      	ldr	r3, [pc, #284]	; (8001564 <main+0x90c>)
 8001448:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
 800144c:	2200      	movs	r2, #0
 800144e:	4640      	mov	r0, r8
 8001450:	4649      	mov	r1, r9
 8001452:	f7ff f89d 	bl	8000590 <__aeabi_dmul>
 8001456:	f7ff fb73 	bl	8000b40 <__aeabi_d2f>
 800145a:	4684      	mov	ip, r0
	UG_FillFrame(0, 0, 40, s_height, C_BLACK);
 800145c:	9500      	str	r5, [sp, #0]
 800145e:	4629      	mov	r1, r5
 8001460:	4628      	mov	r0, r5
 8001462:	23f0      	movs	r3, #240	; 0xf0
 8001464:	2228      	movs	r2, #40	; 0x28
	sp[1].damadgedTime = 0; sp[1].damadgedTimeMax = 300000;
 8001466:	e9c4 7512 	strd	r7, r5, [r4, #72]	; 0x48
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 800146a:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
 800146e:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
	sp[1].damadgedTime = 0; sp[1].damadgedTimeMax = 300000;
 8001472:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	sp[1].tip = 0; sp[1].map = 0; sp[1].x = 2.5 * Blocksize; sp[1].y = 7.5 * Blocksize; sp[1].sizeX = 128; sp[1].sizeY = 128; sp[1].life = 3;
 8001476:	f8c4 c038 	str.w	ip, [r4, #56]	; 0x38
	UG_FillFrame(0, 0, 40, s_height, C_BLACK);
 800147a:	f004 fe3d 	bl	80060f8 <UG_FillFrame>
	UG_FillFrame(280, 0, 40, s_height+50, C_BLACK);
 800147e:	9500      	str	r5, [sp, #0]
 8001480:	4629      	mov	r1, r5
 8001482:	f44f 7391 	mov.w	r3, #290	; 0x122
 8001486:	2228      	movs	r2, #40	; 0x28
 8001488:	f44f 708c 	mov.w	r0, #280	; 0x118
 800148c:	f004 fe34 	bl	80060f8 <UG_FillFrame>
		UG_PutChar('F', 10, c*15, C_RED, C_BLACK);
 8001490:	2400      	movs	r4, #0
 8001492:	4632      	mov	r2, r6
 8001494:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001498:	210a      	movs	r1, #10
 800149a:	2046      	movs	r0, #70	; 0x46
 800149c:	9400      	str	r4, [sp, #0]
 800149e:	f005 f84f 	bl	8006540 <UG_PutChar>
		UG_PutChar('E', 20, c*15, C_RED, C_BLACK);
 80014a2:	4632      	mov	r2, r6
 80014a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014a8:	2114      	movs	r1, #20
 80014aa:	2045      	movs	r0, #69	; 0x45
 80014ac:	9400      	str	r4, [sp, #0]
 80014ae:	f005 f847 	bl	8006540 <UG_PutChar>
		UG_PutChar('F', 280+10, c*15, C_RED, C_BLACK);
 80014b2:	4632      	mov	r2, r6
 80014b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014b8:	f44f 7191 	mov.w	r1, #290	; 0x122
 80014bc:	2046      	movs	r0, #70	; 0x46
 80014be:	9400      	str	r4, [sp, #0]
 80014c0:	f005 f83e 	bl	8006540 <UG_PutChar>
		UG_PutChar('E', 280+20, c*15, C_RED, C_BLACK);
 80014c4:	4632      	mov	r2, r6
 80014c6:	9400      	str	r4, [sp, #0]
 80014c8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014cc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80014d0:	360f      	adds	r6, #15
 80014d2:	2045      	movs	r0, #69	; 0x45
 80014d4:	f005 f834 	bl	8006540 <UG_PutChar>
	for(int c = 0;c < 20;c++)
 80014d8:	f5b6 7f96 	cmp.w	r6, #300	; 0x12c
 80014dc:	d1d8      	bne.n	8001490 <main+0x838>
	TIMUT_stopwatch_set_time_mark(&sw);
 80014de:	a81c      	add	r0, sp, #112	; 0x70
 80014e0:	f004 fdb2 	bl	8006048 <TIMUT_stopwatch_set_time_mark>
			if(ILI9341_SendData(pixels, 57600)) LED_on(LED0);
 80014e4:	4c20      	ldr	r4, [pc, #128]	; (8001568 <main+0x910>)
		if(TIMUT_stopwatch_has_X_ms_passed(&sw, 50))
 80014e6:	2132      	movs	r1, #50	; 0x32
 80014e8:	a81c      	add	r0, sp, #112	; 0x70
 80014ea:	f004 fdb3 	bl	8006054 <TIMUT_stopwatch_has_X_ms_passed>
 80014ee:	2800      	cmp	r0, #0
 80014f0:	d0f9      	beq.n	80014e6 <main+0x88e>
			drawMap();
 80014f2:	f003 ff41 	bl	8005378 <drawMap>
			drawGun();
 80014f6:	f003 fea3 	bl	8005240 <drawGun>
			ILI9341_SetDisplayWindow(40, 0, 240, 240);
 80014fa:	23f0      	movs	r3, #240	; 0xf0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2028      	movs	r0, #40	; 0x28
 8001500:	461a      	mov	r2, r3
 8001502:	f003 fd09 	bl	8004f18 <ILI9341_SetDisplayWindow>
			if(ILI9341_SendData(pixels, 57600)) LED_on(LED0);
 8001506:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 800150a:	4620      	mov	r0, r4
 800150c:	f003 fcb0 	bl	8004e70 <ILI9341_SendData>
 8001510:	b130      	cbz	r0, 8001520 <main+0x8c8>
 8001512:	2000      	movs	r0, #0
 8001514:	f003 f91e 	bl	8004754 <LED_on>
			TIMUT_stopwatch_set_time_mark(&sw);
 8001518:	a81c      	add	r0, sp, #112	; 0x70
 800151a:	f004 fd95 	bl	8006048 <TIMUT_stopwatch_set_time_mark>
 800151e:	e7e2      	b.n	80014e6 <main+0x88e>
			else LED_off(LED0);
 8001520:	f003 f922 	bl	8004768 <LED_off>
 8001524:	e7f8      	b.n	8001518 <main+0x8c0>
 8001526:	bf00      	nop
 8001528:	14f00020 	.word	0x14f00020
 800152c:	0000000c 	.word	0x0000000c
 8001530:	200002b8 	.word	0x200002b8
 8001534:	40013000 	.word	0x40013000
 8001538:	200001e4 	.word	0x200001e4
 800153c:	40020c00 	.word	0x40020c00
 8001540:	2000020c 	.word	0x2000020c
 8001544:	40012c00 	.word	0x40012c00
 8001548:	2000031c 	.word	0x2000031c
 800154c:	50000500 	.word	0x50000500
 8001550:	10c00010 	.word	0x10c00010
 8001554:	2001cb6c 	.word	0x2001cb6c
 8001558:	2000000c 	.word	0x2000000c
 800155c:	3ff80000 	.word	0x3ff80000
 8001560:	40040000 	.word	0x40040000
 8001564:	401e0000 	.word	0x401e0000
 8001568:	2000096c 	.word	0x2000096c
 800156c:	000493e0 	.word	0x000493e0

08001570 <Error_Handler>:
 8001570:	b672      	cpsid	i
	while (1)
 8001572:	e7fe      	b.n	8001572 <Error_Handler+0x2>

08001574 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <HAL_MspInit+0x30>)
 8001576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001578:	f042 0201 	orr.w	r2, r2, #1
 800157c:	661a      	str	r2, [r3, #96]	; 0x60
 800157e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8001580:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001582:	f002 0201 	and.w	r2, r2, #1
 8001586:	9200      	str	r2, [sp, #0]
 8001588:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800158c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001590:	659a      	str	r2, [r3, #88]	; 0x58
 8001592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	9b01      	ldr	r3, [sp, #4]
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159c:	b002      	add	sp, #8
  HAL_PWREx_DisableUCPDDeadBattery();
 800159e:	f001 bac9 	b.w	8002b34 <HAL_PWREx_DisableUCPDDeadBattery>
 80015a2:	bf00      	nop
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4604      	mov	r4, r0
 80015ac:	b09c      	sub	sp, #112	; 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015b0:	2254      	movs	r2, #84	; 0x54
 80015b2:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80015b8:	e9cd 1104 	strd	r1, r1, [sp, #16]
 80015bc:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015be:	f005 f817 	bl	80065f0 <memset>
  if(hadc->Instance==ADC4)
 80015c2:	6822      	ldr	r2, [r4, #0]
 80015c4:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_ADC_MspInit+0xb8>)
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d001      	beq.n	80015ce <HAL_ADC_MspInit+0x26>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80015ca:	b01c      	add	sp, #112	; 0x70
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015d6:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80015d8:	9207      	str	r2, [sp, #28]
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_SYSCLK;
 80015da:	9319      	str	r3, [sp, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015dc:	f001 fe48 	bl	8003270 <HAL_RCCEx_PeriphCLKConfig>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	d137      	bne.n	8001654 <HAL_ADC_MspInit+0xac>
    __HAL_RCC_ADC345_CLK_ENABLE();
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_ADC_MspInit+0xbc>)
    hdma_adc4.Instance = DMA1_Channel1;
 80015e6:	4d20      	ldr	r5, [pc, #128]	; (8001668 <HAL_ADC_MspInit+0xc0>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80015e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	4820      	ldr	r0, [pc, #128]	; (800166c <HAL_ADC_MspInit+0xc4>)
    __HAL_RCC_ADC345_CLK_ENABLE();
 80015ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80015f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80015f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015f4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80015f8:	9200      	str	r2, [sp, #0]
 80015fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015fe:	f042 0202 	orr.w	r2, r2, #2
 8001602:	64da      	str	r2, [r3, #76]	; 0x4c
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800160c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8001610:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001612:	9e01      	ldr	r6, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001614:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2600      	movs	r6, #0
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001618:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	9604      	str	r6, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f001 f90d 	bl	800283c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel1;
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <HAL_ADC_MspInit+0xc8>)
 8001624:	602a      	str	r2, [r5, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001626:	2326      	movs	r3, #38	; 0x26
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001628:	2080      	movs	r0, #128	; 0x80
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800162a:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800162e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001632:	606b      	str	r3, [r5, #4]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001634:	6128      	str	r0, [r5, #16]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001636:	2320      	movs	r3, #32
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001638:	4628      	mov	r0, r5
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163a:	e9c5 1205 	strd	r1, r2, [r5, #20]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800163e:	60ae      	str	r6, [r5, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001640:	60ee      	str	r6, [r5, #12]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001642:	622e      	str	r6, [r5, #32]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001644:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001646:	f000 ffb7 	bl	80025b8 <HAL_DMA_Init>
 800164a:	b930      	cbnz	r0, 800165a <HAL_ADC_MspInit+0xb2>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800164c:	6565      	str	r5, [r4, #84]	; 0x54
 800164e:	62ac      	str	r4, [r5, #40]	; 0x28
}
 8001650:	b01c      	add	sp, #112	; 0x70
 8001652:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001654:	f7ff ff8c 	bl	8001570 <Error_Handler>
 8001658:	e7c4      	b.n	80015e4 <HAL_ADC_MspInit+0x3c>
      Error_Handler();
 800165a:	f7ff ff89 	bl	8001570 <Error_Handler>
 800165e:	e7f5      	b.n	800164c <HAL_ADC_MspInit+0xa4>
 8001660:	50000500 	.word	0x50000500
 8001664:	40021000 	.word	0x40021000
 8001668:	2000012c 	.word	0x2000012c
 800166c:	48000400 	.word	0x48000400
 8001670:	40020008 	.word	0x40020008

08001674 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_CORDIC_MspInit+0x2c>)
 8001676:	6802      	ldr	r2, [r0, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d000      	beq.n	800167e <HAL_CORDIC_MspInit+0xa>
 800167c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800167e:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8001682:	f042 0208 	orr.w	r2, r2, #8
 8001686:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800168a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800168e:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8001690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800169a:	b002      	add	sp, #8
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40020c00 	.word	0x40020c00

080016a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI1)
 80016a6:	6801      	ldr	r1, [r0, #0]
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_SPI_MspInit+0x68>)
{
 80016aa:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	2300      	movs	r3, #0
  if(hspi->Instance==SPI1)
 80016ae:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016b4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80016b8:	9306      	str	r3, [sp, #24]
  if(hspi->Instance==SPI1)
 80016ba:	d001      	beq.n	80016c0 <HAL_SPI_MspInit+0x1c>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80016bc:	b009      	add	sp, #36	; 0x24
 80016be:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c8:	4811      	ldr	r0, [pc, #68]	; (8001710 <HAL_SPI_MspInit+0x6c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80016d0:	661a      	str	r2, [r3, #96]	; 0x60
 80016d2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016d4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80016d8:	9200      	str	r2, [sp, #0]
 80016da:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80016e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ea:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016ec:	2305      	movs	r3, #5
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016ee:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016f0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80016f2:	2200      	movs	r2, #0
 80016f4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f6:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80016f8:	241c      	movs	r4, #28
 80016fa:	2502      	movs	r5, #2
 80016fc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001700:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001704:	f001 f89a 	bl	800283c <HAL_GPIO_Init>
}
 8001708:	b009      	add	sp, #36	; 0x24
 800170a:	bd30      	pop	{r4, r5, pc}
 800170c:	40013000 	.word	0x40013000
 8001710:	48001800 	.word	0x48001800

08001714 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <HAL_TIM_Base_MspInit+0x28>)
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d000      	beq.n	800171e <HAL_TIM_Base_MspInit+0xa>
 800171c:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800171e:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
{
 8001722:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001724:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800172a:	661a      	str	r2, [r3, #96]	; 0x60
 800172c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800172e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001732:	9301      	str	r3, [sp, #4]
 8001734:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001736:	b002      	add	sp, #8
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40012c00 	.word	0x40012c00

08001740 <HAL_SRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
 8001740:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <HAL_SRAM_MspInit+0x78>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	b102      	cbz	r2, 8001748 <HAL_SRAM_MspInit+0x8>
 8001746:	4770      	bx	lr
    return;
  }
  FMC_Initialized = 1;

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001748:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
  FMC_Initialized = 1;
 800174c:	2101      	movs	r1, #1
  __HAL_RCC_FMC_CLK_ENABLE();
 800174e:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001752:	b5f0      	push	{r4, r5, r6, r7, lr}
  FMC_Initialized = 1;
 8001754:	6019      	str	r1, [r3, #0]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001756:	6d13      	ldr	r3, [r2, #80]	; 0x50
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001758:	4818      	ldr	r0, [pc, #96]	; (80017bc <HAL_SRAM_MspInit+0x7c>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800175a:	430b      	orrs	r3, r1
 800175c:	6513      	str	r3, [r2, #80]	; 0x50
 800175e:	6d13      	ldr	r3, [r2, #80]	; 0x50
void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001760:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_FMC_CLK_ENABLE();
 8001762:	400b      	ands	r3, r1
 8001764:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001766:	2400      	movs	r4, #0
 8001768:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800176a:	260c      	movs	r6, #12
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800176c:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800176e:	f64f 7280 	movw	r2, #65408	; 0xff80
 8001772:	2302      	movs	r3, #2
 8001774:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001778:	e9cd 4504 	strd	r4, r5, [sp, #16]
  __HAL_RCC_FMC_CLK_ENABLE();
 800177c:	9f01      	ldr	r7, [sp, #4]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800177e:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001780:	f001 f85c 	bl	800283c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001784:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001786:	f24c 72b3 	movw	r2, #51123	; 0xc7b3
 800178a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <HAL_SRAM_MspInit+0x80>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800178e:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001790:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001794:	e9cd 4504 	strd	r4, r5, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001798:	f001 f850 	bl	800283c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800179c:	2220      	movs	r2, #32
 800179e:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a0:	4808      	ldr	r0, [pc, #32]	; (80017c4 <HAL_SRAM_MspInit+0x84>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a2:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a4:	a902      	add	r1, sp, #8
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017a6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80017aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017ae:	f001 f845 	bl	800283c <HAL_GPIO_Init>
  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80017b2:	b009      	add	sp, #36	; 0x24
 80017b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b6:	bf00      	nop
 80017b8:	20000104 	.word	0x20000104
 80017bc:	48001000 	.word	0x48001000
 80017c0:	48000c00 	.word	0x48000c00
 80017c4:	48001800 	.word	0x48001800

080017c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler>
 80017ca:	bf00      	nop

080017cc <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <HardFault_Handler>
 80017ce:	bf00      	nop

080017d0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <MemManage_Handler>
 80017d2:	bf00      	nop

080017d4 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <BusFault_Handler>
 80017d6:	bf00      	nop

080017d8 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <UsageFault_Handler>
 80017da:	bf00      	nop

080017dc <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop

080017e0 <DebugMon_Handler>:
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop

080017e4 <PendSV_Handler>:
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop

080017e8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e8:	f000 b8dc 	b.w	80019a4 <HAL_IncTick>

080017ec <DMA1_Channel1_IRQHandler>:
void DMA1_Channel1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80017ec:	4801      	ldr	r0, [pc, #4]	; (80017f4 <DMA1_Channel1_IRQHandler+0x8>)
 80017ee:	f000 bfd7 	b.w	80027a0 <HAL_DMA_IRQHandler>
 80017f2:	bf00      	nop
 80017f4:	2000012c 	.word	0x2000012c

080017f8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 80017f8:	4801      	ldr	r0, [pc, #4]	; (8001800 <DMA1_Channel2_IRQHandler+0x8>)
 80017fa:	f000 bfd1 	b.w	80027a0 <HAL_DMA_IRQHandler>
 80017fe:	bf00      	nop
 8001800:	20000258 	.word	0x20000258

08001804 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001804:	b508      	push	{r3, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <USART3_IRQHandler+0x30>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	0690      	lsls	r0, r2, #26
 800180c:	d502      	bpl.n	8001814 <USART3_IRQHandler+0x10>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	0699      	lsls	r1, r3, #26
 8001812:	d40b      	bmi.n	800182c <USART3_IRQHandler+0x28>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <USART3_IRQHandler+0x30>)
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	0612      	lsls	r2, r2, #24
 800181a:	d506      	bpl.n	800182a <USART3_IRQHandler+0x26>
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	061b      	lsls	r3, r3, #24
 8001820:	d503      	bpl.n	800182a <USART3_IRQHandler+0x26>

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001822:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
				SCI_transmit_char_Callback();
 8001826:	f003 b80b 	b.w	8004840 <SCI_transmit_char_Callback>
}
 800182a:	bd08      	pop	{r3, pc}
				SCI_receive_char_Callback();
 800182c:	f002 fffc 	bl	8004828 <SCI_receive_char_Callback>
 8001830:	e7f0      	b.n	8001814 <USART3_IRQHandler+0x10>
 8001832:	bf00      	nop
 8001834:	40004800 	.word	0x40004800

08001838 <TIM6_DAC_IRQHandler>:
  return ((READ_BIT(TIMx->CR1, TIM_CR1_UDIS) == (uint32_t)RESET) ? 1UL : 0UL);
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <TIM6_DAC_IRQHandler+0x1c>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	0791      	lsls	r1, r2, #30
 800183e:	d402      	bmi.n	8001846 <TIM6_DAC_IRQHandler+0xe>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001840:	691a      	ldr	r2, [r3, #16]
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	if(LL_TIM_IsEnabledUpdateEvent(TIM6))
	{
		if(LL_TIM_IsActiveFlag_UPDATE(TIM6))	// postavljena zastavica RXNE?
 8001842:	07d2      	lsls	r2, r2, #31
 8001844:	d400      	bmi.n	8001848 <TIM6_DAC_IRQHandler+0x10>
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */

  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001846:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001848:	f06f 0201 	mvn.w	r2, #1
 800184c:	611a      	str	r2, [r3, #16]
			PSERV_run_services_Callback();
 800184e:	f003 bc93 	b.w	8005178 <PSERV_run_services_Callback>
 8001852:	bf00      	nop
 8001854:	40001000 	.word	0x40001000

08001858 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001858:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185a:	1e16      	subs	r6, r2, #0
 800185c:	dd07      	ble.n	800186e <_read+0x16>
 800185e:	460c      	mov	r4, r1
 8001860:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001862:	f3af 8000 	nop.w
 8001866:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800186a:	42a5      	cmp	r5, r4
 800186c:	d1f9      	bne.n	8001862 <_read+0xa>
	}

return len;
}
 800186e:	4630      	mov	r0, r6
 8001870:	bd70      	pop	{r4, r5, r6, pc}
 8001872:	bf00      	nop

08001874 <_close>:
}

int _close(int file)
{
	return -1;
}
 8001874:	f04f 30ff 	mov.w	r0, #4294967295
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800187c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001880:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001882:	2000      	movs	r0, #0
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop

08001888 <_lseek>:
}

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001888:	2000      	movs	r0, #0
 800188a:	4770      	bx	lr

0800188c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	490c      	ldr	r1, [pc, #48]	; (80018c0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800188e:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001890:	680b      	ldr	r3, [r1, #0]
{
 8001892:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001894:	4c0c      	ldr	r4, [pc, #48]	; (80018c8 <_sbrk+0x3c>)
 8001896:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001898:	b12b      	cbz	r3, 80018a6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800189a:	4418      	add	r0, r3
 800189c:	4290      	cmp	r0, r2
 800189e:	d807      	bhi.n	80018b0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80018a0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <_sbrk+0x40>)
 80018a8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80018aa:	4418      	add	r0, r3
 80018ac:	4290      	cmp	r0, r2
 80018ae:	d9f7      	bls.n	80018a0 <_sbrk+0x14>
    errno = ENOMEM;
 80018b0:	f004 fe74 	bl	800659c <__errno>
 80018b4:	230c      	movs	r3, #12
 80018b6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018bc:	4618      	mov	r0, r3
 80018be:	bd10      	pop	{r4, pc}
 80018c0:	20000108 	.word	0x20000108
 80018c4:	20020000 	.word	0x20020000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	2001cbd8 	.word	0x2001cbd8

080018d0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d0:	4a03      	ldr	r2, [pc, #12]	; (80018e0 <SystemInit+0x10>)
 80018d2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80018d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018da:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018e8:	480d      	ldr	r0, [pc, #52]	; (8001920 <LoopForever+0x6>)
  ldr r1, =_edata
 80018ea:	490e      	ldr	r1, [pc, #56]	; (8001924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018ec:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <LoopForever+0xe>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018f0:	e002      	b.n	80018f8 <LoopCopyDataInit>

080018f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018f6:	3304      	adds	r3, #4

080018f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018fc:	d3f9      	bcc.n	80018f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001900:	4c0b      	ldr	r4, [pc, #44]	; (8001930 <LoopForever+0x16>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001904:	e001      	b.n	800190a <LoopFillZerobss>

08001906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001908:	3204      	adds	r2, #4

0800190a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800190a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800190c:	d3fb      	bcc.n	8001906 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800190e:	f7ff ffdf 	bl	80018d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001912:	f004 fe49 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001916:	f7ff f99f 	bl	8000c58 <main>

0800191a <LoopForever>:

LoopForever:
    b LoopForever
 800191a:	e7fe      	b.n	800191a <LoopForever>
  ldr   r0, =_estack
 800191c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001928:	08017e20 	.word	0x08017e20
  ldr r2, =_sbss
 800192c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001930:	2001cbd4 	.word	0x2001cbd4

08001934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC1_2_IRQHandler>
	...

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_InitTick+0x40>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	b90b      	cbnz	r3, 8001944 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001940:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001942:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001944:	490d      	ldr	r1, [pc, #52]	; (800197c <HAL_InitTick+0x44>)
 8001946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800194a:	4605      	mov	r5, r0
 800194c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001950:	6808      	ldr	r0, [r1, #0]
 8001952:	fbb0 f0f3 	udiv	r0, r0, r3
 8001956:	f000 fe15 	bl	8002584 <HAL_SYSTICK_Config>
 800195a:	4604      	mov	r4, r0
 800195c:	2800      	cmp	r0, #0
 800195e:	d1ef      	bne.n	8001940 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001960:	2d0f      	cmp	r5, #15
 8001962:	d8ed      	bhi.n	8001940 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	4602      	mov	r2, r0
 8001966:	4629      	mov	r1, r5
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 fdc4 	bl	80024f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_InitTick+0x48>)
 8001972:	4620      	mov	r0, r4
 8001974:	601d      	str	r5, [r3, #0]
}
 8001976:	bd38      	pop	{r3, r4, r5, pc}
 8001978:	20000004 	.word	0x20000004
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_Init>:
{
 8001984:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 fda2 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198c:	200e      	movs	r0, #14
 800198e:	f7ff ffd3 	bl	8001938 <HAL_InitTick>
 8001992:	b110      	cbz	r0, 800199a <HAL_Init+0x16>
    status = HAL_ERROR;
 8001994:	2401      	movs	r4, #1
}
 8001996:	4620      	mov	r0, r4
 8001998:	bd10      	pop	{r4, pc}
 800199a:	4604      	mov	r4, r0
    HAL_MspInit();
 800199c:	f7ff fdea 	bl	8001574 <HAL_MspInit>
}
 80019a0:	4620      	mov	r0, r4
 80019a2:	bd10      	pop	{r4, pc}

080019a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_IncTick+0x10>)
 80019a6:	4904      	ldr	r1, [pc, #16]	; (80019b8 <HAL_IncTick+0x14>)
 80019a8:	6813      	ldr	r3, [r2, #0]
 80019aa:	6809      	ldr	r1, [r1, #0]
 80019ac:	440b      	add	r3, r1
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000388 	.word	0x20000388
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <HAL_GetTick+0x8>)
 80019be:	6818      	ldr	r0, [r3, #0]
}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000388 	.word	0x20000388

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fff6 	bl	80019bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80019d2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80019d4:	d002      	beq.n	80019dc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <HAL_Delay+0x20>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	1b43      	subs	r3, r0, r5
 80019e2:	42a3      	cmp	r3, r4
 80019e4:	d3fa      	bcc.n	80019dc <HAL_Delay+0x14>
  {
  }
}
 80019e6:	bd38      	pop	{r3, r4, r5, pc}
 80019e8:	20000004 	.word	0x20000004

080019ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80019f4:	2800      	cmp	r0, #0
 80019f6:	f000 80d6 	beq.w	8001ba6 <HAL_ADC_Init+0x1ba>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80019fa:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 80019fc:	4604      	mov	r4, r0
 80019fe:	2d00      	cmp	r5, #0
 8001a00:	f000 809f 	beq.w	8001b42 <HAL_ADC_Init+0x156>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a04:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a06:	6893      	ldr	r3, [r2, #8]
 8001a08:	0099      	lsls	r1, r3, #2
 8001a0a:	d505      	bpl.n	8001a18 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a0c:	6893      	ldr	r3, [r2, #8]
 8001a0e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a16:	6093      	str	r3, [r2, #8]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a18:	6893      	ldr	r3, [r2, #8]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	d419      	bmi.n	8001a52 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <HAL_ADC_Init+0x230>)
 8001a20:	487f      	ldr	r0, [pc, #508]	; (8001c20 <HAL_ADC_Init+0x234>)
 8001a22:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8001a24:	6891      	ldr	r1, [r2, #8]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	fba0 0303 	umull	r0, r3, r0, r3
 8001a2c:	099b      	lsrs	r3, r3, #6
 8001a2e:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8001a32:	3301      	adds	r3, #1
 8001a34:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001a3e:	6091      	str	r1, [r2, #8]
 8001a40:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001a42:	9b01      	ldr	r3, [sp, #4]
 8001a44:	b12b      	cbz	r3, 8001a52 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8001a46:	9b01      	ldr	r3, [sp, #4]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f9      	bne.n	8001a46 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a52:	6893      	ldr	r3, [r2, #8]
 8001a54:	00de      	lsls	r6, r3, #3
 8001a56:	d466      	bmi.n	8001b26 <HAL_ADC_Init+0x13a>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a60:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	6623      	str	r3, [r4, #96]	; 0x60
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a68:	6893      	ldr	r3, [r2, #8]
 8001a6a:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8001a6e:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a72:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a74:	d15e      	bne.n	8001b34 <HAL_ADC_Init+0x148>
 8001a76:	06dd      	lsls	r5, r3, #27
 8001a78:	d45c      	bmi.n	8001b34 <HAL_ADC_Init+0x148>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001a7c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a86:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a88:	07d9      	lsls	r1, r3, #31
 8001a8a:	d419      	bmi.n	8001ac0 <HAL_ADC_Init+0xd4>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a8c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001a90:	f000 80a1 	beq.w	8001bd6 <HAL_ADC_Init+0x1ea>
 8001a94:	4b63      	ldr	r3, [pc, #396]	; (8001c24 <HAL_ADC_Init+0x238>)
 8001a96:	429a      	cmp	r2, r3
 8001a98:	f000 80a6 	beq.w	8001be8 <HAL_ADC_Init+0x1fc>
 8001a9c:	4d62      	ldr	r5, [pc, #392]	; (8001c28 <HAL_ADC_Init+0x23c>)
 8001a9e:	4963      	ldr	r1, [pc, #396]	; (8001c2c <HAL_ADC_Init+0x240>)
 8001aa0:	68ad      	ldr	r5, [r5, #8]
 8001aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	6889      	ldr	r1, [r1, #8]
 8001aaa:	432b      	orrs	r3, r5
 8001aac:	430b      	orrs	r3, r1
 8001aae:	07db      	lsls	r3, r3, #31
 8001ab0:	d406      	bmi.n	8001ac0 <HAL_ADC_Init+0xd4>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ab2:	495f      	ldr	r1, [pc, #380]	; (8001c30 <HAL_ADC_Init+0x244>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ab4:	688b      	ldr	r3, [r1, #8]
 8001ab6:	6865      	ldr	r5, [r4, #4]
 8001ab8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001abc:	432b      	orrs	r3, r5
 8001abe:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 8001ac0:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8001ac4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ac6:	432b      	orrs	r3, r5
 8001ac8:	430b      	orrs	r3, r1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aca:	7f65      	ldrb	r5, [r4, #29]
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001acc:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8001ad0:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ad4:	2901      	cmp	r1, #1
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ada:	d05f      	beq.n	8001b9c <HAL_ADC_Init+0x1b0>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001adc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001ade:	b121      	cbz	r1, 8001aea <HAL_ADC_Init+0xfe>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 8001ae0:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae2:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ae6:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ae8:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001aea:	68d6      	ldr	r6, [r2, #12]
 8001aec:	4951      	ldr	r1, [pc, #324]	; (8001c34 <HAL_ADC_Init+0x248>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001aee:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001af0:	4031      	ands	r1, r6
 8001af2:	430b      	orrs	r3, r1
 8001af4:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001af6:	6913      	ldr	r3, [r2, #16]
 8001af8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001afc:	432b      	orrs	r3, r5
 8001afe:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b00:	6893      	ldr	r3, [r2, #8]
 8001b02:	075e      	lsls	r6, r3, #29
 8001b04:	d523      	bpl.n	8001b4e <HAL_ADC_Init+0x162>
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b06:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b08:	6963      	ldr	r3, [r4, #20]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d04e      	beq.n	8001bac <HAL_ADC_Init+0x1c0>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b0e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b10:	f023 030f 	bic.w	r3, r3, #15
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b16:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b18:	f023 0303 	bic.w	r3, r3, #3
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8001b22:	b002      	add	sp, #8
 8001b24:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b26:	6893      	ldr	r3, [r2, #8]
 8001b28:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b2c:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b30:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001b32:	d0a0      	beq.n	8001a76 <HAL_ADC_Init+0x8a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b34:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8001b36:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b38:	f043 0310 	orr.w	r3, r3, #16
 8001b3c:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8001b3e:	b002      	add	sp, #8
 8001b40:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8001b42:	f7ff fd31 	bl	80015a8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001b46:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 8001b48:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8001b4c:	e75a      	b.n	8001a04 <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b4e:	6893      	ldr	r3, [r2, #8]
 8001b50:	071d      	lsls	r5, r3, #28
 8001b52:	d4d9      	bmi.n	8001b08 <HAL_ADC_Init+0x11c>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b54:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b5a:	7f26      	ldrb	r6, [r4, #28]
      if (hadc->Init.GainCompensation != 0UL)
 8001b5c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b5e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b62:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b64:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b68:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b70:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8001b72:	bb1d      	cbnz	r5, 8001bbc <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b78:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001b7a:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001b7e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b86:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 8001b8a:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d033      	beq.n	8001bfa <HAL_ADC_Init+0x20e>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b92:	6913      	ldr	r3, [r2, #16]
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	6113      	str	r3, [r2, #16]
 8001b9a:	e7b5      	b.n	8001b08 <HAL_ADC_Init+0x11c>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b9c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8001b9e:	3901      	subs	r1, #1
 8001ba0:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8001ba4:	e79a      	b.n	8001adc <HAL_ADC_Init+0xf0>
    return HAL_ERROR;
 8001ba6:	2001      	movs	r0, #1
}
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001bac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001bae:	6a23      	ldr	r3, [r4, #32]
 8001bb0:	f021 010f 	bic.w	r1, r1, #15
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	430b      	orrs	r3, r1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	e7ac      	b.n	8001b16 <HAL_ADC_Init+0x12a>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bc2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8001bc6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bce:	432b      	orrs	r3, r5
 8001bd0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001bd4:	e7d9      	b.n	8001b8a <HAL_ADC_Init+0x19e>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bd6:	4913      	ldr	r1, [pc, #76]	; (8001c24 <HAL_ADC_Init+0x238>)
 8001bd8:	6893      	ldr	r3, [r2, #8]
 8001bda:	6889      	ldr	r1, [r1, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bdc:	430b      	orrs	r3, r1
 8001bde:	07d9      	lsls	r1, r3, #31
 8001be0:	f53f af6e 	bmi.w	8001ac0 <HAL_ADC_Init+0xd4>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001be4:	4914      	ldr	r1, [pc, #80]	; (8001c38 <HAL_ADC_Init+0x24c>)
 8001be6:	e765      	b.n	8001ab4 <HAL_ADC_Init+0xc8>
 8001be8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	6891      	ldr	r1, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bf0:	430b      	orrs	r3, r1
 8001bf2:	07db      	lsls	r3, r3, #31
 8001bf4:	f53f af64 	bmi.w	8001ac0 <HAL_ADC_Init+0xd4>
 8001bf8:	e7f4      	b.n	8001be4 <HAL_ADC_Init+0x1f8>
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bfa:	e9d4 3611 	ldrd	r3, r6, [r4, #68]	; 0x44
 8001bfe:	6911      	ldr	r1, [r2, #16]
 8001c00:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8001c02:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8001c06:	f021 0104 	bic.w	r1, r1, #4
 8001c0a:	4333      	orrs	r3, r6
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001c10:	432b      	orrs	r3, r5
 8001c12:	430b      	orrs	r3, r1
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6113      	str	r3, [r2, #16]
 8001c1a:	e775      	b.n	8001b08 <HAL_ADC_Init+0x11c>
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	053e2d63 	.word	0x053e2d63
 8001c24:	50000100 	.word	0x50000100
 8001c28:	50000400 	.word	0x50000400
 8001c2c:	50000600 	.word	0x50000600
 8001c30:	50000700 	.word	0x50000700
 8001c34:	fff04007 	.word	0xfff04007
 8001c38:	50000300 	.word	0x50000300

08001c3c <HAL_ADC_ConvCpltCallback>:
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop

08001c40 <HAL_ADC_ConvHalfCpltCallback>:
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001c44:	b508      	push	{r3, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c46:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8001c48:	f7ff fffa 	bl	8001c40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c4c:	bd08      	pop	{r3, pc}
 8001c4e:	bf00      	nop

08001c50 <HAL_ADC_ErrorCallback>:
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop

08001c54 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c54:	6a83      	ldr	r3, [r0, #40]	; 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c56:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c58:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001c5c:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001c60:	d11d      	bne.n	8001c9e <ADC_DMAConvCplt+0x4a>
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001c62:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c68:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8001c6a:	680a      	ldr	r2, [r1, #0]
 8001c6c:	f012 0f08 	tst.w	r2, #8
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001c70:	68ca      	ldr	r2, [r1, #12]
 8001c72:	d01b      	beq.n	8001cac <ADC_DMAConvCplt+0x58>
 8001c74:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8001c78:	d10d      	bne.n	8001c96 <ADC_DMAConvCplt+0x42>
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8001c7a:	68ca      	ldr	r2, [r1, #12]
 8001c7c:	0494      	lsls	r4, r2, #18
 8001c7e:	d40a      	bmi.n	8001c96 <ADC_DMAConvCplt+0x42>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c86:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001c88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c8a:	04d1      	lsls	r1, r2, #19
 8001c8c:	d403      	bmi.n	8001c96 <ADC_DMAConvCplt+0x42>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c90:	f042 0201 	orr.w	r2, r2, #1
 8001c94:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_ADC_ConvCpltCallback(hadc);
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ffd0 	bl	8001c3c <HAL_ADC_ConvCpltCallback>
}
 8001c9c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001c9e:	06d2      	lsls	r2, r2, #27
 8001ca0:	d40a      	bmi.n	8001cb8 <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	4718      	bx	r3
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8001cac:	0790      	lsls	r0, r2, #30
 8001cae:	d5e7      	bpl.n	8001c80 <ADC_DMAConvCplt+0x2c>
    HAL_ADC_ConvCpltCallback(hadc);
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ffc3 	bl	8001c3c <HAL_ADC_ConvCpltCallback>
 8001cb6:	e7f1      	b.n	8001c9c <ADC_DMAConvCplt+0x48>
      HAL_ADC_ErrorCallback(hadc);
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff ffc9 	bl	8001c50 <HAL_ADC_ErrorCallback>
}
 8001cbe:	bd10      	pop	{r4, pc}

08001cc0 <ADC_DMAError>:
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001cc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001cc2:	b508      	push	{r3, lr}

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001cc4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 8001cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cca:	65c3      	str	r3, [r0, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001ccc:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001cce:	f043 0304 	orr.w	r3, r3, #4
 8001cd2:	6603      	str	r3, [r0, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001cd4:	f7ff ffbc 	bl	8001c50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001cd8:	bd08      	pop	{r3, pc}
 8001cda:	bf00      	nop

08001cdc <HAL_ADC_ConfigChannel>:
{
 8001cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8001cde:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8001ce6:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8001cee:	f000 8150 	beq.w	8001f92 <HAL_ADC_ConfigChannel+0x2b6>
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf2:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cfa:	6894      	ldr	r4, [r2, #8]
 8001cfc:	0766      	lsls	r6, r4, #29
 8001cfe:	d44f      	bmi.n	8001da0 <HAL_ADC_ConfigChannel+0xc4>
  MODIFY_REG(*preg,
 8001d00:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d04:	09a6      	lsrs	r6, r4, #6
 8001d06:	f102 0530 	add.w	r5, r2, #48	; 0x30
 8001d0a:	f006 060c 	and.w	r6, r6, #12
  MODIFY_REG(*preg,
 8001d0e:	f004 041f 	and.w	r4, r4, #31
 8001d12:	5977      	ldr	r7, [r6, r5]
 8001d14:	f04f 0c1f 	mov.w	ip, #31
 8001d18:	fa0c fc04 	lsl.w	ip, ip, r4
 8001d1c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8001d20:	ea27 070c 	bic.w	r7, r7, ip
 8001d24:	40a0      	lsls	r0, r4
 8001d26:	4338      	orrs	r0, r7
 8001d28:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d2a:	6890      	ldr	r0, [r2, #8]
 8001d2c:	0745      	lsls	r5, r0, #29
 8001d2e:	d54f      	bpl.n	8001dd0 <HAL_ADC_ConfigChannel+0xf4>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d30:	6890      	ldr	r0, [r2, #8]
 8001d32:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001d34:	6894      	ldr	r4, [r2, #8]
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d36:	07e4      	lsls	r4, r4, #31
 8001d38:	d53b      	bpl.n	8001db2 <HAL_ADC_ConfigChannel+0xd6>
 8001d3a:	4604      	mov	r4, r0
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d3c:	49c2      	ldr	r1, [pc, #776]	; (8002048 <HAL_ADC_ConfigChannel+0x36c>)
 8001d3e:	420c      	tst	r4, r1
 8001d40:	d02c      	beq.n	8001d9c <HAL_ADC_ConfigChannel+0xc0>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001d42:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001d46:	f000 8122 	beq.w	8001f8e <HAL_ADC_ConfigChannel+0x2b2>
 8001d4a:	4dc0      	ldr	r5, [pc, #768]	; (800204c <HAL_ADC_ConfigChannel+0x370>)
 8001d4c:	49c0      	ldr	r1, [pc, #768]	; (8002050 <HAL_ADC_ConfigChannel+0x374>)
 8001d4e:	48c1      	ldr	r0, [pc, #772]	; (8002054 <HAL_ADC_ConfigChannel+0x378>)
 8001d50:	42aa      	cmp	r2, r5
 8001d52:	bf18      	it	ne
 8001d54:	4601      	movne	r1, r0
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001d56:	6888      	ldr	r0, [r1, #8]
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8001d58:	49bf      	ldr	r1, [pc, #764]	; (8002058 <HAL_ADC_ConfigChannel+0x37c>)
 8001d5a:	428c      	cmp	r4, r1
 8001d5c:	f000 75e0 	and.w	r5, r0, #29360128	; 0x1c00000
 8001d60:	f000 811a 	beq.w	8001f98 <HAL_ADC_ConfigChannel+0x2bc>
 8001d64:	49bd      	ldr	r1, [pc, #756]	; (800205c <HAL_ADC_ConfigChannel+0x380>)
 8001d66:	428c      	cmp	r4, r1
 8001d68:	f000 8116 	beq.w	8001f98 <HAL_ADC_ConfigChannel+0x2bc>
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001d6c:	49bc      	ldr	r1, [pc, #752]	; (8002060 <HAL_ADC_ConfigChannel+0x384>)
 8001d6e:	428c      	cmp	r4, r1
 8001d70:	f040 814e 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x334>
 8001d74:	01c0      	lsls	r0, r0, #7
 8001d76:	d411      	bmi.n	8001d9c <HAL_ADC_ConfigChannel+0xc0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d78:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001d7c:	f000 822b 	beq.w	80021d6 <HAL_ADC_ConfigChannel+0x4fa>
 8001d80:	4cb2      	ldr	r4, [pc, #712]	; (800204c <HAL_ADC_ConfigChannel+0x370>)
 8001d82:	49b3      	ldr	r1, [pc, #716]	; (8002050 <HAL_ADC_ConfigChannel+0x374>)
 8001d84:	48b3      	ldr	r0, [pc, #716]	; (8002054 <HAL_ADC_ConfigChannel+0x378>)
 8001d86:	42a2      	cmp	r2, r4
 8001d88:	bf0c      	ite	eq
 8001d8a:	460a      	moveq	r2, r1
 8001d8c:	4602      	movne	r2, r0
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001d8e:	6891      	ldr	r1, [r2, #8]
 8001d90:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001d94:	430d      	orrs	r5, r1
 8001d96:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 8001d9a:	6095      	str	r5, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2000      	movs	r0, #0
}
 8001d9e:	e003      	b.n	8001da8 <HAL_ADC_ConfigChannel+0xcc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001da2:	f042 0220 	orr.w	r2, r2, #32
 8001da6:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8001dae:	b003      	add	sp, #12
 8001db0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001db2:	4dac      	ldr	r5, [pc, #688]	; (8002064 <HAL_ADC_ConfigChannel+0x388>)
 8001db4:	68ce      	ldr	r6, [r1, #12]
 8001db6:	42ae      	cmp	r6, r5
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001db8:	4604      	mov	r4, r0
 8001dba:	f000 8092 	beq.w	8001ee2 <HAL_ADC_ConfigChannel+0x206>
    CLEAR_BIT(ADCx->DIFSEL,
 8001dbe:	f8d2 10b0 	ldr.w	r1, [r2, #176]	; 0xb0
 8001dc2:	f3c0 0012 	ubfx	r0, r0, #0, #19
 8001dc6:	ea21 0100 	bic.w	r1, r1, r0
 8001dca:	f8c2 10b0 	str.w	r1, [r2, #176]	; 0xb0
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dce:	e7b5      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x60>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001dd0:	6890      	ldr	r0, [r2, #8]
 8001dd2:	f010 0008 	ands.w	r0, r0, #8
 8001dd6:	f040 8082 	bne.w	8001ede <HAL_ADC_ConfigChannel+0x202>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dda:	688c      	ldr	r4, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ddc:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001dde:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8001de2:	f000 814b 	beq.w	800207c <HAL_ADC_ConfigChannel+0x3a0>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001de6:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8001dea:	f00c 0c04 	and.w	ip, ip, #4
 8001dee:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8001df2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8001df6:	f85c 5007 	ldr.w	r5, [ip, r7]
 8001dfa:	f04f 0e07 	mov.w	lr, #7
 8001dfe:	fa0e fe06 	lsl.w	lr, lr, r6
 8001e02:	40b4      	lsls	r4, r6
 8001e04:	ea25 050e 	bic.w	r5, r5, lr
 8001e08:	432c      	orrs	r4, r5
 8001e0a:	f84c 4007 	str.w	r4, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001e0e:	6954      	ldr	r4, [r2, #20]
 8001e10:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8001e14:	6154      	str	r4, [r2, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e16:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e1a:	68d6      	ldr	r6, [r2, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e1c:	f1bc 0f04 	cmp.w	ip, #4
 8001e20:	d02e      	beq.n	8001e80 <HAL_ADC_ConfigChannel+0x1a4>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e22:	f102 0460 	add.w	r4, r2, #96	; 0x60
  MODIFY_REG(*preg,
 8001e26:	f8df e250 	ldr.w	lr, [pc, #592]	; 8002078 <HAL_ADC_ConfigChannel+0x39c>
 8001e2a:	f854 502c 	ldr.w	r5, [r4, ip, lsl #2]
 8001e2e:	680f      	ldr	r7, [r1, #0]
 8001e30:	ea05 0e0e 	and.w	lr, r5, lr
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001e34:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8001e38:	694d      	ldr	r5, [r1, #20]
 8001e3a:	0076      	lsls	r6, r6, #1
 8001e3c:	f007 47f8 	and.w	r7, r7, #2080374784	; 0x7c000000
 8001e40:	40b5      	lsls	r5, r6
 8001e42:	ea47 070e 	orr.w	r7, r7, lr
 8001e46:	433d      	orrs	r5, r7
 8001e48:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8001e4c:	f844 502c 	str.w	r5, [r4, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e50:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8001e52:	698e      	ldr	r6, [r1, #24]
 8001e54:	f854 5027 	ldr.w	r5, [r4, r7, lsl #2]
 8001e58:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 8001e5c:	4335      	orrs	r5, r6
 8001e5e:	f844 5027 	str.w	r5, [r4, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e62:	690e      	ldr	r6, [r1, #16]
 8001e64:	7f0f      	ldrb	r7, [r1, #28]
  MODIFY_REG(*preg,
 8001e66:	f854 5026 	ldr.w	r5, [r4, r6, lsl #2]
 8001e6a:	2f01      	cmp	r7, #1
 8001e6c:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8001e70:	bf08      	it	eq
 8001e72:	f04f 7000 	moveq.w	r0, #33554432	; 0x2000000
 8001e76:	4328      	orrs	r0, r5
 8001e78:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
 8001e7c:	6808      	ldr	r0, [r1, #0]
}
 8001e7e:	e759      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x58>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e80:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001e82:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001e84:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8001e86:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e8a:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e8e:	2d00      	cmp	r5, #0
 8001e90:	f040 8108 	bne.w	80020a4 <HAL_ADC_ConfigChannel+0x3c8>
 8001e94:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e98:	42ac      	cmp	r4, r5
 8001e9a:	f000 8165 	beq.w	8002168 <HAL_ADC_ConfigChannel+0x48c>
 8001e9e:	6e54      	ldr	r4, [r2, #100]	; 0x64
 8001ea0:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ea2:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ea6:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001eaa:	f102 0764 	add.w	r7, r2, #100	; 0x64
 8001eae:	42ae      	cmp	r6, r5
 8001eb0:	f000 817f 	beq.w	80021b2 <HAL_ADC_ConfigChannel+0x4d6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001eb4:	68a6      	ldr	r6, [r4, #8]
 8001eb6:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eb8:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ebc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001ec0:	42ae      	cmp	r6, r5
 8001ec2:	f000 8165 	beq.w	8002190 <HAL_ADC_ConfigChannel+0x4b4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ec6:	68e6      	ldr	r6, [r4, #12]
 8001ec8:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eca:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ecc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8001ed0:	42b5      	cmp	r5, r6
 8001ed2:	f47f af2f 	bne.w	8001d34 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8001ed6:	6820      	ldr	r0, [r4, #0]
 8001ed8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001edc:	6020      	str	r0, [r4, #0]
 8001ede:	6808      	ldr	r0, [r1, #0]
}
 8001ee0:	e728      	b.n	8001d34 <HAL_ADC_ConfigChannel+0x58>
    SET_BIT(ADCx->DIFSEL,
 8001ee2:	f8d2 40b0 	ldr.w	r4, [r2, #176]	; 0xb0
 8001ee6:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8001eea:	432c      	orrs	r4, r5
 8001eec:	f8c2 40b0 	str.w	r4, [r2, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ef0:	2d00      	cmp	r5, #0
 8001ef2:	d07a      	beq.n	8001fea <HAL_ADC_ConfigChannel+0x30e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001ef8:	2c00      	cmp	r4, #0
 8001efa:	f000 8111 	beq.w	8002120 <HAL_ADC_ConfigChannel+0x444>
  return __builtin_clz(value);
 8001efe:	fab4 f484 	clz	r4, r4
 8001f02:	3401      	adds	r4, #1
 8001f04:	f004 041f 	and.w	r4, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f08:	2c09      	cmp	r4, #9
 8001f0a:	f240 8109 	bls.w	8002120 <HAL_ADC_ConfigChannel+0x444>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8001f12:	2d00      	cmp	r5, #0
 8001f14:	f000 8165 	beq.w	80021e2 <HAL_ADC_ConfigChannel+0x506>
  return __builtin_clz(value);
 8001f18:	fab5 f585 	clz	r5, r5
 8001f1c:	3501      	adds	r5, #1
 8001f1e:	06ad      	lsls	r5, r5, #26
 8001f20:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8001f28:	2c00      	cmp	r4, #0
 8001f2a:	f000 8158 	beq.w	80021de <HAL_ADC_ConfigChannel+0x502>
  return __builtin_clz(value);
 8001f2e:	fab4 f484 	clz	r4, r4
 8001f32:	3401      	adds	r4, #1
 8001f34:	f004 041f 	and.w	r4, r4, #31
 8001f38:	2601      	movs	r6, #1
 8001f3a:	fa06 f404 	lsl.w	r4, r6, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f3e:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8001f44:	2800      	cmp	r0, #0
 8001f46:	f000 8148 	beq.w	80021da <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8001f4a:	fab0 f480 	clz	r4, r0
 8001f4e:	3401      	adds	r4, #1
 8001f50:	f004 041f 	and.w	r4, r4, #31
 8001f54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8001f58:	f1a4 001e 	sub.w	r0, r4, #30
 8001f5c:	0500      	lsls	r0, r0, #20
 8001f5e:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f62:	4328      	orrs	r0, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001f64:	0dc7      	lsrs	r7, r0, #23
 8001f66:	f007 0704 	and.w	r7, r7, #4
 8001f6a:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8001f6e:	688e      	ldr	r6, [r1, #8]
 8001f70:	597c      	ldr	r4, [r7, r5]
 8001f72:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8001f76:	f04f 0c07 	mov.w	ip, #7
 8001f7a:	fa0c fc00 	lsl.w	ip, ip, r0
 8001f7e:	ea24 040c 	bic.w	r4, r4, ip
 8001f82:	fa06 f000 	lsl.w	r0, r6, r0
 8001f86:	4320      	orrs	r0, r4
 8001f88:	5178      	str	r0, [r7, r5]
 8001f8a:	680c      	ldr	r4, [r1, #0]
}
 8001f8c:	e6d6      	b.n	8001d3c <HAL_ADC_ConfigChannel+0x60>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f8e:	4930      	ldr	r1, [pc, #192]	; (8002050 <HAL_ADC_ConfigChannel+0x374>)
 8001f90:	e6e1      	b.n	8001d56 <HAL_ADC_ConfigChannel+0x7a>
  __HAL_LOCK(hadc);
 8001f92:	2002      	movs	r0, #2
}
 8001f94:	b003      	add	sp, #12
 8001f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f98:	0201      	lsls	r1, r0, #8
 8001f9a:	f53f aeff 	bmi.w	8001d9c <HAL_ADC_ConfigChannel+0xc0>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f9e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8001fa2:	d033      	beq.n	800200c <HAL_ADC_ConfigChannel+0x330>
 8001fa4:	4930      	ldr	r1, [pc, #192]	; (8002068 <HAL_ADC_ConfigChannel+0x38c>)
 8001fa6:	428a      	cmp	r2, r1
 8001fa8:	f47f aef8 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0xc0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fac:	4829      	ldr	r0, [pc, #164]	; (8002054 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fae:	4a2f      	ldr	r2, [pc, #188]	; (800206c <HAL_ADC_ConfigChannel+0x390>)
 8001fb0:	4c2f      	ldr	r4, [pc, #188]	; (8002070 <HAL_ADC_ConfigChannel+0x394>)
 8001fb2:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fb4:	6881      	ldr	r1, [r0, #8]
 8001fb6:	0992      	lsrs	r2, r2, #6
 8001fb8:	fba4 4202 	umull	r4, r2, r4, r2
 8001fbc:	0992      	lsrs	r2, r2, #6
 8001fbe:	3201      	adds	r2, #1
 8001fc0:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 8001fc4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001fc8:	430d      	orrs	r5, r1
 8001fca:	0092      	lsls	r2, r2, #2
 8001fcc:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 8001fd0:	6085      	str	r5, [r0, #8]
 8001fd2:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001fd4:	9a01      	ldr	r2, [sp, #4]
 8001fd6:	2a00      	cmp	r2, #0
 8001fd8:	f43f aee0 	beq.w	8001d9c <HAL_ADC_ConfigChannel+0xc0>
            wait_loop_index--;
 8001fdc:	9a01      	ldr	r2, [sp, #4]
 8001fde:	3a01      	subs	r2, #1
 8001fe0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8001fe2:	9a01      	ldr	r2, [sp, #4]
 8001fe4:	2a00      	cmp	r2, #0
 8001fe6:	d1f9      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x300>
 8001fe8:	e6d8      	b.n	8001d9c <HAL_ADC_ConfigChannel+0xc0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001fea:	0e80      	lsrs	r0, r0, #26
 8001fec:	1c44      	adds	r4, r0, #1
 8001fee:	f004 061f 	and.w	r6, r4, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ff2:	2e09      	cmp	r6, #9
 8001ff4:	f200 8086 	bhi.w	8002104 <HAL_ADC_ConfigChannel+0x428>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff8:	06a5      	lsls	r5, r4, #26
 8001ffa:	2401      	movs	r4, #1
 8001ffc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8002000:	40b4      	lsls	r4, r6
 8002002:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8002006:	4325      	orrs	r5, r4
 8002008:	0500      	lsls	r0, r0, #20
 800200a:	e7aa      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x286>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800200c:	4810      	ldr	r0, [pc, #64]	; (8002050 <HAL_ADC_ConfigChannel+0x374>)
 800200e:	e7ce      	b.n	8001fae <HAL_ADC_ConfigChannel+0x2d2>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002010:	4918      	ldr	r1, [pc, #96]	; (8002074 <HAL_ADC_ConfigChannel+0x398>)
 8002012:	428c      	cmp	r4, r1
 8002014:	f47f aec2 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0xc0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002018:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 800201c:	f47f aebe 	bne.w	8001d9c <HAL_ADC_ConfigChannel+0xc0>
        if (ADC_VREFINT_INSTANCE(hadc))
 8002020:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_ADC_ConfigChannel+0x370>)
 8002022:	428a      	cmp	r2, r1
 8002024:	f43f aeba 	beq.w	8001d9c <HAL_ADC_ConfigChannel+0xc0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002028:	4c0a      	ldr	r4, [pc, #40]	; (8002054 <HAL_ADC_ConfigChannel+0x378>)
 800202a:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800202e:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8002032:	bf18      	it	ne
 8002034:	4621      	movne	r1, r4
 8002036:	688a      	ldr	r2, [r1, #8]
 8002038:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 800203c:	432a      	orrs	r2, r5
 800203e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002042:	608a      	str	r2, [r1, #8]
}
 8002044:	e6b0      	b.n	8001da8 <HAL_ADC_ConfigChannel+0xcc>
 8002046:	bf00      	nop
 8002048:	80080000 	.word	0x80080000
 800204c:	50000100 	.word	0x50000100
 8002050:	50000300 	.word	0x50000300
 8002054:	50000700 	.word	0x50000700
 8002058:	c3210000 	.word	0xc3210000
 800205c:	90c00010 	.word	0x90c00010
 8002060:	c7520000 	.word	0xc7520000
 8002064:	407f0000 	.word	0x407f0000
 8002068:	50000600 	.word	0x50000600
 800206c:	20000000 	.word	0x20000000
 8002070:	053e2d63 	.word	0x053e2d63
 8002074:	cb840000 	.word	0xcb840000
 8002078:	03fff000 	.word	0x03fff000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800207c:	0df5      	lsrs	r5, r6, #23
 800207e:	f102 0414 	add.w	r4, r2, #20
 8002082:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8002086:	f3c6 5604 	ubfx	r6, r6, #20, #5
 800208a:	592f      	ldr	r7, [r5, r4]
 800208c:	f04f 0c07 	mov.w	ip, #7
 8002090:	fa0c f606 	lsl.w	r6, ip, r6
 8002094:	ea27 0606 	bic.w	r6, r7, r6
 8002098:	512e      	str	r6, [r5, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800209a:	6954      	ldr	r4, [r2, #20]
 800209c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80020a0:	6154      	str	r4, [r2, #20]
}
 80020a2:	e6b8      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x13a>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80020a8:	b11d      	cbz	r5, 80020b2 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80020aa:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020ae:	42ac      	cmp	r4, r5
 80020b0:	d05a      	beq.n	8002168 <HAL_ADC_ConfigChannel+0x48c>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b2:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80020b4:	6e56      	ldr	r6, [r2, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b6:	f102 0460 	add.w	r4, r2, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020ba:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80020be:	f102 0764 	add.w	r7, r2, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80020c6:	b11d      	cbz	r5, 80020d0 <HAL_ADC_ConfigChannel+0x3f4>
  return __builtin_clz(value);
 80020c8:	fab5 f585 	clz	r5, r5
 80020cc:	42ae      	cmp	r6, r5
 80020ce:	d070      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x4d6>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020d0:	68a5      	ldr	r5, [r4, #8]
 80020d2:	68a6      	ldr	r6, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d4:	f104 0708 	add.w	r7, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020d8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020dc:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80020e0:	b11d      	cbz	r5, 80020ea <HAL_ADC_ConfigChannel+0x40e>
  return __builtin_clz(value);
 80020e2:	fab5 f585 	clz	r5, r5
 80020e6:	42ae      	cmp	r6, r5
 80020e8:	d052      	beq.n	8002190 <HAL_ADC_ConfigChannel+0x4b4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020ea:	68e5      	ldr	r5, [r4, #12]
 80020ec:	68e6      	ldr	r6, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ee:	340c      	adds	r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020f0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80020f8:	2d00      	cmp	r5, #0
 80020fa:	f43f ae1b 	beq.w	8001d34 <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 80020fe:	fab5 f585 	clz	r5, r5
 8002102:	e6e5      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1f4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002104:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 8002108:	06a5      	lsls	r5, r4, #26
 800210a:	381e      	subs	r0, #30
 800210c:	2401      	movs	r4, #1
 800210e:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8002112:	fa04 f606 	lsl.w	r6, r4, r6
 8002116:	0500      	lsls	r0, r0, #20
 8002118:	4335      	orrs	r5, r6
 800211a:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800211e:	e720      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x286>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002120:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8002124:	2d00      	cmp	r5, #0
 8002126:	d064      	beq.n	80021f2 <HAL_ADC_ConfigChannel+0x516>
  return __builtin_clz(value);
 8002128:	fab5 f585 	clz	r5, r5
 800212c:	3501      	adds	r5, #1
 800212e:	06ad      	lsls	r5, r5, #26
 8002130:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8002138:	2c00      	cmp	r4, #0
 800213a:	d058      	beq.n	80021ee <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 800213c:	fab4 f484 	clz	r4, r4
 8002140:	3401      	adds	r4, #1
 8002142:	f004 041f 	and.w	r4, r4, #31
 8002146:	2601      	movs	r6, #1
 8002148:	fa06 f404 	lsl.w	r4, r6, r4
 800214c:	4325      	orrs	r5, r4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800214e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8002152:	2800      	cmp	r0, #0
 8002154:	d048      	beq.n	80021e8 <HAL_ADC_ConfigChannel+0x50c>
  return __builtin_clz(value);
 8002156:	fab0 f480 	clz	r4, r0
 800215a:	3401      	adds	r4, #1
 800215c:	f004 041f 	and.w	r4, r4, #31
 8002160:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8002164:	0520      	lsls	r0, r4, #20
 8002166:	e6fc      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x286>
  MODIFY_REG(*preg,
 8002168:	6e10      	ldr	r0, [r2, #96]	; 0x60
 800216a:	4614      	mov	r4, r2
 800216c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002170:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002174:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002176:	6e55      	ldr	r5, [r2, #100]	; 0x64
 8002178:	6e56      	ldr	r6, [r2, #100]	; 0x64
 800217a:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800217e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002182:	f102 0764 	add.w	r7, r2, #100	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002186:	2d00      	cmp	r5, #0
 8002188:	d19b      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x3e6>
 800218a:	f3c0 6584 	ubfx	r5, r0, #26, #5
 800218e:	e68e      	b.n	8001eae <HAL_ADC_ConfigChannel+0x1d2>
  MODIFY_REG(*preg,
 8002190:	6838      	ldr	r0, [r7, #0]
 8002192:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002196:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002198:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800219a:	68e5      	ldr	r5, [r4, #12]
 800219c:	68e6      	ldr	r6, [r4, #12]
 800219e:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021a2:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021a6:	340c      	adds	r4, #12
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021a8:	2d00      	cmp	r5, #0
 80021aa:	d1a3      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x418>
 80021ac:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80021b0:	e68e      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x1f4>
  MODIFY_REG(*preg,
 80021b2:	6838      	ldr	r0, [r7, #0]
 80021b4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80021b8:	6038      	str	r0, [r7, #0]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021ba:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021bc:	68a5      	ldr	r5, [r4, #8]
 80021be:	68a6      	ldr	r6, [r4, #8]
 80021c0:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021c4:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c8:	f104 0708 	add.w	r7, r4, #8
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021cc:	2d00      	cmp	r5, #0
 80021ce:	d185      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x400>
 80021d0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 80021d4:	e674      	b.n	8001ec0 <HAL_ADC_ConfigChannel+0x1e4>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d6:	4a08      	ldr	r2, [pc, #32]	; (80021f8 <HAL_ADC_ConfigChannel+0x51c>)
 80021d8:	e5d9      	b.n	8001d8e <HAL_ADC_ConfigChannel+0xb2>
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <HAL_ADC_ConfigChannel+0x520>)
 80021dc:	e6c1      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x286>
 80021de:	2402      	movs	r4, #2
 80021e0:	e6ad      	b.n	8001f3e <HAL_ADC_ConfigChannel+0x262>
 80021e2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80021e6:	e69d      	b.n	8001f24 <HAL_ADC_ConfigChannel+0x248>
 80021e8:	f44f 1040 	mov.w	r0, #3145728	; 0x300000
 80021ec:	e6b9      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x286>
 80021ee:	2402      	movs	r4, #2
 80021f0:	e7ac      	b.n	800214c <HAL_ADC_ConfigChannel+0x470>
 80021f2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80021f6:	e79d      	b.n	8002134 <HAL_ADC_ConfigChannel+0x458>
 80021f8:	50000300 	.word	0x50000300
 80021fc:	fe500000 	.word	0xfe500000

08002200 <ADC_Enable>:
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002200:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	07d1      	lsls	r1, r2, #31
 8002206:	d501      	bpl.n	800220c <ADC_Enable+0xc>
  return HAL_OK;
 8002208:	2000      	movs	r0, #0
}
 800220a:	4770      	bx	lr
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800220c:	6899      	ldr	r1, [r3, #8]
 800220e:	4a19      	ldr	r2, [pc, #100]	; (8002274 <ADC_Enable+0x74>)
 8002210:	4211      	tst	r1, r2
{
 8002212:	b570      	push	{r4, r5, r6, lr}
 8002214:	4606      	mov	r6, r0
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002216:	d122      	bne.n	800225e <ADC_Enable+0x5e>
  MODIFY_REG(ADCx->CR,
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	4d17      	ldr	r5, [pc, #92]	; (8002278 <ADC_Enable+0x78>)
 800221c:	402a      	ands	r2, r5
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8002224:	f7ff fbca 	bl	80019bc <HAL_GetTick>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002228:	6833      	ldr	r3, [r6, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	07d2      	lsls	r2, r2, #31
    tickstart = HAL_GetTick();
 800222e:	4604      	mov	r4, r0
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002230:	d413      	bmi.n	800225a <ADC_Enable+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002232:	689a      	ldr	r2, [r3, #8]
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002234:	07d0      	lsls	r0, r2, #31
 8002236:	d404      	bmi.n	8002242 <ADC_Enable+0x42>
  MODIFY_REG(ADCx->CR,
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	402a      	ands	r2, r5
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	609a      	str	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002242:	f7ff fbbb 	bl	80019bc <HAL_GetTick>
 8002246:	1b03      	subs	r3, r0, r4
 8002248:	2b02      	cmp	r3, #2
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800224a:	6833      	ldr	r3, [r6, #0]
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800224c:	d902      	bls.n	8002254 <ADC_Enable+0x54>
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	07d1      	lsls	r1, r2, #31
 8002252:	d504      	bpl.n	800225e <ADC_Enable+0x5e>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	07d2      	lsls	r2, r2, #31
 8002258:	d5eb      	bpl.n	8002232 <ADC_Enable+0x32>
  return HAL_OK;
 800225a:	2000      	movs	r0, #0
}
 800225c:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225e:	6df3      	ldr	r3, [r6, #92]	; 0x5c
 8002260:	f043 0310 	orr.w	r3, r3, #16
 8002264:	65f3      	str	r3, [r6, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	6e33      	ldr	r3, [r6, #96]	; 0x60
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6633      	str	r3, [r6, #96]	; 0x60
          return HAL_ERROR;
 800226e:	2001      	movs	r0, #1
}
 8002270:	bd70      	pop	{r4, r5, r6, pc}
 8002272:	bf00      	nop
 8002274:	8000003f 	.word	0x8000003f
 8002278:	7fffffc0 	.word	0x7fffffc0

0800227c <HAL_ADC_Start_DMA>:
{
 800227c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800227e:	4604      	mov	r4, r0
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002280:	6800      	ldr	r0, [r0, #0]
 8002282:	f1b0 4fa0 	cmp.w	r0, #1342177280	; 0x50000000
{
 8002286:	460f      	mov	r7, r1
 8002288:	4616      	mov	r6, r2
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800228a:	d061      	beq.n	8002350 <HAL_ADC_Start_DMA+0xd4>
 800228c:	4a37      	ldr	r2, [pc, #220]	; (800236c <HAL_ADC_Start_DMA+0xf0>)
 800228e:	4d38      	ldr	r5, [pc, #224]	; (8002370 <HAL_ADC_Start_DMA+0xf4>)
 8002290:	4b38      	ldr	r3, [pc, #224]	; (8002374 <HAL_ADC_Start_DMA+0xf8>)
 8002292:	4290      	cmp	r0, r2
 8002294:	bf18      	it	ne
 8002296:	461d      	movne	r5, r3
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002298:	68ab      	ldr	r3, [r5, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800229a:	6885      	ldr	r5, [r0, #8]
 800229c:	076a      	lsls	r2, r5, #29
 800229e:	d455      	bmi.n	800234c <HAL_ADC_Start_DMA+0xd0>
    __HAL_LOCK(hadc);
 80022a0:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 80022a4:	2a01      	cmp	r2, #1
 80022a6:	d051      	beq.n	800234c <HAL_ADC_Start_DMA+0xd0>
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022a8:	4a33      	ldr	r2, [pc, #204]	; (8002378 <HAL_ADC_Start_DMA+0xfc>)
    __HAL_LOCK(hadc);
 80022aa:	2101      	movs	r1, #1
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022ac:	4290      	cmp	r0, r2
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80022ae:	f003 051f 	and.w	r5, r3, #31
    __HAL_LOCK(hadc);
 80022b2:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80022b6:	d006      	beq.n	80022c6 <HAL_ADC_Start_DMA+0x4a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80022b8:	2d09      	cmp	r5, #9
 80022ba:	d84b      	bhi.n	8002354 <HAL_ADC_Start_DMA+0xd8>
 80022bc:	f240 2321 	movw	r3, #545	; 0x221
 80022c0:	40eb      	lsrs	r3, r5
 80022c2:	07db      	lsls	r3, r3, #31
 80022c4:	d546      	bpl.n	8002354 <HAL_ADC_Start_DMA+0xd8>
      tmp_hal_status = ADC_Enable(hadc);
 80022c6:	4620      	mov	r0, r4
 80022c8:	f7ff ff9a 	bl	8002200 <ADC_Enable>
      if (tmp_hal_status == HAL_OK)
 80022cc:	2800      	cmp	r0, #0
 80022ce:	d146      	bne.n	800235e <HAL_ADC_Start_DMA+0xe2>
        ADC_STATE_CLR_SET(hadc->State,
 80022d0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022d2:	6821      	ldr	r1, [r4, #0]
 80022d4:	4a25      	ldr	r2, [pc, #148]	; (800236c <HAL_ADC_Start_DMA+0xf0>)
        ADC_STATE_CLR_SET(hadc->State,
 80022d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80022da:	f023 0301 	bic.w	r3, r3, #1
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e2:	4291      	cmp	r1, r2
        ADC_STATE_CLR_SET(hadc->State,
 80022e4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80022e6:	d03e      	beq.n	8002366 <HAL_ADC_Start_DMA+0xea>
 80022e8:	4b24      	ldr	r3, [pc, #144]	; (800237c <HAL_ADC_Start_DMA+0x100>)
 80022ea:	4299      	cmp	r1, r3
 80022ec:	d03b      	beq.n	8002366 <HAL_ADC_Start_DMA+0xea>
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80022ee:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80022f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80022f4:	65e3      	str	r3, [r4, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022fa:	4a21      	ldr	r2, [pc, #132]	; (8002380 <HAL_ADC_Start_DMA+0x104>)
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80022fc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002300:	bf1c      	itt	ne
 8002302:	6e23      	ldrne	r3, [r4, #96]	; 0x60
 8002304:	f023 0306 	bicne.w	r3, r3, #6
          ADC_CLEAR_ERRORCODE(hadc);
 8002308:	6623      	str	r3, [r4, #96]	; 0x60
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_ADC_Start_DMA+0x108>)
 800230c:	62c3      	str	r3, [r0, #44]	; 0x2c
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_ADC_Start_DMA+0x10c>)
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002310:	6302      	str	r2, [r0, #48]	; 0x30
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002312:	6343      	str	r3, [r0, #52]	; 0x34
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002314:	221c      	movs	r2, #28
        __HAL_UNLOCK(hadc);
 8002316:	2300      	movs	r3, #0
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002318:	600a      	str	r2, [r1, #0]
        __HAL_UNLOCK(hadc);
 800231a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800231e:	684b      	ldr	r3, [r1, #4]
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	604b      	str	r3, [r1, #4]
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002326:	68cd      	ldr	r5, [r1, #12]
 8002328:	f045 0501 	orr.w	r5, r5, #1
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800232c:	4633      	mov	r3, r6
 800232e:	463a      	mov	r2, r7
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002330:	60cd      	str	r5, [r1, #12]
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002332:	3140      	adds	r1, #64	; 0x40
 8002334:	f000 f9d8 	bl	80026e8 <HAL_DMA_Start_IT>
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002338:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 800233a:	6893      	ldr	r3, [r2, #8]
 800233c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6093      	str	r3, [r2, #8]
}
 800234a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_hal_status = HAL_BUSY;
 800234c:	2002      	movs	r0, #2
}
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002350:	4d07      	ldr	r5, [pc, #28]	; (8002370 <HAL_ADC_Start_DMA+0xf4>)
 8002352:	e7a1      	b.n	8002298 <HAL_ADC_Start_DMA+0x1c>
      __HAL_UNLOCK(hadc);
 8002354:	2300      	movs	r3, #0
 8002356:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
      tmp_hal_status = HAL_ERROR;
 800235a:	2001      	movs	r0, #1
}
 800235c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_UNLOCK(hadc);
 800235e:	2300      	movs	r3, #0
 8002360:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
}
 8002364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002366:	2d00      	cmp	r5, #0
 8002368:	d1c5      	bne.n	80022f6 <HAL_ADC_Start_DMA+0x7a>
 800236a:	e7c0      	b.n	80022ee <HAL_ADC_Start_DMA+0x72>
 800236c:	50000100 	.word	0x50000100
 8002370:	50000300 	.word	0x50000300
 8002374:	50000700 	.word	0x50000700
 8002378:	50000600 	.word	0x50000600
 800237c:	50000500 	.word	0x50000500
 8002380:	08001c45 	.word	0x08001c45
 8002384:	08001c55 	.word	0x08001c55
 8002388:	08001cc1 	.word	0x08001cc1

0800238c <ADC_Disable>:
{
 800238c:	b538      	push	{r3, r4, r5, lr}
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800238e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	0795      	lsls	r5, r2, #30
 8002394:	d502      	bpl.n	800239c <ADC_Disable+0x10>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002396:	689b      	ldr	r3, [r3, #8]
  return HAL_OK;
 8002398:	2000      	movs	r0, #0
}
 800239a:	bd38      	pop	{r3, r4, r5, pc}
 800239c:	689a      	ldr	r2, [r3, #8]
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800239e:	07d4      	lsls	r4, r2, #31
 80023a0:	d52c      	bpl.n	80023fc <ADC_Disable+0x70>
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	f002 020d 	and.w	r2, r2, #13
 80023a8:	2a01      	cmp	r2, #1
 80023aa:	4604      	mov	r4, r0
 80023ac:	d009      	beq.n	80023c2 <ADC_Disable+0x36>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ae:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	65e3      	str	r3, [r4, #92]	; 0x5c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6623      	str	r3, [r4, #96]	; 0x60
          return HAL_ERROR;
 80023be:	2001      	movs	r0, #1
}
 80023c0:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(ADCx->CR,
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80023c8:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80023cc:	2103      	movs	r1, #3
 80023ce:	f042 0202 	orr.w	r2, r2, #2
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 80023d6:	f7ff faf1 	bl	80019bc <HAL_GetTick>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023da:	6823      	ldr	r3, [r4, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 80023e0:	4605      	mov	r5, r0
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023e2:	d50b      	bpl.n	80023fc <ADC_Disable+0x70>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023e4:	f7ff faea 	bl	80019bc <HAL_GetTick>
 80023e8:	1b40      	subs	r0, r0, r5
 80023ea:	2802      	cmp	r0, #2
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023ec:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023ee:	d902      	bls.n	80023f6 <ADC_Disable+0x6a>
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	07d2      	lsls	r2, r2, #31
 80023f4:	d4db      	bmi.n	80023ae <ADC_Disable+0x22>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	07db      	lsls	r3, r3, #31
 80023fa:	d4f3      	bmi.n	80023e4 <ADC_Disable+0x58>
  return HAL_OK;
 80023fc:	2000      	movs	r0, #0
}
 80023fe:	bd38      	pop	{r3, r4, r5, pc}

08002400 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002400:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002402:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8002406:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0UL;
 8002408:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800240a:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0UL;
 800240c:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800240e:	d03f      	beq.n	8002490 <HAL_ADCEx_Calibration_Start+0x90>
 8002410:	2301      	movs	r3, #1
 8002412:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002416:	4604      	mov	r4, r0
 8002418:	460d      	mov	r5, r1
 800241a:	f7ff ffb7 	bl	800238c <ADC_Disable>

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800241e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
  if (tmp_hal_status == HAL_OK)
 8002420:	b9e8      	cbnz	r0, 800245e <HAL_ADCEx_Calibration_Start+0x5e>
    ADC_STATE_CLR_SET(hadc->State,
 8002422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002426:	f023 0302 	bic.w	r3, r3, #2
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800242a:	6822      	ldr	r2, [r4, #0]

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
    {
      wait_loop_index++;
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800242c:	491a      	ldr	r1, [pc, #104]	; (8002498 <HAL_ADCEx_Calibration_Start+0x98>)
    ADC_STATE_CLR_SET(hadc->State,
 800242e:	f043 0302 	orr.w	r3, r3, #2
 8002432:	65e3      	str	r3, [r4, #92]	; 0x5c
  MODIFY_REG(ADCx->CR,
 8002434:	6893      	ldr	r3, [r2, #8]
 8002436:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800243a:	f005 4580 	and.w	r5, r5, #1073741824	; 0x40000000
 800243e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002442:	432b      	orrs	r3, r5
 8002444:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002448:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800244a:	6893      	ldr	r3, [r2, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0e      	blt.n	800246e <HAL_ADCEx_Calibration_Start+0x6e>
        return HAL_ERROR;
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002450:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002452:	f023 0303 	bic.w	r3, r3, #3
 8002456:	f043 0301 	orr.w	r3, r3, #1
 800245a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800245c:	e002      	b.n	8002464 <HAL_ADCEx_Calibration_Start+0x64>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	f043 0310 	orr.w	r3, r3, #16
 8002462:	65e3      	str	r3, [r4, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002464:	2300      	movs	r3, #0
 8002466:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800246a:	b003      	add	sp, #12
 800246c:	bd30      	pop	{r4, r5, pc}
      wait_loop_index++;
 800246e:	9b01      	ldr	r3, [sp, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	9301      	str	r3, [sp, #4]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002474:	9b01      	ldr	r3, [sp, #4]
 8002476:	428b      	cmp	r3, r1
 8002478:	d9e7      	bls.n	800244a <HAL_ADCEx_Calibration_Start+0x4a>
        ADC_STATE_CLR_SET(hadc->State,
 800247a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800247c:	f023 0312 	bic.w	r3, r3, #18
 8002480:	f043 0310 	orr.w	r3, r3, #16
        __HAL_UNLOCK(hadc);
 8002484:	2200      	movs	r2, #0
        ADC_STATE_CLR_SET(hadc->State,
 8002486:	65e3      	str	r3, [r4, #92]	; 0x5c
        __HAL_UNLOCK(hadc);
 8002488:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
 800248e:	e7ec      	b.n	800246a <HAL_ADCEx_Calibration_Start+0x6a>
  __HAL_LOCK(hadc);
 8002490:	2002      	movs	r0, #2
}
 8002492:	b003      	add	sp, #12
 8002494:	bd30      	pop	{r4, r5, pc}
 8002496:	bf00      	nop
 8002498:	0004de01 	.word	0x0004de01

0800249c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800249c:	b1b0      	cbz	r0, 80024cc <HAL_CORDIC_Init+0x30>
{
 800249e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80024a0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80024a4:	4604      	mov	r4, r0
 80024a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024aa:	b153      	cbz	r3, 80024c2 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80024ac:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80024ae:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80024b0:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80024b2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 80024b6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 80024ba:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80024be:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80024c0:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80024c2:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80024c6:	f7ff f8d5 	bl	8001674 <HAL_CORDIC_MspInit>
 80024ca:	e7ef      	b.n	80024ac <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80024cc:	2001      	movs	r0, #1
}
 80024ce:	4770      	bx	lr

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d0:	4908      	ldr	r1, [pc, #32]	; (80024f4 <HAL_NVIC_SetPriorityGrouping+0x24>)
 80024d2:	68ca      	ldr	r2, [r1, #12]
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d4:	b410      	push	{r4}
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024d6:	0200      	lsls	r0, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024d8:	f64f 04ff 	movw	r4, #63743	; 0xf8ff
 80024dc:	4022      	ands	r2, r4
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024de:	f400 63e0 	and.w	r3, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80024ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->AIRCR =  reg_value;
 80024f0:	60cb      	str	r3, [r1, #12]
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024f8:	4b19      	ldr	r3, [pc, #100]	; (8002560 <HAL_NVIC_SetPriority+0x68>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002500:	b430      	push	{r4, r5}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002502:	f1c3 0507 	rsb	r5, r3, #7
 8002506:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002508:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800250c:	bf28      	it	cs
 800250e:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002510:	2c06      	cmp	r4, #6
 8002512:	d919      	bls.n	8002548 <HAL_NVIC_SetPriority+0x50>
 8002514:	3b03      	subs	r3, #3
 8002516:	f04f 34ff 	mov.w	r4, #4294967295
 800251a:	409c      	lsls	r4, r3
 800251c:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002520:	f04f 34ff 	mov.w	r4, #4294967295
 8002524:	40ac      	lsls	r4, r5
 8002526:	ea21 0104 	bic.w	r1, r1, r4
 800252a:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800252c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800252e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8002532:	db0c      	blt.n	800254e <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002534:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002538:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800253c:	0109      	lsls	r1, r1, #4
 800253e:	b2c9      	uxtb	r1, r1
 8002540:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002544:	bc30      	pop	{r4, r5}
 8002546:	4770      	bx	lr
 8002548:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800254a:	4613      	mov	r3, r2
 800254c:	e7e8      	b.n	8002520 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <HAL_NVIC_SetPriority+0x6c>)
 8002550:	f000 000f 	and.w	r0, r0, #15
 8002554:	0109      	lsls	r1, r1, #4
 8002556:	4403      	add	r3, r0
 8002558:	b2c9      	uxtb	r1, r1
 800255a:	7619      	strb	r1, [r3, #24]
 800255c:	bc30      	pop	{r4, r5}
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00
 8002564:	e000ecfc 	.word	0xe000ecfc

08002568 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002568:	2800      	cmp	r0, #0
 800256a:	db07      	blt.n	800257c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_NVIC_EnableIRQ+0x18>)
 800256e:	f000 011f 	and.w	r1, r0, #31
 8002572:	2301      	movs	r3, #1
 8002574:	0940      	lsrs	r0, r0, #5
 8002576:	408b      	lsls	r3, r1
 8002578:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	e000e100 	.word	0xe000e100

08002584 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002584:	3801      	subs	r0, #1
 8002586:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800258a:	d20e      	bcs.n	80025aa <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800258c:	4b08      	ldr	r3, [pc, #32]	; (80025b0 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800258e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002590:	4c08      	ldr	r4, [pc, #32]	; (80025b4 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002592:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	20f0      	movs	r0, #240	; 0xf0
 8002596:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800259a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800259c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800259e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025a0:	609a      	str	r2, [r3, #8]
   return SysTick_Config(TicksNumb);
}
 80025a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025a6:	6019      	str	r1, [r3, #0]
 80025a8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80025aa:	2001      	movs	r0, #1
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	e000e010 	.word	0xe000e010
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80025b8:	2800      	cmp	r0, #0
 80025ba:	d07d      	beq.n	80026b8 <HAL_DMA_Init+0x100>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025bc:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <HAL_DMA_Init+0x104>)
 80025be:	4603      	mov	r3, r0
 80025c0:	6800      	ldr	r0, [r0, #0]
 80025c2:	4290      	cmp	r0, r2
{
 80025c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80025c8:	d962      	bls.n	8002690 <HAL_DMA_Init+0xd8>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80025ca:	493d      	ldr	r1, [pc, #244]	; (80026c0 <HAL_DMA_Init+0x108>)
 80025cc:	4a3d      	ldr	r2, [pc, #244]	; (80026c4 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA2;
 80025ce:	4c3e      	ldr	r4, [pc, #248]	; (80026c8 <HAL_DMA_Init+0x110>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80025d0:	4401      	add	r1, r0
 80025d2:	fba2 2101 	umull	r2, r1, r2, r1
 80025d6:	0909      	lsrs	r1, r1, #4
 80025d8:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80025da:	e9d3 7202 	ldrd	r7, r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025de:	691e      	ldr	r6, [r3, #16]
 80025e0:	641c      	str	r4, [r3, #64]	; 0x40
  tmp |=  hdma->Init.Direction        |
 80025e2:	433a      	orrs	r2, r7
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025e4:	695c      	ldr	r4, [r3, #20]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025e6:	699d      	ldr	r5, [r3, #24]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80025e8:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 80026e0 <HAL_DMA_Init+0x128>
 80025ec:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80026bc <HAL_DMA_Init+0x104>
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f0:	4332      	orrs	r2, r6
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f2:	f04f 0c02 	mov.w	ip, #2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025f6:	4322      	orrs	r2, r4
  hdma->State = HAL_DMA_STATE_BUSY;
 80025f8:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80025fc:	4c31      	ldr	r4, [pc, #196]	; (80026c4 <HAL_DMA_Init+0x10c>)
  tmp = hdma->Instance->CCR;
 80025fe:	f8d0 c000 	ldr.w	ip, [r0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002602:	69de      	ldr	r6, [r3, #28]
 8002604:	6459      	str	r1, [r3, #68]	; 0x44
 8002606:	432a      	orrs	r2, r5
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002608:	b2c5      	uxtb	r5, r0
 800260a:	3d08      	subs	r5, #8
 800260c:	fba4 4505 	umull	r4, r5, r4, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002610:	6a1c      	ldr	r4, [r3, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002612:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002614:	f42c 4cff 	bic.w	ip, ip, #32640	; 0x7f80
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002618:	4e2c      	ldr	r6, [pc, #176]	; (80026cc <HAL_DMA_Init+0x114>)
          hdma->Init.Mode                | hdma->Init.Priority;
 800261a:	4322      	orrs	r2, r4
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800261c:	f02c 0c70 	bic.w	ip, ip, #112	; 0x70
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002620:	f3c5 1404 	ubfx	r4, r5, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002624:	4540      	cmp	r0, r8
 8002626:	bf88      	it	hi
 8002628:	4676      	movhi	r6, lr
  tmp |=  hdma->Init.Direction        |
 800262a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800262e:	2501      	movs	r5, #1
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002630:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80026e4 <HAL_DMA_Init+0x12c>
  hdma->Instance->CCR = tmp;
 8002634:	6002      	str	r2, [r0, #0]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002636:	eb01 0e06 	add.w	lr, r1, r6
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800263a:	fa05 f404 	lsl.w	r4, r5, r4
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800263e:	f5b7 4f80 	cmp.w	r7, #16384	; 0x4000
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002642:	e9c3 ec12 	strd	lr, ip, [r3, #72]	; 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002646:	ea4f 0191 	mov.w	r1, r1, lsr #2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800264a:	651c      	str	r4, [r3, #80]	; 0x50
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800264c:	d029      	beq.n	80026a2 <HAL_DMA_Init+0xea>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800264e:	6858      	ldr	r0, [r3, #4]
 8002650:	b2c2      	uxtb	r2, r0
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002652:	3801      	subs	r0, #1
 8002654:	2803      	cmp	r0, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002656:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800265a:	f8cc 4004 	str.w	r4, [ip, #4]
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800265e:	d826      	bhi.n	80026ae <HAL_DMA_Init+0xf6>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002660:	491b      	ldr	r1, [pc, #108]	; (80026d0 <HAL_DMA_Init+0x118>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002662:	481c      	ldr	r0, [pc, #112]	; (80026d4 <HAL_DMA_Init+0x11c>)
 8002664:	6598      	str	r0, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002666:	4411      	add	r1, r2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002668:	3a01      	subs	r2, #1
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800266a:	0089      	lsls	r1, r1, #2
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800266c:	f002 021f 	and.w	r2, r2, #31
 8002670:	fa05 f202 	lsl.w	r2, r5, r2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002674:	2400      	movs	r4, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002676:	6559      	str	r1, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002678:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800267a:	600c      	str	r4, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800267c:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800267e:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8002680:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002682:	63d8      	str	r0, [r3, #60]	; 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8002684:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8002688:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800268c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002690:	4911      	ldr	r1, [pc, #68]	; (80026d8 <HAL_DMA_Init+0x120>)
 8002692:	4a0c      	ldr	r2, [pc, #48]	; (80026c4 <HAL_DMA_Init+0x10c>)
    hdma->DmaBaseAddress = DMA1;
 8002694:	4c11      	ldr	r4, [pc, #68]	; (80026dc <HAL_DMA_Init+0x124>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002696:	4401      	add	r1, r0
 8002698:	fba2 2101 	umull	r2, r1, r2, r1
 800269c:	0909      	lsrs	r1, r1, #4
 800269e:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80026a0:	e79b      	b.n	80025da <HAL_DMA_Init+0x22>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80026a2:	2200      	movs	r2, #0
 80026a4:	605a      	str	r2, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80026a6:	f846 2021 	str.w	r2, [r6, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026aa:	f8cc 4004 	str.w	r4, [ip, #4]
    hdma->DMAmuxRequestGen = 0U;
 80026ae:	2200      	movs	r2, #0
    hdma->DMAmuxRequestGenStatus = 0U;
 80026b0:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80026b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80026b6:	e7e2      	b.n	800267e <HAL_DMA_Init+0xc6>
    return HAL_ERROR;
 80026b8:	2001      	movs	r0, #1
}
 80026ba:	4770      	bx	lr
 80026bc:	40020407 	.word	0x40020407
 80026c0:	bffdfbf8 	.word	0xbffdfbf8
 80026c4:	cccccccd 	.word	0xcccccccd
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	1000823f 	.word	0x1000823f
 80026d4:	40020940 	.word	0x40020940
 80026d8:	bffdfff8 	.word	0xbffdfff8
 80026dc:	40020000 	.word	0x40020000
 80026e0:	40020820 	.word	0x40020820
 80026e4:	40020880 	.word	0x40020880

080026e8 <HAL_DMA_Start_IT>:
{
 80026e8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 80026ea:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 80026ee:	2c01      	cmp	r4, #1
 80026f0:	d053      	beq.n	800279a <HAL_DMA_Start_IT+0xb2>
  if (HAL_DMA_STATE_READY == hdma->State)
 80026f2:	f890 4025 	ldrb.w	r4, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 80026f6:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 80026f8:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 80026fa:	f880 5024 	strb.w	r5, [r0, #36]	; 0x24
  if (HAL_DMA_STATE_READY == hdma->State)
 80026fe:	d005      	beq.n	800270c <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma);
 8002700:	2300      	movs	r3, #0
 8002702:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8002706:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8002708:	2002      	movs	r0, #2
}
 800270a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800270c:	6804      	ldr	r4, [r0, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800270e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
    hdma->State = HAL_DMA_STATE_BUSY;
 8002710:	2602      	movs	r6, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002712:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8002714:	f880 6025 	strb.w	r6, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002718:	63c5      	str	r5, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800271a:	6826      	ldr	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800271c:	e9d0 c514 	ldrd	ip, r5, [r0, #80]	; 0x50
    __HAL_DMA_DISABLE(hdma);
 8002720:	f026 0601 	bic.w	r6, r6, #1
 8002724:	6026      	str	r6, [r4, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002726:	f8c7 c004 	str.w	ip, [r7, #4]
  if (hdma->DMAmuxRequestGen != 0U)
 800272a:	b115      	cbz	r5, 8002732 <HAL_DMA_Start_IT+0x4a>
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800272c:	e9d0 6716 	ldrd	r6, r7, [r0, #88]	; 0x58
 8002730:	6077      	str	r7, [r6, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002732:	6c46      	ldr	r6, [r0, #68]	; 0x44
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002734:	6887      	ldr	r7, [r0, #8]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002736:	f006 0c1f 	and.w	ip, r6, #31
 800273a:	2601      	movs	r6, #1
 800273c:	fa06 fc0c 	lsl.w	ip, r6, ip
 8002740:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002742:	f8c6 c004 	str.w	ip, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8002746:	6063      	str	r3, [r4, #4]
    if (NULL != hdma->XferHalfCpltCallback)
 8002748:	6b03      	ldr	r3, [r0, #48]	; 0x30
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800274a:	2f10      	cmp	r7, #16
    hdma->Instance->CPAR = DstAddress;
 800274c:	bf0b      	itete	eq
 800274e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->CPAR = SrcAddress;
 8002750:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002752:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->CMAR = DstAddress;
 8002754:	60e2      	strne	r2, [r4, #12]
    if (NULL != hdma->XferHalfCpltCallback)
 8002756:	b1bb      	cbz	r3, 8002788 <HAL_DMA_Start_IT+0xa0>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	f043 030e 	orr.w	r3, r3, #14
 800275e:	6023      	str	r3, [r4, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002760:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	03d2      	lsls	r2, r2, #15
 8002766:	d503      	bpl.n	8002770 <HAL_DMA_Start_IT+0x88>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276e:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002770:	b11d      	cbz	r5, 800277a <HAL_DMA_Start_IT+0x92>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002778:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002782:	2000      	movs	r0, #0
}
 8002784:	bcf0      	pop	{r4, r5, r6, r7}
 8002786:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002788:	6823      	ldr	r3, [r4, #0]
 800278a:	f023 0304 	bic.w	r3, r3, #4
 800278e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	f043 030a 	orr.w	r3, r3, #10
 8002796:	6023      	str	r3, [r4, #0]
 8002798:	e7e2      	b.n	8002760 <HAL_DMA_Start_IT+0x78>
  __HAL_LOCK(hdma);
 800279a:	2002      	movs	r0, #2
}
 800279c:	bcf0      	pop	{r4, r5, r6, r7}
 800279e:	4770      	bx	lr

080027a0 <HAL_DMA_IRQHandler>:
{
 80027a0:	b470      	push	{r4, r5, r6}
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027a2:	e9d0 6310 	ldrd	r6, r3, [r0, #64]	; 0x40
 80027a6:	2204      	movs	r2, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027a8:	6831      	ldr	r1, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80027aa:	6805      	ldr	r5, [r0, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027ac:	f003 031f 	and.w	r3, r3, #31
 80027b0:	409a      	lsls	r2, r3
 80027b2:	420a      	tst	r2, r1
  uint32_t source_it = hdma->Instance->CCR;
 80027b4:	682c      	ldr	r4, [r5, #0]
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80027b6:	d00e      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x36>
 80027b8:	f014 0f04 	tst.w	r4, #4
 80027bc:	d00b      	beq.n	80027d6 <HAL_DMA_IRQHandler+0x36>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	069b      	lsls	r3, r3, #26
 80027c2:	d403      	bmi.n	80027cc <HAL_DMA_IRQHandler+0x2c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c4:	682b      	ldr	r3, [r5, #0]
 80027c6:	f023 0304 	bic.w	r3, r3, #4
 80027ca:	602b      	str	r3, [r5, #0]
    if (hdma->XferHalfCpltCallback != NULL)
 80027cc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80027ce:	6072      	str	r2, [r6, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 80027d0:	b1cb      	cbz	r3, 8002806 <HAL_DMA_IRQHandler+0x66>
}
 80027d2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 80027d4:	4718      	bx	r3
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027d6:	2202      	movs	r2, #2
 80027d8:	409a      	lsls	r2, r3
 80027da:	420a      	tst	r2, r1
 80027dc:	d015      	beq.n	800280a <HAL_DMA_IRQHandler+0x6a>
           && (0U != (source_it & DMA_IT_TC)))
 80027de:	f014 0f02 	tst.w	r4, #2
 80027e2:	d012      	beq.n	800280a <HAL_DMA_IRQHandler+0x6a>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e4:	682b      	ldr	r3, [r5, #0]
 80027e6:	0699      	lsls	r1, r3, #26
 80027e8:	d406      	bmi.n	80027f8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027ea:	682b      	ldr	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80027ec:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027ee:	f023 030a 	bic.w	r3, r3, #10
 80027f2:	602b      	str	r3, [r5, #0]
      hdma->State = HAL_DMA_STATE_READY;
 80027f4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    if (hdma->XferCpltCallback != NULL)
 80027f8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80027fa:	6072      	str	r2, [r6, #4]
    __HAL_UNLOCK(hdma);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (hdma->XferCpltCallback != NULL)
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1e5      	bne.n	80027d2 <HAL_DMA_IRQHandler+0x32>
}
 8002806:	bc70      	pop	{r4, r5, r6}
 8002808:	4770      	bx	lr
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800280a:	2208      	movs	r2, #8
 800280c:	409a      	lsls	r2, r3
 800280e:	420a      	tst	r2, r1
 8002810:	d0f9      	beq.n	8002806 <HAL_DMA_IRQHandler+0x66>
           && (0U != (source_it & DMA_IT_TE)))
 8002812:	0722      	lsls	r2, r4, #28
 8002814:	d5f7      	bpl.n	8002806 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002816:	682a      	ldr	r2, [r5, #0]
    if (hdma->XferErrorCallback != NULL)
 8002818:	6b41      	ldr	r1, [r0, #52]	; 0x34
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281a:	f022 020e 	bic.w	r2, r2, #14
 800281e:	602a      	str	r2, [r5, #0]
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002820:	2201      	movs	r2, #1
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
    __HAL_UNLOCK(hdma);
 8002826:	2400      	movs	r4, #0
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002828:	6073      	str	r3, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800282a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800282c:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    hdma->State = HAL_DMA_STATE_READY;
 8002830:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    if (hdma->XferErrorCallback != NULL)
 8002834:	2900      	cmp	r1, #0
 8002836:	d0e6      	beq.n	8002806 <HAL_DMA_IRQHandler+0x66>
}
 8002838:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800283a:	4708      	bx	r1

0800283c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800283c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002840:	680c      	ldr	r4, [r1, #0]
{
 8002842:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002844:	2c00      	cmp	r4, #0
 8002846:	f000 8084 	beq.w	8002952 <HAL_GPIO_Init+0x116>
  uint32_t position = 0x00U;
 800284a:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800284c:	f04f 0b01 	mov.w	fp, #1
 8002850:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8002854:	ea1e 0a04 	ands.w	sl, lr, r4
 8002858:	d076      	beq.n	8002948 <HAL_GPIO_Init+0x10c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800285a:	684e      	ldr	r6, [r1, #4]
 800285c:	f006 0203 	and.w	r2, r6, #3
 8002860:	1e55      	subs	r5, r2, #1
 8002862:	2d01      	cmp	r5, #1
 8002864:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002868:	d976      	bls.n	8002958 <HAL_GPIO_Init+0x11c>
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
        GPIOx->OTYPER = temp;
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800286a:	2a03      	cmp	r2, #3
 800286c:	f040 80ba 	bne.w	80029e4 <HAL_GPIO_Init+0x1a8>
 8002870:	fa02 f20c 	lsl.w	r2, r2, ip
 8002874:	43d5      	mvns	r5, r2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002876:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800287a:	ea0c 0505 	and.w	r5, ip, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287e:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002880:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002884:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002886:	d05f      	beq.n	8002948 <HAL_GPIO_Init+0x10c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002888:	4d64      	ldr	r5, [pc, #400]	; (8002a1c <HAL_GPIO_Init+0x1e0>)
 800288a:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 800288c:	f042 0201 	orr.w	r2, r2, #1
 8002890:	662a      	str	r2, [r5, #96]	; 0x60
 8002892:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8002894:	f023 0c03 	bic.w	ip, r3, #3
 8002898:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
 800289c:	f002 0201 	and.w	r2, r2, #1
 80028a0:	f50c 3c80 	add.w	ip, ip, #65536	; 0x10000
 80028a4:	9203      	str	r2, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028a6:	f003 0203 	and.w	r2, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028aa:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80028ac:	f8dc 5008 	ldr.w	r5, [ip, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028b0:	0092      	lsls	r2, r2, #2
 80028b2:	270f      	movs	r7, #15
 80028b4:	fa07 fe02 	lsl.w	lr, r7, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028b8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028bc:	ea25 050e 	bic.w	r5, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028c0:	d019      	beq.n	80028f6 <HAL_GPIO_Init+0xba>
 80028c2:	4f57      	ldr	r7, [pc, #348]	; (8002a20 <HAL_GPIO_Init+0x1e4>)
 80028c4:	42b8      	cmp	r0, r7
 80028c6:	f000 8098 	beq.w	80029fa <HAL_GPIO_Init+0x1be>
 80028ca:	4f56      	ldr	r7, [pc, #344]	; (8002a24 <HAL_GPIO_Init+0x1e8>)
 80028cc:	42b8      	cmp	r0, r7
 80028ce:	f000 8098 	beq.w	8002a02 <HAL_GPIO_Init+0x1c6>
 80028d2:	4f55      	ldr	r7, [pc, #340]	; (8002a28 <HAL_GPIO_Init+0x1ec>)
 80028d4:	42b8      	cmp	r0, r7
 80028d6:	f000 808a 	beq.w	80029ee <HAL_GPIO_Init+0x1b2>
 80028da:	4f54      	ldr	r7, [pc, #336]	; (8002a2c <HAL_GPIO_Init+0x1f0>)
 80028dc:	42b8      	cmp	r0, r7
 80028de:	f000 8096 	beq.w	8002a0e <HAL_GPIO_Init+0x1d2>
 80028e2:	4f53      	ldr	r7, [pc, #332]	; (8002a30 <HAL_GPIO_Init+0x1f4>)
 80028e4:	42b8      	cmp	r0, r7
 80028e6:	bf0c      	ite	eq
 80028e8:	f04f 0e05 	moveq.w	lr, #5
 80028ec:	f04f 0e06 	movne.w	lr, #6
 80028f0:	fa0e f202 	lsl.w	r2, lr, r2
 80028f4:	4315      	orrs	r5, r2
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028f6:	4a4f      	ldr	r2, [pc, #316]	; (8002a34 <HAL_GPIO_Init+0x1f8>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028f8:	f8cc 5008 	str.w	r5, [ip, #8]
        temp = EXTI->RTSR1;
 80028fc:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 80028fe:	ea6f 0c0a 	mvn.w	ip, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002902:	02f5      	lsls	r5, r6, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8002904:	4d4b      	ldr	r5, [pc, #300]	; (8002a34 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8002906:	bf54      	ite	pl
 8002908:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 800290c:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->RTSR1 = temp;
 8002910:	60aa      	str	r2, [r5, #8]

        temp = EXTI->FTSR1;
 8002912:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002914:	02b2      	lsls	r2, r6, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8002916:	4a47      	ldr	r2, [pc, #284]	; (8002a34 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 8002918:	bf54      	ite	pl
 800291a:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 800291e:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 8002922:	60d5      	str	r5, [r2, #12]

        temp = EXTI->EMR1;
 8002924:	6855      	ldr	r5, [r2, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002926:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <HAL_GPIO_Init+0x1f8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002928:	03b7      	lsls	r7, r6, #14
        temp &= ~(iocurrent);
 800292a:	bf54      	ite	pl
 800292c:	ea0c 0505 	andpl.w	r5, ip, r5
          temp |= iocurrent;
 8002930:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 8002934:	6055      	str	r5, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002936:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002938:	03f5      	lsls	r5, r6, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800293a:	4d3e      	ldr	r5, [pc, #248]	; (8002a34 <HAL_GPIO_Init+0x1f8>)
        temp &= ~(iocurrent);
 800293c:	bf54      	ite	pl
 800293e:	ea0c 0202 	andpl.w	r2, ip, r2
          temp |= iocurrent;
 8002942:	ea4a 0202 	orrmi.w	r2, sl, r2
        EXTI->IMR1 = temp;
 8002946:	602a      	str	r2, [r5, #0]
      }
    }

    position++;
 8002948:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800294a:	fa34 f203 	lsrs.w	r2, r4, r3
 800294e:	f47f af7f 	bne.w	8002850 <HAL_GPIO_Init+0x14>
  }
}
 8002952:	b005      	add	sp, #20
 8002954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8002958:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295c:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800295e:	2503      	movs	r5, #3
 8002960:	fa05 f50c 	lsl.w	r5, r5, ip
 8002964:	ea28 0805 	bic.w	r8, r8, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002968:	fa07 f90c 	lsl.w	r9, r7, ip
 800296c:	ea49 0808 	orr.w	r8, r9, r8
        GPIOx->OSPEEDR = temp;
 8002970:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8002974:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002978:	f3c6 1900 	ubfx	r9, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800297c:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002980:	fa09 fe03 	lsl.w	lr, r9, r3
 8002984:	ea4e 0e08 	orr.w	lr, lr, r8
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002988:	43ed      	mvns	r5, r5
        GPIOx->OTYPER = temp;
 800298a:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800298e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002992:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002994:	ea08 0805 	and.w	r8, r8, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002998:	fa07 fe0c 	lsl.w	lr, r7, ip
 800299c:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a0:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80029a2:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029a6:	d002      	beq.n	80029ae <HAL_GPIO_Init+0x172>
 80029a8:	fa02 f20c 	lsl.w	r2, r2, ip
 80029ac:	e763      	b.n	8002876 <HAL_GPIO_Init+0x3a>
        temp = GPIOx->AFR[position >> 3U];
 80029ae:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80029b2:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029b6:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80029ba:	f8d8 7020 	ldr.w	r7, [r8, #32]
 80029be:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029c0:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029c6:	fa07 f90e 	lsl.w	r9, r7, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80029ca:	270f      	movs	r7, #15
 80029cc:	fa07 fe0e 	lsl.w	lr, r7, lr
 80029d0:	9f01      	ldr	r7, [sp, #4]
 80029d2:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80029d6:	ea49 0e0e 	orr.w	lr, r9, lr
        GPIOx->AFR[position >> 3U] = temp;
 80029da:	fa02 f20c 	lsl.w	r2, r2, ip
 80029de:	f8c8 e020 	str.w	lr, [r8, #32]
 80029e2:	e748      	b.n	8002876 <HAL_GPIO_Init+0x3a>
 80029e4:	2503      	movs	r5, #3
 80029e6:	fa05 f50c 	lsl.w	r5, r5, ip
 80029ea:	43ed      	mvns	r5, r5
 80029ec:	e7cf      	b.n	800298e <HAL_GPIO_Init+0x152>
 80029ee:	f04f 0e03 	mov.w	lr, #3
 80029f2:	fa0e f202 	lsl.w	r2, lr, r2
 80029f6:	4315      	orrs	r5, r2
 80029f8:	e77d      	b.n	80028f6 <HAL_GPIO_Init+0xba>
 80029fa:	fa0b f202 	lsl.w	r2, fp, r2
 80029fe:	4315      	orrs	r5, r2
 8002a00:	e779      	b.n	80028f6 <HAL_GPIO_Init+0xba>
 8002a02:	f04f 0e02 	mov.w	lr, #2
 8002a06:	fa0e f202 	lsl.w	r2, lr, r2
 8002a0a:	4315      	orrs	r5, r2
 8002a0c:	e773      	b.n	80028f6 <HAL_GPIO_Init+0xba>
 8002a0e:	f04f 0e04 	mov.w	lr, #4
 8002a12:	fa0e f202 	lsl.w	r2, lr, r2
 8002a16:	4315      	orrs	r5, r2
 8002a18:	e76d      	b.n	80028f6 <HAL_GPIO_Init+0xba>
 8002a1a:	bf00      	nop
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	48000400 	.word	0x48000400
 8002a24:	48000800 	.word	0x48000800
 8002a28:	48000c00 	.word	0x48000c00
 8002a2c:	48001000 	.word	0x48001000
 8002a30:	48001400 	.word	0x48001400
 8002a34:	40010400 	.word	0x40010400

08002a38 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a38:	4a3b      	ldr	r2, [pc, #236]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8002a3a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a3c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002a3e:	b968      	cbnz	r0, 8002a5c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a48:	d014      	beq.n	8002a74 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002a4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a52:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8002a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a5a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002a60:	d02f      	beq.n	8002ac2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002a62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8002a6c:	2000      	movs	r0, #0
}
 8002a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002a72:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a74:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a78:	4b2c      	ldr	r3, [pc, #176]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002a7a:	482d      	ldr	r0, [pc, #180]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a7c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002a80:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a84:	6811      	ldr	r1, [r2, #0]
 8002a86:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002a8a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002a8e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a90:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a92:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a94:	2332      	movs	r3, #50	; 0x32
 8002a96:	fb03 f304 	mul.w	r3, r3, r4
 8002a9a:	fba0 0303 	umull	r0, r3, r0, r3
 8002a9e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa0:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002aa2:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aa6:	d506      	bpl.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002aa8:	e000      	b.n	8002aac <HAL_PWREx_ControlVoltageScaling+0x74>
 8002aaa:	b123      	cbz	r3, 8002ab6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002aac:	6951      	ldr	r1, [r2, #20]
 8002aae:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002ab0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ab4:	d4f9      	bmi.n	8002aaa <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	055c      	lsls	r4, r3, #21
 8002abc:	d5d6      	bpl.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8002abe:	2003      	movs	r0, #3
 8002ac0:	e7c9      	b.n	8002a56 <HAL_PWREx_ControlVoltageScaling+0x1e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ac2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aca:	d009      	beq.n	8002ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002acc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8002ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8002ad8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ada:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8002ade:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8002ae6:	4812      	ldr	r0, [pc, #72]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ae8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002aec:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002af0:	6811      	ldr	r1, [r2, #0]
 8002af2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8002af6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8002afa:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002afc:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002afe:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b00:	2332      	movs	r3, #50	; 0x32
 8002b02:	fb03 f304 	mul.w	r3, r3, r4
 8002b06:	fba0 0303 	umull	r0, r3, r0, r3
 8002b0a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b0c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b0e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b12:	d5d0      	bpl.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002b14:	e001      	b.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0cd      	beq.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002b1a:	6951      	ldr	r1, [r2, #20]
 8002b1c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8002b1e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b22:	d5c8      	bpl.n	8002ab6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8002b24:	e7f7      	b.n	8002b16 <HAL_PWREx_ControlVoltageScaling+0xde>
 8002b26:	bf00      	nop
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b34:	4a02      	ldr	r2, [pc, #8]	; (8002b40 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8002b36:	6893      	ldr	r3, [r2, #8]
 8002b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b3c:	6093      	str	r3, [r2, #8]
}
 8002b3e:	4770      	bx	lr
 8002b40:	40007000 	.word	0x40007000

08002b44 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b44:	2800      	cmp	r0, #0
 8002b46:	f000 81c3 	beq.w	8002ed0 <HAL_RCC_OscConfig+0x38c>
{
 8002b4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	07d9      	lsls	r1, r3, #31
{
 8002b52:	b082      	sub	sp, #8
 8002b54:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b56:	d52d      	bpl.n	8002bb4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b58:	49b5      	ldr	r1, [pc, #724]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002b5a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b5c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b5e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b62:	2a0c      	cmp	r2, #12
 8002b64:	f000 810a 	beq.w	8002d7c <HAL_RCC_OscConfig+0x238>
 8002b68:	2a08      	cmp	r2, #8
 8002b6a:	f000 810c 	beq.w	8002d86 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6e:	6863      	ldr	r3, [r4, #4]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	f000 8133 	beq.w	8002dde <HAL_RCC_OscConfig+0x29a>
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	f000 819b 	beq.w	8002eb6 <HAL_RCC_OscConfig+0x372>
 8002b80:	4dab      	ldr	r5, [pc, #684]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002b82:	682a      	ldr	r2, [r5, #0]
 8002b84:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b88:	602a      	str	r2, [r5, #0]
 8002b8a:	682a      	ldr	r2, [r5, #0]
 8002b8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002b90:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f040 8128 	bne.w	8002de8 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b98:	f7fe ff10 	bl	80019bc <HAL_GetTick>
 8002b9c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba0:	f7fe ff0c 	bl	80019bc <HAL_GetTick>
 8002ba4:	1b80      	subs	r0, r0, r6
 8002ba6:	2864      	cmp	r0, #100	; 0x64
 8002ba8:	f200 813b 	bhi.w	8002e22 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	039f      	lsls	r7, r3, #14
 8002bb0:	d4f6      	bmi.n	8002ba0 <HAL_RCC_OscConfig+0x5c>
 8002bb2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bb4:	079e      	lsls	r6, r3, #30
 8002bb6:	d528      	bpl.n	8002c0a <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bb8:	4a9d      	ldr	r2, [pc, #628]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002bba:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bbc:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bbe:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002bc2:	2b0c      	cmp	r3, #12
 8002bc4:	f000 80ec 	beq.w	8002da0 <HAL_RCC_OscConfig+0x25c>
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	f000 80ee 	beq.w	8002daa <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bce:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bd0:	4d97      	ldr	r5, [pc, #604]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8116 	beq.w	8002e04 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8002bd8:	682b      	ldr	r3, [r5, #0]
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe feec 	bl	80019bc <HAL_GetTick>
 8002be4:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002be6:	e005      	b.n	8002bf4 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002be8:	f7fe fee8 	bl	80019bc <HAL_GetTick>
 8002bec:	1b80      	subs	r0, r0, r6
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	f200 8117 	bhi.w	8002e22 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	0558      	lsls	r0, r3, #21
 8002bf8:	d5f6      	bpl.n	8002be8 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bfa:	686b      	ldr	r3, [r5, #4]
 8002bfc:	6922      	ldr	r2, [r4, #16]
 8002bfe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002c02:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002c06:	606b      	str	r3, [r5, #4]
 8002c08:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c0a:	071a      	lsls	r2, r3, #28
 8002c0c:	d519      	bpl.n	8002c42 <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c0e:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c10:	4d87      	ldr	r5, [pc, #540]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	f000 809e 	beq.w	8002d54 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8002c18:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c24:	f7fe feca 	bl	80019bc <HAL_GetTick>
 8002c28:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c2a:	e005      	b.n	8002c38 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7fe fec6 	bl	80019bc <HAL_GetTick>
 8002c30:	1b80      	subs	r0, r0, r6
 8002c32:	2802      	cmp	r0, #2
 8002c34:	f200 80f5 	bhi.w	8002e22 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c38:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002c3c:	079f      	lsls	r7, r3, #30
 8002c3e:	d5f5      	bpl.n	8002c2c <HAL_RCC_OscConfig+0xe8>
 8002c40:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c42:	0759      	lsls	r1, r3, #29
 8002c44:	d541      	bpl.n	8002cca <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c46:	4b7a      	ldr	r3, [pc, #488]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c4a:	00d2      	lsls	r2, r2, #3
 8002c4c:	f100 80ed 	bmi.w	8002e2a <HAL_RCC_OscConfig+0x2e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002c52:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c56:	659a      	str	r2, [r3, #88]	; 0x58
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	9301      	str	r3, [sp, #4]
 8002c60:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c62:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c64:	4e73      	ldr	r6, [pc, #460]	; (8002e34 <HAL_RCC_OscConfig+0x2f0>)
 8002c66:	6833      	ldr	r3, [r6, #0]
 8002c68:	05df      	lsls	r7, r3, #23
 8002c6a:	f140 8113 	bpl.w	8002e94 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c6e:	68a3      	ldr	r3, [r4, #8]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	f000 80e3 	beq.w	8002e3c <HAL_RCC_OscConfig+0x2f8>
 8002c76:	2b05      	cmp	r3, #5
 8002c78:	f000 8169 	beq.w	8002f4e <HAL_RCC_OscConfig+0x40a>
 8002c7c:	4e6c      	ldr	r6, [pc, #432]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002c7e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8002c8a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8002c8e:	f022 0204 	bic.w	r2, r2, #4
 8002c92:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f040 80d7 	bne.w	8002e4a <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c9c:	f7fe fe8e 	bl	80019bc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002ca4:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fe88 	bl	80019bc <HAL_GetTick>
 8002cac:	1bc0      	subs	r0, r0, r7
 8002cae:	4540      	cmp	r0, r8
 8002cb0:	f200 80b7 	bhi.w	8002e22 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cb4:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002cb8:	079a      	lsls	r2, r3, #30
 8002cba:	d4f5      	bmi.n	8002ca8 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cbc:	b125      	cbz	r5, 8002cc8 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cbe:	4a5c      	ldr	r2, [pc, #368]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002cc0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc8:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cca:	069b      	lsls	r3, r3, #26
 8002ccc:	d518      	bpl.n	8002d00 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cce:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cd0:	4d57      	ldr	r5, [pc, #348]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 80ca 	beq.w	8002e6c <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8002cd8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fe6a 	bl	80019bc <HAL_GetTick>
 8002ce8:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cea:	e005      	b.n	8002cf8 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cec:	f7fe fe66 	bl	80019bc <HAL_GetTick>
 8002cf0:	1b80      	subs	r0, r0, r6
 8002cf2:	2802      	cmp	r0, #2
 8002cf4:	f200 8095 	bhi.w	8002e22 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cf8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002cfc:	079f      	lsls	r7, r3, #30
 8002cfe:	d5f5      	bpl.n	8002cec <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d00:	69e0      	ldr	r0, [r4, #28]
 8002d02:	b318      	cbz	r0, 8002d4c <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d04:	4d4a      	ldr	r5, [pc, #296]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002d06:	68ab      	ldr	r3, [r5, #8]
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	f000 812c 	beq.w	8002f6a <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d14:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d1c:	f000 80da 	beq.w	8002ed4 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d20:	68eb      	ldr	r3, [r5, #12]
 8002d22:	f023 0303 	bic.w	r3, r3, #3
 8002d26:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002d28:	68eb      	ldr	r3, [r5, #12]
 8002d2a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d32:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe fe42 	bl	80019bc <HAL_GetTick>
 8002d38:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3a:	e004      	b.n	8002d46 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe fe3e 	bl	80019bc <HAL_GetTick>
 8002d40:	1b00      	subs	r0, r0, r4
 8002d42:	2802      	cmp	r0, #2
 8002d44:	d86d      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d46:	682b      	ldr	r3, [r5, #0]
 8002d48:	019b      	lsls	r3, r3, #6
 8002d4a:	d4f7      	bmi.n	8002d3c <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8002d4c:	2000      	movs	r0, #0
}
 8002d4e:	b002      	add	sp, #8
 8002d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8002d54:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8002d60:	f7fe fe2c 	bl	80019bc <HAL_GetTick>
 8002d64:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d66:	e004      	b.n	8002d72 <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fe28 	bl	80019bc <HAL_GetTick>
 8002d6c:	1b80      	subs	r0, r0, r6
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d857      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d72:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8002d76:	0798      	lsls	r0, r3, #30
 8002d78:	d4f6      	bmi.n	8002d68 <HAL_RCC_OscConfig+0x224>
 8002d7a:	e761      	b.n	8002c40 <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d7c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002d80:	2903      	cmp	r1, #3
 8002d82:	f47f aef4 	bne.w	8002b6e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d86:	4a2a      	ldr	r2, [pc, #168]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002d88:	6812      	ldr	r2, [r2, #0]
 8002d8a:	0392      	lsls	r2, r2, #14
 8002d8c:	f57f af12 	bpl.w	8002bb4 <HAL_RCC_OscConfig+0x70>
 8002d90:	6862      	ldr	r2, [r4, #4]
 8002d92:	2a00      	cmp	r2, #0
 8002d94:	f47f af0e 	bne.w	8002bb4 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8002d98:	2001      	movs	r0, #1
}
 8002d9a:	b002      	add	sp, #8
 8002d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002da0:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002da4:	2a02      	cmp	r2, #2
 8002da6:	f47f af12 	bne.w	8002bce <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002daa:	4b21      	ldr	r3, [pc, #132]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	055d      	lsls	r5, r3, #21
 8002db0:	d502      	bpl.n	8002db8 <HAL_RCC_OscConfig+0x274>
 8002db2:	68e3      	ldr	r3, [r4, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0ef      	beq.n	8002d98 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db8:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002dba:	6920      	ldr	r0, [r4, #16]
 8002dbc:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dbe:	491e      	ldr	r1, [pc, #120]	; (8002e38 <HAL_RCC_OscConfig+0x2f4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002dc4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002dc8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002dca:	6808      	ldr	r0, [r1, #0]
 8002dcc:	f7fe fdb4 	bl	8001938 <HAL_InitTick>
 8002dd0:	2800      	cmp	r0, #0
 8002dd2:	d1e1      	bne.n	8002d98 <HAL_RCC_OscConfig+0x254>
 8002dd4:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	071a      	lsls	r2, r3, #28
 8002dd8:	f57f af33 	bpl.w	8002c42 <HAL_RCC_OscConfig+0xfe>
 8002ddc:	e717      	b.n	8002c0e <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dde:	4a14      	ldr	r2, [pc, #80]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
 8002de0:	6813      	ldr	r3, [r2, #0]
 8002de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002de6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002de8:	f7fe fde8 	bl	80019bc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dec:	4e10      	ldr	r6, [pc, #64]	; (8002e30 <HAL_RCC_OscConfig+0x2ec>)
        tickstart = HAL_GetTick();
 8002dee:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002df0:	e004      	b.n	8002dfc <HAL_RCC_OscConfig+0x2b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002df2:	f7fe fde3 	bl	80019bc <HAL_GetTick>
 8002df6:	1b40      	subs	r0, r0, r5
 8002df8:	2864      	cmp	r0, #100	; 0x64
 8002dfa:	d812      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dfc:	6833      	ldr	r3, [r6, #0]
 8002dfe:	039b      	lsls	r3, r3, #14
 8002e00:	d5f7      	bpl.n	8002df2 <HAL_RCC_OscConfig+0x2ae>
 8002e02:	e6d6      	b.n	8002bb2 <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8002e04:	682b      	ldr	r3, [r5, #0]
 8002e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002e0c:	f7fe fdd6 	bl	80019bc <HAL_GetTick>
 8002e10:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002e12:	682b      	ldr	r3, [r5, #0]
 8002e14:	0559      	lsls	r1, r3, #21
 8002e16:	d5dd      	bpl.n	8002dd4 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e18:	f7fe fdd0 	bl	80019bc <HAL_GetTick>
 8002e1c:	1b80      	subs	r0, r0, r6
 8002e1e:	2802      	cmp	r0, #2
 8002e20:	d9f7      	bls.n	8002e12 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8002e22:	2003      	movs	r0, #3
}
 8002e24:	b002      	add	sp, #8
 8002e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	e71a      	b.n	8002c64 <HAL_RCC_OscConfig+0x120>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40007000 	.word	0x40007000
 8002e38:	20000008 	.word	0x20000008
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e3c:	4a65      	ldr	r2, [pc, #404]	; (8002fd4 <HAL_RCC_OscConfig+0x490>)
 8002e3e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002e4a:	f7fe fdb7 	bl	80019bc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4e:	4f61      	ldr	r7, [pc, #388]	; (8002fd4 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8002e50:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e56:	e004      	b.n	8002e62 <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e58:	f7fe fdb0 	bl	80019bc <HAL_GetTick>
 8002e5c:	1b80      	subs	r0, r0, r6
 8002e5e:	4540      	cmp	r0, r8
 8002e60:	d8df      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x2de>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e66:	0799      	lsls	r1, r3, #30
 8002e68:	d5f6      	bpl.n	8002e58 <HAL_RCC_OscConfig+0x314>
 8002e6a:	e727      	b.n	8002cbc <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8002e6c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002e70:	f023 0301 	bic.w	r3, r3, #1
 8002e74:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8002e78:	f7fe fda0 	bl	80019bc <HAL_GetTick>
 8002e7c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e7e:	e004      	b.n	8002e8a <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e80:	f7fe fd9c 	bl	80019bc <HAL_GetTick>
 8002e84:	1b80      	subs	r0, r0, r6
 8002e86:	2802      	cmp	r0, #2
 8002e88:	d8cb      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x2de>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002e8a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8002e8e:	0798      	lsls	r0, r3, #30
 8002e90:	d4f6      	bmi.n	8002e80 <HAL_RCC_OscConfig+0x33c>
 8002e92:	e735      	b.n	8002d00 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e94:	6833      	ldr	r3, [r6, #0]
 8002e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e9a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fd8e 	bl	80019bc <HAL_GetTick>
 8002ea0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ea2:	6833      	ldr	r3, [r6, #0]
 8002ea4:	05d8      	lsls	r0, r3, #23
 8002ea6:	f53f aee2 	bmi.w	8002c6e <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eaa:	f7fe fd87 	bl	80019bc <HAL_GetTick>
 8002eae:	1bc0      	subs	r0, r0, r7
 8002eb0:	2802      	cmp	r0, #2
 8002eb2:	d9f6      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x35e>
 8002eb4:	e7b5      	b.n	8002e22 <HAL_RCC_OscConfig+0x2de>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002eba:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002ec4:	601a      	str	r2, [r3, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ecc:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ece:	e78b      	b.n	8002de8 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8002ed0:	2001      	movs	r0, #1
}
 8002ed2:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8002ed4:	f7fe fd72 	bl	80019bc <HAL_GetTick>
 8002ed8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002eda:	e004      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002edc:	f7fe fd6e 	bl	80019bc <HAL_GetTick>
 8002ee0:	1b80      	subs	r0, r0, r6
 8002ee2:	2802      	cmp	r0, #2
 8002ee4:	d89d      	bhi.n	8002e22 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee6:	682b      	ldr	r3, [r5, #0]
 8002ee8:	0199      	lsls	r1, r3, #6
 8002eea:	d4f7      	bmi.n	8002edc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eec:	68e9      	ldr	r1, [r5, #12]
 8002eee:	4b3a      	ldr	r3, [pc, #232]	; (8002fd8 <HAL_RCC_OscConfig+0x494>)
 8002ef0:	6a22      	ldr	r2, [r4, #32]
 8002ef2:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002ef4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ef6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ef8:	400b      	ands	r3, r1
 8002efa:	4313      	orrs	r3, r2
 8002efc:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8002f00:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002f04:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8002f08:	3801      	subs	r0, #1
 8002f0a:	0849      	lsrs	r1, r1, #1
 8002f0c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8002f10:	3901      	subs	r1, #1
 8002f12:	0852      	lsrs	r2, r2, #1
 8002f14:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002f18:	3a01      	subs	r2, #1
 8002f1a:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002f1e:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002f20:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f22:	4e2c      	ldr	r6, [pc, #176]	; (8002fd4 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_ENABLE();
 8002f24:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f28:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f2a:	68eb      	ldr	r3, [r5, #12]
 8002f2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f30:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8002f32:	f7fe fd43 	bl	80019bc <HAL_GetTick>
 8002f36:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f38:	e005      	b.n	8002f46 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3a:	f7fe fd3f 	bl	80019bc <HAL_GetTick>
 8002f3e:	1b00      	subs	r0, r0, r4
 8002f40:	2802      	cmp	r0, #2
 8002f42:	f63f af6e 	bhi.w	8002e22 <HAL_RCC_OscConfig+0x2de>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f46:	6833      	ldr	r3, [r6, #0]
 8002f48:	019a      	lsls	r2, r3, #6
 8002f4a:	d5f6      	bpl.n	8002f3a <HAL_RCC_OscConfig+0x3f6>
 8002f4c:	e6fe      	b.n	8002d4c <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f4e:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_OscConfig+0x490>)
 8002f50:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002f54:	f042 0204 	orr.w	r2, r2, #4
 8002f58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002f5c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8002f60:	f042 0201 	orr.w	r2, r2, #1
 8002f64:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f68:	e76f      	b.n	8002e4a <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f6a:	2801      	cmp	r0, #1
 8002f6c:	f43f aeef 	beq.w	8002d4e <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8002f70:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	6a22      	ldr	r2, [r4, #32]
 8002f74:	f003 0103 	and.w	r1, r3, #3
 8002f78:	4291      	cmp	r1, r2
 8002f7a:	f47f af0d 	bne.w	8002d98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f7e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002f80:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f84:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f86:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002f8a:	f47f af05 	bne.w	8002d98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f8e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002f90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f94:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002f98:	f47f aefe 	bne.w	8002d98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002f9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002f9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fa2:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002fa6:	f47f aef7 	bne.w	8002d98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002faa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fac:	0852      	lsrs	r2, r2, #1
 8002fae:	3a01      	subs	r2, #1
 8002fb0:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fb4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002fb8:	f47f aeee 	bne.w	8002d98 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fbc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002fbe:	0852      	lsrs	r2, r2, #1
 8002fc0:	3a01      	subs	r2, #1
 8002fc2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc6:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8002fca:	bf14      	ite	ne
 8002fcc:	2001      	movne	r0, #1
 8002fce:	2000      	moveq	r0, #0
 8002fd0:	e6bd      	b.n	8002d4e <HAL_RCC_OscConfig+0x20a>
 8002fd2:	bf00      	nop
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	019f800c 	.word	0x019f800c

08002fdc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <HAL_RCC_GetSysClockFreq+0x64>)
 8002fde:	689a      	ldr	r2, [r3, #8]
 8002fe0:	f002 020c 	and.w	r2, r2, #12
 8002fe4:	2a04      	cmp	r2, #4
 8002fe6:	d027      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	f002 020c 	and.w	r2, r2, #12
 8002fee:	2a08      	cmp	r2, #8
 8002ff0:	d024      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	f002 020c 	and.w	r2, r2, #12
 8002ff8:	2a0c      	cmp	r2, #12
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8002ffc:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8002ffe:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003000:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003002:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003004:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003006:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800300a:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 800300e:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003010:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003014:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003018:	bf0c      	ite	eq
 800301a:	480a      	ldreq	r0, [pc, #40]	; (8003044 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800301c:	480a      	ldrne	r0, [pc, #40]	; (8003048 <HAL_RCC_GetSysClockFreq+0x6c>)
 800301e:	fbb0 f0f2 	udiv	r0, r0, r2
 8003022:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003026:	4b06      	ldr	r3, [pc, #24]	; (8003040 <HAL_RCC_GetSysClockFreq+0x64>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800302e:	3301      	adds	r3, #1
 8003030:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8003032:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8003036:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8003038:	4803      	ldr	r0, [pc, #12]	; (8003048 <HAL_RCC_GetSysClockFreq+0x6c>)
 800303a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800303c:	4801      	ldr	r0, [pc, #4]	; (8003044 <HAL_RCC_GetSysClockFreq+0x68>)
 800303e:	4770      	bx	lr
 8003040:	40021000 	.word	0x40021000
 8003044:	007a1200 	.word	0x007a1200
 8003048:	00f42400 	.word	0x00f42400

0800304c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800304c:	2800      	cmp	r0, #0
 800304e:	f000 80ef 	beq.w	8003230 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003052:	4a7f      	ldr	r2, [pc, #508]	; (8003250 <HAL_RCC_ClockConfig+0x204>)
{
 8003054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003058:	6813      	ldr	r3, [r2, #0]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	428b      	cmp	r3, r1
 8003060:	460d      	mov	r5, r1
 8003062:	4604      	mov	r4, r0
 8003064:	d20c      	bcs.n	8003080 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003066:	6813      	ldr	r3, [r2, #0]
 8003068:	f023 030f 	bic.w	r3, r3, #15
 800306c:	430b      	orrs	r3, r1
 800306e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003070:	6813      	ldr	r3, [r2, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	428b      	cmp	r3, r1
 8003078:	d002      	beq.n	8003080 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800307a:	2001      	movs	r0, #1
}
 800307c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003080:	6823      	ldr	r3, [r4, #0]
 8003082:	07de      	lsls	r6, r3, #31
 8003084:	d563      	bpl.n	800314e <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003086:	6862      	ldr	r2, [r4, #4]
 8003088:	2a03      	cmp	r2, #3
 800308a:	f000 809a 	beq.w	80031c2 <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800308e:	4b71      	ldr	r3, [pc, #452]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003090:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003092:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003094:	f000 8091 	beq.w	80031ba <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003098:	055b      	lsls	r3, r3, #21
 800309a:	d5ee      	bpl.n	800307a <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 800309c:	f7ff ff9e 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80030a0:	4b6d      	ldr	r3, [pc, #436]	; (8003258 <HAL_RCC_ClockConfig+0x20c>)
 80030a2:	4298      	cmp	r0, r3
 80030a4:	f200 80c6 	bhi.w	8003234 <HAL_RCC_ClockConfig+0x1e8>
 80030a8:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80030aa:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030ae:	4e69      	ldr	r6, [pc, #420]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 80030b0:	68b3      	ldr	r3, [r6, #8]
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	431a      	orrs	r2, r3
 80030b8:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 80030ba:	f7fe fc7f 	bl	80019bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030be:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80030c2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030c4:	e004      	b.n	80030d0 <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c6:	f7fe fc79 	bl	80019bc <HAL_GetTick>
 80030ca:	1bc0      	subs	r0, r0, r7
 80030cc:	4540      	cmp	r0, r8
 80030ce:	d871      	bhi.n	80031b4 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d0:	68b3      	ldr	r3, [r6, #8]
 80030d2:	6862      	ldr	r2, [r4, #4]
 80030d4:	f003 030c 	and.w	r3, r3, #12
 80030d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80030dc:	d1f3      	bne.n	80030c6 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	079f      	lsls	r7, r3, #30
 80030e2:	d436      	bmi.n	8003152 <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 80030e4:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 80030e8:	d103      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80030ea:	68b3      	ldr	r3, [r6, #8]
 80030ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030f0:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f2:	4e57      	ldr	r6, [pc, #348]	; (8003250 <HAL_RCC_ClockConfig+0x204>)
 80030f4:	6833      	ldr	r3, [r6, #0]
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	42ab      	cmp	r3, r5
 80030fc:	d846      	bhi.n	800318c <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	075a      	lsls	r2, r3, #29
 8003102:	d506      	bpl.n	8003112 <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003104:	4953      	ldr	r1, [pc, #332]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003106:	68e0      	ldr	r0, [r4, #12]
 8003108:	688a      	ldr	r2, [r1, #8]
 800310a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800310e:	4302      	orrs	r2, r0
 8003110:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003112:	071b      	lsls	r3, r3, #28
 8003114:	d507      	bpl.n	8003126 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003116:	4a4f      	ldr	r2, [pc, #316]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003118:	6921      	ldr	r1, [r4, #16]
 800311a:	6893      	ldr	r3, [r2, #8]
 800311c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003120:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003124:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003126:	f7ff ff59 	bl	8002fdc <HAL_RCC_GetSysClockFreq>
 800312a:	4a4a      	ldr	r2, [pc, #296]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 800312c:	4c4b      	ldr	r4, [pc, #300]	; (800325c <HAL_RCC_ClockConfig+0x210>)
 800312e:	6892      	ldr	r2, [r2, #8]
 8003130:	494b      	ldr	r1, [pc, #300]	; (8003260 <HAL_RCC_ClockConfig+0x214>)
 8003132:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003136:	4603      	mov	r3, r0
 8003138:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800313a:	484a      	ldr	r0, [pc, #296]	; (8003264 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313c:	f002 021f 	and.w	r2, r2, #31
 8003140:	40d3      	lsrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8003144:	6800      	ldr	r0, [r0, #0]
}
 8003146:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800314a:	f7fe bbf5 	b.w	8001938 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800314e:	0798      	lsls	r0, r3, #30
 8003150:	d5cf      	bpl.n	80030f2 <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003152:	0758      	lsls	r0, r3, #29
 8003154:	d504      	bpl.n	8003160 <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003156:	493f      	ldr	r1, [pc, #252]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003158:	688a      	ldr	r2, [r1, #8]
 800315a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800315e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	0719      	lsls	r1, r3, #28
 8003162:	d506      	bpl.n	8003172 <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003164:	4a3b      	ldr	r2, [pc, #236]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003166:	6893      	ldr	r3, [r2, #8]
 8003168:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800316c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003170:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003172:	4a38      	ldr	r2, [pc, #224]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003174:	68a1      	ldr	r1, [r4, #8]
 8003176:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003178:	4e35      	ldr	r6, [pc, #212]	; (8003250 <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800317a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800317e:	430b      	orrs	r3, r1
 8003180:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003182:	6833      	ldr	r3, [r6, #0]
 8003184:	f003 030f 	and.w	r3, r3, #15
 8003188:	42ab      	cmp	r3, r5
 800318a:	d9b8      	bls.n	80030fe <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318c:	6833      	ldr	r3, [r6, #0]
 800318e:	f023 030f 	bic.w	r3, r3, #15
 8003192:	432b      	orrs	r3, r5
 8003194:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8003196:	f7fe fc11 	bl	80019bc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800319e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a0:	6833      	ldr	r3, [r6, #0]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	42ab      	cmp	r3, r5
 80031a8:	d0a9      	beq.n	80030fe <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031aa:	f7fe fc07 	bl	80019bc <HAL_GetTick>
 80031ae:	1bc0      	subs	r0, r0, r7
 80031b0:	4540      	cmp	r0, r8
 80031b2:	d9f5      	bls.n	80031a0 <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80031b4:	2003      	movs	r0, #3
}
 80031b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ba:	039a      	lsls	r2, r3, #14
 80031bc:	f53f af6e 	bmi.w	800309c <HAL_RCC_ClockConfig+0x50>
 80031c0:	e75b      	b.n	800307a <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031c2:	4824      	ldr	r0, [pc, #144]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 80031c4:	6801      	ldr	r1, [r0, #0]
 80031c6:	0189      	lsls	r1, r1, #6
 80031c8:	f57f af57 	bpl.w	800307a <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031cc:	68c7      	ldr	r7, [r0, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031ce:	68c1      	ldr	r1, [r0, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031d0:	68c0      	ldr	r0, [r0, #12]
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d2:	f007 0703 	and.w	r7, r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031d6:	f3c1 1103 	ubfx	r1, r1, #4, #4
  switch (pllsource)
 80031da:	2f03      	cmp	r7, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	f101 0601 	add.w	r6, r1, #1
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e0:	bf0c      	ite	eq
 80031e2:	4921      	ldreq	r1, [pc, #132]	; (8003268 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031e4:	4921      	ldrne	r1, [pc, #132]	; (800326c <HAL_RCC_ClockConfig+0x220>)
 80031e6:	fbb1 f1f6 	udiv	r1, r1, r6
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ea:	4e1a      	ldr	r6, [pc, #104]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
      if(pllfreq > 80000000U)
 80031ec:	4f1a      	ldr	r7, [pc, #104]	; (8003258 <HAL_RCC_ClockConfig+0x20c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ee:	f3c0 2006 	ubfx	r0, r0, #8, #7
 80031f2:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031f6:	68f0      	ldr	r0, [r6, #12]
 80031f8:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80031fc:	3001      	adds	r0, #1
 80031fe:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 8003200:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 8003204:	42b9      	cmp	r1, r7
 8003206:	d920      	bls.n	800324a <HAL_RCC_ClockConfig+0x1fe>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003208:	68b1      	ldr	r1, [r6, #8]
 800320a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x1d0>
 8003210:	f013 0902 	ands.w	r9, r3, #2
 8003214:	f43f af4b 	beq.w	80030ae <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003218:	68a3      	ldr	r3, [r4, #8]
 800321a:	b9b3      	cbnz	r3, 800324a <HAL_RCC_ClockConfig+0x1fe>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800321c:	490d      	ldr	r1, [pc, #52]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 800321e:	688b      	ldr	r3, [r1, #8]
 8003220:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003228:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 800322a:	f04f 0980 	mov.w	r9, #128	; 0x80
 800322e:	e73e      	b.n	80030ae <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 8003230:	2001      	movs	r0, #1
}
 8003232:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003234:	4a07      	ldr	r2, [pc, #28]	; (8003254 <HAL_RCC_ClockConfig+0x208>)
 8003236:	6893      	ldr	r3, [r2, #8]
 8003238:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003240:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003242:	6862      	ldr	r2, [r4, #4]
 8003244:	f04f 0980 	mov.w	r9, #128	; 0x80
 8003248:	e731      	b.n	80030ae <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800324a:	f04f 0900 	mov.w	r9, #0
 800324e:	e72e      	b.n	80030ae <HAL_RCC_ClockConfig+0x62>
 8003250:	40022000 	.word	0x40022000
 8003254:	40021000 	.word	0x40021000
 8003258:	04c4b400 	.word	0x04c4b400
 800325c:	08007d70 	.word	0x08007d70
 8003260:	20000000 	.word	0x20000000
 8003264:	20000008 	.word	0x20000008
 8003268:	007a1200 	.word	0x007a1200
 800326c:	00f42400 	.word	0x00f42400

08003270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003274:	6803      	ldr	r3, [r0, #0]
{
 8003276:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003278:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 800327c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800327e:	d056      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003280:	4bb6      	ldr	r3, [pc, #728]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003284:	00d5      	lsls	r5, r2, #3
 8003286:	f140 813e 	bpl.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x296>
    FlagStatus       pwrclkchanged = RESET;
 800328a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800328c:	4db4      	ldr	r5, [pc, #720]	; (8003560 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800328e:	682b      	ldr	r3, [r5, #0]
 8003290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003294:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003296:	f7fe fb91 	bl	80019bc <HAL_GetTick>
 800329a:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329c:	e005      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329e:	f7fe fb8d 	bl	80019bc <HAL_GetTick>
 80032a2:	1b83      	subs	r3, r0, r6
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	f200 8139 	bhi.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032aa:	682b      	ldr	r3, [r5, #0]
 80032ac:	05d8      	lsls	r0, r3, #23
 80032ae:	d5f6      	bpl.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032b0:	4daa      	ldr	r5, [pc, #680]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80032b2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032b6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80032ba:	d027      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80032bc:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80032be:	429a      	cmp	r2, r3
 80032c0:	d025      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032c2:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c6:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80032ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ce:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d2:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032d6:	f421 7040 	bic.w	r0, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032de:	07c9      	lsls	r1, r1, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032e0:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        RCC->BDCR = tmpregister;
 80032e4:	f8c5 0090 	str.w	r0, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e8:	f140 8148 	bpl.w	800357c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ec:	f7fe fb66 	bl	80019bc <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f0:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80032f4:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f6:	e005      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fb60 	bl	80019bc <HAL_GetTick>
 80032fc:	1b80      	subs	r0, r0, r6
 80032fe:	4540      	cmp	r0, r8
 8003300:	f200 810c 	bhi.w	800351c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003304:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8003308:	079b      	lsls	r3, r3, #30
 800330a:	d5f5      	bpl.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800330c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800330e:	4993      	ldr	r1, [pc, #588]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003310:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003314:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003318:	4313      	orrs	r3, r2
 800331a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800331e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003320:	b127      	cbz	r7, 800332c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003322:	4a8e      	ldr	r2, [pc, #568]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003324:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003326:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
 800332c:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800332e:	07dd      	lsls	r5, r3, #31
 8003330:	d508      	bpl.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003332:	498a      	ldr	r1, [pc, #552]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003334:	6865      	ldr	r5, [r4, #4]
 8003336:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800333a:	f022 0203 	bic.w	r2, r2, #3
 800333e:	432a      	orrs	r2, r5
 8003340:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003344:	0799      	lsls	r1, r3, #30
 8003346:	d508      	bpl.n	800335a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003348:	4984      	ldr	r1, [pc, #528]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800334a:	68a5      	ldr	r5, [r4, #8]
 800334c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003350:	f022 020c 	bic.w	r2, r2, #12
 8003354:	432a      	orrs	r2, r5
 8003356:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800335a:	075a      	lsls	r2, r3, #29
 800335c:	d508      	bpl.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800335e:	497f      	ldr	r1, [pc, #508]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003360:	68e5      	ldr	r5, [r4, #12]
 8003362:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003366:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800336a:	432a      	orrs	r2, r5
 800336c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003370:	071f      	lsls	r7, r3, #28
 8003372:	d508      	bpl.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003374:	4979      	ldr	r1, [pc, #484]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003376:	6925      	ldr	r5, [r4, #16]
 8003378:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800337c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003380:	432a      	orrs	r2, r5
 8003382:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003386:	06de      	lsls	r6, r3, #27
 8003388:	d508      	bpl.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800338a:	4974      	ldr	r1, [pc, #464]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800338c:	6965      	ldr	r5, [r4, #20]
 800338e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003392:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003396:	432a      	orrs	r2, r5
 8003398:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800339c:	069d      	lsls	r5, r3, #26
 800339e:	d508      	bpl.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033a0:	496e      	ldr	r1, [pc, #440]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033a2:	69a5      	ldr	r5, [r4, #24]
 80033a4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033ac:	432a      	orrs	r2, r5
 80033ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033b2:	0659      	lsls	r1, r3, #25
 80033b4:	d508      	bpl.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033b6:	4969      	ldr	r1, [pc, #420]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033b8:	69e5      	ldr	r5, [r4, #28]
 80033ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033be:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80033c2:	432a      	orrs	r2, r5
 80033c4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033c8:	061a      	lsls	r2, r3, #24
 80033ca:	d508      	bpl.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033cc:	4963      	ldr	r1, [pc, #396]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033ce:	6a25      	ldr	r5, [r4, #32]
 80033d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033d4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80033d8:	432a      	orrs	r2, r5
 80033da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033de:	05df      	lsls	r7, r3, #23
 80033e0:	d508      	bpl.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033e2:	495e      	ldr	r1, [pc, #376]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033e4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80033e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80033ea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80033ee:	432a      	orrs	r2, r5
 80033f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033f4:	039e      	lsls	r6, r3, #14
 80033f6:	d508      	bpl.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80033f8:	4958      	ldr	r1, [pc, #352]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80033fa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80033fc:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8003400:	f022 0203 	bic.w	r2, r2, #3
 8003404:	432a      	orrs	r2, r5
 8003406:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800340a:	059d      	lsls	r5, r3, #22
 800340c:	d508      	bpl.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800340e:	4953      	ldr	r1, [pc, #332]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003410:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8003412:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003416:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800341a:	432a      	orrs	r2, r5
 800341c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003420:	0559      	lsls	r1, r3, #21
 8003422:	d50b      	bpl.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003424:	494d      	ldr	r1, [pc, #308]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003426:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003428:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800342c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8003430:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003432:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003436:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800343a:	d071      	beq.n	8003520 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800343c:	051a      	lsls	r2, r3, #20
 800343e:	d50b      	bpl.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003440:	4946      	ldr	r1, [pc, #280]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003442:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003444:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003448:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800344c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800344e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003452:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003456:	d068      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003458:	04df      	lsls	r7, r3, #19
 800345a:	d50b      	bpl.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800345c:	493f      	ldr	r1, [pc, #252]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800345e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8003460:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003468:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800346a:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800346e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003472:	d05f      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003474:	049e      	lsls	r6, r3, #18
 8003476:	d50b      	bpl.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x220>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003478:	4938      	ldr	r1, [pc, #224]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800347a:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800347c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003480:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8003484:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003486:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800348a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800348e:	d056      	beq.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003490:	045d      	lsls	r5, r3, #17
 8003492:	d50b      	bpl.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003494:	4931      	ldr	r1, [pc, #196]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003496:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003498:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800349c:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80034a0:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034a2:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034a6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034aa:	d04d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80034ac:	0419      	lsls	r1, r3, #16
 80034ae:	d50b      	bpl.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034b0:	492a      	ldr	r1, [pc, #168]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80034b2:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80034b4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034bc:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034be:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80034c2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80034c6:	d044      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80034c8:	03da      	lsls	r2, r3, #15
 80034ca:	d50b      	bpl.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034cc:	4923      	ldr	r1, [pc, #140]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80034ce:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80034d0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80034d4:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80034d8:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80034da:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80034de:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80034e2:	d03f      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80034e4:	035b      	lsls	r3, r3, #13
 80034e6:	d50b      	bpl.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034e8:	4a1c      	ldr	r2, [pc, #112]	; (800355c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 80034ea:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80034ec:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 80034f0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80034f4:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80034f6:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80034fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80034fe:	d036      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  }

#endif /* QUADSPI */

  return status;
}
 8003500:	b002      	add	sp, #8
 8003502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003508:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800350c:	659a      	str	r2, [r3, #88]	; 0x58
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003518:	2701      	movs	r7, #1
 800351a:	e6b7      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 800351c:	2003      	movs	r0, #3
 800351e:	e6ff      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003520:	68ca      	ldr	r2, [r1, #12]
 8003522:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003526:	60ca      	str	r2, [r1, #12]
 8003528:	e788      	b.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800352a:	68ca      	ldr	r2, [r1, #12]
 800352c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003530:	60ca      	str	r2, [r1, #12]
 8003532:	e791      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003534:	68ca      	ldr	r2, [r1, #12]
 8003536:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800353a:	60ca      	str	r2, [r1, #12]
 800353c:	e79a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x204>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800353e:	68ca      	ldr	r2, [r1, #12]
 8003540:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003544:	60ca      	str	r2, [r1, #12]
 8003546:	e7a3      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x220>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003548:	68ca      	ldr	r2, [r1, #12]
 800354a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800354e:	60ca      	str	r2, [r1, #12]
 8003550:	e7ac      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003552:	68ca      	ldr	r2, [r1, #12]
 8003554:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003558:	60ca      	str	r2, [r1, #12]
 800355a:	e7b5      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x258>
 800355c:	40021000 	.word	0x40021000
 8003560:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003564:	68ca      	ldr	r2, [r1, #12]
 8003566:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800356a:	60ca      	str	r2, [r1, #12]
 800356c:	e7ba      	b.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800356e:	68d3      	ldr	r3, [r2, #12]
 8003570:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003574:	60d3      	str	r3, [r2, #12]
}
 8003576:	b002      	add	sp, #8
 8003578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800357c:	4613      	mov	r3, r2
 800357e:	e6c6      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x9e>

08003580 <HAL_SPI_Init>:
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003580:	2800      	cmp	r0, #0
 8003582:	d07f      	beq.n	8003684 <HAL_SPI_Init+0x104>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003584:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
{
 8003588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800358c:	4604      	mov	r4, r0
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800358e:	f1bc 0f00 	cmp.w	ip, #0
 8003592:	d05c      	beq.n	800364e <HAL_SPI_Init+0xce>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003594:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003596:	e9c0 3304 	strd	r3, r3, [r0, #16]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800359a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800359e:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035a0:	f003 01ff 	and.w	r1, r3, #255	; 0xff
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035a4:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d05e      	beq.n	8003668 <HAL_SPI_Init+0xe8>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035aa:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035ac:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80035b4:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035b6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80035ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035be:	600b      	str	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035c0:	d94c      	bls.n	800365c <HAL_SPI_Init+0xdc>
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80035c2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80035c6:	d15f      	bne.n	8003688 <HAL_SPI_Init+0x108>
 80035c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80035ca:	2700      	movs	r7, #0
 80035cc:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035d0:	e9d4 3601 	ldrd	r3, r6, [r4, #4]
 80035d4:	6925      	ldr	r5, [r4, #16]
 80035d6:	f8d4 e018 	ldr.w	lr, [r4, #24]
 80035da:	f406 4604 	and.w	r6, r6, #33792	; 0x8400
 80035de:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80035e2:	4333      	orrs	r3, r6
 80035e4:	f005 0502 	and.w	r5, r5, #2
 80035e8:	432b      	orrs	r3, r5
 80035ea:	6965      	ldr	r5, [r4, #20]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035ec:	f402 6870 	and.w	r8, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f0:	f005 0501 	and.w	r5, r5, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035f4:	6b62      	ldr	r2, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035f6:	432b      	orrs	r3, r5
 80035f8:	e9d4 6507 	ldrd	r6, r5, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035fc:	f002 0208 	and.w	r2, r2, #8
 8003600:	ea42 0208 	orr.w	r2, r2, r8
 8003604:	ea4f 481e 	mov.w	r8, lr, lsr #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003608:	f40e 7e00 	and.w	lr, lr, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800360c:	f008 0804 	and.w	r8, r8, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003610:	ea43 030e 	orr.w	r3, r3, lr
 8003614:	f006 0638 	and.w	r6, r6, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003618:	ea42 0208 	orr.w	r2, r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800361c:	4333      	orrs	r3, r6
 800361e:	f005 0580 	and.w	r5, r5, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003622:	f00c 0c10 	and.w	ip, ip, #16
 8003626:	ea42 0c0c 	orr.w	ip, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800362a:	432b      	orrs	r3, r5
 800362c:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800362e:	ea4c 0707 	orr.w	r7, ip, r7
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003632:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003634:	604f      	str	r7, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003636:	69cb      	ldr	r3, [r1, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003638:	2200      	movs	r2, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800363a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  hspi->State     = HAL_SPI_STATE_READY;
 800363e:	2501      	movs	r5, #1
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003640:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003642:	6622      	str	r2, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003644:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d

  return HAL_OK;
 8003648:	4610      	mov	r0, r2
}
 800364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364e:	6843      	ldr	r3, [r0, #4]
 8003650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003654:	d0a1      	beq.n	800359a <HAL_SPI_Init+0x1a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003656:	f8c0 c01c 	str.w	ip, [r0, #28]
 800365a:	e79e      	b.n	800359a <HAL_SPI_Init+0x1a>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800365c:	d00c      	beq.n	8003678 <HAL_SPI_Init+0xf8>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800365e:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003662:	2000      	movs	r0, #0
 8003664:	62a0      	str	r0, [r4, #40]	; 0x28
 8003666:	e7b3      	b.n	80035d0 <HAL_SPI_Init+0x50>
    hspi->Lock = HAL_UNLOCKED;
 8003668:	f884 105c 	strb.w	r1, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800366c:	4620      	mov	r0, r4
 800366e:	f7fe f819 	bl	80016a4 <HAL_SPI_MspInit>
 8003672:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
 8003676:	e798      	b.n	80035aa <HAL_SPI_Init+0x2a>
 8003678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800367a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 800367e:	f403 5000 	and.w	r0, r3, #8192	; 0x2000
 8003682:	e7a5      	b.n	80035d0 <HAL_SPI_Init+0x50>
    return HAL_ERROR;
 8003684:	2001      	movs	r0, #1
}
 8003686:	4770      	bx	lr
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003688:	2700      	movs	r7, #0
 800368a:	e7ea      	b.n	8003662 <HAL_SPI_Init+0xe2>

0800368c <HAL_SRAM_Init>:
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800368c:	b348      	cbz	r0, 80036e2 <HAL_SRAM_Init+0x56>
{
 800368e:	b570      	push	{r4, r5, r6, lr}
  {
    return HAL_ERROR;
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003690:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003694:	4615      	mov	r5, r2
 8003696:	460e      	mov	r6, r1
 8003698:	4604      	mov	r4, r0
 800369a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800369e:	b1db      	cbz	r3, 80036d8 <HAL_SRAM_Init+0x4c>
    HAL_SRAM_MspInit(hsram);
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80036a0:	4621      	mov	r1, r4
 80036a2:	f851 0b08 	ldr.w	r0, [r1], #8
 80036a6:	f000 fa39 	bl	8003b1c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80036aa:	68a2      	ldr	r2, [r4, #8]
 80036ac:	6820      	ldr	r0, [r4, #0]
 80036ae:	4631      	mov	r1, r6
 80036b0:	f000 faaa 	bl	8003c08 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80036b4:	e9d4 0201 	ldrd	r0, r2, [r4, #4]
 80036b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036ba:	4629      	mov	r1, r5
 80036bc:	f000 fad0 	bl	8003c60 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80036c0:	68a1      	ldr	r1, [r4, #8]
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80036c8:	2501      	movs	r5, #1
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80036ca:	432b      	orrs	r3, r5
 80036cc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  hsram->State = HAL_SRAM_STATE_READY;
 80036d0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51

  return HAL_OK;
 80036d4:	2000      	movs	r0, #0
}
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
    hsram->Lock = HAL_UNLOCKED;
 80036d8:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SRAM_MspInit(hsram);
 80036dc:	f7fe f830 	bl	8001740 <HAL_SRAM_MspInit>
 80036e0:	e7de      	b.n	80036a0 <HAL_SRAM_Init+0x14>
    return HAL_ERROR;
 80036e2:	2001      	movs	r0, #1
}
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop

080036e8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e8:	2800      	cmp	r0, #0
 80036ea:	f000 8089 	beq.w	8003800 <HAL_TIM_Base_Init+0x118>
{
 80036ee:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036f4:	4604      	mov	r4, r0
 80036f6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d078      	beq.n	80037f0 <HAL_TIM_Base_Init+0x108>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036fe:	6821      	ldr	r1, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003700:	4a43      	ldr	r2, [pc, #268]	; (8003810 <HAL_TIM_Base_Init+0x128>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003702:	2302      	movs	r3, #2
 8003704:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003708:	4291      	cmp	r1, r2
  tmpcr1 = TIMx->CR1;
 800370a:	680b      	ldr	r3, [r1, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800370c:	d05c      	beq.n	80037c8 <HAL_TIM_Base_Init+0xe0>
 800370e:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8003712:	d02c      	beq.n	800376e <HAL_TIM_Base_Init+0x86>
 8003714:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003718:	4291      	cmp	r1, r2
 800371a:	d028      	beq.n	800376e <HAL_TIM_Base_Init+0x86>
 800371c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003720:	4291      	cmp	r1, r2
 8003722:	d024      	beq.n	800376e <HAL_TIM_Base_Init+0x86>
 8003724:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003728:	4291      	cmp	r1, r2
 800372a:	d020      	beq.n	800376e <HAL_TIM_Base_Init+0x86>
 800372c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003730:	4291      	cmp	r1, r2
 8003732:	d049      	beq.n	80037c8 <HAL_TIM_Base_Init+0xe0>
 8003734:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8003738:	4291      	cmp	r1, r2
 800373a:	d063      	beq.n	8003804 <HAL_TIM_Base_Init+0x11c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800373c:	4a35      	ldr	r2, [pc, #212]	; (8003814 <HAL_TIM_Base_Init+0x12c>)
 800373e:	4291      	cmp	r1, r2
 8003740:	d05b      	beq.n	80037fa <HAL_TIM_Base_Init+0x112>
 8003742:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003746:	4291      	cmp	r1, r2
 8003748:	d057      	beq.n	80037fa <HAL_TIM_Base_Init+0x112>
 800374a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800374e:	4291      	cmp	r1, r2
 8003750:	d053      	beq.n	80037fa <HAL_TIM_Base_Init+0x112>
 8003752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003756:	4291      	cmp	r1, r2
 8003758:	d04f      	beq.n	80037fa <HAL_TIM_Base_Init+0x112>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800375a:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375c:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375e:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003760:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003764:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8003766:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003768:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800376a:	628a      	str	r2, [r1, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376c:	e010      	b.n	8003790 <HAL_TIM_Base_Init+0xa8>
    tmpcr1 |= Structure->CounterMode;
 800376e:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003770:	6925      	ldr	r5, [r4, #16]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003772:	68e0      	ldr	r0, [r4, #12]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003774:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003778:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 800377a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800377e:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003780:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003782:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003786:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 8003788:	6862      	ldr	r2, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800378a:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800378c:	62c8      	str	r0, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800378e:	628a      	str	r2, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003790:	2301      	movs	r3, #1
 8003792:	614b      	str	r3, [r1, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003794:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003798:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800379c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80037a0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80037a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80037a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80037b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80037b8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80037bc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80037c0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80037c4:	2000      	movs	r0, #0
}
 80037c6:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 80037c8:	68a5      	ldr	r5, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ca:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037cc:	69a2      	ldr	r2, [r4, #24]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80037d2:	432b      	orrs	r3, r5
    tmpcr1 &= ~TIM_CR1_CKD;
 80037d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d8:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037de:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80037e0:	600b      	str	r3, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037e2:	68e3      	ldr	r3, [r4, #12]
 80037e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80037e6:	6863      	ldr	r3, [r4, #4]
 80037e8:	628b      	str	r3, [r1, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80037ea:	6963      	ldr	r3, [r4, #20]
 80037ec:	630b      	str	r3, [r1, #48]	; 0x30
 80037ee:	e7cf      	b.n	8003790 <HAL_TIM_Base_Init+0xa8>
    htim->Lock = HAL_UNLOCKED;
 80037f0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80037f4:	f7fd ff8e 	bl	8001714 <HAL_TIM_Base_MspInit>
 80037f8:	e781      	b.n	80036fe <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037fc:	69a2      	ldr	r2, [r4, #24]
 80037fe:	e7e9      	b.n	80037d4 <HAL_TIM_Base_Init+0xec>
    return HAL_ERROR;
 8003800:	2001      	movs	r0, #1
}
 8003802:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8003804:	68a2      	ldr	r2, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800380a:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800380c:	e796      	b.n	800373c <HAL_TIM_Base_Init+0x54>
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40014000 	.word	0x40014000

08003818 <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003818:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800381c:	2b01      	cmp	r3, #1
 800381e:	d12f      	bne.n	8003880 <HAL_TIM_Base_Start+0x68>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003820:	6803      	ldr	r3, [r0, #0]
 8003822:	4a19      	ldr	r2, [pc, #100]	; (8003888 <HAL_TIM_Base_Start+0x70>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003824:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003826:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382c:	d01a      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 800382e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003832:	d017      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 8003834:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 800383c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003840:	4293      	cmp	r3, r2
 8003842:	d00f      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 8003844:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003848:	4293      	cmp	r3, r2
 800384a:	d00b      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 800384c:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 8003854:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <HAL_TIM_Base_Start+0x4c>
 800385c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003860:	4293      	cmp	r3, r2
 8003862:	d107      	bne.n	8003874 <HAL_TIM_Base_Start+0x5c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003864:	6899      	ldr	r1, [r3, #8]
 8003866:	4a09      	ldr	r2, [pc, #36]	; (800388c <HAL_TIM_Base_Start+0x74>)
 8003868:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	2a06      	cmp	r2, #6
 800386c:	d00a      	beq.n	8003884 <HAL_TIM_Base_Start+0x6c>
 800386e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003872:	d007      	beq.n	8003884 <HAL_TIM_Base_Start+0x6c>
    __HAL_TIM_ENABLE(htim);
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800387c:	2000      	movs	r0, #0
 800387e:	4770      	bx	lr
    return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
 8003882:	4770      	bx	lr
  return HAL_OK;
 8003884:	2000      	movs	r0, #0
}
 8003886:	4770      	bx	lr
 8003888:	40012c00 	.word	0x40012c00
 800388c:	00010007 	.word	0x00010007

08003890 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003890:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003894:	2b01      	cmp	r3, #1
 8003896:	f000 8095 	beq.w	80039c4 <HAL_TIM_ConfigClockSource+0x134>
 800389a:	4602      	mov	r2, r0
{
 800389c:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80038a0:	6814      	ldr	r4, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80038a2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80038a6:	2001      	movs	r0, #1
 80038a8:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80038ac:	68a6      	ldr	r6, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80038ae:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b0:	4d64      	ldr	r5, [pc, #400]	; (8003a44 <HAL_TIM_ConfigClockSource+0x1b4>)
  switch (sClockSourceConfig->ClockSource)
 80038b2:	2b70      	cmp	r3, #112	; 0x70
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038b4:	ea05 0506 	and.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 80038b8:	60a5      	str	r5, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80038ba:	f000 80b1 	beq.w	8003a20 <HAL_TIM_ConfigClockSource+0x190>
 80038be:	d828      	bhi.n	8003912 <HAL_TIM_ConfigClockSource+0x82>
 80038c0:	2b50      	cmp	r3, #80	; 0x50
 80038c2:	f000 8081 	beq.w	80039c8 <HAL_TIM_ConfigClockSource+0x138>
 80038c6:	d93f      	bls.n	8003948 <HAL_TIM_ConfigClockSource+0xb8>
 80038c8:	2b60      	cmp	r3, #96	; 0x60
 80038ca:	d11a      	bne.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038cc:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ce:	684d      	ldr	r5, [r1, #4]
 80038d0:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038d2:	f020 0010 	bic.w	r0, r0, #16
 80038d6:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038d8:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 80038da:	6a23      	ldr	r3, [r4, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038dc:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80038e4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038e8:	ea41 3106 	orr.w	r1, r1, r6, lsl #12

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038ec:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80038ee:	6223      	str	r3, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038f0:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038f2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038fa:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038fe:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003902:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8003904:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003906:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800390a:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 800390e:	bcf0      	pop	{r4, r5, r6, r7}
 8003910:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8003912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003916:	d072      	beq.n	80039fe <HAL_TIM_ConfigClockSource+0x16e>
 8003918:	d943      	bls.n	80039a2 <HAL_TIM_ConfigClockSource+0x112>
 800391a:	494b      	ldr	r1, [pc, #300]	; (8003a48 <HAL_TIM_ConfigClockSource+0x1b8>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d008      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 8003920:	d92f      	bls.n	8003982 <HAL_TIM_ConfigClockSource+0xf2>
 8003922:	494a      	ldr	r1, [pc, #296]	; (8003a4c <HAL_TIM_ConfigClockSource+0x1bc>)
 8003924:	428b      	cmp	r3, r1
 8003926:	d004      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 8003928:	3910      	subs	r1, #16
 800392a:	f023 0520 	bic.w	r5, r3, #32
 800392e:	428d      	cmp	r5, r1
 8003930:	d1e7      	bne.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
  tmpsmcr = TIMx->SMCR;
 8003932:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003934:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8003938:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393c:	4303      	orrs	r3, r0
 800393e:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8003942:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003944:	2000      	movs	r0, #0
}
 8003946:	e7dc      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
  switch (sClockSourceConfig->ClockSource)
 8003948:	2b40      	cmp	r3, #64	; 0x40
 800394a:	d12f      	bne.n	80039ac <HAL_TIM_ConfigClockSource+0x11c>
  tmpccer = TIMx->CCER;
 800394c:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800394e:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003950:	6848      	ldr	r0, [r1, #4]
 8003952:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003954:	f026 0601 	bic.w	r6, r6, #1
 8003958:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800395a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800395c:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003960:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8003964:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003966:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800396a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800396c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800396e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003970:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003978:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800397c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800397e:	2000      	movs	r0, #0
}
 8003980:	e7bf      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
  switch (sClockSourceConfig->ClockSource)
 8003982:	3920      	subs	r1, #32
 8003984:	428b      	cmp	r3, r1
 8003986:	d0d4      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 8003988:	d904      	bls.n	8003994 <HAL_TIM_ConfigClockSource+0x104>
 800398a:	4931      	ldr	r1, [pc, #196]	; (8003a50 <HAL_TIM_ConfigClockSource+0x1c0>)
 800398c:	428b      	cmp	r3, r1
 800398e:	d0d0      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 8003990:	2001      	movs	r0, #1
 8003992:	e7b6      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
 8003994:	f023 0110 	bic.w	r1, r3, #16
 8003998:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800399c:	d0c9      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 800399e:	2001      	movs	r0, #1
 80039a0:	e7af      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	f5b3 5080 	subs.w	r0, r3, #4096	; 0x1000
 80039a6:	bf18      	it	ne
 80039a8:	2001      	movne	r0, #1
 80039aa:	e7aa      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
  switch (sClockSourceConfig->ClockSource)
 80039ac:	d8a9      	bhi.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
 80039ae:	2b20      	cmp	r3, #32
 80039b0:	d0bf      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 80039b2:	d903      	bls.n	80039bc <HAL_TIM_ConfigClockSource+0x12c>
 80039b4:	2b30      	cmp	r3, #48	; 0x30
 80039b6:	d0bc      	beq.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
 80039b8:	2001      	movs	r0, #1
 80039ba:	e7a2      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
 80039bc:	f033 0110 	bics.w	r1, r3, #16
 80039c0:	d19f      	bne.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
 80039c2:	e7b6      	b.n	8003932 <HAL_TIM_ConfigClockSource+0xa2>
  __HAL_LOCK(htim);
 80039c4:	2002      	movs	r0, #2
}
 80039c6:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 80039c8:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ca:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039cc:	6848      	ldr	r0, [r1, #4]
 80039ce:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d0:	f026 0601 	bic.w	r6, r6, #1
 80039d4:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039d6:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 80039e0:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039e2:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80039e6:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80039e8:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80039ea:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80039f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039f4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039f8:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2000      	movs	r0, #0
}
 80039fc:	e781      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039fe:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003a02:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003a04:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a06:	432b      	orrs	r3, r5
 8003a08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a0c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a10:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a12:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a14:	68a3      	ldr	r3, [r4, #8]
 8003a16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a1a:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2000      	movs	r0, #0
      break;
 8003a1e:	e770      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a20:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 8003a24:	68c8      	ldr	r0, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8003a26:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a28:	432b      	orrs	r3, r5
 8003a2a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a2e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a32:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003a34:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8003a36:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003a3c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2000      	movs	r0, #0
      break;
 8003a40:	e75f      	b.n	8003902 <HAL_TIM_ConfigClockSource+0x72>
 8003a42:	bf00      	nop
 8003a44:	ffce0088 	.word	0xffce0088
 8003a48:	00100040 	.word	0x00100040
 8003a4c:	00100060 	.word	0x00100060
 8003a50:	00100030 	.word	0x00100030

08003a54 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d058      	beq.n	8003b0e <HAL_TIMEx_MasterConfigSynchronization+0xba>
{
 8003a5c:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a5e:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a60:	4c2c      	ldr	r4, [pc, #176]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a68:	42a2      	cmp	r2, r4
  tmpcr2 = htim->Instance->CR2;
 8003a6a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	6895      	ldr	r5, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a6e:	d042      	beq.n	8003af6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a70:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8003a74:	42a2      	cmp	r2, r4
 8003a76:	d032      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8003a78:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8003a7c:	42a2      	cmp	r2, r4
 8003a7e:	d02e      	beq.n	8003ade <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a80:	680c      	ldr	r4, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a82:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8a:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a8c:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003a92:	d016      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003a94:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d013      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d00f      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003aa2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d00b      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003aaa:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d007      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003ab2:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d003      	beq.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8003aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d104      	bne.n	8003acc <HAL_TIMEx_MasterConfigSynchronization+0x78>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac2:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ac4:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac8:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aca:	6095      	str	r5, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8003acc:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003ad4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8003ad8:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8003ada:	4618      	mov	r0, r3
}
 8003adc:	4770      	bx	lr
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ade:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ae2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ae6:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ae8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af0:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8003af2:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003af4:	e7cb      	b.n	8003a8e <HAL_TIMEx_MasterConfigSynchronization+0x3a>
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003af6:	e9d1 4600 	ldrd	r4, r6, [r1]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003afa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003afe:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b00:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b08:	4323      	orrs	r3, r4
  htim->Instance->CR2 = tmpcr2;
 8003b0a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b0c:	e7d9      	b.n	8003ac2 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  __HAL_LOCK(htim);
 8003b0e:	2002      	movs	r0, #2
}
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40012c00 	.word	0x40012c00
 8003b18:	40000400 	.word	0x40000400

08003b1c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8003b1c:	b4f0      	push	{r4, r5, r6, r7}
  mask |= FMC_BCR1_CCLKEN;
  mask |= FMC_BCR1_WFDIS;
  mask |= FMC_BCRx_NBLSET;
  mask |= FMC_BCRx_CPSIZE;

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b1e:	e9d1 3401 	ldrd	r3, r4, [r1, #4]
 8003b22:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 8003b26:	4323      	orrs	r3, r4
 8003b28:	433b      	orrs	r3, r7
 8003b2a:	694d      	ldr	r5, [r1, #20]
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003b2c:	680a      	ldr	r2, [r1, #0]
  btcr_reg |= Init->ContinuousClock;
 8003b2e:	f8d1 c030 	ldr.w	ip, [r1, #48]	; 0x30
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b32:	4333      	orrs	r3, r6
 8003b34:	e9d1 7606 	ldrd	r7, r6, [r1, #24]
 8003b38:	432b      	orrs	r3, r5
 8003b3a:	433b      	orrs	r3, r7
 8003b3c:	4333      	orrs	r3, r6
 8003b3e:	6a0e      	ldr	r6, [r1, #32]
 8003b40:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003b42:	f850 7022 	ldr.w	r7, [r0, r2, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b46:	4333      	orrs	r3, r6
 8003b48:	432b      	orrs	r3, r5
 8003b4a:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8003b4c:	6ace      	ldr	r6, [r1, #44]	; 0x2c
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003b4e:	f027 0701 	bic.w	r7, r7, #1
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b52:	432b      	orrs	r3, r5
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003b54:	f840 7022 	str.w	r7, [r0, r2, lsl #2]
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b58:	4333      	orrs	r3, r6
  btcr_reg |= Init->WriteFifo;
 8003b5a:	6b4f      	ldr	r7, [r1, #52]	; 0x34
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b5c:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 8003b5e:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8003b62:	ea43 030c 	orr.w	r3, r3, ip
 8003b66:	433b      	orrs	r3, r7
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003b68:	2c08      	cmp	r4, #8
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b6a:	ea43 0306 	orr.w	r3, r3, r6
 8003b6e:	6b8c      	ldr	r4, [r1, #56]	; 0x38
 8003b70:	4e24      	ldr	r6, [pc, #144]	; (8003c04 <FMC_NORSRAM_Init+0xe8>)
 8003b72:	ea43 0304 	orr.w	r3, r3, r4
 8003b76:	ea06 0605 	and.w	r6, r6, r5
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2440      	moveq	r4, #64	; 0x40
 8003b7e:	2400      	movne	r4, #0
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b80:	4333      	orrs	r3, r6
 8003b82:	4323      	orrs	r3, r4

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003b84:	f5bc 1f80 	cmp.w	ip, #1048576	; 0x100000
  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003b88:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003b8c:	d01a      	beq.n	8003bc4 <FMC_NORSRAM_Init+0xa8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8003b8e:	b1d2      	cbz	r2, 8003bc6 <FMC_NORSRAM_Init+0xaa>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8003b90:	6803      	ldr	r3, [r0, #0]
 8003b92:	431f      	orrs	r7, r3
 8003b94:	6007      	str	r7, [r0, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8003b96:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10f      	bne.n	8003bbe <FMC_NORSRAM_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8003b9e:	6a03      	ldr	r3, [r0, #32]
 8003ba0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003ba2:	0c1b      	lsrs	r3, r3, #16
 8003ba4:	041b      	lsls	r3, r3, #16
 8003ba6:	430b      	orrs	r3, r1

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8003ba8:	2a04      	cmp	r2, #4
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8003baa:	6203      	str	r3, [r0, #32]
    switch (Init->NSBank)
 8003bac:	d024      	beq.n	8003bf8 <FMC_NORSRAM_Init+0xdc>
 8003bae:	d81e      	bhi.n	8003bee <FMC_NORSRAM_Init+0xd2>
 8003bb0:	b19a      	cbz	r2, 8003bda <FMC_NORSRAM_Init+0xbe>
 8003bb2:	2a02      	cmp	r2, #2
 8003bb4:	d11b      	bne.n	8003bee <FMC_NORSRAM_Init+0xd2>
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
        break;

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8003bb6:	6a03      	ldr	r3, [r0, #32]
 8003bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bbc:	6203      	str	r3, [r0, #32]
        break;
    }
  }

  return HAL_OK;
}
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	bcf0      	pop	{r4, r5, r6, r7}
 8003bc2:	4770      	bx	lr
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003bc4:	b972      	cbnz	r2, 8003be4 <FMC_NORSRAM_Init+0xc8>
  if (Init->MaxChipSelectPulse == ENABLE)
 8003bc6:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d1f7      	bne.n	8003bbe <FMC_NORSRAM_Init+0xa2>
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8003bce:	6a03      	ldr	r3, [r0, #32]
 8003bd0:	6c4a      	ldr	r2, [r1, #68]	; 0x44
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	041b      	lsls	r3, r3, #16
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	6203      	str	r3, [r0, #32]
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8003bda:	6a03      	ldr	r3, [r0, #32]
 8003bdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003be0:	6203      	str	r3, [r0, #32]
        break;
 8003be2:	e7ec      	b.n	8003bbe <FMC_NORSRAM_Init+0xa2>
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8003be4:	6803      	ldr	r3, [r0, #0]
 8003be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bea:	6003      	str	r3, [r0, #0]
  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8003bec:	e7d0      	b.n	8003b90 <FMC_NORSRAM_Init+0x74>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8003bee:	6a03      	ldr	r3, [r0, #32]
 8003bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bf4:	6203      	str	r3, [r0, #32]
        break;
 8003bf6:	e7e2      	b.n	8003bbe <FMC_NORSRAM_Init+0xa2>
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8003bf8:	6a03      	ldr	r3, [r0, #32]
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bfe:	6203      	str	r3, [r0, #32]
        break;
 8003c00:	e7dd      	b.n	8003bbe <FMC_NORSRAM_Init+0xa2>
 8003c02:	bf00      	nop
 8003c04:	ff000480 	.word	0xff000480

08003c08 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003c08:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003c0a:	680b      	ldr	r3, [r1, #0]
 8003c0c:	69cc      	ldr	r4, [r1, #28]
 8003c0e:	684d      	ldr	r5, [r1, #4]
 8003c10:	68cf      	ldr	r7, [r1, #12]
 8003c12:	4323      	orrs	r3, r4
 8003c14:	688c      	ldr	r4, [r1, #8]
 8003c16:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8003c1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8003c1e:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
 8003c22:	698d      	ldr	r5, [r1, #24]
 8003c24:	ea43 7387 	orr.w	r3, r3, r7, lsl #30
 8003c28:	1e61      	subs	r1, r4, #1
 8003c2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8003c2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003c32:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8003c36:	3d02      	subs	r5, #2
 8003c38:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8003c3c:	6854      	ldr	r4, [r2, #4]
 8003c3e:	6053      	str	r3, [r2, #4]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8003c40:	6803      	ldr	r3, [r0, #0]
 8003c42:	02db      	lsls	r3, r3, #11
 8003c44:	d509      	bpl.n	8003c5a <FMC_NORSRAM_Timing_Init+0x52>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8003c46:	6842      	ldr	r2, [r0, #4]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8003c48:	6843      	ldr	r3, [r0, #4]
 8003c4a:	0509      	lsls	r1, r1, #20
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8003c4c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8003c50:	4311      	orrs	r1, r2
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8003c52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003c56:	4319      	orrs	r1, r3
 8003c58:	6041      	str	r1, [r0, #4]
  }

  return HAL_OK;
}
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	bcf0      	pop	{r4, r5, r6, r7}
 8003c5e:	4770      	bx	lr

08003c60 <FMC_NORSRAM_Extended_Timing_Init>:
{
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8003c60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c64:	d005      	beq.n	8003c72 <FMC_NORSRAM_Extended_Timing_Init+0x12>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003c66:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8003c6a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
  }

  return HAL_OK;
}
 8003c6e:	2000      	movs	r0, #0
 8003c70:	4770      	bx	lr
{
 8003c72:	b470      	push	{r4, r5, r6}
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003c74:	680b      	ldr	r3, [r1, #0]
 8003c76:	69cd      	ldr	r5, [r1, #28]
 8003c78:	684c      	ldr	r4, [r1, #4]
 8003c7a:	688e      	ldr	r6, [r1, #8]
 8003c7c:	432b      	orrs	r3, r5
 8003c7e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8003c82:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8003c86:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8003c8a:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
 8003c8e:	ea43 7385 	orr.w	r3, r3, r5, lsl #30
 8003c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003c96:	f001 617f 	and.w	r1, r1, #267386880	; 0xff00000
 8003c9a:	430b      	orrs	r3, r1
 8003c9c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
}
 8003ca0:	bc70      	pop	{r4, r5, r6}
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop

08003ca8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003cac:	680d      	ldr	r5, [r1, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cae:	fa95 f2a5 	rbit	r2, r5
  return __builtin_clz(value);
 8003cb2:	fab2 f282 	clz	r2, r2

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003cb6:	fa35 f302 	lsrs.w	r3, r5, r2
 8003cba:	f000 8089 	beq.w	8003dd0 <LL_GPIO_Init+0x128>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8003cbe:	2601      	movs	r6, #1
 8003cc0:	f04f 0c03 	mov.w	ip, #3
 8003cc4:	f04f 080f 	mov.w	r8, #15
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003cc8:	ea6f 0e05 	mvn.w	lr, r5
 8003ccc:	e038      	b.n	8003d40 <LL_GPIO_Init+0x98>
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003cce:	f8d1 9010 	ldr.w	r9, [r1, #16]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003cd2:	f8d0 a00c 	ldr.w	sl, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd6:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8003cda:	b137      	cbz	r7, 8003cea <LL_GPIO_Init+0x42>
  return __builtin_clz(value);
 8003cdc:	fab7 f787 	clz	r7, r7
 8003ce0:	007f      	lsls	r7, r7, #1
 8003ce2:	fa0c f707 	lsl.w	r7, ip, r7
 8003ce6:	ea2a 0a07 	bic.w	sl, sl, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cea:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8003cee:	2f00      	cmp	r7, #0
 8003cf0:	d073      	beq.n	8003dda <LL_GPIO_Init+0x132>
  return __builtin_clz(value);
 8003cf2:	fab7 f787 	clz	r7, r7
 8003cf6:	007f      	lsls	r7, r7, #1
 8003cf8:	fa09 f707 	lsl.w	r7, r9, r7
 8003cfc:	ea47 070a 	orr.w	r7, r7, sl

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003d00:	2c02      	cmp	r4, #2
 8003d02:	60c7      	str	r7, [r0, #12]
 8003d04:	d048      	beq.n	8003d98 <LL_GPIO_Init+0xf0>
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003d06:	6807      	ldr	r7, [r0, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d08:	fa93 f9a3 	rbit	r9, r3
  if (value == 0U)
 8003d0c:	f1b9 0f00 	cmp.w	r9, #0
 8003d10:	d007      	beq.n	8003d22 <LL_GPIO_Init+0x7a>
  return __builtin_clz(value);
 8003d12:	fab9 f989 	clz	r9, r9
 8003d16:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8003d1a:	fa0c f909 	lsl.w	r9, ip, r9
 8003d1e:	ea27 0709 	bic.w	r7, r7, r9
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d22:	fa93 f3a3 	rbit	r3, r3
  if (value == 0U)
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d055      	beq.n	8003dd6 <LL_GPIO_Init+0x12e>
  return __builtin_clz(value);
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fa04 f303 	lsl.w	r3, r4, r3
 8003d34:	433b      	orrs	r3, r7
 8003d36:	6003      	str	r3, [r0, #0]
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
    }
    pinpos++;
 8003d38:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003d3a:	fa35 f302 	lsrs.w	r3, r5, r2
 8003d3e:	d047      	beq.n	8003dd0 <LL_GPIO_Init+0x128>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8003d40:	fa06 f302 	lsl.w	r3, r6, r2
    if (currentpin != 0x00u)
 8003d44:	402b      	ands	r3, r5
 8003d46:	d0f7      	beq.n	8003d38 <LL_GPIO_Init+0x90>
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003d48:	684c      	ldr	r4, [r1, #4]
 8003d4a:	1e67      	subs	r7, r4, #1
 8003d4c:	2f01      	cmp	r7, #1
 8003d4e:	d8be      	bhi.n	8003cce <LL_GPIO_Init+0x26>
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003d50:	f8d1 9008 	ldr.w	r9, [r1, #8]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8003d54:	f8d0 a008 	ldr.w	sl, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8003d5c:	b137      	cbz	r7, 8003d6c <LL_GPIO_Init+0xc4>
  return __builtin_clz(value);
 8003d5e:	fab7 f787 	clz	r7, r7
 8003d62:	007f      	lsls	r7, r7, #1
 8003d64:	fa0c f707 	lsl.w	r7, ip, r7
 8003d68:	ea2a 0a07 	bic.w	sl, sl, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8003d70:	2f00      	cmp	r7, #0
 8003d72:	d050      	beq.n	8003e16 <LL_GPIO_Init+0x16e>
  return __builtin_clz(value);
 8003d74:	fab7 f787 	clz	r7, r7
 8003d78:	007f      	lsls	r7, r7, #1
 8003d7a:	fa09 f707 	lsl.w	r7, r9, r7
 8003d7e:	ea47 070a 	orr.w	r7, r7, sl
 8003d82:	6087      	str	r7, [r0, #8]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003d84:	6847      	ldr	r7, [r0, #4]
 8003d86:	ea0e 0907 	and.w	r9, lr, r7
 8003d8a:	68cf      	ldr	r7, [r1, #12]
 8003d8c:	fb07 f705 	mul.w	r7, r7, r5
 8003d90:	ea49 0707 	orr.w	r7, r9, r7
 8003d94:	6047      	str	r7, [r0, #4]
}
 8003d96:	e79a      	b.n	8003cce <LL_GPIO_Init+0x26>
        if (currentpin < LL_GPIO_PIN_8)
 8003d98:	2bff      	cmp	r3, #255	; 0xff
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003d9a:	f8d1 9014 	ldr.w	r9, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 8003d9e:	d81e      	bhi.n	8003dde <LL_GPIO_Init+0x136>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003da0:	f8d0 a020 	ldr.w	sl, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da4:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8003da8:	b137      	cbz	r7, 8003db8 <LL_GPIO_Init+0x110>
  return __builtin_clz(value);
 8003daa:	fab7 f787 	clz	r7, r7
 8003dae:	00bf      	lsls	r7, r7, #2
 8003db0:	fa08 f707 	lsl.w	r7, r8, r7
 8003db4:	ea2a 0a07 	bic.w	sl, sl, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db8:	fa93 f7a3 	rbit	r7, r3
  if (value == 0U)
 8003dbc:	b37f      	cbz	r7, 8003e1e <LL_GPIO_Init+0x176>
  return __builtin_clz(value);
 8003dbe:	fab7 f787 	clz	r7, r7
 8003dc2:	00bf      	lsls	r7, r7, #2
 8003dc4:	fa09 f707 	lsl.w	r7, r9, r7
 8003dc8:	ea47 070a 	orr.w	r7, r7, sl
 8003dcc:	6207      	str	r7, [r0, #32]
}
 8003dce:	e79a      	b.n	8003d06 <LL_GPIO_Init+0x5e>
  }
  return (SUCCESS);
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd6:	2340      	movs	r3, #64	; 0x40
 8003dd8:	e7aa      	b.n	8003d30 <LL_GPIO_Init+0x88>
 8003dda:	2740      	movs	r7, #64	; 0x40
 8003ddc:	e78c      	b.n	8003cf8 <LL_GPIO_Init+0x50>
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003dde:	f8d0 a024 	ldr.w	sl, [r0, #36]	; 0x24
 8003de2:	0a1f      	lsrs	r7, r3, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	fa97 fba7 	rbit	fp, r7
  if (value == 0U)
 8003de8:	f1bb 0f00 	cmp.w	fp, #0
 8003dec:	d007      	beq.n	8003dfe <LL_GPIO_Init+0x156>
  return __builtin_clz(value);
 8003dee:	fabb fb8b 	clz	fp, fp
 8003df2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003df6:	fa08 fb0b 	lsl.w	fp, r8, fp
 8003dfa:	ea2a 0a0b 	bic.w	sl, sl, fp
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfe:	fa97 f7a7 	rbit	r7, r7
  if (value == 0U)
 8003e02:	b157      	cbz	r7, 8003e1a <LL_GPIO_Init+0x172>
  return __builtin_clz(value);
 8003e04:	fab7 f787 	clz	r7, r7
 8003e08:	00bf      	lsls	r7, r7, #2
 8003e0a:	fa09 f707 	lsl.w	r7, r9, r7
 8003e0e:	ea47 070a 	orr.w	r7, r7, sl
 8003e12:	6247      	str	r7, [r0, #36]	; 0x24
}
 8003e14:	e777      	b.n	8003d06 <LL_GPIO_Init+0x5e>
 8003e16:	2740      	movs	r7, #64	; 0x40
 8003e18:	e7af      	b.n	8003d7a <LL_GPIO_Init+0xd2>
 8003e1a:	2780      	movs	r7, #128	; 0x80
 8003e1c:	e7f5      	b.n	8003e0a <LL_GPIO_Init+0x162>
 8003e1e:	2780      	movs	r7, #128	; 0x80
 8003e20:	e7d0      	b.n	8003dc4 <LL_GPIO_Init+0x11c>
 8003e22:	bf00      	nop

08003e24 <LL_RCC_GetUSARTClockFreq>:
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003e24:	2803      	cmp	r0, #3
{
 8003e26:	b470      	push	{r4, r5, r6}
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003e28:	d02b      	beq.n	8003e82 <LL_RCC_GetUSARTClockFreq+0x5e>
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003e2a:	280c      	cmp	r0, #12
 8003e2c:	d005      	beq.n	8003e3a <LL_RCC_GetUSARTClockFreq+0x16>
        break;
    }
  }
  else
  {
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8003e2e:	2830      	cmp	r0, #48	; 0x30
 8003e30:	f000 8084 	beq.w	8003f3c <LL_RCC_GetUSARTClockFreq+0x118>
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003e34:	2000      	movs	r0, #0
          break;
      }
    }
  }
  return usart_frequency;
}
 8003e36:	bc70      	pop	{r4, r5, r6}
 8003e38:	4770      	bx	lr
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003e3a:	4a78      	ldr	r2, [pc, #480]	; (800401c <LL_RCC_GetUSARTClockFreq+0x1f8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003e3c:	4978      	ldr	r1, [pc, #480]	; (8004020 <LL_RCC_GetUSARTClockFreq+0x1fc>)
 8003e3e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e42:	f003 030c 	and.w	r3, r3, #12
 8003e46:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8003e4a:	428b      	cmp	r3, r1
 8003e4c:	d06e      	beq.n	8003f2c <LL_RCC_GetUSARTClockFreq+0x108>
 8003e4e:	f1b3 1f0c 	cmp.w	r3, #786444	; 0xc000c
 8003e52:	d043      	beq.n	8003edc <LL_RCC_GetUSARTClockFreq+0xb8>
 8003e54:	3904      	subs	r1, #4
 8003e56:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003e58:	6893      	ldr	r3, [r2, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	d046      	beq.n	8003eee <LL_RCC_GetUSARTClockFreq+0xca>
static uint32_t RCC_GetSystemClockFreq(void)
{
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	f000 80d9 	beq.w	8004018 <LL_RCC_GetUSARTClockFreq+0x1f4>
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	f000 80bb 	beq.w	8003fe2 <LL_RCC_GetUSARTClockFreq+0x1be>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003e6c:	4b6d      	ldr	r3, [pc, #436]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003e6e:	496b      	ldr	r1, [pc, #428]	; (800401c <LL_RCC_GetUSARTClockFreq+0x1f8>)
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e70:	4c6d      	ldr	r4, [pc, #436]	; (8004028 <LL_RCC_GetUSARTClockFreq+0x204>)
 8003e72:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003e74:	6889      	ldr	r1, [r1, #8]
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003e76:	486d      	ldr	r0, [pc, #436]	; (800402c <LL_RCC_GetUSARTClockFreq+0x208>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003e78:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003e7c:	f3c1 2102 	ubfx	r1, r1, #8, #3
 8003e80:	e021      	b.n	8003ec6 <LL_RCC_GetUSARTClockFreq+0xa2>
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003e82:	4a66      	ldr	r2, [pc, #408]	; (800401c <LL_RCC_GetUSARTClockFreq+0x1f8>)
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003e84:	496a      	ldr	r1, [pc, #424]	; (8004030 <LL_RCC_GetUSARTClockFreq+0x20c>)
 8003e86:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8003e92:	428b      	cmp	r3, r1
 8003e94:	d04a      	beq.n	8003f2c <LL_RCC_GetUSARTClockFreq+0x108>
 8003e96:	f1b3 1f03 	cmp.w	r3, #196611	; 0x30003
 8003e9a:	d01f      	beq.n	8003edc <LL_RCC_GetUSARTClockFreq+0xb8>
 8003e9c:	3901      	subs	r1, #1
 8003e9e:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003ea0:	6893      	ldr	r3, [r2, #8]
 8003ea2:	f003 030c 	and.w	r3, r3, #12
 8003ea6:	d022      	beq.n	8003eee <LL_RCC_GetUSARTClockFreq+0xca>
  switch (LL_RCC_GetSysClkSource())
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	f000 8098 	beq.w	8003fde <LL_RCC_GetUSARTClockFreq+0x1ba>
 8003eae:	2b0c      	cmp	r3, #12
 8003eb0:	d07a      	beq.n	8003fa8 <LL_RCC_GetUSARTClockFreq+0x184>
      frequency = HSI_VALUE;
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003eb4:	4959      	ldr	r1, [pc, #356]	; (800401c <LL_RCC_GetUSARTClockFreq+0x1f8>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003eb6:	4c5c      	ldr	r4, [pc, #368]	; (8004028 <LL_RCC_GetUSARTClockFreq+0x204>)
 8003eb8:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003eba:	6889      	ldr	r1, [r1, #8]
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ebc:	485b      	ldr	r0, [pc, #364]	; (800402c <LL_RCC_GetUSARTClockFreq+0x208>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ebe:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003ec2:	f3c1 21c2 	ubfx	r1, r1, #11, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ec6:	5ca2      	ldrb	r2, [r4, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ec8:	5c40      	ldrb	r0, [r0, r1]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003eca:	f002 021f 	and.w	r2, r2, #31
 8003ece:	40d3      	lsrs	r3, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003ed0:	f000 001f 	and.w	r0, r0, #31
 8003ed4:	fa23 f000 	lsr.w	r0, r3, r0
}
 8003ed8:	bc70      	pop	{r4, r5, r6}
 8003eda:	4770      	bx	lr
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003edc:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8003ee0:	f010 0002 	ands.w	r0, r0, #2
          usart_frequency = LSE_VALUE;
 8003ee4:	bf18      	it	ne
 8003ee6:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 8003eea:	bc70      	pop	{r4, r5, r6}
 8003eec:	4770      	bx	lr
  switch (LL_RCC_GetSysClkSource())
 8003eee:	2b08      	cmp	r3, #8
 8003ef0:	d058      	beq.n	8003fa4 <LL_RCC_GetUSARTClockFreq+0x180>
 8003ef2:	2b0c      	cmp	r3, #12
 8003ef4:	d154      	bne.n	8003fa0 <LL_RCC_GetUSARTClockFreq+0x17c>
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003ef6:	68d5      	ldr	r5, [r2, #12]
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ef8:	68d4      	ldr	r4, [r2, #12]
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003efa:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003efc:	68d3      	ldr	r3, [r2, #12]
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
      break;

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003efe:	4849      	ldr	r0, [pc, #292]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
 8003f00:	4e4c      	ldr	r6, [pc, #304]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f02:	f005 0203 	and.w	r2, r5, #3

    default:
      pllinputfreq = HSI_VALUE;
      break;
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f06:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllinputfreq = HSE_VALUE;
 8003f0a:	2a03      	cmp	r2, #3
 8003f0c:	bf08      	it	eq
 8003f0e:	4630      	moveq	r0, r6
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f10:	f3c4 2406 	ubfx	r4, r4, #8, #7
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f14:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8003f18:	3301      	adds	r3, #1
 8003f1a:	fb00 f004 	mul.w	r0, r0, r4
 8003f1e:	3201      	adds	r2, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	fbb0 f0f2 	udiv	r0, r0, r2
 8003f26:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003f2a:	e784      	b.n	8003e36 <LL_RCC_GetUSARTClockFreq+0x12>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003f2c:	6810      	ldr	r0, [r2, #0]
          usart_frequency = HSI_VALUE;
 8003f2e:	4b3d      	ldr	r3, [pc, #244]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
 8003f30:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 8003f34:	bf18      	it	ne
 8003f36:	4618      	movne	r0, r3
}
 8003f38:	bc70      	pop	{r4, r5, r6}
 8003f3a:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8003f3c:	4a37      	ldr	r2, [pc, #220]	; (800401c <LL_RCC_GetUSARTClockFreq+0x1f8>)
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003f3e:	493e      	ldr	r1, [pc, #248]	; (8004038 <LL_RCC_GetUSARTClockFreq+0x214>)
 8003f40:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003f44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f48:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003f4c:	428b      	cmp	r3, r1
 8003f4e:	d0ed      	beq.n	8003f2c <LL_RCC_GetUSARTClockFreq+0x108>
 8003f50:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003f54:	d0c2      	beq.n	8003edc <LL_RCC_GetUSARTClockFreq+0xb8>
 8003f56:	3910      	subs	r1, #16
 8003f58:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003f5a:	6893      	ldr	r3, [r2, #8]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	d0c5      	beq.n	8003eee <LL_RCC_GetUSARTClockFreq+0xca>
  switch (LL_RCC_GetSysClkSource())
 8003f62:	2b08      	cmp	r3, #8
 8003f64:	d058      	beq.n	8004018 <LL_RCC_GetUSARTClockFreq+0x1f4>
 8003f66:	2b0c      	cmp	r3, #12
 8003f68:	d180      	bne.n	8003e6c <LL_RCC_GetUSARTClockFreq+0x48>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f6a:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f6c:	68d0      	ldr	r0, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003f6e:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003f70:	68d2      	ldr	r2, [r2, #12]
      pllinputfreq = HSE_VALUE;
 8003f72:	4b2c      	ldr	r3, [pc, #176]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
 8003f74:	4d2f      	ldr	r5, [pc, #188]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003f76:	f004 0403 	and.w	r4, r4, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f7a:	f3c2 6241 	ubfx	r2, r2, #25, #2
      pllinputfreq = HSE_VALUE;
 8003f7e:	2c03      	cmp	r4, #3
 8003f80:	bf08      	it	eq
 8003f82:	462b      	moveq	r3, r5
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003f84:	f3c0 2006 	ubfx	r0, r0, #8, #7
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003f88:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8003f8c:	3201      	adds	r2, #1
 8003f8e:	fb03 f300 	mul.w	r3, r3, r0
 8003f92:	3101      	adds	r1, #1
 8003f94:	0052      	lsls	r2, r2, #1
 8003f96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f9a:	fbb3 f3f2 	udiv	r3, r3, r2
      break;
 8003f9e:	e766      	b.n	8003e6e <LL_RCC_GetUSARTClockFreq+0x4a>
  switch (LL_RCC_GetSysClkSource())
 8003fa0:	4820      	ldr	r0, [pc, #128]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
  return usart_frequency;
 8003fa2:	e748      	b.n	8003e36 <LL_RCC_GetUSARTClockFreq+0x12>
      frequency = HSE_VALUE;
 8003fa4:	4823      	ldr	r0, [pc, #140]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
 8003fa6:	e746      	b.n	8003e36 <LL_RCC_GetUSARTClockFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fa8:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003faa:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003fac:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003fae:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 8003fb0:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
 8003fb2:	4e20      	ldr	r6, [pc, #128]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fb4:	f005 0203 	and.w	r2, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fb8:	f3c0 6041 	ubfx	r0, r0, #25, #2
      pllinputfreq = HSE_VALUE;
 8003fbc:	2a03      	cmp	r2, #3
 8003fbe:	bf08      	it	eq
 8003fc0:	4633      	moveq	r3, r6
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fc2:	f3c4 2406 	ubfx	r4, r4, #8, #7
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003fc6:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8003fca:	3001      	adds	r0, #1
 8003fcc:	fb03 f304 	mul.w	r3, r3, r4
 8003fd0:	3201      	adds	r2, #1
 8003fd2:	0040      	lsls	r0, r0, #1
 8003fd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003fd8:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8003fdc:	e76a      	b.n	8003eb4 <LL_RCC_GetUSARTClockFreq+0x90>
  switch (LL_RCC_GetSysClkSource())
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
 8003fe0:	e768      	b.n	8003eb4 <LL_RCC_GetUSARTClockFreq+0x90>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fe2:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003fe4:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003fe6:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003fe8:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <LL_RCC_GetUSARTClockFreq+0x200>)
 8003fec:	4e11      	ldr	r6, [pc, #68]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003fee:	f005 0203 	and.w	r2, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003ff2:	f3c0 6041 	ubfx	r0, r0, #25, #2
      pllinputfreq = HSE_VALUE;
 8003ff6:	2a03      	cmp	r2, #3
 8003ff8:	bf08      	it	eq
 8003ffa:	4633      	moveq	r3, r6
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003ffc:	f3c4 2406 	ubfx	r4, r4, #8, #7
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004000:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8004004:	3001      	adds	r0, #1
 8004006:	fb03 f304 	mul.w	r3, r3, r4
 800400a:	3201      	adds	r2, #1
 800400c:	0040      	lsls	r0, r0, #1
 800400e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004012:	fbb3 f3f0 	udiv	r3, r3, r0
      break;
 8004016:	e72a      	b.n	8003e6e <LL_RCC_GetUSARTClockFreq+0x4a>
  switch (LL_RCC_GetSysClkSource())
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <LL_RCC_GetUSARTClockFreq+0x210>)
 800401a:	e728      	b.n	8003e6e <LL_RCC_GetUSARTClockFreq+0x4a>
 800401c:	40021000 	.word	0x40021000
 8004020:	000c0008 	.word	0x000c0008
 8004024:	00f42400 	.word	0x00f42400
 8004028:	08007d70 	.word	0x08007d70
 800402c:	08007d80 	.word	0x08007d80
 8004030:	00030002 	.word	0x00030002
 8004034:	007a1200 	.word	0x007a1200
 8004038:	00300020 	.word	0x00300020

0800403c <LL_RCC_GetUARTClockFreq>:
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800403c:	28c0      	cmp	r0, #192	; 0xc0
{
 800403e:	b470      	push	{r4, r5, r6}
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004040:	d04b      	beq.n	80040da <LL_RCC_GetUARTClockFreq+0x9e>
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8004042:	f5b0 7f40 	cmp.w	r0, #768	; 0x300
 8004046:	d145      	bne.n	80040d4 <LL_RCC_GetUARTClockFreq+0x98>
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8004048:	4a49      	ldr	r2, [pc, #292]	; (8004170 <LL_RCC_GetUARTClockFreq+0x134>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800404a:	494a      	ldr	r1, [pc, #296]	; (8004174 <LL_RCC_GetUARTClockFreq+0x138>)
 800404c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004054:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 8004058:	428b      	cmp	r3, r1
 800405a:	d07b      	beq.n	8004154 <LL_RCC_GetUARTClockFreq+0x118>
 800405c:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8004060:	d06f      	beq.n	8004142 <LL_RCC_GetUARTClockFreq+0x106>
 8004062:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
 8004066:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004068:	6893      	ldr	r3, [r2, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	d047      	beq.n	8004100 <LL_RCC_GetUARTClockFreq+0xc4>
  switch (LL_RCC_GetSysClkSource())
 8004070:	2b08      	cmp	r3, #8
 8004072:	d064      	beq.n	800413e <LL_RCC_GetUARTClockFreq+0x102>
 8004074:	2b0c      	cmp	r3, #12
 8004076:	d175      	bne.n	8004164 <LL_RCC_GetUARTClockFreq+0x128>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004078:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800407a:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800407c:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800407e:	68d0      	ldr	r0, [r2, #12]
      pllinputfreq = HSE_VALUE;
 8004080:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <LL_RCC_GetUARTClockFreq+0x13c>)
 8004082:	4e3e      	ldr	r6, [pc, #248]	; (800417c <LL_RCC_GetUARTClockFreq+0x140>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004084:	f005 0203 	and.w	r2, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004088:	f3c0 6041 	ubfx	r0, r0, #25, #2
      pllinputfreq = HSE_VALUE;
 800408c:	2a03      	cmp	r2, #3
 800408e:	bf08      	it	eq
 8004090:	4633      	moveq	r3, r6
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004092:	f3c4 2406 	ubfx	r4, r4, #8, #7
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004096:	f3c1 1203 	ubfx	r2, r1, #4, #4
 800409a:	3001      	adds	r0, #1
 800409c:	fb03 f304 	mul.w	r3, r3, r4
 80040a0:	3201      	adds	r2, #1
 80040a2:	0040      	lsls	r0, r0, #1
 80040a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80040a8:	fbb3 f3f0 	udiv	r3, r3, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040ac:	4930      	ldr	r1, [pc, #192]	; (8004170 <LL_RCC_GetUARTClockFreq+0x134>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040ae:	4c34      	ldr	r4, [pc, #208]	; (8004180 <LL_RCC_GetUARTClockFreq+0x144>)
 80040b0:	688a      	ldr	r2, [r1, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80040b2:	6889      	ldr	r1, [r1, #8]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040b4:	4833      	ldr	r0, [pc, #204]	; (8004184 <LL_RCC_GetUARTClockFreq+0x148>)
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040b6:	f3c2 1203 	ubfx	r2, r2, #4, #4
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040ba:	f3c1 2102 	ubfx	r1, r1, #8, #3
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040be:	5ca2      	ldrb	r2, [r4, r2]
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040c0:	5c40      	ldrb	r0, [r0, r1]
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80040c2:	f002 021f 	and.w	r2, r2, #31
 80040c6:	40d3      	lsrs	r3, r2
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80040c8:	f000 001f 	and.w	r0, r0, #31
 80040cc:	fa23 f000 	lsr.w	r0, r3, r0
}
 80040d0:	bc70      	pop	{r4, r5, r6}
 80040d2:	4770      	bx	lr
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80040d4:	2000      	movs	r0, #0
}
 80040d6:	bc70      	pop	{r4, r5, r6}
 80040d8:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80040da:	4a25      	ldr	r2, [pc, #148]	; (8004170 <LL_RCC_GetUARTClockFreq+0x134>)
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80040dc:	492a      	ldr	r1, [pc, #168]	; (8004188 <LL_RCC_GetUARTClockFreq+0x14c>)
 80040de:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80040e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040e6:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80040ea:	428b      	cmp	r3, r1
 80040ec:	d032      	beq.n	8004154 <LL_RCC_GetUARTClockFreq+0x118>
 80040ee:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80040f2:	d026      	beq.n	8004142 <LL_RCC_GetUARTClockFreq+0x106>
 80040f4:	3940      	subs	r1, #64	; 0x40
 80040f6:	428b      	cmp	r3, r1
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80040f8:	6893      	ldr	r3, [r2, #8]
 80040fa:	f003 030c 	and.w	r3, r3, #12
 80040fe:	d1b7      	bne.n	8004070 <LL_RCC_GetUARTClockFreq+0x34>
  switch (LL_RCC_GetSysClkSource())
 8004100:	2b08      	cmp	r3, #8
 8004102:	d033      	beq.n	800416c <LL_RCC_GetUARTClockFreq+0x130>
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d12f      	bne.n	8004168 <LL_RCC_GetUARTClockFreq+0x12c>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004108:	68d5      	ldr	r5, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800410a:	68d4      	ldr	r4, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800410c:	68d1      	ldr	r1, [r2, #12]
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800410e:	68d3      	ldr	r3, [r2, #12]
      pllinputfreq = HSE_VALUE;
 8004110:	4819      	ldr	r0, [pc, #100]	; (8004178 <LL_RCC_GetUARTClockFreq+0x13c>)
 8004112:	4e1a      	ldr	r6, [pc, #104]	; (800417c <LL_RCC_GetUARTClockFreq+0x140>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004114:	f005 0203 	and.w	r2, r5, #3
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004118:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllinputfreq = HSE_VALUE;
 800411c:	2a03      	cmp	r2, #3
 800411e:	bf08      	it	eq
 8004120:	4630      	moveq	r0, r6
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004122:	f3c4 2406 	ubfx	r4, r4, #8, #7
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004126:	f3c1 1203 	ubfx	r2, r1, #4, #4
 800412a:	3301      	adds	r3, #1
 800412c:	fb00 f004 	mul.w	r0, r0, r4
 8004130:	3201      	adds	r2, #1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	fbb0 f0f2 	udiv	r0, r0, r2
 8004138:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800413c:	e7cb      	b.n	80040d6 <LL_RCC_GetUARTClockFreq+0x9a>
  switch (LL_RCC_GetSysClkSource())
 800413e:	4b0f      	ldr	r3, [pc, #60]	; (800417c <LL_RCC_GetUARTClockFreq+0x140>)
 8004140:	e7b4      	b.n	80040ac <LL_RCC_GetUARTClockFreq+0x70>
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004142:	f8d2 0090 	ldr.w	r0, [r2, #144]	; 0x90
 8004146:	f010 0002 	ands.w	r0, r0, #2
          uart_frequency = LSE_VALUE;
 800414a:	bf18      	it	ne
 800414c:	f44f 4000 	movne.w	r0, #32768	; 0x8000
}
 8004150:	bc70      	pop	{r4, r5, r6}
 8004152:	4770      	bx	lr
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004154:	6810      	ldr	r0, [r2, #0]
          uart_frequency = HSI_VALUE;
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <LL_RCC_GetUARTClockFreq+0x13c>)
 8004158:	f410 6080 	ands.w	r0, r0, #1024	; 0x400
 800415c:	bf18      	it	ne
 800415e:	4618      	movne	r0, r3
}
 8004160:	bc70      	pop	{r4, r5, r6}
 8004162:	4770      	bx	lr
      frequency = HSI_VALUE;
 8004164:	4b04      	ldr	r3, [pc, #16]	; (8004178 <LL_RCC_GetUARTClockFreq+0x13c>)
 8004166:	e7a1      	b.n	80040ac <LL_RCC_GetUARTClockFreq+0x70>
  switch (LL_RCC_GetSysClkSource())
 8004168:	4803      	ldr	r0, [pc, #12]	; (8004178 <LL_RCC_GetUARTClockFreq+0x13c>)
 800416a:	e7b4      	b.n	80040d6 <LL_RCC_GetUARTClockFreq+0x9a>
      frequency = HSE_VALUE;
 800416c:	4803      	ldr	r0, [pc, #12]	; (800417c <LL_RCC_GetUARTClockFreq+0x140>)
 800416e:	e7b2      	b.n	80040d6 <LL_RCC_GetUARTClockFreq+0x9a>
 8004170:	40021000 	.word	0x40021000
 8004174:	03000200 	.word	0x03000200
 8004178:	00f42400 	.word	0x00f42400
 800417c:	007a1200 	.word	0x007a1200
 8004180:	08007d70 	.word	0x08007d70
 8004184:	08007d80 	.word	0x08007d80
 8004188:	00c00080 	.word	0x00c00080

0800418c <LL_TIM_Init>:
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800418c:	4a2e      	ldr	r2, [pc, #184]	; (8004248 <LL_TIM_Init+0xbc>)
  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800418e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004190:	4290      	cmp	r0, r2
{
 8004192:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004194:	d03f      	beq.n	8004216 <LL_TIM_Init+0x8a>
 8004196:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800419a:	d028      	beq.n	80041ee <LL_TIM_Init+0x62>
 800419c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80041a0:	4290      	cmp	r0, r2
 80041a2:	d024      	beq.n	80041ee <LL_TIM_Init+0x62>
 80041a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041a8:	4290      	cmp	r0, r2
 80041aa:	d020      	beq.n	80041ee <LL_TIM_Init+0x62>
 80041ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041b0:	4290      	cmp	r0, r2
 80041b2:	d01c      	beq.n	80041ee <LL_TIM_Init+0x62>
 80041b4:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80041b8:	4290      	cmp	r0, r2
 80041ba:	d02c      	beq.n	8004216 <LL_TIM_Init+0x8a>
 80041bc:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 80041c0:	4290      	cmp	r0, r2
 80041c2:	d03b      	beq.n	800423c <LL_TIM_Init+0xb0>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041c4:	4a21      	ldr	r2, [pc, #132]	; (800424c <LL_TIM_Init+0xc0>)
 80041c6:	4290      	cmp	r0, r2
 80041c8:	d035      	beq.n	8004236 <LL_TIM_Init+0xaa>
 80041ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041ce:	4290      	cmp	r0, r2
 80041d0:	d031      	beq.n	8004236 <LL_TIM_Init+0xaa>
 80041d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80041d6:	4290      	cmp	r0, r2
 80041d8:	d02d      	beq.n	8004236 <LL_TIM_Init+0xaa>
 80041da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041de:	4290      	cmp	r0, r2
 80041e0:	d029      	beq.n	8004236 <LL_TIM_Init+0xaa>

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041e2:	688c      	ldr	r4, [r1, #8]

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041e4:	880a      	ldrh	r2, [r1, #0]
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80041e6:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80041e8:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 80041ea:	6282      	str	r2, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ec:	e00c      	b.n	8004208 <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80041ee:	684a      	ldr	r2, [r1, #4]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80041f0:	e9d1 4502 	ldrd	r4, r5, [r1, #8]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80041f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f8:	4313      	orrs	r3, r2
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80041fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80041fe:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004200:	432b      	orrs	r3, r5
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004202:	6003      	str	r3, [r0, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004204:	62c4      	str	r4, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 8004206:	6282      	str	r2, [r0, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004208:	6943      	ldr	r3, [r0, #20]
 800420a:	f043 0301 	orr.w	r3, r3, #1
 800420e:	6143      	str	r3, [r0, #20]
  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);

  return SUCCESS;
}
 8004210:	bc30      	pop	{r4, r5}
 8004212:	2000      	movs	r0, #0
 8004214:	4770      	bx	lr
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004216:	684d      	ldr	r5, [r1, #4]
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004218:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800421a:	880a      	ldrh	r2, [r1, #0]
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800421c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004220:	432b      	orrs	r3, r5
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004226:	4323      	orrs	r3, r4
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004228:	6003      	str	r3, [r0, #0]
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800422a:	688b      	ldr	r3, [r1, #8]
  WRITE_REG(TIMx->ARR, AutoReload);
 800422c:	62c3      	str	r3, [r0, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800422e:	6282      	str	r2, [r0, #40]	; 0x28
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004230:	690b      	ldr	r3, [r1, #16]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004232:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004234:	e7e8      	b.n	8004208 <LL_TIM_Init+0x7c>
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004236:	68cc      	ldr	r4, [r1, #12]
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004238:	880a      	ldrh	r2, [r1, #0]
 800423a:	e7f2      	b.n	8004222 <LL_TIM_Init+0x96>
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800423c:	684a      	ldr	r2, [r1, #4]
 800423e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004242:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004244:	e7be      	b.n	80041c4 <LL_TIM_Init+0x38>
 8004246:	bf00      	nop
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40014000 	.word	0x40014000

08004250 <LL_TIM_OC_Init>:
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
  ErrorStatus result = ERROR;

  switch (Channel)
 8004250:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
{
 8004254:	b4f0      	push	{r4, r5, r6, r7}
  switch (Channel)
 8004256:	f000 812a 	beq.w	80044ae <LL_TIM_OC_Init+0x25e>
 800425a:	d853      	bhi.n	8004304 <LL_TIM_OC_Init+0xb4>
 800425c:	2910      	cmp	r1, #16
 800425e:	f000 8175 	beq.w	800454c <LL_TIM_OC_Init+0x2fc>
 8004262:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8004266:	f040 8092 	bne.w	800438e <LL_TIM_OC_Init+0x13e>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800426a:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800426c:	f8d2 c010 	ldr.w	ip, [r2, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004270:	4db5      	ldr	r5, [pc, #724]	; (8004548 <LL_TIM_OC_Init+0x2f8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8004272:	f424 7480 	bic.w	r4, r4, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004276:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800427a:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800427c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800427e:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004280:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004282:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004286:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800428a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800428e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004292:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004296:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004298:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800429c:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a0:	d013      	beq.n	80042ca <LL_TIM_OC_Init+0x7a>
 80042a2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80042a6:	42a8      	cmp	r0, r5
 80042a8:	d00f      	beq.n	80042ca <LL_TIM_OC_Init+0x7a>
 80042aa:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80042ae:	42a8      	cmp	r0, r5
 80042b0:	d00b      	beq.n	80042ca <LL_TIM_OC_Init+0x7a>
 80042b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042b6:	42a8      	cmp	r0, r5
 80042b8:	d007      	beq.n	80042ca <LL_TIM_OC_Init+0x7a>
 80042ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80042be:	42a8      	cmp	r0, r5
 80042c0:	d003      	beq.n	80042ca <LL_TIM_OC_Init+0x7a>
 80042c2:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80042c6:	42a8      	cmp	r0, r5
 80042c8:	d113      	bne.n	80042f2 <LL_TIM_OC_Init+0xa2>

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80042ca:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80042ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80042d2:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 80042d6:	ea43 2386 	orr.w	r3, r3, r6, lsl #10

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80042da:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042dc:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80042de:	ea44 1407 	orr.w	r4, r4, r7, lsl #4
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80042e6:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 80042ea:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80042ee:	ea44 1445 	orr.w	r4, r4, r5, lsl #5

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80042f2:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042f4:	6044      	str	r4, [r0, #4]
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80042f6:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80042f8:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80042fa:	63c5      	str	r5, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80042fc:	6203      	str	r3, [r0, #32]
}
 80042fe:	bcf0      	pop	{r4, r5, r6, r7}
 8004300:	4610      	mov	r0, r2
 8004302:	4770      	bx	lr
  switch (Channel)
 8004304:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004308:	f000 8093 	beq.w	8004432 <LL_TIM_OC_Init+0x1e2>
 800430c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004310:	f040 808b 	bne.w	800442a <LL_TIM_OC_Init+0x1da>
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004314:	6a04      	ldr	r4, [r0, #32]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004316:	6917      	ldr	r7, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004318:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800431c:	e9d2 5600 	ldrd	r5, r6, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004320:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004322:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004324:	6d01      	ldr	r1, [r0, #80]	; 0x50

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004326:	4c88      	ldr	r4, [pc, #544]	; (8004548 <LL_TIM_OC_Init+0x2f8>)
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004328:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800432c:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004330:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004334:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004338:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800433c:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800433e:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004342:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004346:	d013      	beq.n	8004370 <LL_TIM_OC_Init+0x120>
 8004348:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800434c:	42a0      	cmp	r0, r4
 800434e:	d00f      	beq.n	8004370 <LL_TIM_OC_Init+0x120>
 8004350:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004354:	42a0      	cmp	r0, r4
 8004356:	d00b      	beq.n	8004370 <LL_TIM_OC_Init+0x120>
 8004358:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800435c:	42a0      	cmp	r0, r4
 800435e:	d007      	beq.n	8004370 <LL_TIM_OC_Init+0x120>
 8004360:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004364:	42a0      	cmp	r0, r4
 8004366:	d003      	beq.n	8004370 <LL_TIM_OC_Init+0x120>
 8004368:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800436c:	42a0      	cmp	r0, r4
 800436e:	d106      	bne.n	800437e <LL_TIM_OC_Init+0x12e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004370:	6844      	ldr	r4, [r0, #4]
 8004372:	6995      	ldr	r5, [r2, #24]
 8004374:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8004378:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800437c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800437e:	68d4      	ldr	r4, [r2, #12]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004380:	6501      	str	r1, [r0, #80]	; 0x50
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004382:	2200      	movs	r2, #0
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004384:	64c4      	str	r4, [r0, #76]	; 0x4c

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004386:	6203      	str	r3, [r0, #32]
}
 8004388:	bcf0      	pop	{r4, r5, r6, r7}
 800438a:	4610      	mov	r0, r2
 800438c:	4770      	bx	lr
  switch (Channel)
 800438e:	2901      	cmp	r1, #1
 8004390:	d14b      	bne.n	800442a <LL_TIM_OC_Init+0x1da>
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8004392:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8004394:	f8d2 c010 	ldr.w	ip, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004398:	4d6b      	ldr	r5, [pc, #428]	; (8004548 <LL_TIM_OC_Init+0x2f8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800439a:	f024 0401 	bic.w	r4, r4, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800439e:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80043a2:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80043a4:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043a6:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80043a8:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80043aa:	f023 0302 	bic.w	r3, r3, #2
 80043ae:	ea43 030c 	orr.w	r3, r3, ip
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80043b2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80043b6:	f023 0301 	bic.w	r3, r3, #1
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80043ba:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043be:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80043c0:	ea43 0307 	orr.w	r3, r3, r7
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80043c4:	ea41 0106 	orr.w	r1, r1, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043c8:	d013      	beq.n	80043f2 <LL_TIM_OC_Init+0x1a2>
 80043ca:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043ce:	42a8      	cmp	r0, r5
 80043d0:	d00f      	beq.n	80043f2 <LL_TIM_OC_Init+0x1a2>
 80043d2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80043d6:	42a8      	cmp	r0, r5
 80043d8:	d00b      	beq.n	80043f2 <LL_TIM_OC_Init+0x1a2>
 80043da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043de:	42a8      	cmp	r0, r5
 80043e0:	d007      	beq.n	80043f2 <LL_TIM_OC_Init+0x1a2>
 80043e2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80043e6:	42a8      	cmp	r0, r5
 80043e8:	d003      	beq.n	80043f2 <LL_TIM_OC_Init+0x1a2>
 80043ea:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80043ee:	42a8      	cmp	r0, r5
 80043f0:	d112      	bne.n	8004418 <LL_TIM_OC_Init+0x1c8>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80043f2:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80043f6:	f023 0308 	bic.w	r3, r3, #8
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80043fa:	f424 7480 	bic.w	r4, r4, #256	; 0x100
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80043fe:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004402:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004404:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004406:	433c      	orrs	r4, r7
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004408:	f023 0304 	bic.w	r3, r3, #4
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800440c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004410:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004414:	ea44 0445 	orr.w	r4, r4, r5, lsl #1
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004418:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800441a:	6044      	str	r4, [r0, #4]
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800441c:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800441e:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004420:	6345      	str	r5, [r0, #52]	; 0x34
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004422:	6203      	str	r3, [r0, #32]
}
 8004424:	bcf0      	pop	{r4, r5, r6, r7}
 8004426:	4610      	mov	r0, r2
 8004428:	4770      	bx	lr
  switch (Channel)
 800442a:	2201      	movs	r2, #1
}
 800442c:	4610      	mov	r0, r2
 800442e:	bcf0      	pop	{r4, r5, r6, r7}
 8004430:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004432:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004434:	6917      	ldr	r7, [r2, #16]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004436:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800443a:	e9d2 5600 	ldrd	r5, r6, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800443e:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004440:	6a03      	ldr	r3, [r0, #32]
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004442:	6d01      	ldr	r1, [r0, #80]	; 0x50
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004444:	4c40      	ldr	r4, [pc, #256]	; (8004548 <LL_TIM_OC_Init+0x2f8>)
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004446:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800444a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800444e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004456:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800445a:	42a0      	cmp	r0, r4
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800445c:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004460:	ea41 0105 	orr.w	r1, r1, r5
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	d013      	beq.n	800448e <LL_TIM_OC_Init+0x23e>
 8004466:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800446a:	42a0      	cmp	r0, r4
 800446c:	d00f      	beq.n	800448e <LL_TIM_OC_Init+0x23e>
 800446e:	f504 6440 	add.w	r4, r4, #3072	; 0xc00
 8004472:	42a0      	cmp	r0, r4
 8004474:	d00b      	beq.n	800448e <LL_TIM_OC_Init+0x23e>
 8004476:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800447a:	42a0      	cmp	r0, r4
 800447c:	d007      	beq.n	800448e <LL_TIM_OC_Init+0x23e>
 800447e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004482:	42a0      	cmp	r0, r4
 8004484:	d003      	beq.n	800448e <LL_TIM_OC_Init+0x23e>
 8004486:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 800448a:	42a0      	cmp	r0, r4
 800448c:	d106      	bne.n	800449c <LL_TIM_OC_Init+0x24c>
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800448e:	6844      	ldr	r4, [r0, #4]
 8004490:	6995      	ldr	r5, [r2, #24]
 8004492:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8004496:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800449a:	6044      	str	r4, [r0, #4]
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800449c:	6501      	str	r1, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800449e:	68d2      	ldr	r2, [r2, #12]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80044a0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80044a2:	6482      	str	r2, [r0, #72]	; 0x48
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80044a4:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044a6:	6203      	str	r3, [r0, #32]
}
 80044a8:	bcf0      	pop	{r4, r5, r6, r7}
 80044aa:	4610      	mov	r0, r2
 80044ac:	4770      	bx	lr
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044ae:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80044b0:	f8d2 c010 	ldr.w	ip, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b4:	4d24      	ldr	r5, [pc, #144]	; (8004548 <LL_TIM_OC_Init+0x2f8>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044b6:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044ba:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044be:	6204      	str	r4, [r0, #32]
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80044c0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80044c2:	6844      	ldr	r4, [r0, #4]
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044c4:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80044c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ca:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044ce:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80044d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044d6:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 80044dc:	ea43 3307 	orr.w	r3, r3, r7, lsl #12
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044e0:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044e4:	d013      	beq.n	800450e <LL_TIM_OC_Init+0x2be>
 80044e6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80044ea:	42a8      	cmp	r0, r5
 80044ec:	d00f      	beq.n	800450e <LL_TIM_OC_Init+0x2be>
 80044ee:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 80044f2:	42a8      	cmp	r0, r5
 80044f4:	d00b      	beq.n	800450e <LL_TIM_OC_Init+0x2be>
 80044f6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80044fa:	42a8      	cmp	r0, r5
 80044fc:	d007      	beq.n	800450e <LL_TIM_OC_Init+0x2be>
 80044fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004502:	42a8      	cmp	r0, r5
 8004504:	d003      	beq.n	800450e <LL_TIM_OC_Init+0x2be>
 8004506:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800450a:	42a8      	cmp	r0, r5
 800450c:	d113      	bne.n	8004536 <LL_TIM_OC_Init+0x2e6>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800450e:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 8004512:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004516:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    MODIFY_REG(tmpccer, TIM_CCER_CC4NP, TIM_OCInitStruct->OCNPolarity << 14U);
 800451a:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800451e:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8004520:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004522:	ea44 1487 	orr.w	r4, r4, r7, lsl #6
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 8004526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 800452a:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    MODIFY_REG(tmpccer, TIM_CCER_CC4NE, TIM_OCInitStruct->OCNState << 14U);
 800452e:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4N, TIM_OCInitStruct->OCNIdleState << 7U);
 8004532:	ea44 14c5 	orr.w	r4, r4, r5, lsl #7
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004536:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004538:	6044      	str	r4, [r0, #4]
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800453a:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800453c:	61c1      	str	r1, [r0, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800453e:	6405      	str	r5, [r0, #64]	; 0x40
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004540:	6203      	str	r3, [r0, #32]
}
 8004542:	bcf0      	pop	{r4, r5, r6, r7}
 8004544:	4610      	mov	r0, r2
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800454c:	6a04      	ldr	r4, [r0, #32]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800454e:	f8d2 c010 	ldr.w	ip, [r2, #16]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004552:	4d25      	ldr	r5, [pc, #148]	; (80045e8 <LL_TIM_OC_Init+0x398>)
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8004554:	f024 0410 	bic.w	r4, r4, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004558:	e9d2 6700 	ldrd	r6, r7, [r2]
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800455c:	6204      	str	r4, [r0, #32]
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800455e:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004560:	6844      	ldr	r4, [r0, #4]
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8004562:	6981      	ldr	r1, [r0, #24]
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004564:	f023 0320 	bic.w	r3, r3, #32
 8004568:	ea43 130c 	orr.w	r3, r3, ip, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800456c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004570:	f023 0310 	bic.w	r3, r3, #16
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8004574:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800457a:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800457e:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	d013      	beq.n	80045ac <LL_TIM_OC_Init+0x35c>
 8004584:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8004588:	42a8      	cmp	r0, r5
 800458a:	d00f      	beq.n	80045ac <LL_TIM_OC_Init+0x35c>
 800458c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8004590:	42a8      	cmp	r0, r5
 8004592:	d00b      	beq.n	80045ac <LL_TIM_OC_Init+0x35c>
 8004594:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004598:	42a8      	cmp	r0, r5
 800459a:	d007      	beq.n	80045ac <LL_TIM_OC_Init+0x35c>
 800459c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045a0:	42a8      	cmp	r0, r5
 80045a2:	d003      	beq.n	80045ac <LL_TIM_OC_Init+0x35c>
 80045a4:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80045a8:	42a8      	cmp	r0, r5
 80045aa:	d113      	bne.n	80045d4 <LL_TIM_OC_Init+0x384>
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80045ac:	e9d2 6705 	ldrd	r6, r7, [r2, #20]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80045b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80045b4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80045b8:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80045bc:	69d5      	ldr	r5, [r2, #28]
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80045be:	6896      	ldr	r6, [r2, #8]
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80045c0:	ea44 0487 	orr.w	r4, r4, r7, lsl #2
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80045c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80045c8:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80045cc:	ea43 1386 	orr.w	r3, r3, r6, lsl #6
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80045d0:	ea44 04c5 	orr.w	r4, r4, r5, lsl #3
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80045d4:	68d5      	ldr	r5, [r2, #12]
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80045d6:	6044      	str	r4, [r0, #4]
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80045d8:	2200      	movs	r2, #0
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80045da:	6181      	str	r1, [r0, #24]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80045dc:	6385      	str	r5, [r0, #56]	; 0x38
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045de:	6203      	str	r3, [r0, #32]
}
 80045e0:	bcf0      	pop	{r4, r5, r6, r7}
 80045e2:	4610      	mov	r0, r2
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40012c00 	.word	0x40012c00

080045ec <LL_USART_Init>:
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80045ec:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80045ee:	07db      	lsls	r3, r3, #31
 80045f0:	d432      	bmi.n	8004658 <LL_USART_Init+0x6c>
{
 80045f2:	b570      	push	{r4, r5, r6, lr}
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80045f4:	e9d1 2604 	ldrd	r2, r6, [r1, #16]
 80045f8:	4604      	mov	r4, r0
 80045fa:	688b      	ldr	r3, [r1, #8]
 80045fc:	69c8      	ldr	r0, [r1, #28]
 80045fe:	460d      	mov	r5, r1
 8004600:	4313      	orrs	r3, r2
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <LL_USART_Init+0xf8>)
 8004606:	4333      	orrs	r3, r6
 8004608:	400a      	ands	r2, r1
 800460a:	4303      	orrs	r3, r0
 800460c:	4313      	orrs	r3, r2
 800460e:	6023      	str	r3, [r4, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004610:	6862      	ldr	r2, [r4, #4]
 8004612:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004614:	69a8      	ldr	r0, [r5, #24]
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8004616:	4934      	ldr	r1, [pc, #208]	; (80046e8 <LL_USART_Init+0xfc>)
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004618:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800461c:	431a      	orrs	r2, r3
 800461e:	6062      	str	r2, [r4, #4]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004620:	68a3      	ldr	r3, [r4, #8]
 8004622:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004626:	4303      	orrs	r3, r0
 8004628:	428c      	cmp	r4, r1
 800462a:	60a3      	str	r3, [r4, #8]
 800462c:	d016      	beq.n	800465c <LL_USART_Init+0x70>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
    }
    else if (USARTx == USART2)
 800462e:	4b2f      	ldr	r3, [pc, #188]	; (80046ec <LL_USART_Init+0x100>)
 8004630:	429c      	cmp	r4, r3
 8004632:	d02f      	beq.n	8004694 <LL_USART_Init+0xa8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
    }
    else if (USARTx == USART3)
 8004634:	4b2e      	ldr	r3, [pc, #184]	; (80046f0 <LL_USART_Init+0x104>)
 8004636:	429c      	cmp	r4, r3
 8004638:	d030      	beq.n	800469c <LL_USART_Init+0xb0>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800463a:	4b2e      	ldr	r3, [pc, #184]	; (80046f4 <LL_USART_Init+0x108>)
 800463c:	429c      	cmp	r4, r3
 800463e:	d038      	beq.n	80046b2 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004640:	4b2d      	ldr	r3, [pc, #180]	; (80046f8 <LL_USART_Init+0x10c>)
 8004642:	429c      	cmp	r4, r3
 8004644:	d02e      	beq.n	80046a4 <LL_USART_Init+0xb8>
 8004646:	682a      	ldr	r2, [r5, #0]
  ErrorStatus status = ERROR;
 8004648:	2001      	movs	r0, #1
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800464a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800464c:	b292      	uxth	r2, r2
 800464e:	f023 030f 	bic.w	r3, r3, #15
 8004652:	4313      	orrs	r3, r2
 8004654:	62e3      	str	r3, [r4, #44]	; 0x2c
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
}
 8004656:	bd70      	pop	{r4, r5, r6, pc}
  ErrorStatus status = ERROR;
 8004658:	2001      	movs	r0, #1
}
 800465a:	4770      	bx	lr
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800465c:	2003      	movs	r0, #3
 800465e:	f7ff fbe1 	bl	8003e24 <LL_RCC_GetUSARTClockFreq>
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004662:	2800      	cmp	r0, #0
 8004664:	d0ef      	beq.n	8004646 <LL_USART_Init+0x5a>
        && (USART_InitStruct->BaudRate != 0U))
 8004666:	6869      	ldr	r1, [r5, #4]
 8004668:	2900      	cmp	r1, #0
 800466a:	d0ec      	beq.n	8004646 <LL_USART_Init+0x5a>
      LL_USART_SetBaudRate(USARTx,
 800466c:	682a      	ldr	r2, [r5, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 800466e:	2a0b      	cmp	r2, #11
 8004670:	d81d      	bhi.n	80046ae <LL_USART_Init+0xc2>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004672:	69eb      	ldr	r3, [r5, #28]
 8004674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004678:	d01f      	beq.n	80046ba <LL_USART_Init+0xce>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 800467a:	4b20      	ldr	r3, [pc, #128]	; (80046fc <LL_USART_Init+0x110>)
 800467c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004680:	fbb0 f3f3 	udiv	r3, r0, r3
 8004684:	eb03 0351 	add.w	r3, r3, r1, lsr #1
 8004688:	fbb3 f3f1 	udiv	r3, r3, r1
 800468c:	b29b      	uxth	r3, r3
 800468e:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 8004690:	2000      	movs	r0, #0
 8004692:	e7da      	b.n	800464a <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004694:	200c      	movs	r0, #12
 8004696:	f7ff fbc5 	bl	8003e24 <LL_RCC_GetUSARTClockFreq>
 800469a:	e7e2      	b.n	8004662 <LL_USART_Init+0x76>
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800469c:	2030      	movs	r0, #48	; 0x30
 800469e:	f7ff fbc1 	bl	8003e24 <LL_RCC_GetUSARTClockFreq>
 80046a2:	e7de      	b.n	8004662 <LL_USART_Init+0x76>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80046a4:	f44f 7040 	mov.w	r0, #768	; 0x300
 80046a8:	f7ff fcc8 	bl	800403c <LL_RCC_GetUARTClockFreq>
 80046ac:	e7d9      	b.n	8004662 <LL_USART_Init+0x76>
      status = SUCCESS;
 80046ae:	2000      	movs	r0, #0
 80046b0:	e7cb      	b.n	800464a <LL_USART_Init+0x5e>
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80046b2:	20c0      	movs	r0, #192	; 0xc0
 80046b4:	f7ff fcc2 	bl	800403c <LL_RCC_GetUARTClockFreq>
 80046b8:	e7d3      	b.n	8004662 <LL_USART_Init+0x76>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80046ba:	4d10      	ldr	r5, [pc, #64]	; (80046fc <LL_USART_Init+0x110>)
 80046bc:	084b      	lsrs	r3, r1, #1
 80046be:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 80046c2:	fbb0 f0f5 	udiv	r0, r0, r5
    brrtemp = usartdiv & 0xFFF0U;
 80046c6:	f64f 75f0 	movw	r5, #65520	; 0xfff0
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 80046ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80046ce:	fbb0 f3f1 	udiv	r3, r0, r1
    brrtemp = usartdiv & 0xFFF0U;
 80046d2:	ea03 0105 	and.w	r1, r3, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046d6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80046da:	430b      	orrs	r3, r1
    USARTx->BRR = brrtemp;
 80046dc:	60e3      	str	r3, [r4, #12]
      status = SUCCESS;
 80046de:	2000      	movs	r0, #0
 80046e0:	e7b3      	b.n	800464a <LL_USART_Init+0x5e>
 80046e2:	bf00      	nop
 80046e4:	efff69f3 	.word	0xefff69f3
 80046e8:	40013800 	.word	0x40013800
 80046ec:	40004400 	.word	0x40004400
 80046f0:	40004800 	.word	0x40004800
 80046f4:	40004c00 	.word	0x40004c00
 80046f8:	40005000 	.word	0x40005000
 80046fc:	08007d88 	.word	0x08007d88

08004700 <LED_init>:


// Funkcija LED_init() poskrbi, da se pravilno inicializira LED_group_handle_t struktura.
// Poskrbi tudi, da se določi začetno stanje LEDic.
void LED_init(void)
{
 8004700:	b470      	push	{r4, r5, r6}
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Spodaj imate primer za inicializacijo LEDice LED0.


		// LEDice na portu F
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 8004702:	4b11      	ldr	r3, [pc, #68]	; (8004748 <LED_init+0x48>)
		LED_group.LEDs[LED0].port = GPIOF;
 8004704:	4911      	ldr	r1, [pc, #68]	; (800474c <LED_init+0x4c>)


		// LEDice na portu C

		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
		LED_group.LEDs[LED4].port = GPIOC;
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <LED_init+0x50>)
		LED_group.LEDs[LED0].port = GPIOF;
 8004708:	6019      	str	r1, [r3, #0]
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 800470a:	2404      	movs	r4, #4
		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 800470c:	2008      	movs	r0, #8
		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 800470e:	2510      	movs	r5, #16
		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 8004710:	2620      	movs	r6, #32
		LED_group.LEDs[LED1].port = GPIOF;
 8004712:	6099      	str	r1, [r3, #8]
		LED_group.LEDs[LED2].port = GPIOF;
 8004714:	6119      	str	r1, [r3, #16]
		LED_group.LEDs[LED3].port = GPIOF;
 8004716:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004718:	628c      	str	r4, [r1, #40]	; 0x28
		LED_group.LEDs[LED0].pin = LL_GPIO_PIN_2;
 800471a:	605c      	str	r4, [r3, #4]

		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
		LED_group.LEDs[LED5].port = GPIOC;

		LED_group.LEDs[LED6].pin = LL_GPIO_PIN_2;
 800471c:	635c      	str	r4, [r3, #52]	; 0x34
 800471e:	6288      	str	r0, [r1, #40]	; 0x28
		LED_group.LEDs[LED1].pin = LL_GPIO_PIN_3;
 8004720:	60d8      	str	r0, [r3, #12]
		LED_group.LEDs[LED6].port = GPIOC;

		LED_group.LEDs[LED7].pin = LL_GPIO_PIN_3;
 8004722:	63d8      	str	r0, [r3, #60]	; 0x3c
 8004724:	628d      	str	r5, [r1, #40]	; 0x28
		LED_group.LEDs[LED2].pin = LL_GPIO_PIN_4;
 8004726:	615d      	str	r5, [r3, #20]
 8004728:	628e      	str	r6, [r1, #40]	; 0x28
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 800472a:	2501      	movs	r5, #1
		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 800472c:	2102      	movs	r1, #2
		LED_group.LEDs[LED3].pin = LL_GPIO_PIN_5;
 800472e:	61de      	str	r6, [r3, #28]
		LED_group.LEDs[LED4].port = GPIOC;
 8004730:	621a      	str	r2, [r3, #32]
		LED_group.LEDs[LED5].port = GPIOC;
 8004732:	629a      	str	r2, [r3, #40]	; 0x28
		LED_group.LEDs[LED6].port = GPIOC;
 8004734:	631a      	str	r2, [r3, #48]	; 0x30
		LED_group.LEDs[LED7].port = GPIOC;
 8004736:	639a      	str	r2, [r3, #56]	; 0x38
 8004738:	6295      	str	r5, [r2, #40]	; 0x28
		LED_group.LEDs[LED4].pin = LL_GPIO_PIN_0;
 800473a:	625d      	str	r5, [r3, #36]	; 0x24
 800473c:	6291      	str	r1, [r2, #40]	; 0x28
		LED_group.LEDs[LED5].pin = LL_GPIO_PIN_1;
 800473e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8004740:	6294      	str	r4, [r2, #40]	; 0x28

		// Na začetku po inicializaciji želimo imeti vse LEDice ugasnjene.
		// Uporabi se lahko kar LEDs_write() funkcijo.
		LEDs_write(0x00);

}
 8004742:	bc70      	pop	{r4, r5, r6}
 8004744:	6290      	str	r0, [r2, #40]	; 0x28
 8004746:	4770      	bx	lr
 8004748:	2000038c 	.word	0x2000038c
 800474c:	48001400 	.word	0x48001400
 8004750:	48000800 	.word	0x48000800

08004754 <LED_on>:
{
	// Za prižig LEDice uporabimo sledečo nizko-nivojsko LL funkcijo:
	//
	//		void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
	//
	LL_GPIO_SetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8004754:	4b03      	ldr	r3, [pc, #12]	; (8004764 <LED_on+0x10>)
 8004756:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800475a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 800475e:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8004760:	619a      	str	r2, [r3, #24]
	// zamenjate z npr. LED3 iz seznama naštevnega tipa; in tako boste s klicem zgornje
	// funkcijo postavili na visoko stanje prav tisti digitalni izhod, ki pripada
	// portu in pinu LEDice LED3.


}
 8004762:	4770      	bx	lr
 8004764:	2000038c 	.word	0x2000038c

08004768 <LED_off>:
// Funkcija LED_on() ugasne tisto LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_off(LEDs_enum_t LEDn)
{
	LL_GPIO_ResetOutputPin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 8004768:	4b03      	ldr	r3, [pc, #12]	; (8004778 <LED_off+0x10>)
 800476a:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
 800476e:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
 8004772:	6852      	ldr	r2, [r2, #4]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004774:	629a      	str	r2, [r3, #40]	; 0x28
	// DOPOLNI
}
 8004776:	4770      	bx	lr
 8004778:	2000038c 	.word	0x2000038c

0800477c <LED_toggle>:
// Funkcija LED_toggle() invertira stanje tiste LEDico v skupini, ki jo specificira
// vrednost "LEDn". Vrednost "LEDn" pa je lahko eden od elementov iz
// seznama naštevnega tipa LEDs_enum_t.
void LED_toggle( LEDs_enum_t LEDn )
{
	LL_GPIO_TogglePin( LED_group.LEDs[LEDn].port, LED_group.LEDs[LEDn].pin );
 800477c:	4b07      	ldr	r3, [pc, #28]	; (800479c <LED_toggle+0x20>)
 800477e:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
 8004782:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  uint32_t odr = READ_REG(GPIOx->ODR);
 8004786:	6951      	ldr	r1, [r2, #20]
 8004788:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800478a:	ea03 0001 	and.w	r0, r3, r1
 800478e:	ea23 0301 	bic.w	r3, r3, r1
 8004792:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004796:	6193      	str	r3, [r2, #24]
	// DOPOLNI
}
 8004798:	4770      	bx	lr
 800479a:	bf00      	nop
 800479c:	2000038c 	.word	0x2000038c

080047a0 <SCI_init>:
		// standardni izhod "stdout" s pomočjo printf() funkcije,
		// bomo nastavili na 0. Na ta način dosežemo najboljšo odzivnost
		// printf() funkcije, saj se tako ne čaka, da se medpomnilnik napolne,
		// preden se pošlje sporočilo. Sporočila bodo tako poslana takoj, ko se
		// prejme vsaj en znak.
		setvbuf(stdout, NULL, _IONBF, 0);
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <SCI_init+0x44>)
{
 80047a2:	b510      	push	{r4, lr}
		SCI.enota = USART3;
 80047a4:	4c10      	ldr	r4, [pc, #64]	; (80047e8 <SCI_init+0x48>)
		setvbuf(stdout, NULL, _IONBF, 0);
 80047a6:	681a      	ldr	r2, [r3, #0]
		SCI.enota = USART3;
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <SCI_init+0x4c>)
 80047aa:	6023      	str	r3, [r4, #0]
		setvbuf(stdout, NULL, _IONBF, 0);
 80047ac:	2300      	movs	r3, #0
 80047ae:	4619      	mov	r1, r3
 80047b0:	6890      	ldr	r0, [r2, #8]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f001 ff24 	bl	8006600 <setvbuf>
		// s katero specificiramo dolžino medpomnilnika za standardni izhod "stdout" (prvi argument funkcije).
		// Za 3. vhodni parameter uporabimo že pred-definirani makro _IONBF (I/O No Buffer), ki bo povzročil,
		// da se za standardni izhod "stdout" ne uporablja medpomnilnika, temveč
		// se znake takoj pošlje na standardni izhod.

		BUF_init( &SCI_RX_buf_handle, SCI_RX_buffer, SCI_RX_BUF_LEN);	// RX SCI medpomnilnik
 80047b8:	490d      	ldr	r1, [pc, #52]	; (80047f0 <SCI_init+0x50>)
 80047ba:	480e      	ldr	r0, [pc, #56]	; (80047f4 <SCI_init+0x54>)
 80047bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c0:	f000 f860 	bl	8004884 <BUF_init>
		BUF_init( &SCI_TX_buf_handle, SCI_TX_buffer, SCI_TX_BUF_LEN);	// TX SCI medpomnilnik
 80047c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047c8:	490b      	ldr	r1, [pc, #44]	; (80047f8 <SCI_init+0x58>)
 80047ca:	480c      	ldr	r0, [pc, #48]	; (80047fc <SCI_init+0x5c>)
 80047cc:	f000 f85a 	bl	8004884 <BUF_init>
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
 80047d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80047d6:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047da:	e842 3100 	strex	r1, r3, [r2]
 80047de:	2900      	cmp	r1, #0
 80047e0:	d1f7      	bne.n	80047d2 <SCI_init+0x32>
		LL_USART_EnableIT_RXNE_RXFNE (SCI.enota); //omogoci prekinitev

}
 80047e2:	bd10      	pop	{r4, pc}
 80047e4:	20000080 	.word	0x20000080
 80047e8:	200003cc 	.word	0x200003cc
 80047ec:	40004800 	.word	0x40004800
 80047f0:	200005d0 	.word	0x200005d0
 80047f4:	200007d0 	.word	0x200007d0
 80047f8:	200003d0 	.word	0x200003d0
 80047fc:	200007e8 	.word	0x200007e8

08004800 <_write>:
// Funkcija SCI_send_bytes() pošlje zaporedje bajtov preko SCI vmesnika.
// Lokacija podatkov zapošiljanje je podana z vhodnim argumentom "*data",
// dolžina podatkov za pošiljanje pa je podano z vhodnim argumentom "size".
void SCI_send_bytes(uint8_t *data, uint32_t size)
{
	for( int i = 0; i< size; i++ )
 8004800:	4610      	mov	r0, r2
 8004802:	b172      	cbz	r2, 8004822 <_write+0x22>
	while( LL_USART_IsActiveFlag_TXE_TXFNF(SCI.enota) == 0 );
 8004804:	4b07      	ldr	r3, [pc, #28]	; (8004824 <_write+0x24>)
// redefiniramo _write() funkcijo pravzaprav priredimo uporabo printf() funkcije
// tako, da pošilja sporočila na točno tak način, kakor to sami želimo.
// In mi želimo uporabljati funkcijo printf() tako, da bomo s pomočjo nje
// pošiljali formatirana sporočila preko SCI vmesnika.
int _write(int file, char *ptr, int len)
{
 8004806:	b470      	push	{r4, r5, r6}
 8004808:	3901      	subs	r1, #1
	while( LL_USART_IsActiveFlag_TXE_TXFNF(SCI.enota) == 0 );
 800480a:	681c      	ldr	r4, [r3, #0]
 800480c:	188e      	adds	r6, r1, r2
		SCI_send_byte(*(data+i));
 800480e:	f811 5f01 	ldrb.w	r5, [r1, #1]!
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004812:	69e3      	ldr	r3, [r4, #28]
 8004814:	061b      	lsls	r3, r3, #24
 8004816:	d5fc      	bpl.n	8004812 <_write+0x12>
	for( int i = 0; i< size; i++ )
 8004818:	428e      	cmp	r6, r1
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 800481a:	62a5      	str	r5, [r4, #40]	; 0x28
 800481c:	d1f7      	bne.n	800480e <_write+0xe>

	// Funkcija _write() mora vrniti število uspešno poslanih
	// znakov. Tu poenostavimo in privzamemo, da je bilo uspešno
	// poslanih vseh "len" znakov.
	return len;
}
 800481e:	bc70      	pop	{r4, r5, r6}
 8004820:	4770      	bx	lr
 8004822:	4770      	bx	lr
 8004824:	200003cc 	.word	0x200003cc

08004828 <SCI_receive_char_Callback>:

	// Ko preko USART vmesnika prejmemo nov podatek, ga shranimo v sprejemni RX medpomnilnik SCI vmesnika.


	// Najprej z uporabo LL funkcije preberemo novo-sprejeti podatek in ga shranimo v pomožno spremenljivko.
	received_data = LL_USART_ReceiveData8(SCI.enota);
 8004828:	4b03      	ldr	r3, [pc, #12]	; (8004838 <SCI_receive_char_Callback+0x10>)

	// Nato pa ta podatek shranimo v sprejemni RX medpomnilnik SCI vmesnika za nadaljno obdelavo kasneje.
	BUF_store_byte( &SCI_RX_buf_handle, received_data );
 800482a:	4804      	ldr	r0, [pc, #16]	; (800483c <SCI_receive_char_Callback+0x14>)
	received_data = LL_USART_ReceiveData8(SCI.enota);
 800482c:	681b      	ldr	r3, [r3, #0]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800482e:	6a59      	ldr	r1, [r3, #36]	; 0x24
	BUF_store_byte( &SCI_RX_buf_handle, received_data );
 8004830:	b2c9      	uxtb	r1, r1
 8004832:	f000 b82f 	b.w	8004894 <BUF_store_byte>
 8004836:	bf00      	nop
 8004838:	200003cc 	.word	0x200003cc
 800483c:	200007d0 	.word	0x200007d0

08004840 <SCI_transmit_char_Callback>:
}


void SCI_transmit_char_Callback(void)
{
 8004840:	b500      	push	{lr}
 8004842:	b083      	sub	sp, #12
	buf_rtrn_codes_t	return_code;			// sem shranimo rezultat poskusa branja iz medpomnilnika


	// Najprej poskusimo prebrati naslednji podatek, ki ga želimo poslati.
	// Zapomnimo si "vrnjeno kodo" (angl. return code), ki jo vrne BUF_ funkcija.
	return_code = BUF_get_byte( &SCI_TX_buf_handle, &data_to_transmit );
 8004844:	480d      	ldr	r0, [pc, #52]	; (800487c <SCI_transmit_char_Callback+0x3c>)
 8004846:	f10d 0107 	add.w	r1, sp, #7
 800484a:	f000 f83d 	bl	80048c8 <BUF_get_byte>

	// S pomočjo "vrnjene kode" ugotovimo, če sedaj imamo na voljo naslednji podatek za pošiljanje.
	if ( return_code == BUFFER_OK )
 800484e:	b920      	cbnz	r0, 800485a <SCI_transmit_char_Callback+0x1a>
	{
		// In če je na voljo naslednji podatek, ga kar vpišemo v oddajni podatkovni register
		// USART vmesnika s pomočjo LL funkcije.

		LL_USART_TransmitData8(SCI.enota, data_to_transmit);
 8004850:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <SCI_transmit_char_Callback+0x40>)
  USARTx->TDR = Value;
 8004852:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	629a      	str	r2, [r3, #40]	; 0x28


	// Po vsakem podatku, ki ga pošljemo, je potrebno preveriti, če smo morda
	// poslali zadnji podatek. To je pomembno, saj moramo v tem primeru ustaviti
	// "avtomatsko" pošiljanje podatkov s pomočjo prekinitev.
	if ( BUF_get_data_size( &SCI_TX_buf_handle ) == 0)
 800485a:	4808      	ldr	r0, [pc, #32]	; (800487c <SCI_transmit_char_Callback+0x3c>)
 800485c:	f000 f854 	bl	8004908 <BUF_get_data_size>
 8004860:	b948      	cbnz	r0, 8004876 <SCI_transmit_char_Callback+0x36>
		// prekinitve ob sprostitvi oddajnega podatkovnega registra (TXE),
		// saj nimamo več kaj pošiljati. Tako onemogočimo avtomatsko
		// pošiljanje iz oddajnega TX medpomnilnika SCI vmesnika s pomočjo prekinitev.
		// Uporabimo ustrezno LL funkcijo za onemogočitev prekinitve.

		LL_USART_DisableIT_TXE_TXFNF (SCI.enota);
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <SCI_transmit_char_Callback+0x40>)
 8004864:	681a      	ldr	r2, [r3, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800486a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800486e:	e842 3100 	strex	r1, r3, [r2]
 8004872:	2900      	cmp	r1, #0
 8004874:	d1f7      	bne.n	8004866 <SCI_transmit_char_Callback+0x26>
	}

}
 8004876:	b003      	add	sp, #12
 8004878:	f85d fb04 	ldr.w	pc, [sp], #4
 800487c:	200007e8 	.word	0x200007e8
 8004880:	200003cc 	.word	0x200003cc

08004884 <BUF_init>:
}


buf_rtrn_codes_t BUF_flush(buf_handle_t *buf_handle)
{
	buf_handle->front = 0;
 8004884:	2300      	movs	r3, #0
	buf_handle->rear = 0;
 8004886:	e9c0 3302 	strd	r3, r3, [r0, #8]
	buf_handle->length = buf_length;
 800488a:	6042      	str	r2, [r0, #4]
	buf_handle->data_size = 0;
	buf_handle->free_size = buf_handle->length;
 800488c:	6142      	str	r2, [r0, #20]
	buf_handle->buffer = buffer_ptr;
 800488e:	6001      	str	r1, [r0, #0]
	buf_handle->data_size = 0;
 8004890:	6103      	str	r3, [r0, #16]
}
 8004892:	4770      	bx	lr

08004894 <BUF_store_byte>:

// Store one byte of data.
buf_rtrn_codes_t BUF_store_byte(buf_handle_t *buf_handle, uint8_t data)
{
	// check if buffer already full
	if (buf_handle->data_size >= buf_handle->length)
 8004894:	6903      	ldr	r3, [r0, #16]
 8004896:	6842      	ldr	r2, [r0, #4]
 8004898:	4293      	cmp	r3, r2
 800489a:	d210      	bcs.n	80048be <BUF_store_byte+0x2a>
		return BUFFER_FULL;	//-> if so, return error
	}
	else
	{
		// check special case: buffer empty
		if (buf_handle->data_size == 0)
 800489c:	b18b      	cbz	r3, 80048c2 <BUF_store_byte+0x2e>
			buf_handle->rear = 0;
		}
		else
		{
			// increase rear pointer and apply modular arithmetics
			buf_handle->rear++;
 800489e:	6883      	ldr	r3, [r0, #8]
 80048a0:	3301      	adds	r3, #1

			if (buf_handle->rear >= buf_handle->length)
 80048a2:	429a      	cmp	r2, r3
			{
				buf_handle->rear = 0;
 80048a4:	bf98      	it	ls
 80048a6:	2300      	movls	r3, #0
 80048a8:	6083      	str	r3, [r0, #8]
			}
		}


		// by now rear pointer is ready for new data -> store data
		buf_handle->buffer[buf_handle->rear] = data;
 80048aa:	6802      	ldr	r2, [r0, #0]
 80048ac:	54d1      	strb	r1, [r2, r3]

		// update data size and free size
		buf_handle->data_size++;
		buf_handle->free_size--;
 80048ae:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
		buf_handle->data_size++;
 80048b2:	3201      	adds	r2, #1
		buf_handle->free_size--;
 80048b4:	3b01      	subs	r3, #1
 80048b6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80048ba:	2000      	movs	r0, #0
 80048bc:	4770      	bx	lr
		return BUFFER_FULL;	//-> if so, return error
 80048be:	2001      	movs	r0, #1

		return BUFFER_OK;
	}

}
 80048c0:	4770      	bx	lr
			buf_handle->rear = 0;
 80048c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80048c6:	e7f0      	b.n	80048aa <BUF_store_byte+0x16>

080048c8 <BUF_get_byte>:

// Read one byte of data and store it to the given location.
buf_rtrn_codes_t BUF_get_byte(buf_handle_t *buf_handle, uint8_t *data)
{
	// first check if buffer empty
	if (buf_handle->data_size == 0)
 80048c8:	6903      	ldr	r3, [r0, #16]
 80048ca:	b1d3      	cbz	r3, 8004902 <BUF_get_byte+0x3a>
{
 80048cc:	b410      	push	{r4}
	{
		return BUFFER_EMPTY;	// return error code and exit this function
	}

	// else read and return data from the buffer "front"
	*data = buf_handle->buffer[buf_handle->front];	//Get data from the queue "front"
 80048ce:	6802      	ldr	r2, [r0, #0]
 80048d0:	68c3      	ldr	r3, [r0, #12]
 80048d2:	5cd3      	ldrb	r3, [r2, r3]
 80048d4:	700b      	strb	r3, [r1, #0]

	// update data size and free size
	buf_handle->data_size--;
	buf_handle->free_size++;
 80048d6:	e9d0 1204 	ldrd	r1, r2, [r0, #16]


	// update the "front" value NOT using the modulo arithmetics but
	// using if-then instead because it is faster on uC
	buf_handle->front++;
 80048da:	68c3      	ldr	r3, [r0, #12]

	if (buf_handle->front >= buf_handle->length)
 80048dc:	6844      	ldr	r4, [r0, #4]
	buf_handle->front++;
 80048de:	3301      	adds	r3, #1
	buf_handle->data_size--;
 80048e0:	3901      	subs	r1, #1
	buf_handle->free_size++;
 80048e2:	3201      	adds	r2, #1
	if (buf_handle->front >= buf_handle->length)
 80048e4:	42a3      	cmp	r3, r4
	buf_handle->free_size++;
 80048e6:	e9c0 1204 	strd	r1, r2, [r0, #16]
	buf_handle->front++;
 80048ea:	60c3      	str	r3, [r0, #12]
	if (buf_handle->front >= buf_handle->length)
 80048ec:	d203      	bcs.n	80048f6 <BUF_get_byte+0x2e>
	{
		buf_handle->front = 0;
	}

	return BUFFER_OK;	// return BUFFER_OK error code
 80048ee:	2000      	movs	r0, #0

}
 80048f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048f4:	4770      	bx	lr
		buf_handle->front = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60c3      	str	r3, [r0, #12]
}
 80048fa:	f85d 4b04 	ldr.w	r4, [sp], #4
	return BUFFER_OK;	// return BUFFER_OK error code
 80048fe:	4618      	mov	r0, r3
}
 8004900:	4770      	bx	lr
		return BUFFER_EMPTY;	// return error code and exit this function
 8004902:	2002      	movs	r0, #2
}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop

08004908 <BUF_get_data_size>:

// Get the number of bytes currently in the buffer queue.
uint32_t BUF_get_data_size(buf_handle_t *buf_handle)
{
	return buf_handle->data_size;
}
 8004908:	6900      	ldr	r0, [r0, #16]
 800490a:	4770      	bx	lr

0800490c <JOY_init>:
// merjenje signalov "joysticka".
// Mimogrede: inicializacijska funkcija se razlikuje od prejšnjih inicializacijskih funkcij
// v tem, da za vhodna argumenta funkcije prejme kazalce na "handle" strukture, ki so
// potrebne za delo s HAL funkcijami.
void JOY_init(ADC_HandleTypeDef *ADC_handle, TIM_HandleTypeDef *timer_handle)
{
 800490c:	b570      	push	{r4, r5, r6, lr}
		// Definirajte, kako so posamezne tipke povezane na GPIO pine in porte.
		// To storite tako, da pravilno inicializirate "handle" strukturo tipke "joysticka".
		// Uporabite makroje "GPIOn" in "LL_GPIO_PIN_n" iz nizko-nivojske LL knjižnice.
		// Postopate popolnoma enako, kot smo to storili v primeru tipkovnice.

		joystick.button.port = GPIOC;
 800490e:	4c13      	ldr	r4, [pc, #76]	; (800495c <JOY_init+0x50>)
 8004910:	4b13      	ldr	r3, [pc, #76]	; (8004960 <JOY_init+0x54>)
 8004912:	6023      	str	r3, [r4, #0]
		joystick.position_raw_range[Y] = joystick.position_raw_max[Y] - joystick.position_raw_min[Y];

		// Shranimo si kazalce na "handle" strukturi za AD pretvornik in časovnik,
		// ki ju uporabljamo pri implementaciji "joystick" modula.
		// Ti dve infromaciji seveda shranimo v spremenljivki "joystick handle" strukture.
		joystick.ADC = ADC_handle;
 8004914:	6220      	str	r0, [r4, #32]
		joystick.position_raw_range[X] = joystick.position_raw_max[X] - joystick.position_raw_min[X];
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <JOY_init+0x58>)
		joystick.position_raw_max[X] = 3330;
 8004918:	4d13      	ldr	r5, [pc, #76]	; (8004968 <JOY_init+0x5c>)
		joystick.timer = timer_handle;
 800491a:	61e1      	str	r1, [r4, #28]
		joystick.button.pin =  LL_GPIO_PIN_13;
 800491c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		joystick.button.state_new = 0;
 8004920:	2000      	movs	r0, #0
		joystick.button.pin =  LL_GPIO_PIN_13;
 8004922:	6062      	str	r2, [r4, #4]
		joystick.button.state_new = 0;
 8004924:	8120      	strh	r0, [r4, #8]

	// 3. Inicializiramo medpomnilnik za tipke "joysticka"

		// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
		// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 8004926:	2210      	movs	r2, #16
		joystick.position_raw_min[X] = 916;
 8004928:	4e10      	ldr	r6, [pc, #64]	; (800496c <JOY_init+0x60>)
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 800492a:	4911      	ldr	r1, [pc, #68]	; (8004970 <JOY_init+0x64>)
 800492c:	4811      	ldr	r0, [pc, #68]	; (8004974 <JOY_init+0x68>)
		joystick.position_raw_min[X] = 916;
 800492e:	6126      	str	r6, [r4, #16]
		joystick.position_raw_range[X] = joystick.position_raw_max[X] - joystick.position_raw_min[X];
 8004930:	e9c4 5305 	strd	r5, r3, [r4, #20]
		BUF_init( &joy_btn_buf_handle, joy_btn_buffer, JOY_BTN_BUF_LEN);
 8004934:	f7ff ffa6 	bl	8004884 <BUF_init>
		// Pri tem uporabljamo funkcije HAL knjižnice.


		// Najprej kalibriramo AD pretvornik, da bodo meritve pozicije "joysticka" bolj točne.
		// Kalibracijo izvedemo za "single-ended" vhodne signale.
		HAL_ADCEx_Calibration_Start( joystick.ADC, ADC_SINGLE_ENDED );
 8004938:	6a20      	ldr	r0, [r4, #32]
 800493a:	217f      	movs	r1, #127	; 0x7f
 800493c:	f7fd fd60 	bl	8002400 <HAL_ADCEx_Calibration_Start>
		// AD pretovrnik v DMA načinu).
		// To storimo s klicem spodnje HAL funkcije, ki DMA enoti
		// "sporoči", s katerim AD pretvornikom bo delala, na katero mesto v pomnilniku
		// naj shranjuje rezultate AD pretvorbe ter koliko teh rezultatov bo morala prenesti
		// ob vsaki končani AD pretvorbi.
		HAL_ADC_Start_DMA( joystick.ADC, (uint32_t *) joystick.position_raw, 2 );
 8004940:	f104 010c 	add.w	r1, r4, #12
 8004944:	6a20      	ldr	r0, [r4, #32]
 8004946:	2202      	movs	r2, #2
 8004948:	f7fd fc98 	bl	800227c <HAL_ADC_Start_DMA>


		// Na koncu pa še zaženemo časovnik, ki bo prožil AD pretvorbe.
		// S tem smo pravzaprav sprožili "avtomatsko" merjenje pozicije "joysticka".
		HAL_TIM_Base_Start( joystick.timer );
 800494c:	69e0      	ldr	r0, [r4, #28]
 800494e:	f7fe ff63 	bl	8003818 <HAL_TIM_Base_Start>
		// Torej je smiselno počakati milisekundo dlje.

	HAL_Delay(11);


}
 8004952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_Delay(11);
 8004956:	200b      	movs	r0, #11
 8004958:	f7fd b836 	b.w	80019c8 <HAL_Delay>
 800495c:	20000828 	.word	0x20000828
 8004960:	48000800 	.word	0x48000800
 8004964:	0a24096e 	.word	0x0a24096e
 8004968:	0cef0d02 	.word	0x0cef0d02
 800496c:	02cb0394 	.word	0x02cb0394
 8004970:	20000800 	.word	0x20000800
 8004974:	20000810 	.word	0x20000810

08004978 <JOY_get_axis_position>:
	int16_t	relative_position;


	// Izračun relativne pozicije osi na procent natančno.
	// Pazite: uporablja se celoštevilska aritmetika! Operacija deljenja vrne celoštevilski količnik brez deleža zaradi ostanka!
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8004978:	4a1b      	ldr	r2, [pc, #108]	; (80049e8 <JOY_get_axis_position+0x70>)
{
 800497a:	b410      	push	{r4}
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 800497c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8004980:	f100 0108 	add.w	r1, r0, #8
 8004984:	899b      	ldrh	r3, [r3, #12]
 8004986:	f832 4011 	ldrh.w	r4, [r2, r1, lsl #1]


	// Poskrbimo še, da se vrnjena vrednost nahaja na smiselnem intervalu [0..100].

		// Obravnavamo primer, ko je trenutna meritev pozicije manjša od kalibrirane minimalne vrednosti.
		if ( joystick.position_raw[axis] < joystick.position_raw_min[axis] )
 800498a:	42a3      	cmp	r3, r4
{
 800498c:	b083      	sub	sp, #12
		if ( joystick.position_raw[axis] < joystick.position_raw_min[axis] )
 800498e:	d325      	bcc.n	80049dc <JOY_get_axis_position+0x64>
		{
			return 0 ;
		}

		// Obravnavamo primer, ko je trenutna meritev pozicije večja od kalibrirane maksimalne vrednosti.
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 8004990:	eb02 0141 	add.w	r1, r2, r1, lsl #1
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8004994:	300c      	adds	r0, #12
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 8004996:	8889      	ldrh	r1, [r1, #4]
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 8004998:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
		else if ( joystick.position_raw[axis] > joystick.position_raw_max[axis] )
 800499c:	4299      	cmp	r1, r3
 800499e:	d318      	bcc.n	80049d2 <JOY_get_axis_position+0x5a>
	relative_position = ((float)(joystick.position_raw[axis] - joystick.position_raw_min[axis]) / (float)joystick.position_raw_range[axis]) * 100;
 80049a0:	1b1b      	subs	r3, r3, r4
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	ee07 2a10 	vmov	s14, r2
 80049aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80049b2:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 80049ec <JOY_get_axis_position+0x74>
 80049b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80049ba:	ee66 7a86 	vmul.f32	s15, s13, s12
 80049be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049c2:	edcd 7a01 	vstr	s15, [sp, #4]
		}

		// Ostane le še primer, ko se izračunana relativna pozicija nahaja na intervalu [0..100].
		else
		{
			return relative_position;
 80049c6:	f89d 0004 	ldrb.w	r0, [sp, #4]
		}

}
 80049ca:	b003      	add	sp, #12
 80049cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049d0:	4770      	bx	lr
			return 100 ;
 80049d2:	2064      	movs	r0, #100	; 0x64
}
 80049d4:	b003      	add	sp, #12
 80049d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049da:	4770      	bx	lr
			return 0 ;
 80049dc:	2000      	movs	r0, #0
}
 80049de:	b003      	add	sp, #12
 80049e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000828 	.word	0x20000828
 80049ec:	42c80000 	.word	0x42c80000

080049f0 <KBD_init>:
	// buttons on port C
	keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
	keyboard.buttons[ BTN_ESC ].port = GPIOC;

	keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
	keyboard.buttons[ BTN_OK ].port = GPIOC;
 80049f0:	4b13      	ldr	r3, [pc, #76]	; (8004a40 <KBD_init+0x50>)
 80049f2:	4a14      	ldr	r2, [pc, #80]	; (8004a44 <KBD_init+0x54>)

	// 3. Inicializiramo še medpomnilnik tipkovnice.

	// Uporabimo funkcijo BUF_init(), ki določi, katera tabela se bo uporabljala kot
	// ciklični medpomnilnik ter kako dolg bo ta medpomnilnik.
	BUF_init( &kbd_buf_handle, kbd_buffer, NUM_OF_BTN);
 80049f4:	4914      	ldr	r1, [pc, #80]	; (8004a48 <KBD_init+0x58>)
 80049f6:	4815      	ldr	r0, [pc, #84]	; (8004a4c <KBD_init+0x5c>)
{
 80049f8:	b430      	push	{r4, r5}
	keyboard.buttons[ BTN_OK ].pin = LL_GPIO_PIN_15 ;
 80049fa:	f44f 4400 	mov.w	r4, #32768	; 0x8000
 80049fe:	605c      	str	r4, [r3, #4]
	keyboard.buttons[ BTN_ESC ].pin = LL_GPIO_PIN_14;
 8004a00:	f44f 4480 	mov.w	r4, #16384	; 0x4000
 8004a04:	611c      	str	r4, [r3, #16]
	keyboard.buttons[ BTN_UP ].pin = LL_GPIO_PIN_0 ;
 8004a06:	2401      	movs	r4, #1
 8004a08:	61dc      	str	r4, [r3, #28]
	keyboard.buttons[ BTN_DOWN ].pin = LL_GPIO_PIN_1 ;
 8004a0a:	2402      	movs	r4, #2
 8004a0c:	629c      	str	r4, [r3, #40]	; 0x28
	keyboard.buttons[ BTN_RIGHT ].pin = LL_GPIO_PIN_8 ;
 8004a0e:	f44f 7480 	mov.w	r4, #256	; 0x100
 8004a12:	635c      	str	r4, [r3, #52]	; 0x34
	keyboard.buttons[ BTN_LEFT ].pin = LL_GPIO_PIN_6 ;
 8004a14:	2440      	movs	r4, #64	; 0x40
 8004a16:	641c      	str	r4, [r3, #64]	; 0x40
		keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8004a18:	f240 1401 	movw	r4, #257	; 0x101
	keyboard.buttons[ BTN_UP ].port = GPIOG;
 8004a1c:	4d0c      	ldr	r5, [pc, #48]	; (8004a50 <KBD_init+0x60>)
		keyboard.buttons[i].state_old = BTN_SIG_VALUE_RELEASED;
 8004a1e:	811c      	strh	r4, [r3, #8]
 8004a20:	829c      	strh	r4, [r3, #20]
 8004a22:	841c      	strh	r4, [r3, #32]
 8004a24:	859c      	strh	r4, [r3, #44]	; 0x2c
 8004a26:	871c      	strh	r4, [r3, #56]	; 0x38
 8004a28:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	keyboard.buttons[ BTN_OK ].port = GPIOC;
 8004a2c:	601a      	str	r2, [r3, #0]
	keyboard.buttons[ BTN_ESC ].port = GPIOC;
 8004a2e:	60da      	str	r2, [r3, #12]
	keyboard.buttons[ BTN_UP ].port = GPIOG;
 8004a30:	619d      	str	r5, [r3, #24]
	keyboard.buttons[ BTN_DOWN ].port = GPIOG;
 8004a32:	625d      	str	r5, [r3, #36]	; 0x24
	keyboard.buttons[ BTN_RIGHT ].port = GPIOG;
 8004a34:	631d      	str	r5, [r3, #48]	; 0x30
	keyboard.buttons[ BTN_LEFT ].port = GPIOG;
 8004a36:	63dd      	str	r5, [r3, #60]	; 0x3c
	BUF_init( &kbd_buf_handle, kbd_buffer, NUM_OF_BTN);
 8004a38:	2206      	movs	r2, #6

}
 8004a3a:	bc30      	pop	{r4, r5}
	BUF_init( &kbd_buf_handle, kbd_buffer, NUM_OF_BTN);
 8004a3c:	f7ff bf22 	b.w	8004884 <BUF_init>
 8004a40:	2000084c 	.word	0x2000084c
 8004a44:	48000800 	.word	0x48000800
 8004a48:	200008ac 	.word	0x200008ac
 8004a4c:	20000894 	.word	0x20000894
 8004a50:	48001800 	.word	0x48001800

08004a54 <KBD_scan>:
// Funkcija KBD_scan() prebere trenutno stanje tipk v tipkovnici; ugotovi,
// katere tipke so bile pritisnjene ter shrani to informacijo v medpomnilnik
// tipkovnice, da se bo kasneje lahko sistem odzval na pritisk teh tipk.
//
void KBD_scan(void)
{
 8004a54:	b510      	push	{r4, lr}
	for(int i=0; i < NUM_OF_BTN; i++)
	{
		// Znotraj zanke delamo trenutno z i-to tipko. Spremenljivka "i" je pomožni števec zanke.

		// Trenutno, novo stanje tipke postane sedaj staro stanje tipke
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004a56:	4c41      	ldr	r4, [pc, #260]	; (8004b5c <KBD_scan+0x108>)

		// in novo, trenutno stanje tipke se prebere iz ustreznega digitalne GPIO vhoda.
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a58:	e9d4 3200 	ldrd	r3, r2, [r4]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8004a5c:	6919      	ldr	r1, [r3, #16]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004a5e:	7a63      	ldrb	r3, [r4, #9]
 8004a60:	7223      	strb	r3, [r4, #8]
 8004a62:	438a      	bics	r2, r1
 8004a64:	d04a      	beq.n	8004afc <KBD_scan+0xa8>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a66:	2100      	movs	r1, #0



		// Sedaj je potrebno preveriti, ali se je za i-to tipko zgodil pritisk. Pri tem si pomagajte s starim in
		// trenutnim stanjem tipke. Pomaga vam lahko tudi pomožni naštevni tip button_sig_value_t.
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004a68:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a6a:	7261      	strb	r1, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004a6c:	d05f      	beq.n	8004b2e <KBD_scan+0xda>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a6e:	68e3      	ldr	r3, [r4, #12]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004a70:	7d61      	ldrb	r1, [r4, #21]
 8004a72:	7521      	strb	r1, [r4, #20]
 8004a74:	691a      	ldr	r2, [r3, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	4393      	bics	r3, r2
 8004a7a:	d03c      	beq.n	8004af6 <KBD_scan+0xa2>
 8004a7c:	2300      	movs	r3, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004a7e:	2901      	cmp	r1, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a80:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004a82:	d058      	beq.n	8004b36 <KBD_scan+0xe2>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a84:	69a2      	ldr	r2, [r4, #24]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004a86:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004a8a:	f884 3020 	strb.w	r3, [r4, #32]
 8004a8e:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a90:	69e2      	ldr	r2, [r4, #28]
 8004a92:	438a      	bics	r2, r1
 8004a94:	d039      	beq.n	8004b0a <KBD_scan+0xb6>
 8004a96:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004a98:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004a9a:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004a9e:	d04e      	beq.n	8004b3e <KBD_scan+0xea>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004aa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004aa2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8004aa6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8004aaa:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004aac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004aae:	438a      	bics	r2, r1
 8004ab0:	d027      	beq.n	8004b02 <KBD_scan+0xae>
 8004ab2:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004ab4:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ab6:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004aba:	d045      	beq.n	8004b48 <KBD_scan+0xf4>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004abc:	6b22      	ldr	r2, [r4, #48]	; 0x30
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004abe:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004ac2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004ac6:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ac8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004aca:	438a      	bics	r2, r1
 8004acc:	d025      	beq.n	8004b1a <KBD_scan+0xc6>
 8004ace:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004ad0:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ad2:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004ad6:	d03c      	beq.n	8004b52 <KBD_scan+0xfe>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ad8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004ada:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ade:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004ae2:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ae4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004ae6:	438a      	bics	r2, r1
 8004ae8:	d013      	beq.n	8004b12 <KBD_scan+0xbe>
 8004aea:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004aec:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004aee:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004af2:	d016      	beq.n	8004b22 <KBD_scan+0xce>

		}

	}

}
 8004af4:	bd10      	pop	{r4, pc}
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004af6:	2301      	movs	r3, #1
 8004af8:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004afa:	e7c3      	b.n	8004a84 <KBD_scan+0x30>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004afc:	2301      	movs	r3, #1
 8004afe:	7263      	strb	r3, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004b00:	e7b5      	b.n	8004a6e <KBD_scan+0x1a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b02:	2301      	movs	r3, #1
 8004b04:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004b08:	e7d8      	b.n	8004abc <KBD_scan+0x68>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004b10:	e7c6      	b.n	8004aa0 <KBD_scan+0x4c>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b12:	2301      	movs	r3, #1
 8004b14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8004b18:	bd10      	pop	{r4, pc}
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004b20:	e7da      	b.n	8004ad8 <KBD_scan+0x84>
}
 8004b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			BUF_store_byte( &kbd_buf_handle, i);
 8004b26:	480e      	ldr	r0, [pc, #56]	; (8004b60 <KBD_scan+0x10c>)
 8004b28:	2105      	movs	r1, #5
 8004b2a:	f7ff beb3 	b.w	8004894 <BUF_store_byte>
 8004b2e:	480c      	ldr	r0, [pc, #48]	; (8004b60 <KBD_scan+0x10c>)
 8004b30:	f7ff feb0 	bl	8004894 <BUF_store_byte>
 8004b34:	e79b      	b.n	8004a6e <KBD_scan+0x1a>
 8004b36:	480a      	ldr	r0, [pc, #40]	; (8004b60 <KBD_scan+0x10c>)
 8004b38:	f7ff feac 	bl	8004894 <BUF_store_byte>
 8004b3c:	e7a2      	b.n	8004a84 <KBD_scan+0x30>
 8004b3e:	2102      	movs	r1, #2
 8004b40:	4807      	ldr	r0, [pc, #28]	; (8004b60 <KBD_scan+0x10c>)
 8004b42:	f7ff fea7 	bl	8004894 <BUF_store_byte>
 8004b46:	e7ab      	b.n	8004aa0 <KBD_scan+0x4c>
 8004b48:	2103      	movs	r1, #3
 8004b4a:	4805      	ldr	r0, [pc, #20]	; (8004b60 <KBD_scan+0x10c>)
 8004b4c:	f7ff fea2 	bl	8004894 <BUF_store_byte>
 8004b50:	e7b4      	b.n	8004abc <KBD_scan+0x68>
 8004b52:	2104      	movs	r1, #4
 8004b54:	4802      	ldr	r0, [pc, #8]	; (8004b60 <KBD_scan+0x10c>)
 8004b56:	f7ff fe9d 	bl	8004894 <BUF_store_byte>
 8004b5a:	e7bd      	b.n	8004ad8 <KBD_scan+0x84>
 8004b5c:	2000084c 	.word	0x2000084c
 8004b60:	20000894 	.word	0x20000894

08004b64 <KBD_get_button_state>:
	// je parameter "state_new" za posamezne tipke vedno pravilno določen in smiseln.

	// Torej trenutno stanje tipke vam je že na voljo in je shranjeno v "state_new"
	// parametru ustrezne "handle" strukture tipke.

	return keyboard.buttons[button].state_new;
 8004b64:	4b03      	ldr	r3, [pc, #12]	; (8004b74 <KBD_get_button_state+0x10>)
 8004b66:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004b6a:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
 8004b6e:	7a40      	ldrb	r0, [r0, #9]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	2000084c 	.word	0x2000084c

08004b78 <KBD_demo_toggle_LEDs_if_buttons_pressed>:
// in se na te pritiske odzove s spremembo stanja ustrezne LEDice ("toggle").
//
// PAZITE: demo funkcija ne izvaja skeniranja tipkovnice! To je potrebno
// izvesti zunaj te funkcije.
void KBD_demo_toggle_LEDs_if_buttons_pressed(void)
{
 8004b78:	b510      	push	{r4, lr}
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004b7a:	4c5d      	ldr	r4, [pc, #372]	; (8004cf0 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x178>)
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b7c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8004b80:	6919      	ldr	r1, [r3, #16]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004b82:	7a63      	ldrb	r3, [r4, #9]
 8004b84:	7223      	strb	r3, [r4, #8]
 8004b86:	438a      	bics	r2, r1
{
 8004b88:	b082      	sub	sp, #8
 8004b8a:	f000 8082 	beq.w	8004c92 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x11a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b8e:	2100      	movs	r1, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004b90:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b92:	7261      	strb	r1, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004b94:	f000 8095 	beq.w	8004cc2 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x14a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004b98:	68e3      	ldr	r3, [r4, #12]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004b9a:	7d61      	ldrb	r1, [r4, #21]
 8004b9c:	7521      	strb	r1, [r4, #20]
 8004b9e:	691a      	ldr	r2, [r3, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	4393      	bics	r3, r2
 8004ba4:	d072      	beq.n	8004c8c <KBD_demo_toggle_LEDs_if_buttons_pressed+0x114>
 8004ba6:	2300      	movs	r3, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004ba8:	2901      	cmp	r1, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004baa:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004bac:	f000 808d 	beq.w	8004cca <KBD_demo_toggle_LEDs_if_buttons_pressed+0x152>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bb0:	69a2      	ldr	r2, [r4, #24]
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004bb2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8004bb6:	f884 3020 	strb.w	r3, [r4, #32]
 8004bba:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bbc:	69e2      	ldr	r2, [r4, #28]
 8004bbe:	438a      	bics	r2, r1
 8004bc0:	d06e      	beq.n	8004ca0 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x128>
 8004bc2:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004bc4:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bc6:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004bca:	f000 8082 	beq.w	8004cd2 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x15a>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bce:	6a62      	ldr	r2, [r4, #36]	; 0x24
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004bd0:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8004bd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8004bd8:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bda:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004bdc:	438a      	bics	r2, r1
 8004bde:	d05b      	beq.n	8004c98 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x120>
 8004be0:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004be2:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004be4:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004be8:	d078      	beq.n	8004cdc <KBD_demo_toggle_LEDs_if_buttons_pressed+0x164>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bea:	6b22      	ldr	r2, [r4, #48]	; 0x30
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004bec:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8004bf0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8004bf4:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004bf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	d059      	beq.n	8004cb0 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x138>
 8004bfc:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004bfe:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c00:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004c04:	d06f      	beq.n	8004ce6 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x16e>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c06:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		keyboard.buttons[i].state_old = keyboard.buttons[i].state_new; ;
 8004c08:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004c0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004c10:	6911      	ldr	r1, [r2, #16]
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c12:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004c14:	438a      	bics	r2, r1
 8004c16:	d047      	beq.n	8004ca8 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x130>
 8004c18:	2200      	movs	r2, #0
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004c1a:	2b01      	cmp	r3, #1
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c1c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004c20:	d04a      	beq.n	8004cb8 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x140>
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 8004c22:	4834      	ldr	r0, [pc, #208]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004c24:	f10d 0107 	add.w	r1, sp, #7
 8004c28:	f7ff fe4e 	bl	80048c8 <BUF_get_byte>
 8004c2c:	b9c0      	cbnz	r0, 8004c60 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xe8>
		return pressed_button;
 8004c2e:	f89d 3007 	ldrb.w	r3, [sp, #7]
	// (uporabite ustrezno KBD_ funkcijo).
	pressed_key = KBD_get_pressed_key() ;


	// Če je v pomožni spremenljivki informacija o pritisku dejanske tipke,
	while (pressed_key != BTN_NONE)
 8004c32:	2b07      	cmp	r3, #7
 8004c34:	d014      	beq.n	8004c60 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xe8>
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 8004c36:	4c2f      	ldr	r4, [pc, #188]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
	{
		// spremenimo stanje ustrezne LEDice glede na to, katera tipka
		// je bila pritisnjena.
		switch ( pressed_key )
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	d807      	bhi.n	8004c4c <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
 8004c3c:	e8df f003 	tbb	[pc, r3]
 8004c40:	1a031e22 	.word	0x1a031e22
 8004c44:	1216      	.short	0x1216
		{
		case BTN_UP:
			LED_toggle(LED0);
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7ff fd98 	bl	800477c <LED_toggle>
	if ( BUF_get_byte( &kbd_buf_handle, &pressed_button ) == BUFFER_OK )
 8004c4c:	f10d 0107 	add.w	r1, sp, #7
 8004c50:	4620      	mov	r0, r4
 8004c52:	f7ff fe39 	bl	80048c8 <BUF_get_byte>
 8004c56:	b918      	cbnz	r0, 8004c60 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xe8>
		return pressed_button;
 8004c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
	while (pressed_key != BTN_NONE)
 8004c5c:	2b07      	cmp	r3, #7
 8004c5e:	d1eb      	bne.n	8004c38 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xc0>
		// ki še ni bila obdelana.
		pressed_key = KBD_get_pressed_key() ;

	}

}
 8004c60:	b002      	add	sp, #8
 8004c62:	bd10      	pop	{r4, pc}
			LED_toggle(LED2);
 8004c64:	2002      	movs	r0, #2
 8004c66:	f7ff fd89 	bl	800477c <LED_toggle>
			break;
 8004c6a:	e7ef      	b.n	8004c4c <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED3);
 8004c6c:	2003      	movs	r0, #3
 8004c6e:	f7ff fd85 	bl	800477c <LED_toggle>
			break;
 8004c72:	e7eb      	b.n	8004c4c <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED1);
 8004c74:	2001      	movs	r0, #1
 8004c76:	f7ff fd81 	bl	800477c <LED_toggle>
			break;
 8004c7a:	e7e7      	b.n	8004c4c <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED4);
 8004c7c:	2004      	movs	r0, #4
 8004c7e:	f7ff fd7d 	bl	800477c <LED_toggle>
			break;
 8004c82:	e7e3      	b.n	8004c4c <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
			LED_toggle(LED5);
 8004c84:	2005      	movs	r0, #5
 8004c86:	f7ff fd79 	bl	800477c <LED_toggle>
			break;
 8004c8a:	e7df      	b.n	8004c4c <KBD_demo_toggle_LEDs_if_buttons_pressed+0xd4>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	7563      	strb	r3, [r4, #21]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004c90:	e78e      	b.n	8004bb0 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x38>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c92:	2301      	movs	r3, #1
 8004c94:	7263      	strb	r3, [r4, #9]
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004c96:	e77f      	b.n	8004b98 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x20>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004c98:	2301      	movs	r3, #1
 8004c9a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004c9e:	e7a4      	b.n	8004bea <KBD_demo_toggle_LEDs_if_buttons_pressed+0x72>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004ca6:	e792      	b.n	8004bce <KBD_demo_toggle_LEDs_if_buttons_pressed+0x56>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004cae:	e7b8      	b.n	8004c22 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xaa>
		keyboard.buttons[i].state_new = LL_GPIO_IsInputPinSet(keyboard.buttons[i].port , keyboard.buttons[i].pin);
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if ( keyboard.buttons[i].state_new == BTN_SIG_VALUE_PRESSED && keyboard.buttons[i].state_old == BTN_SIG_VALUE_RELEASED )
 8004cb6:	e7a6      	b.n	8004c06 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x8e>
			BUF_store_byte( &kbd_buf_handle, i);
 8004cb8:	2105      	movs	r1, #5
 8004cba:	480e      	ldr	r0, [pc, #56]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004cbc:	f7ff fdea 	bl	8004894 <BUF_store_byte>
 8004cc0:	e7af      	b.n	8004c22 <KBD_demo_toggle_LEDs_if_buttons_pressed+0xaa>
 8004cc2:	480c      	ldr	r0, [pc, #48]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004cc4:	f7ff fde6 	bl	8004894 <BUF_store_byte>
 8004cc8:	e766      	b.n	8004b98 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x20>
 8004cca:	480a      	ldr	r0, [pc, #40]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004ccc:	f7ff fde2 	bl	8004894 <BUF_store_byte>
 8004cd0:	e76e      	b.n	8004bb0 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x38>
 8004cd2:	2102      	movs	r1, #2
 8004cd4:	4807      	ldr	r0, [pc, #28]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004cd6:	f7ff fddd 	bl	8004894 <BUF_store_byte>
 8004cda:	e778      	b.n	8004bce <KBD_demo_toggle_LEDs_if_buttons_pressed+0x56>
 8004cdc:	2103      	movs	r1, #3
 8004cde:	4805      	ldr	r0, [pc, #20]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004ce0:	f7ff fdd8 	bl	8004894 <BUF_store_byte>
 8004ce4:	e781      	b.n	8004bea <KBD_demo_toggle_LEDs_if_buttons_pressed+0x72>
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	4802      	ldr	r0, [pc, #8]	; (8004cf4 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x17c>)
 8004cea:	f7ff fdd3 	bl	8004894 <BUF_store_byte>
 8004cee:	e78a      	b.n	8004c06 <KBD_demo_toggle_LEDs_if_buttons_pressed+0x8e>
 8004cf0:	2000084c 	.word	0x2000084c
 8004cf4:	20000894 	.word	0x20000894

08004cf8 <UserPixelSetFunction>:
// ------ Definicija dveh temeljnih funkcij za risanje na zaslon -------


// Implementacija funkcije za izris enega samega piksla na zaslon.
void UserPixelSetFunction(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8004cf8:	b500      	push	{lr}
 8004cfa:	b083      	sub	sp, #12
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 8004cfc:	2301      	movs	r3, #1
{
 8004cfe:	9201      	str	r2, [sp, #4]
	ILI9341_SetDisplayWindow(x, y, 1, 1);
 8004d00:	461a      	mov	r2, r3
 8004d02:	f000 f909 	bl	8004f18 <ILI9341_SetDisplayWindow>
	ILI9341_SendData((LCD_IO_Data_t *)&c, 1);
 8004d06:	2101      	movs	r1, #1
 8004d08:	a801      	add	r0, sp, #4
 8004d0a:	f000 f8b1 	bl	8004e70 <ILI9341_SendData>
}
 8004d0e:	b003      	add	sp, #12
 8004d10:	f85d fb04 	ldr.w	pc, [sp], #4

08004d14 <_HW_FillFrame_>:

// Implementacija funkcije za izris pravokotnika na zaslon.
static inline UG_RESULT _HW_FillFrame_(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
	UG_S16 w,h;
	if (x2 > x1) w = x2 - x1;
 8004d14:	4282      	cmp	r2, r0
{
 8004d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (x2 > x1) w = x2 - x1;
 8004d1a:	bfcc      	ite	gt
 8004d1c:	1a17      	subgt	r7, r2, r0
	else
	{
		w = x1 - x2;
 8004d1e:	1a87      	suble	r7, r0, r2
{
 8004d20:	4604      	mov	r4, r0
		w = x1 - x2;
 8004d22:	bfd8      	it	le
 8004d24:	4614      	movle	r4, r2
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8004d26:	2002      	movs	r0, #2
		x1 = x2;
	}
	if (y2 > y1) h = y2 - y1;
 8004d28:	428b      	cmp	r3, r1
 8004d2a:	bfcc      	ite	gt
 8004d2c:	eba3 0801 	subgt.w	r8, r3, r1
	else
	{
		h = y1 - y2;
 8004d30:	eba1 0803 	suble.w	r8, r1, r3
{
 8004d34:	460d      	mov	r5, r1
		h = y1 - y2;
 8004d36:	bfd8      	it	le
 8004d38:	461d      	movle	r5, r3
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8004d3a:	f000 f9f1 	bl	8005120 <ILI9341_GetParam>
	uint32_t pixel_count = w * h;  /* Dejansko št. pikslov */
 8004d3e:	fb08 f307 	mul.w	r3, r8, r7
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8004d42:	4606      	mov	r6, r0
	if(pixel_count > max_count)
 8004d44:	429e      	cmp	r6, r3
 8004d46:	bf28      	it	cs
 8004d48:	461e      	movcs	r6, r3
	ILI9341_SetDisplayWindow(x, y, w, h);
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	4643      	mov	r3, r8
 8004d50:	463a      	mov	r2, r7
 8004d52:	f000 f8e1 	bl	8004f18 <ILI9341_SetDisplayWindow>
	ILI9341_SendRepeatedData(c, pixel_count);
 8004d56:	9b06      	ldr	r3, [sp, #24]
 8004d58:	4631      	mov	r1, r6
 8004d5a:	b298      	uxth	r0, r3
 8004d5c:	f000 f8ce 	bl	8004efc <ILI9341_SendRepeatedData>
	}

	LCD_FillRect(x1, y1, w, h, c);

	return UG_RESULT_OK;
}
 8004d60:	2000      	movs	r0, #0
 8004d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d66:	bf00      	nop

08004d68 <LCD_Init>:
{
 8004d68:	b570      	push	{r4, r5, r6, lr}
	LCD_RST_LOW();
 8004d6a:	4c18      	ldr	r4, [pc, #96]	; (8004dcc <LCD_Init+0x64>)
 8004d6c:	2508      	movs	r5, #8
 8004d6e:	62a5      	str	r5, [r4, #40]	; 0x28
	HAL_Delay(120);
 8004d70:	2078      	movs	r0, #120	; 0x78
 8004d72:	f7fc fe29 	bl	80019c8 <HAL_Delay>
	LCD_RST_HIGH();
 8004d76:	61a5      	str	r5, [r4, #24]
	HAL_Delay(120);
 8004d78:	2078      	movs	r0, #120	; 0x78
 8004d7a:	f7fc fe25 	bl	80019c8 <HAL_Delay>
	ILI9341_Init(ILI9341_COLORSPACE_RBG565, ILI9341_MISKO_ROTATE_0);
 8004d7e:	2103      	movs	r1, #3
 8004d80:	2055      	movs	r0, #85	; 0x55
 8004d82:	f000 f919 	bl	8004fb8 <ILI9341_Init>
	ILI9341_DisplayOn();
 8004d86:	f000 f9bd 	bl	8005104 <ILI9341_DisplayOn>
    LCD_FillRect(0, 0, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT), 0);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f000 f9c8 	bl	8005120 <ILI9341_GetParam>
 8004d90:	4604      	mov	r4, r0
 8004d92:	2001      	movs	r0, #1
 8004d94:	f000 f9c4 	bl	8005120 <ILI9341_GetParam>
 8004d98:	4605      	mov	r5, r0
	uint32_t max_count   = ILI9341_GetParam(LCD_AREA);     /* Št. vseh pikslov     */
 8004d9a:	2002      	movs	r0, #2
 8004d9c:	f000 f9c0 	bl	8005120 <ILI9341_GetParam>
	uint32_t pixel_count = w * h;  /* Dejansko št. pikslov */
 8004da0:	fb05 f604 	mul.w	r6, r5, r4
	if(pixel_count > max_count)
 8004da4:	4286      	cmp	r6, r0
	ILI9341_SetDisplayWindow(x, y, w, h);
 8004da6:	f04f 0100 	mov.w	r1, #0
 8004daa:	bf28      	it	cs
 8004dac:	4606      	movcs	r6, r0
 8004dae:	462b      	mov	r3, r5
 8004db0:	4622      	mov	r2, r4
 8004db2:	4608      	mov	r0, r1
 8004db4:	f000 f8b0 	bl	8004f18 <ILI9341_SetDisplayWindow>
	ILI9341_SendRepeatedData(c, pixel_count);
 8004db8:	4631      	mov	r1, r6
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f000 f89e 	bl	8004efc <ILI9341_SendRepeatedData>
	ILI9341_WaitTransfer();
 8004dc0:	f000 f99c 	bl	80050fc <ILI9341_WaitTransfer>
}
 8004dc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	LCD_BKLT_init();
 8004dc8:	f000 b832 	b.w	8004e30 <LCD_BKLT_init>
 8004dcc:	48000c00 	.word	0x48000c00

08004dd0 <LCD_uGUI_init>:
// ------------ Inicializacija uGUI za delo z našim zaslonom -------------------


// Inicializacija uGUI knjižnice za delo z našim LCD zaslonom.
void LCD_uGUI_init(void)
{
 8004dd0:	b500      	push	{lr}
	// Inicializacija uGUI knjižnice: registracija funkcije za izris enega piksla na zaslon,
	// specifikacija resolucije zaslona.
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8004dd2:	2000      	movs	r0, #0
{
 8004dd4:	b083      	sub	sp, #12
	UG_Init(&gui, UserPixelSetFunction, ILI9341_GetParam(LCD_WIDTH), ILI9341_GetParam(LCD_HEIGHT));
 8004dd6:	f000 f9a3 	bl	8005120 <ILI9341_GetParam>
 8004dda:	9001      	str	r0, [sp, #4]
 8004ddc:	2001      	movs	r0, #1
 8004dde:	f000 f99f 	bl	8005120 <ILI9341_GetParam>
 8004de2:	9a01      	ldr	r2, [sp, #4]
 8004de4:	490c      	ldr	r1, [pc, #48]	; (8004e18 <LCD_uGUI_init+0x48>)
 8004de6:	4603      	mov	r3, r0
 8004de8:	480c      	ldr	r0, [pc, #48]	; (8004e1c <LCD_uGUI_init+0x4c>)
 8004dea:	f001 f941 	bl	8006070 <UG_Init>

	// Nastavitev "default" fontov in barv za besedilo in ozadje.
	UG_FontSelect(&FONT_8X12);
 8004dee:	480c      	ldr	r0, [pc, #48]	; (8004e20 <LCD_uGUI_init+0x50>)
 8004df0:	f001 f972 	bl	80060d8 <UG_FontSelect>
	UG_SetForecolor(C_WHITE);
 8004df4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004df8:	f001 f9ba 	bl	8006170 <UG_SetForecolor>
	UG_SetBackcolor(C_BLACK);
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	f001 f9bd 	bl	800617c <UG_SetBackcolor>

	// Registracija funkcij za izris pravokotnika.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void *)_HW_FillFrame_);
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <LCD_uGUI_init+0x54>)
 8004e04:	2001      	movs	r0, #1
 8004e06:	f001 fba9 	bl	800655c <UG_DriverRegister>
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8004e0a:	2001      	movs	r0, #1
}
 8004e0c:	b003      	add	sp, #12
 8004e0e:	f85d eb04 	ldr.w	lr, [sp], #4
	UG_DriverEnable(DRIVER_FILL_FRAME);
 8004e12:	f001 bbb1 	b.w	8006578 <UG_DriverEnable>
 8004e16:	bf00      	nop
 8004e18:	08004cf9 	.word	0x08004cf9
 8004e1c:	200008cc 	.word	0x200008cc
 8004e20:	08016dc8 	.word	0x08016dc8
 8004e24:	08004d15 	.word	0x08004d15

08004e28 <LL_TIM_OC_SetCompareCH1>:
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e28:	6341      	str	r1, [r0, #52]	; 0x34
}
 8004e2a:	4770      	bx	lr

08004e2c <LL_TIM_OC_GetCompareCH1>:
  return (uint32_t)(READ_REG(TIMx->CCR1));
 8004e2c:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 8004e2e:	4770      	bx	lr

08004e30 <LCD_BKLT_init>:
		// --- Specifikacija časovnika ter kanala časovnika ---
		//
		// Ti dva parametra strukture določimo s pred-definiranima makrojema iz LL knjižnice,
		// podobno kot smo to storili v prejšnjih vajah.
		// Pozor: kanala ne podamo s številko, temveč z masko.
		LCD_backlight.timer = TIM4 ;
 8004e30:	4b0b      	ldr	r3, [pc, #44]	; (8004e60 <LCD_BKLT_init+0x30>)
 8004e32:	4a0c      	ldr	r2, [pc, #48]	; (8004e64 <LCD_BKLT_init+0x34>)
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8004e34:	6819      	ldr	r1, [r3, #0]

		// --- Specifikacija LL funkcij za delo s kanalom časovnika ---
		//
		// Kazalca na funkciji inicializiramo s pomočjo imen LL funkcij za nastavitev in
		// branje vrednosti za primerjavo (angl. compare value).
		LCD_backlight.SetCompare = LL_TIM_OC_SetCompareCH1;
 8004e36:	480c      	ldr	r0, [pc, #48]	; (8004e68 <LCD_BKLT_init+0x38>)
{
 8004e38:	b410      	push	{r4}
 8004e3a:	f041 0101 	orr.w	r1, r1, #1
		LCD_backlight.SetCompare = LL_TIM_OC_SetCompareCH1;
 8004e3e:	6090      	str	r0, [r2, #8]
		LCD_backlight.GetCompare = LL_TIM_OC_GetCompareCH1;


		// --- Specifikacija privzete vrednosti za osvetlitev zaslona ---
		//
		LCD_backlight.default_brightness = 50;		// podano v procentih
 8004e40:	2032      	movs	r0, #50	; 0x32
		LCD_backlight.timer = TIM4 ;
 8004e42:	6013      	str	r3, [r2, #0]
 8004e44:	6019      	str	r1, [r3, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e46:	6358      	str	r0, [r3, #52]	; 0x34
  SET_BIT(TIMx->CCER, Channels);
 8004e48:	6a19      	ldr	r1, [r3, #32]
		LCD_backlight.GetCompare = LL_TIM_OC_GetCompareCH1;
 8004e4a:	4c08      	ldr	r4, [pc, #32]	; (8004e6c <LCD_BKLT_init+0x3c>)
 8004e4c:	60d4      	str	r4, [r2, #12]
		LCD_backlight.timer_channel = 1 ;		// namig: poglejte komentar pri implementaciji funkcije LL_TIM_CC_EnableChannel()
 8004e4e:	2401      	movs	r4, #1
 8004e50:	4321      	orrs	r1, r4
		LCD_backlight.default_brightness = 50;		// podano v procentih
 8004e52:	7410      	strb	r0, [r2, #16]
		LCD_backlight.timer_channel = 1 ;		// namig: poglejte komentar pri implementaciji funkcije LL_TIM_CC_EnableChannel()
 8004e54:	6054      	str	r4, [r2, #4]
		// Uporabite ustrezno LL funkcijo.

			// DOPOLNI
		LL_TIM_CC_EnableChannel(LCD_backlight.timer, LCD_backlight.timer_channel);

}
 8004e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004e5a:	6219      	str	r1, [r3, #32]
 8004e5c:	4770      	bx	lr
 8004e5e:	bf00      	nop
 8004e60:	40000800 	.word	0x40000800
 8004e64:	20000958 	.word	0x20000958
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08004e2d 	.word	0x08004e2d

08004e70 <ILI9341_SendData>:
	FMC_BANK1_SetAddress(*address);
}
#ifdef hLCD_USE_DMA

int32_t ILI9341_SendData(LCD_IO_Data_t *data, uint32_t length)
{
 8004e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t len, remain;

	if (hLCDDMA.Init.PeriphInc != DMA_PINC_ENABLE)	//za Send data je potrebno omogočit peripheral increment
 8004e74:	4d1f      	ldr	r5, [pc, #124]	; (8004ef4 <ILI9341_SendData+0x84>)
 8004e76:	68eb      	ldr	r3, [r5, #12]
 8004e78:	2b40      	cmp	r3, #64	; 0x40
{
 8004e7a:	4607      	mov	r7, r0
 8004e7c:	460e      	mov	r6, r1
	if (hLCDDMA.Init.PeriphInc != DMA_PINC_ENABLE)	//za Send data je potrebno omogočit peripheral increment
 8004e7e:	d009      	beq.n	8004e94 <ILI9341_SendData+0x24>
	{
		//Cakaj, ce je slucajno sredi transferja
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8004e80:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d1fb      	bne.n	8004e80 <ILI9341_SendData+0x10>
		hLCDDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 8004e88:	2340      	movs	r3, #64	; 0x40
		if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8004e8a:	481a      	ldr	r0, [pc, #104]	; (8004ef4 <ILI9341_SendData+0x84>)
		hLCDDMA.Init.PeriphInc = DMA_PINC_ENABLE;
 8004e8c:	60eb      	str	r3, [r5, #12]
		if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8004e8e:	f7fd fb93 	bl	80025b8 <HAL_DMA_Init>
 8004e92:	bb28      	cbnz	r0, 8004ee0 <ILI9341_SendData+0x70>
			return 1;
		}
	}

	// vrni error, če DMA ni inicializiran
	if (hLCDDMA.State == HAL_DMA_STATE_RESET) return 1;
 8004e94:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 8004e98:	b313      	cbz	r3, 8004ee0 <ILI9341_SendData+0x70>

	// poslji podatke glede na sirino vodila
	switch (hLCDDMA.Init.PeriphDataAlignment)
 8004e9a:	696b      	ldr	r3, [r5, #20]
 8004e9c:	b343      	cbz	r3, 8004ef0 <ILI9341_SendData+0x80>
 8004e9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea2:	d023      	beq.n	8004eec <ILI9341_SendData+0x7c>
		}

		//Cakaj, ce je slucajno sredi transferja
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};

		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t)data, (uint32_t)FMC_BANK1_MEM, len) != HAL_OK)
 8004ea4:	f8df a050 	ldr.w	sl, [pc, #80]	; 8004ef8 <ILI9341_SendData+0x88>
 8004ea8:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8004ef4 <ILI9341_SendData+0x84>
		if (len > DMA_MAX_LENGTH)
 8004eac:	f5b6 3f80 	cmp.w	r6, #65536	; 0x10000
 8004eb0:	d319      	bcc.n	8004ee6 <ILI9341_SendData+0x76>
			remain -= DMA_MAX_LENGTH;
 8004eb2:	f5a6 467f 	sub.w	r6, r6, #65280	; 0xff00
 8004eb6:	3eff      	subs	r6, #255	; 0xff
			len = DMA_MAX_LENGTH;
 8004eb8:	f64f 78ff 	movw	r8, #65535	; 0xffff
		while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8004ebc:	f895 4025 	ldrb.w	r4, [r5, #37]	; 0x25
 8004ec0:	2c01      	cmp	r4, #1
 8004ec2:	d1fb      	bne.n	8004ebc <ILI9341_SendData+0x4c>
		if (HAL_DMA_Start_IT(&hLCDDMA, (uint32_t)data, (uint32_t)FMC_BANK1_MEM, len) != HAL_OK)
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	4652      	mov	r2, sl
 8004ec8:	4639      	mov	r1, r7
 8004eca:	4648      	mov	r0, r9
 8004ecc:	f7fd fc0c 	bl	80026e8 <HAL_DMA_Start_IT>
 8004ed0:	b930      	cbnz	r0, 8004ee0 <ILI9341_SendData+0x70>
		{
			/* Transfer Error */
			return 1;
		}

		data += len;
 8004ed2:	eb07 0748 	add.w	r7, r7, r8, lsl #1
		len = remain;
	}
	while (remain > 0);
 8004ed6:	2e00      	cmp	r6, #0
 8004ed8:	d1e8      	bne.n	8004eac <ILI9341_SendData+0x3c>

	return 0;
 8004eda:	4630      	mov	r0, r6
}
 8004edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return 1;
 8004ee0:	2001      	movs	r0, #1
}
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	46b0      	mov	r8, r6
			remain = 0;
 8004ee8:	2600      	movs	r6, #0
 8004eea:	e7e7      	b.n	8004ebc <ILI9341_SendData+0x4c>
			len = (length / (2*LCD_IO_DATA_WRITE_CYCLES));
 8004eec:	0876      	lsrs	r6, r6, #1
			break;
 8004eee:	e7d9      	b.n	8004ea4 <ILI9341_SendData+0x34>
			len = 2*length/LCD_IO_DATA_WRITE_CYCLES;
 8004ef0:	0076      	lsls	r6, r6, #1
			break;
 8004ef2:	e7d7      	b.n	8004ea4 <ILI9341_SendData+0x34>
 8004ef4:	20000258 	.word	0x20000258
 8004ef8:	60010000 	.word	0x60010000

08004efc <ILI9341_SendRepeatedData>:

int32_t ILI9341_SendRepeatedData(LCD_IO_Data_t data, uint32_t num_copies)
{
	uint8_t increment = LCD_IO_DATA_WRITE_CYCLES;

	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 8004efc:	b139      	cbz	r1, 8004f0e <ILI9341_SendRepeatedData+0x12>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 8004efe:	4a05      	ldr	r2, [pc, #20]	; (8004f14 <ILI9341_SendRepeatedData+0x18>)
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 8004f00:	2300      	movs	r3, #0
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_MEM) = data;
 8004f02:	8010      	strh	r0, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8004f04:	f3bf 8f4f 	dsb	sy
	for (uint32_t i = 0; i < (num_copies/increment); i += increment)
 8004f08:	3301      	adds	r3, #1
 8004f0a:	4299      	cmp	r1, r3
 8004f0c:	d1f9      	bne.n	8004f02 <ILI9341_SendRepeatedData+0x6>
		FMC_BANK1_WriteData(data);

	return 0;
}
 8004f0e:	2000      	movs	r0, #0
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	60010000 	.word	0x60010000

08004f18 <ILI9341_SetDisplayWindow>:
  * @param  Ypos   y koordinata izhodišča
  * @param  Height višina okna
  * @param  Width  širina okna
  */
void ILI9341_SetDisplayWindow(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8004f18:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
	command = ILI9341_CASET;
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8004f1a:	3a01      	subs	r2, #1
{
 8004f1c:	b083      	sub	sp, #12
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8004f1e:	1814      	adds	r4, r2, r0
 8004f20:	0a24      	lsrs	r4, r4, #8
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8004f22:	fa12 f280 	uxtah	r2, r2, r0
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 8004f26:	0a07      	lsrs	r7, r0, #8
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8004f28:	b2d2      	uxtb	r2, r2
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8004f2a:	b2c0      	uxtb	r0, r0
	parameter[2] = (ILI9341_Data_t)((Xpos + Width - 1U) >> 8U);
 8004f2c:	f8ad 4004 	strh.w	r4, [sp, #4]
 8004f30:	4c20      	ldr	r4, [pc, #128]	; (8004fb4 <ILI9341_SetDisplayWindow+0x9c>)
	parameter[3] = (ILI9341_Data_t)((Xpos + Width - 1U) & 0xFFU);
 8004f32:	f8ad 2006 	strh.w	r2, [sp, #6]
{
 8004f36:	460e      	mov	r6, r1
 8004f38:	461d      	mov	r5, r3
	parameter[0] = (ILI9341_Data_t)(Xpos >> 8U);
 8004f3a:	f8ad 7000 	strh.w	r7, [sp]
	parameter[1] = (ILI9341_Data_t)(Xpos & 0xFFU);
 8004f3e:	f8ad 0002 	strh.w	r0, [sp, #2]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8004f42:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8004f46:	2a01      	cmp	r2, #1
 8004f48:	d1fb      	bne.n	8004f42 <ILI9341_SetDisplayWindow+0x2a>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8004f4a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004f4e:	222a      	movs	r2, #42	; 0x2a
 8004f50:	801a      	strh	r2, [r3, #0]
 8004f52:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 4);
 8004f56:	2104      	movs	r1, #4
 8004f58:	4668      	mov	r0, sp
 8004f5a:	f7ff ff89 	bl	8004e70 <ILI9341_SendData>

	/* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
	command = ILI9341_RASET;
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8004f5e:	1e6b      	subs	r3, r5, #1
 8004f60:	199a      	adds	r2, r3, r6
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8004f62:	fa13 f386 	uxtah	r3, r3, r6
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 8004f66:	0a31      	lsrs	r1, r6, #8
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8004f68:	0a12      	lsrs	r2, r2, #8
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8004f6a:	b2f6      	uxtb	r6, r6
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8004f6c:	b2db      	uxtb	r3, r3
	parameter [0] = (ILI9341_Data_t)(Ypos >> 8U);
 8004f6e:	f8ad 1000 	strh.w	r1, [sp]
	parameter [1] = (ILI9341_Data_t)(Ypos & 0xFFU);
 8004f72:	f8ad 6002 	strh.w	r6, [sp, #2]
	parameter [2] = (ILI9341_Data_t)((Ypos + Height - 1U) >> 8U);
 8004f76:	f8ad 2004 	strh.w	r2, [sp, #4]
	parameter [3] = (ILI9341_Data_t)((Ypos + Height - 1U) & 0xFFU);
 8004f7a:	f8ad 3006 	strh.w	r3, [sp, #6]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8004f7e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d1fb      	bne.n	8004f7e <ILI9341_SetDisplayWindow+0x66>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8004f86:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004f8a:	222b      	movs	r2, #43	; 0x2b
 8004f8c:	801a      	strh	r2, [r3, #0]
 8004f8e:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 4);
 8004f92:	2104      	movs	r1, #4
 8004f94:	4668      	mov	r0, sp
 8004f96:	f7ff ff6b 	bl	8004e70 <ILI9341_SendData>
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8004f9a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d1fb      	bne.n	8004f9a <ILI9341_SetDisplayWindow+0x82>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8004fa2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004fa6:	222c      	movs	r2, #44	; 0x2c
 8004fa8:	801a      	strh	r2, [r3, #0]
 8004faa:	f3bf 8f4f 	dsb	sy

	// Zapusti nastavitev okna v načinu za vpis barve v GRAM
	command = ILI9341_GRAM;
	ILI9341_SetAddress(&command);
}
 8004fae:	b003      	add	sp, #12
 8004fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	20000258 	.word	0x20000258

08004fb8 <ILI9341_Init>:
  * @param  color_space želen barvni prostor (ILI9341_COLORSPACE_RBG{565,666})
  * @param  orientation orientacija zaslona
  * @internal
  */
void ILI9341_Init(uint32_t color_space, uint32_t orientation)
{
 8004fb8:	b570      	push	{r4, r5, r6, lr}
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8004fba:	4b4d      	ldr	r3, [pc, #308]	; (80050f0 <ILI9341_Init+0x138>)
 8004fbc:	4c4d      	ldr	r4, [pc, #308]	; (80050f4 <ILI9341_Init+0x13c>)
 8004fbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
{
 8004fc2:	b084      	sub	sp, #16
 8004fc4:	460d      	mov	r5, r1
	ILI9341_Data_t parameter = (ILI9341_Data_t)orientations[orientation];
 8004fc6:	f8ad 3004 	strh.w	r3, [sp, #4]
{
 8004fca:	4606      	mov	r6, r0
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8004fcc:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	b2d9      	uxtb	r1, r3
 8004fd4:	d1fa      	bne.n	8004fcc <ILI9341_Init+0x14>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8004fd6:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004fda:	2236      	movs	r2, #54	; 0x36
 8004fdc:	801a      	strh	r2, [r3, #0]
 8004fde:	f3bf 8f4f 	dsb	sy
	ILI9341_SendData(&parameter, 1);
 8004fe2:	a801      	add	r0, sp, #4
 8004fe4:	f7ff ff44 	bl	8004e70 <ILI9341_SendData>
		LCD.width  = ILI9341_WIDTH;
 8004fe8:	4843      	ldr	r0, [pc, #268]	; (80050f8 <ILI9341_Init+0x140>)
	switch (orientation) {
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	d077      	beq.n	80050de <ILI9341_Init+0x126>
 8004fee:	2d03      	cmp	r5, #3
 8004ff0:	d075      	beq.n	80050de <ILI9341_Init+0x126>
		LCD.width  = ILI9341_WIDTH;
 8004ff2:	22f0      	movs	r2, #240	; 0xf0
 8004ff4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8004ff8:	e9c0 2300 	strd	r2, r3, [r0]
		break;
 8004ffc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8005000:	22f0      	movs	r2, #240	; 0xf0
	ILI9341_Data_t command;
	ILI9341_Data_t parameter[5];

	ILI9341_SetOrientation(orientation);
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8005002:	2100      	movs	r1, #0
	LCD.orientation = orientation;
 8005004:	6085      	str	r5, [r0, #8]
	ILI9341_SetDisplayWindow(0U, 0U, LCD.width, LCD.height);
 8005006:	4608      	mov	r0, r1
 8005008:	f7ff ff86 	bl	8004f18 <ILI9341_SetDisplayWindow>
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 800500c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8005010:	2b01      	cmp	r3, #1
 8005012:	d1fb      	bne.n	800500c <ILI9341_Init+0x54>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 8005014:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005018:	2211      	movs	r2, #17
 800501a:	801a      	strh	r2, [r3, #0]
 800501c:	f3bf 8f4f 	dsb	sy

	// Sleep out
	command = ILI9341_SLEEP_OUT;
	ILI9341_SetAddress(&command);
	HAL_Delay(200);
 8005020:	20c8      	movs	r0, #200	; 0xc8
 8005022:	f7fc fcd1 	bl	80019c8 <HAL_Delay>
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005026:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800502a:	2b01      	cmp	r3, #1
 800502c:	d1fb      	bne.n	8005026 <ILI9341_Init+0x6e>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800502e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005032:	2213      	movs	r2, #19
 8005034:	801a      	strh	r2, [r3, #0]
 8005036:	f3bf 8f4f 	dsb	sy

	// Display Normal mode
	command = ILI9341_NORMAL_MODE_ON;
	ILI9341_SetAddress(&command);
	HAL_Delay(100);
 800503a:	2064      	movs	r0, #100	; 0x64
 800503c:	f7fc fcc4 	bl	80019c8 <HAL_Delay>

	// Pixel Format
	command = ILI9341_PIXEL_FORMAT;
	parameter[0] = color_space;
 8005040:	f8ad 6004 	strh.w	r6, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005044:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8005048:	2b01      	cmp	r3, #1
 800504a:	b2d9      	uxtb	r1, r3
 800504c:	d1fa      	bne.n	8005044 <ILI9341_Init+0x8c>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800504e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005052:	223a      	movs	r2, #58	; 0x3a
 8005054:	801a      	strh	r2, [r3, #0]
 8005056:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 1);
 800505a:	a801      	add	r0, sp, #4
 800505c:	f7ff ff08 	bl	8004e70 <ILI9341_SendData>
	HAL_Delay(100);
 8005060:	2064      	movs	r0, #100	; 0x64
 8005062:	f7fc fcb1 	bl	80019c8 <HAL_Delay>

	// Update Interface control
	command = ILI9341_INTERFACE;
	parameter[0] = 0x49;
 8005066:	2249      	movs	r2, #73	; 0x49
	parameter[1] = 0;
	parameter[2] = 0x20;
 8005068:	2320      	movs	r3, #32
	parameter[0] = 0x49;
 800506a:	9201      	str	r2, [sp, #4]
	parameter[2] = 0x20;
 800506c:	f8ad 3008 	strh.w	r3, [sp, #8]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005070:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8005074:	2b01      	cmp	r3, #1
 8005076:	b2dd      	uxtb	r5, r3
 8005078:	d1fa      	bne.n	8005070 <ILI9341_Init+0xb8>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800507a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800507e:	22f6      	movs	r2, #246	; 0xf6
 8005080:	801a      	strh	r2, [r3, #0]
 8005082:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 3);
 8005086:	2103      	movs	r1, #3
 8005088:	a801      	add	r0, sp, #4
 800508a:	f7ff fef1 	bl	8004e70 <ILI9341_SendData>

	// Enable TE
	command = ILI9341_TEON;
	parameter[0] = 1; /* VSYNC + HSYNC */
 800508e:	f8ad 5004 	strh.w	r5, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005092:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8005096:	2b01      	cmp	r3, #1
 8005098:	b2d9      	uxtb	r1, r3
 800509a:	d1fa      	bne.n	8005092 <ILI9341_Init+0xda>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800509c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80050a0:	2235      	movs	r2, #53	; 0x35
 80050a2:	801a      	strh	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 1);
 80050a8:	a801      	add	r0, sp, #4
 80050aa:	f7ff fee1 	bl	8004e70 <ILI9341_SendData>
	HAL_Delay(100);
 80050ae:	2064      	movs	r0, #100	; 0x64
 80050b0:	f7fc fc8a 	bl	80019c8 <HAL_Delay>

	// Enable TE scan line
	command = ILI9341_SET_TEAR_SCANLINE;
	parameter[0] = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	9301      	str	r3, [sp, #4]
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 80050b8:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d1fb      	bne.n	80050b8 <ILI9341_Init+0x100>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 80050c0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80050c4:	2244      	movs	r2, #68	; 0x44
 80050c6:	801a      	strh	r2, [r3, #0]
 80050c8:	f3bf 8f4f 	dsb	sy
	parameter[1] = 0;
	ILI9341_SetAddress(&command);
	ILI9341_SendData(parameter, 2);
 80050cc:	2102      	movs	r1, #2
 80050ce:	a801      	add	r0, sp, #4
 80050d0:	f7ff fece 	bl	8004e70 <ILI9341_SendData>
	HAL_Delay(100);
 80050d4:	2064      	movs	r0, #100	; 0x64
 80050d6:	f7fc fc77 	bl	80019c8 <HAL_Delay>
}
 80050da:	b004      	add	sp, #16
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
		LCD.width  = ILI9341_HEIGHT;
 80050de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80050e2:	23f0      	movs	r3, #240	; 0xf0
 80050e4:	e9c0 2300 	strd	r2, r3, [r0]
		break;
 80050e8:	23f0      	movs	r3, #240	; 0xf0
 80050ea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80050ee:	e788      	b.n	8005002 <ILI9341_Init+0x4a>
 80050f0:	08007db8 	.word	0x08007db8
 80050f4:	20000258 	.word	0x20000258
 80050f8:	20000110 	.word	0x20000110

080050fc <ILI9341_WaitTransfer>:
//! @brief Počakaj na prenos podatka FSMC->Ili9341. Možne dodelave.
void ILI9341_WaitTransfer()
{
	// AddresSetupTime + 1 + DataSetupTime + 1. Glej `fmc.c'.
	// načeloma 6 + 1 + 5 + 1 ms (13 ms), vendar ni zadosti
	HAL_Delay(50);
 80050fc:	2032      	movs	r0, #50	; 0x32
 80050fe:	f7fc bc63 	b.w	80019c8 <HAL_Delay>
 8005102:	bf00      	nop

08005104 <ILI9341_DisplayOn>:
	while (hLCDDMA.State != HAL_DMA_STATE_READY) {;};
 8005104:	4a05      	ldr	r2, [pc, #20]	; (800511c <ILI9341_DisplayOn+0x18>)
 8005106:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
 800510a:	2b01      	cmp	r3, #1
 800510c:	d1fb      	bne.n	8005106 <ILI9341_DisplayOn+0x2>
	*(volatile LCD_IO_Data_t *)(FMC_BANK1_REG) = address;
 800510e:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8005112:	2229      	movs	r2, #41	; 0x29
 8005114:	801a      	strh	r2, [r3, #0]
 8005116:	f3bf 8f4f 	dsb	sy
//! @brief Strojno omogoči zaslon
void ILI9341_DisplayOn()
{
	ILI9341_Data_t command = ILI9341_DISPLAY_ON;
	ILI9341_SetAddress(&command);
}
 800511a:	4770      	bx	lr
 800511c:	20000258 	.word	0x20000258

08005120 <ILI9341_GetParam>:
 */
uint32_t ILI9341_GetParam(LCD_Param_t param)
{
	uint32_t value = 0;

	switch (param) {
 8005120:	2803      	cmp	r0, #3
 8005122:	d80f      	bhi.n	8005144 <ILI9341_GetParam+0x24>
 8005124:	e8df f000 	tbb	[pc, r0]
 8005128:	0802050b 	.word	0x0802050b
	uint32_t value = 0;
 800512c:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
 8005130:	4770      	bx	lr
	case LCD_WIDTH:
		value = LCD.width;
		break;
	case LCD_HEIGHT:
		value = LCD.height;
 8005132:	4b05      	ldr	r3, [pc, #20]	; (8005148 <ILI9341_GetParam+0x28>)
 8005134:	6858      	ldr	r0, [r3, #4]
		break;
 8005136:	4770      	bx	lr
	case LCD_AREA:
		value = ILI9341_AREA;
		break;
	case LCD_ORIENTATION:
		value = LCD.orientation;
 8005138:	4b03      	ldr	r3, [pc, #12]	; (8005148 <ILI9341_GetParam+0x28>)
 800513a:	6898      	ldr	r0, [r3, #8]
		break;
 800513c:	4770      	bx	lr
		value = LCD.width;
 800513e:	4b02      	ldr	r3, [pc, #8]	; (8005148 <ILI9341_GetParam+0x28>)
 8005140:	6818      	ldr	r0, [r3, #0]
		break;
 8005142:	4770      	bx	lr
	uint32_t value = 0;
 8005144:	2000      	movs	r0, #0
	default:
		break;
	}

	return value;
}
 8005146:	4770      	bx	lr
 8005148:	20000110 	.word	0x20000110

0800514c <PSERV_init>:

static periodic_services_handle_t periodic_services;

void PSERV_init(void)
{
	periodic_services.TIM = TIM6;
 800514c:	4b03      	ldr	r3, [pc, #12]	; (800515c <PSERV_init+0x10>)
 800514e:	4a04      	ldr	r2, [pc, #16]	; (8005160 <PSERV_init+0x14>)
 8005150:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
	LL_TIM_EnableCounter(TIM6);
}
 800515a:	4770      	bx	lr
 800515c:	40001000 	.word	0x40001000
 8005160:	2000011c 	.word	0x2000011c

08005164 <PSERV_enable>:

void PSERV_enable(void)
{
	LL_TIM_EnableUpdateEvent(periodic_services.TIM);
 8005164:	4b03      	ldr	r3, [pc, #12]	; (8005174 <PSERV_enable+0x10>)
 8005166:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 8005168:	6813      	ldr	r3, [r2, #0]
 800516a:	f023 0302 	bic.w	r3, r3, #2
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	2000011c 	.word	0x2000011c

08005178 <PSERV_run_services_Callback>:
	LL_TIM_DisableUpdateEvent(periodic_services.TIM);
}

void PSERV_run_services_Callback(void)
{
	KBD_demo_toggle_LEDs_if_buttons_pressed();
 8005178:	f7ff bcfe 	b.w	8004b78 <KBD_demo_toggle_LEDs_if_buttons_pressed>

0800517c <narisi_velik_kvadrat>:
#include "stdint.h"


void narisi_velik_kvadrat(int x, int y, __uint16_t c)
{
	pixels[(y)*240 + (x)] = c;
 800517c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
{
 8005180:	b4f0      	push	{r4, r5, r6, r7}
	pixels[(y)*240 + (x)] = c;
 8005182:	010b      	lsls	r3, r1, #4

	pixels[(y+1)*240 + (x)] = c;
	pixels[(y+1)*240 + (x+1)] = c;
	pixels[(y+1)*240 + (x+2)] = c;

	pixels[(y+2)*240 + (x)] = c;
 8005184:	f503 75f0 	add.w	r5, r3, #480	; 0x1e0
 8005188:	4405      	add	r5, r0
	pixels[(y)*240 + (x+2)] = c;
 800518a:	1c86      	adds	r6, r0, #2
	pixels[(y+1)*240 + (x)] = c;
 800518c:	33f0      	adds	r3, #240	; 0xf0
 800518e:	2700      	movs	r7, #0
	pixels[(y)*240 + (x)] = c;
 8005190:	4c0c      	ldr	r4, [pc, #48]	; (80051c4 <narisi_velik_kvadrat+0x48>)
 8005192:	eb00 1c01 	add.w	ip, r0, r1, lsl #4
 8005196:	f362 070f 	bfi	r7, r2, #0, #16
	pixels[(y)*240 + (x+2)] = c;
 800519a:	eb06 1101 	add.w	r1, r6, r1, lsl #4
	pixels[(y+1)*240 + (x+2)] = c;
 800519e:	441e      	add	r6, r3
	pixels[(y+1)*240 + (x)] = c;
 80051a0:	4403      	add	r3, r0
	pixels[(y+2)*240 + (x+1)] = c;
	pixels[(y+2)*240 + (x)+2] = c;
 80051a2:	1ca8      	adds	r0, r5, #2
 80051a4:	f362 471f 	bfi	r7, r2, #16, #16
	pixels[(y)*240 + (x)] = c;
 80051a8:	f844 701c 	str.w	r7, [r4, ip, lsl #1]
	pixels[(y)*240 + (x+2)] = c;
 80051ac:	f824 2011 	strh.w	r2, [r4, r1, lsl #1]
	pixels[(y+1)*240 + (x)] = c;
 80051b0:	f844 7013 	str.w	r7, [r4, r3, lsl #1]
	pixels[(y+1)*240 + (x+2)] = c;
 80051b4:	f824 2016 	strh.w	r2, [r4, r6, lsl #1]
	pixels[(y+2)*240 + (x)] = c;
 80051b8:	f844 7015 	str.w	r7, [r4, r5, lsl #1]
	pixels[(y+2)*240 + (x)+2] = c;
 80051bc:	f824 2010 	strh.w	r2, [r4, r0, lsl #1]

}
 80051c0:	bcf0      	pop	{r4, r5, r6, r7}
 80051c2:	4770      	bx	lr
 80051c4:	2000096c 	.word	0x2000096c

080051c8 <narisi_velik_kvadrat_stene>:
void narisi_velik_kvadrat_stene(int x, int y, __uint16_t c)
{
 80051c8:	b4f0      	push	{r4, r5, r6, r7}
	pixels[(y)*240 + (x)] = c;
 80051ca:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80051ce:	2400      	movs	r4, #0
 80051d0:	4b15      	ldr	r3, [pc, #84]	; (8005228 <narisi_velik_kvadrat_stene+0x60>)
 80051d2:	eb00 1601 	add.w	r6, r0, r1, lsl #4
 80051d6:	f362 040f 	bfi	r4, r2, #0, #16
 80051da:	f362 441f 	bfi	r4, r2, #16, #16
 80051de:	f843 4016 	str.w	r4, [r3, r6, lsl #1]
 80051e2:	010d      	lsls	r5, r1, #4
 80051e4:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
	pixels[(y)*240 + (x+1)] = c;
	pixels[(y)*240 + (x+2)] = c;
	pixels[(y)*240 + (x+3)] = c;
	pixels[(y)*240 + (x+4)] = c;
 80051e8:	1d06      	adds	r6, r0, #4

	pixels[(y+1)*240 + (x)] = c;
 80051ea:	f105 07f0 	add.w	r7, r5, #240	; 0xf0
	pixels[(y)*240 + (x+4)] = c;
 80051ee:	eb06 1101 	add.w	r1, r6, r1, lsl #4
	pixels[(y+1)*240 + (x+1)] = c;
	pixels[(y+1)*240 + (x+2)] = c;
	pixels[(y+1)*240 + (x+3)] = c;
	pixels[(y+1)*240 + (x+4)] = c;

	pixels[(y+2)*240 + (x)] = c;
 80051f2:	f505 75f0 	add.w	r5, r5, #480	; 0x1e0
 80051f6:	4405      	add	r5, r0
	pixels[(y+1)*240 + (x)] = c;
 80051f8:	4438      	add	r0, r7
	pixels[(y)*240 + (x)] = c;
 80051fa:	f8cc 4004 	str.w	r4, [ip, #4]
	pixels[(y+1)*240 + (x+4)] = c;
 80051fe:	443e      	add	r6, r7
	pixels[(y)*240 + (x+4)] = c;
 8005200:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
	pixels[(y+1)*240 + (x+3)] = c;
 8005204:	eb03 0745 	add.w	r7, r3, r5, lsl #1
	pixels[(y+2)*240 + (x+1)] = c;
	pixels[(y+2)*240 + (x)+2] = c;
	pixels[(y+2)*240 + (x)+3] = c;
	pixels[(y+2)*240 + (x)+4] = c;
 8005208:	1d29      	adds	r1, r5, #4
 800520a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
	pixels[(y+1)*240 + (x)] = c;
 800520e:	f843 4010 	str.w	r4, [r3, r0, lsl #1]
 8005212:	f8cc 4004 	str.w	r4, [ip, #4]
	pixels[(y+1)*240 + (x+4)] = c;
 8005216:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
	pixels[(y+2)*240 + (x)] = c;
 800521a:	f843 4015 	str.w	r4, [r3, r5, lsl #1]
 800521e:	607c      	str	r4, [r7, #4]
}
 8005220:	bcf0      	pop	{r4, r5, r6, r7}
	pixels[(y+2)*240 + (x)+4] = c;
 8005222:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8005226:	4770      	bx	lr
 8005228:	2000096c 	.word	0x2000096c

0800522c <create_rgb>:
	else if (kot > 2 * PI) return kot - 2 * PI;
	return kot;
}
unsigned long create_rgb(int r, int g, int b)
{
	return ((((r>>3)<<11) | ((g>>2)<<5) | (b>>3)));
 800522c:	1089      	asrs	r1, r1, #2
 800522e:	10d2      	asrs	r2, r2, #3
 8005230:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
 8005234:	10c0      	asrs	r0, r0, #3
}
 8005236:	ea42 20c0 	orr.w	r0, r2, r0, lsl #11
 800523a:	4770      	bx	lr
 800523c:	0000      	movs	r0, r0
	...

08005240 <drawGun>:
#include "t_wood.ppm"
#include "t_floor.ppm"
#include "hitler_sprite.ppm"


void drawGun() {
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	ed2d 8b06 	vpush	{d8-d10}
 8005248:	b085      	sub	sp, #20
 800524a:	4b47      	ldr	r3, [pc, #284]	; (8005368 <drawGun+0x128>)
 800524c:	9303      	str	r3, [sp, #12]
		for (int x = 0;x < 128;x+=tx_step) {
			int pixel = ((y) * 128 + x) * 3;
			int red = t_guns[pixel + 0];
			int green = t_guns[pixel + 1];
			int blue = t_guns[pixel + 2];
			if ((float)(red+green+blue)/765 < 0.9) {
 800524e:	f20f 1b08 	addw	fp, pc, #264	; 0x108
 8005252:	e9db ab00 	ldrd	sl, fp, [fp]
	for (int y = 0;y < 128;y+=ty_step) {
 8005256:	2300      	movs	r3, #0
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8005258:	eddf 9a44 	vldr	s19, [pc, #272]	; 800536c <drawGun+0x12c>
			if ((float)(red+green+blue)/765 < 0.9) {
 800525c:	ed9f 8a44 	vldr	s16, [pc, #272]	; 8005370 <drawGun+0x130>
	for (int y = 0;y < 128;y+=ty_step) {
 8005260:	9302      	str	r3, [sp, #8]
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8005262:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
 8005266:	eeb3 9a02 	vmov.f32	s18, #50	; 0x41900000  18.0
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 800526a:	eddd 7a02 	vldr	s15, [sp, #8]

				gun_x *= s_scale;
				gun_x += s_offset;
				gun_y *= s_scale;
 800526e:	9c03      	ldr	r4, [sp, #12]
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8005270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		for (int x = 0;x < 128;x+=tx_step) {
 8005274:	2500      	movs	r5, #0
				int gun_y = height - 128*scale + (int)((float)y / ty_step) + 8;
 8005276:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800527a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800527e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005282:	ee77 7aa9 	vadd.f32	s15, s15, s19
				gun_y *= s_scale;
 8005286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800528a:	ee17 0a90 	vmov	r0, s15
 800528e:	f7fb f915 	bl	80004bc <__aeabi_i2d>
 8005292:	a333      	add	r3, pc, #204	; (adr r3, 8005360 <drawGun+0x120>)
 8005294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005298:	f7fb f97a 	bl	8000590 <__aeabi_dmul>
 800529c:	f7fb fc28 	bl	8000af0 <__aeabi_d2iz>
 80052a0:	ee0a 0a10 	vmov	s20, r0
 80052a4:	e002      	b.n	80052ac <drawGun+0x6c>
		for (int x = 0;x < 128;x+=tx_step) {
 80052a6:	3502      	adds	r5, #2
 80052a8:	2d80      	cmp	r5, #128	; 0x80
 80052aa:	d044      	beq.n	8005336 <drawGun+0xf6>
			int red = t_guns[pixel + 0];
 80052ac:	f894 8000 	ldrb.w	r8, [r4]
			int green = t_guns[pixel + 1];
 80052b0:	f894 9001 	ldrb.w	r9, [r4, #1]
			int blue = t_guns[pixel + 2];
 80052b4:	78a7      	ldrb	r7, [r4, #2]
			if ((float)(red+green+blue)/765 < 0.9) {
 80052b6:	eb08 0309 	add.w	r3, r8, r9
 80052ba:	443b      	add	r3, r7
 80052bc:	ee07 3a90 	vmov	s15, r3
 80052c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c4:	3406      	adds	r4, #6
 80052c6:	ee67 7a88 	vmul.f32	s15, s15, s16
 80052ca:	ee17 0a90 	vmov	r0, s15
 80052ce:	f7fb f907 	bl	80004e0 <__aeabi_f2d>
 80052d2:	4652      	mov	r2, sl
 80052d4:	465b      	mov	r3, fp
 80052d6:	f7fb fbcd 	bl	8000a74 <__aeabi_dcmplt>
 80052da:	2800      	cmp	r0, #0
 80052dc:	d0e3      	beq.n	80052a6 <drawGun+0x66>
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
 80052de:	ee07 5a90 	vmov	s15, r5
 80052e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		for (int x = 0;x < 128;x+=tx_step) {
 80052e6:	3502      	adds	r5, #2
				int gun_x = width/2 - 128*scale/2 + (int)((float)x / tx_step);
 80052e8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80052ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052f4:	ee77 7a89 	vadd.f32	s15, s15, s18
				gun_x *= s_scale;
 80052f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80052fc:	ee17 0a90 	vmov	r0, s15
 8005300:	f7fb f8dc 	bl	80004bc <__aeabi_i2d>
 8005304:	a316      	add	r3, pc, #88	; (adr r3, 8005360 <drawGun+0x120>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	f7fb f941 	bl	8000590 <__aeabi_dmul>

				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 800530e:	463a      	mov	r2, r7
				gun_x *= s_scale;
 8005310:	4606      	mov	r6, r0
 8005312:	460f      	mov	r7, r1
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 8005314:	4640      	mov	r0, r8
 8005316:	4649      	mov	r1, r9
 8005318:	f7ff ff88 	bl	800522c <create_rgb>
				gun_x *= s_scale;
 800531c:	4639      	mov	r1, r7
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 800531e:	b282      	uxth	r2, r0
				gun_x *= s_scale;
 8005320:	4630      	mov	r0, r6
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 8005322:	9201      	str	r2, [sp, #4]
				gun_x *= s_scale;
 8005324:	f7fb fbe4 	bl	8000af0 <__aeabi_d2iz>
				narisi_velik_kvadrat(gun_x, gun_y, create_rgb(red, green, blue));
 8005328:	9a01      	ldr	r2, [sp, #4]
 800532a:	ee1a 1a10 	vmov	r1, s20
 800532e:	f7ff ff25 	bl	800517c <narisi_velik_kvadrat>
		for (int x = 0;x < 128;x+=tx_step) {
 8005332:	2d80      	cmp	r5, #128	; 0x80
 8005334:	d1ba      	bne.n	80052ac <drawGun+0x6c>
	for (int y = 0;y < 128;y+=ty_step) {
 8005336:	9b02      	ldr	r3, [sp, #8]
 8005338:	9a03      	ldr	r2, [sp, #12]
 800533a:	3302      	adds	r3, #2
 800533c:	f502 7240 	add.w	r2, r2, #768	; 0x300
 8005340:	2b80      	cmp	r3, #128	; 0x80
 8005342:	9302      	str	r3, [sp, #8]
 8005344:	9203      	str	r2, [sp, #12]
 8005346:	d190      	bne.n	800526a <drawGun+0x2a>
			}
		}
	}
}
 8005348:	b005      	add	sp, #20
 800534a:	ecbd 8b06 	vpop	{d8-d10}
 800534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005352:	bf00      	nop
 8005354:	f3af 8000 	nop.w
 8005358:	cccccccd 	.word	0xcccccccd
 800535c:	3feccccc 	.word	0x3feccccc
 8005360:	33333333 	.word	0x33333333
 8005364:	40033333 	.word	0x40033333
 8005368:	080095c8 	.word	0x080095c8
 800536c:	42300000 	.word	0x42300000
 8005370:	3aab5601 	.word	0x3aab5601
 8005374:	00000000 	.word	0x00000000

08005378 <drawMap>:
void drawMap(CORDIC_HandleTypeDef *hc){
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	ed2d 8b10 	vpush	{d8-d15}
 8005380:	b089      	sub	sp, #36	; 0x24

	float dx = 0, dy = 0, d1 = 10000, d2 = 10000, rvx = 0, rvy = 0, dof = 0,  newAngle = 0, rhx = 0, rhy = 0,d = 0, rx= 0, ry=0;
	int wx = 0, wy = 0;
	KBD_scan();
 8005382:	f7ff fb67 	bl	8004a54 <KBD_scan>

	//MOVE PLAYER
	if(JOY_get_axis_position(Y) < 40)
 8005386:	2001      	movs	r0, #1
 8005388:	f7ff faf6 	bl	8004978 <JOY_get_axis_position>
 800538c:	2827      	cmp	r0, #39	; 0x27
	{
		if(JOY_get_axis_position(X) < 40) angle += 0.1;
 800538e:	f04f 0000 	mov.w	r0, #0
	if(JOY_get_axis_position(Y) < 40)
 8005392:	f200 808d 	bhi.w	80054b0 <drawMap+0x138>
		if(JOY_get_axis_position(X) < 40) angle += 0.1;
 8005396:	f7ff faef 	bl	8004978 <JOY_get_axis_position>
 800539a:	2827      	cmp	r0, #39	; 0x27
 800539c:	f240 83b9 	bls.w	8005b12 <drawMap+0x79a>
 80053a0:	4b3d      	ldr	r3, [pc, #244]	; (8005498 <drawMap+0x120>)
 80053a2:	9302      	str	r3, [sp, #8]
		if(JOY_get_axis_position(X) > 60) angle -= 0.1;
 80053a4:	2000      	movs	r0, #0
 80053a6:	f7ff fae7 	bl	8004978 <JOY_get_axis_position>
 80053aa:	283c      	cmp	r0, #60	; 0x3c
 80053ac:	f240 83ad 	bls.w	8005b0a <drawMap+0x792>
 80053b0:	9c02      	ldr	r4, [sp, #8]
 80053b2:	6820      	ldr	r0, [r4, #0]
 80053b4:	f7fb f894 	bl	80004e0 <__aeabi_f2d>
 80053b8:	a335      	add	r3, pc, #212	; (adr r3, 8005490 <drawMap+0x118>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa ff2f 	bl	8000220 <__aeabi_dsub>
 80053c2:	f7fb fbbd 	bl	8000b40 <__aeabi_d2f>
 80053c6:	ee08 0a10 	vmov	s16, r0
	}else
	{
		if(JOY_get_axis_position(X) < 40) angle -= 0.1;
		if(JOY_get_axis_position(X) > 60) angle += 0.1;
	}
	if (angle < 0) angle = 2 * PI;
 80053ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		if(JOY_get_axis_position(X) > 60) angle -= 0.1;
 80053d2:	6020      	str	r0, [r4, #0]
	if (angle < 0) angle = 2 * PI;
 80053d4:	f04f 0400 	mov.w	r4, #0
 80053d8:	f140 808d 	bpl.w	80054f6 <drawMap+0x17e>
 80053dc:	9a02      	ldr	r2, [sp, #8]
 80053de:	4b2f      	ldr	r3, [pc, #188]	; (800549c <drawMap+0x124>)
 80053e0:	6013      	str	r3, [r2, #0]
	if (cosf(angle) < 0) fCheckX = -fCheck;
	else fCheckX = fCheck;
	if (sinf(angle) < 0) fCheckY = -fCheck;
	else fCheckY = fCheck;

	if (JOY_get_axis_position(Y) > 60) {
 80053e2:	2001      	movs	r0, #1
 80053e4:	f7ff fac8 	bl	8004978 <JOY_get_axis_position>
 80053e8:	283c      	cmp	r0, #60	; 0x3c
	else fCheckX = fCheck;
 80053ea:	f04f 0505 	mov.w	r5, #5
	if (sinf(angle) < 0) fCheckY = -fCheck;
 80053ee:	f06f 0604 	mvn.w	r6, #4
	if (JOY_get_axis_position(Y) > 60) {
 80053f2:	f200 8096 	bhi.w	8005522 <drawMap+0x1aa>
		if(map[(int)py / 10][((int)px + fCheckX) / 10] == 0) px += 3 * cosf(angle);
		if (map[((int)py + fCheckY) / 10][(int)px/ 10] == 0) py += 3 * sinf(angle);
		//LED_on(LED0);
	}else LED_off(LED0);
 80053f6:	2000      	movs	r0, #0
 80053f8:	f7ff f9b6 	bl	8004768 <LED_off>
 80053fc:	4b28      	ldr	r3, [pc, #160]	; (80054a0 <drawMap+0x128>)
 80053fe:	9304      	str	r3, [sp, #16]
	if (JOY_get_axis_position(Y) < 40) {
 8005400:	2001      	movs	r0, #1
 8005402:	4b28      	ldr	r3, [pc, #160]	; (80054a4 <drawMap+0x12c>)
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	f7ff fab7 	bl	8004978 <JOY_get_axis_position>
 800540a:	2827      	cmp	r0, #39	; 0x27
 800540c:	f240 80e0 	bls.w	80055d0 <drawMap+0x258>
		if (map[(int)py / 10][((int)px - fCheckX) / 10] == 0) px += -3 * cosf(angle);
		if (map[((int)py - fCheckY) / 10][(int)px / 10] == 0) py += -3 * sinf(angle);
		//LED_on(LED0);
	}else LED_off(LED0);
 8005410:	2000      	movs	r0, #0
 8005412:	f7ff f9a9 	bl	8004768 <LED_off>
 8005416:	9b02      	ldr	r3, [sp, #8]
 8005418:	ed93 8a00 	vldr	s16, [r3]
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	eeb0 0a48 	vmov.f32	s0, s16
 8005422:	edd3 8a00 	vldr	s17, [r3]
 8005426:	f001 fd39 	bl	8006e9c <sinf>
 800542a:	eef0 9a40 	vmov.f32	s19, s0
 800542e:	eeb0 0a48 	vmov.f32	s0, s16
 8005432:	f001 fcf3 	bl	8006e1c <cosf>
 8005436:	9b04      	ldr	r3, [sp, #16]

	//DA LAHKO IGRALEC ODPRE VRATA
	float roka = 6;
	float rokaPosX = px + roka * cosf(angle);
	float rokaPosY = py + roka * sinf(angle);
	if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 8005438:	2000      	movs	r0, #0
 800543a:	ed93 8a00 	vldr	s16, [r3]
 800543e:	eeb0 9a40 	vmov.f32	s18, s0
 8005442:	f7ff fb8f 	bl	8004b64 <KBD_get_button_state>
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8110 	bne.w	800566c <drawMap+0x2f4>
	float rokaPosY = py + roka * sinf(angle);
 800544c:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8005450:	eea9 8aa7 	vfma.f32	s16, s19, s15
	if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 8005454:	4b14      	ldr	r3, [pc, #80]	; (80054a8 <drawMap+0x130>)
 8005456:	9307      	str	r3, [sp, #28]
	float rokaPosX = px + roka * cosf(angle);
 8005458:	eee9 8a27 	vfma.f32	s17, s18, s15
	if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 800545c:	681e      	ldr	r6, [r3, #0]
 800545e:	4a13      	ldr	r2, [pc, #76]	; (80054ac <drawMap+0x134>)
 8005460:	eebd 8ac8 	vcvt.s32.f32	s16, s16
 8005464:	eefd 8ae8 	vcvt.s32.f32	s17, s17
 8005468:	ee18 3a10 	vmov	r3, s16
 800546c:	fb93 f3f6 	sdiv	r3, r3, r6
 8005470:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005474:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005478:	ee18 3a90 	vmov	r3, s17
 800547c:	fb93 f3f6 	sdiv	r3, r3, r6
 8005480:	5cd1      	ldrb	r1, [r2, r3]
 8005482:	2903      	cmp	r1, #3
 8005484:	bf08      	it	eq
 8005486:	54d0      	strbeq	r0, [r2, r3]
 8005488:	e0f3      	b.n	8005672 <drawMap+0x2fa>
 800548a:	bf00      	nop
 800548c:	f3af 8000 	nop.w
 8005490:	9999999a 	.word	0x9999999a
 8005494:	3fb99999 	.word	0x3fb99999
 8005498:	20000010 	.word	0x20000010
 800549c:	40c90fd0 	.word	0x40c90fd0
 80054a0:	2000007c 	.word	0x2000007c
 80054a4:	20000078 	.word	0x20000078
 80054a8:	2000000c 	.word	0x2000000c
 80054ac:	20000014 	.word	0x20000014
		if(JOY_get_axis_position(X) < 40) angle -= 0.1;
 80054b0:	f7ff fa62 	bl	8004978 <JOY_get_axis_position>
 80054b4:	2827      	cmp	r0, #39	; 0x27
 80054b6:	f240 8315 	bls.w	8005ae4 <drawMap+0x76c>
		if(JOY_get_axis_position(X) > 60) angle += 0.1;
 80054ba:	4bdb      	ldr	r3, [pc, #876]	; (8005828 <drawMap+0x4b0>)
 80054bc:	9302      	str	r3, [sp, #8]
 80054be:	2000      	movs	r0, #0
 80054c0:	f7ff fa5a 	bl	8004978 <JOY_get_axis_position>
 80054c4:	283c      	cmp	r0, #60	; 0x3c
 80054c6:	f240 8320 	bls.w	8005b0a <drawMap+0x792>
 80054ca:	9c02      	ldr	r4, [sp, #8]
 80054cc:	6820      	ldr	r0, [r4, #0]
 80054ce:	f7fb f807 	bl	80004e0 <__aeabi_f2d>
 80054d2:	a3c9      	add	r3, pc, #804	; (adr r3, 80057f8 <drawMap+0x480>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fa fea4 	bl	8000224 <__adddf3>
 80054dc:	f7fb fb30 	bl	8000b40 <__aeabi_d2f>
 80054e0:	ee08 0a10 	vmov	s16, r0
 80054e4:	6020      	str	r0, [r4, #0]
	if (angle < 0) angle = 2 * PI;
 80054e6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80054ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ee:	f04f 0400 	mov.w	r4, #0
 80054f2:	f53f af73 	bmi.w	80053dc <drawMap+0x64>
	else if (angle > 2 * PI) angle = 0;
 80054f6:	ee18 0a10 	vmov	r0, s16
 80054fa:	f7fa fff1 	bl	80004e0 <__aeabi_f2d>
 80054fe:	a3c0      	add	r3, pc, #768	; (adr r3, 8005800 <drawMap+0x488>)
 8005500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005504:	f7fb fad4 	bl	8000ab0 <__aeabi_dcmpgt>
 8005508:	2800      	cmp	r0, #0
 800550a:	f000 853b 	beq.w	8005f84 <drawMap+0xc0c>
 800550e:	9b02      	ldr	r3, [sp, #8]
	else fCheckX = fCheck;
 8005510:	2505      	movs	r5, #5
	else if (angle > 2 * PI) angle = 0;
 8005512:	601c      	str	r4, [r3, #0]
	else fCheckY = fCheck;
 8005514:	462e      	mov	r6, r5
	if (JOY_get_axis_position(Y) > 60) {
 8005516:	2001      	movs	r0, #1
 8005518:	f7ff fa2e 	bl	8004978 <JOY_get_axis_position>
 800551c:	283c      	cmp	r0, #60	; 0x3c
 800551e:	f67f af6a 	bls.w	80053f6 <drawMap+0x7e>
		if(map[(int)py / 10][((int)px + fCheckX) / 10] == 0) px += 3 * cosf(angle);
 8005522:	4ac2      	ldr	r2, [pc, #776]	; (800582c <drawMap+0x4b4>)
 8005524:	4bc2      	ldr	r3, [pc, #776]	; (8005830 <drawMap+0x4b8>)
 8005526:	edd2 8a00 	vldr	s17, [r2]
 800552a:	ed93 8a00 	vldr	s16, [r3]
 800552e:	48c1      	ldr	r0, [pc, #772]	; (8005834 <drawMap+0x4bc>)
 8005530:	9204      	str	r2, [sp, #16]
 8005532:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	ee17 4a90 	vmov	r4, s15
 800553c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005540:	fb80 c104 	smull	ip, r1, r0, r4
 8005544:	ee17 2a90 	vmov	r2, s15
 8005548:	17e3      	asrs	r3, r4, #31
 800554a:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800554e:	4fba      	ldr	r7, [pc, #744]	; (8005838 <drawMap+0x4c0>)
 8005550:	1951      	adds	r1, r2, r5
 8005552:	fb80 c001 	smull	ip, r0, r0, r1
 8005556:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800555a:	17c9      	asrs	r1, r1, #31
 800555c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005560:	ebc1 01a0 	rsb	r1, r1, r0, asr #2
 8005564:	5c5b      	ldrb	r3, [r3, r1]
 8005566:	b97b      	cbnz	r3, 8005588 <drawMap+0x210>
 8005568:	9902      	ldr	r1, [sp, #8]
 800556a:	ed91 0a00 	vldr	s0, [r1]
 800556e:	f001 fc55 	bl	8006e1c <cosf>
 8005572:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8005576:	eea0 8a27 	vfma.f32	s16, s0, s15
 800557a:	9b03      	ldr	r3, [sp, #12]
 800557c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005580:	ed83 8a00 	vstr	s16, [r3]
 8005584:	ee17 2a90 	vmov	r2, s15
		if (map[((int)py + fCheckY) / 10][(int)px/ 10] == 0) py += 3 * sinf(angle);
 8005588:	49aa      	ldr	r1, [pc, #680]	; (8005834 <drawMap+0x4bc>)
 800558a:	4434      	add	r4, r6
 800558c:	fb81 0304 	smull	r0, r3, r1, r4
 8005590:	17e4      	asrs	r4, r4, #31
 8005592:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8005596:	fb81 0102 	smull	r0, r1, r1, r2
 800559a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800559e:	17d2      	asrs	r2, r2, #31
 80055a0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80055a4:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 80055a8:	5c9b      	ldrb	r3, [r3, r2]
 80055aa:	b95b      	cbnz	r3, 80055c4 <drawMap+0x24c>
 80055ac:	9b02      	ldr	r3, [sp, #8]
 80055ae:	ed93 0a00 	vldr	s0, [r3]
 80055b2:	f001 fc73 	bl	8006e9c <sinf>
 80055b6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80055ba:	eee0 8a27 	vfma.f32	s17, s0, s15
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	edc3 8a00 	vstr	s17, [r3]
	if (JOY_get_axis_position(Y) < 40) {
 80055c4:	2001      	movs	r0, #1
 80055c6:	f7ff f9d7 	bl	8004978 <JOY_get_axis_position>
 80055ca:	2827      	cmp	r0, #39	; 0x27
 80055cc:	f63f af20 	bhi.w	8005410 <drawMap+0x98>
		if (map[(int)py / 10][((int)px - fCheckX) / 10] == 0) px += -3 * cosf(angle);
 80055d0:	9b04      	ldr	r3, [sp, #16]
 80055d2:	4a98      	ldr	r2, [pc, #608]	; (8005834 <drawMap+0x4bc>)
 80055d4:	ed93 8a00 	vldr	s16, [r3]
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	4f97      	ldr	r7, [pc, #604]	; (8005838 <drawMap+0x4c0>)
 80055dc:	edd3 8a00 	vldr	s17, [r3]
 80055e0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80055e4:	ee17 4a90 	vmov	r4, s15
 80055e8:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80055ec:	fb82 3104 	smull	r3, r1, r2, r4
 80055f0:	ee17 8a90 	vmov	r8, s15
 80055f4:	17e3      	asrs	r3, r4, #31
 80055f6:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 80055fa:	eba8 0505 	sub.w	r5, r8, r5
 80055fe:	fb82 2105 	smull	r2, r1, r2, r5
 8005602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005606:	17ed      	asrs	r5, r5, #31
 8005608:	eb07 0243 	add.w	r2, r7, r3, lsl #1
 800560c:	ebc5 03a1 	rsb	r3, r5, r1, asr #2
 8005610:	5cd3      	ldrb	r3, [r2, r3]
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 84dc 	beq.w	8005fd0 <drawMap+0xc58>
 8005618:	9b02      	ldr	r3, [sp, #8]
 800561a:	edd3 9a00 	vldr	s19, [r3]
 800561e:	eeb0 0a69 	vmov.f32	s0, s19
 8005622:	f001 fbfb 	bl	8006e1c <cosf>
 8005626:	eeb0 9a40 	vmov.f32	s18, s0
		if (map[((int)py - fCheckY) / 10][(int)px / 10] == 0) py += -3 * sinf(angle);
 800562a:	4982      	ldr	r1, [pc, #520]	; (8005834 <drawMap+0x4bc>)
 800562c:	1ba4      	subs	r4, r4, r6
 800562e:	fb81 2304 	smull	r2, r3, r1, r4
 8005632:	17e4      	asrs	r4, r4, #31
 8005634:	ebc4 03a3 	rsb	r3, r4, r3, asr #2
 8005638:	fb81 2108 	smull	r2, r1, r1, r8
 800563c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005640:	ea4f 72e8 	mov.w	r2, r8, asr #31
 8005644:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8005648:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800564c:	eeb0 0a69 	vmov.f32	s0, s19
 8005650:	5c9b      	ldrb	r3, [r3, r2]
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 84af 	beq.w	8005fb6 <drawMap+0xc3e>
 8005658:	f001 fc20 	bl	8006e9c <sinf>
 800565c:	eef0 9a40 	vmov.f32	s19, s0
	if (!KBD_get_button_state(BTN_OK) && map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] == 3) map[(int)rokaPosY / Blocksize][(int)rokaPosX / Blocksize] = 0;
 8005660:	2000      	movs	r0, #0
 8005662:	f7ff fa7f 	bl	8004b64 <KBD_get_button_state>
 8005666:	2800      	cmp	r0, #0
 8005668:	f43f aef0 	beq.w	800544c <drawMap+0xd4>
 800566c:	4b73      	ldr	r3, [pc, #460]	; (800583c <drawMap+0x4c4>)
 800566e:	9307      	str	r3, [sp, #28]
 8005670:	681e      	ldr	r6, [r3, #0]
	else fCheckY = fCheck;
 8005672:	ed9f 8a73 	vldr	s16, [pc, #460]	; 8005840 <drawMap+0x4c8>
 8005676:	233c      	movs	r3, #60	; 0x3c
 8005678:	9305      	str	r3, [sp, #20]
 800567a:	eebb 9a0e 	vmov.f32	s18, #190	; 0xc1f00000 -30.0
		if (newAngle < 0) newAngle += 2 * PI;
		else if (newAngle > 2 * PI) newAngle -= 2 * PI;


		//GLEJ GOR PA DOL
		float aTan = 1 / tanf(newAngle);
 800567e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
		float newAngle = z * DEGREE + angle;
 8005682:	ee19 0a10 	vmov	r0, s18
 8005686:	f7fa ff2b 	bl	80004e0 <__aeabi_f2d>
 800568a:	a35f      	add	r3, pc, #380	; (adr r3, 8005808 <drawMap+0x490>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fa ff7e 	bl	8000590 <__aeabi_dmul>
 8005694:	9b02      	ldr	r3, [sp, #8]
 8005696:	4604      	mov	r4, r0
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	460d      	mov	r5, r1
 800569c:	f7fa ff20 	bl	80004e0 <__aeabi_f2d>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4620      	mov	r0, r4
 80056a6:	4629      	mov	r1, r5
 80056a8:	f7fa fdbc 	bl	8000224 <__adddf3>
 80056ac:	f7fb fa48 	bl	8000b40 <__aeabi_d2f>
 80056b0:	ee08 0a90 	vmov	s17, r0
		if (newAngle < 0) newAngle += 2 * PI;
 80056b4:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80056b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056bc:	f100 8454 	bmi.w	8005f68 <drawMap+0xbf0>
		else if (newAngle > 2 * PI) newAngle -= 2 * PI;
 80056c0:	f7fa ff0e 	bl	80004e0 <__aeabi_f2d>
 80056c4:	a34e      	add	r3, pc, #312	; (adr r3, 8005800 <drawMap+0x488>)
 80056c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ca:	4604      	mov	r4, r0
 80056cc:	460d      	mov	r5, r1
 80056ce:	f7fb f9ef 	bl	8000ab0 <__aeabi_dcmpgt>
 80056d2:	b170      	cbz	r0, 80056f2 <drawMap+0x37a>
 80056d4:	a34a      	add	r3, pc, #296	; (adr r3, 8005800 <drawMap+0x488>)
 80056d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	f7fa fd9f 	bl	8000220 <__aeabi_dsub>
 80056e2:	f7fb fa2d 	bl	8000b40 <__aeabi_d2f>
 80056e6:	ee08 0a90 	vmov	s17, r0
 80056ea:	f7fa fef9 	bl	80004e0 <__aeabi_f2d>
 80056ee:	4604      	mov	r4, r0
 80056f0:	460d      	mov	r5, r1
		float aTan = 1 / tanf(newAngle);
 80056f2:	eeb0 0a68 	vmov.f32	s0, s17
 80056f6:	f001 fc13 	bl	8006f20 <tanf>
		dof = 0;
		if (newAngle >= PI) { //GLEDA GOR
 80056fa:	a345      	add	r3, pc, #276	; (adr r3, 8005810 <drawMap+0x498>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	4620      	mov	r0, r4
 8005702:	4629      	mov	r1, r5
		float aTan = 1 / tanf(newAngle);
 8005704:	eef0 ba40 	vmov.f32	s23, s0
		if (newAngle >= PI) { //GLEDA GOR
 8005708:	f7fb f9c8 	bl	8000a9c <__aeabi_dcmpge>
			rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 800570c:	9b04      	ldr	r3, [sp, #16]
		float aTan = 1 / tanf(newAngle);
 800570e:	ee89 aaab 	vdiv.f32	s20, s19, s23
			rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 8005712:	ed93 fa00 	vldr	s30, [r3]
		if (newAngle >= PI) { //GLEDA GOR
 8005716:	2800      	cmp	r0, #0
 8005718:	f000 83f7 	beq.w	8005f0a <drawMap+0xb92>
			rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 800571c:	eefd 7acf 	vcvt.s32.f32	s15, s30
 8005720:	ee17 0a90 	vmov	r0, s15
 8005724:	fb90 f3f6 	sdiv	r3, r0, r6
 8005728:	fb06 0313 	mls	r3, r6, r3, r0
 800572c:	1ac0      	subs	r0, r0, r3
 800572e:	f7fa fec5 	bl	80004bc <__aeabi_i2d>
 8005732:	a339      	add	r3, pc, #228	; (adr r3, 8005818 <drawMap+0x4a0>)
 8005734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005738:	f7fa fd72 	bl	8000220 <__aeabi_dsub>
 800573c:	f7fb fa00 	bl	8000b40 <__aeabi_d2f>
			rvx = (py - rvy) * -aTan + px;
 8005740:	9a03      	ldr	r2, [sp, #12]
			rvy = (int)py - ((int)py % Blocksize) - 0.0001;
 8005742:	ee0d 0a10 	vmov	s26, r0
			rvx = (py - rvy) * -aTan + px;
 8005746:	edd2 fa00 	vldr	s31, [r2]
			dy = -Blocksize;
 800574a:	4273      	negs	r3, r6
			rvx = (py - rvy) * -aTan + px;
 800574c:	ee7d 7a4f 	vsub.f32	s15, s26, s30
			dy = -Blocksize;
 8005750:	ee07 3a10 	vmov	s14, r3
			rvx = (py - rvy) * -aTan + px;
 8005754:	eeb0 ea6f 	vmov.f32	s28, s31
 8005758:	eea7 ea8a 	vfma.f32	s28, s15, s20
			dy = -Blocksize;
 800575c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005760:	ee07 6a90 	vmov	s15, r6
			dx = dy * aTan;
 8005764:	ee2a 6a26 	vmul.f32	s12, s20, s13
 8005768:	eeb8 aae7 	vcvt.f32.s32	s20, s15
			rvx = px;
			rvy = py;
			dof = 15;
		}

		while (dof < 15) { //PREVER ALI SE KAM ZALETI V 15 KORAKIH
 800576c:	eec9 aa8a 	vdiv.f32	s21, s19, s20
	else fCheckY = fCheck;
 8005770:	220f      	movs	r2, #15
			wx = rvx / Blocksize;
 8005772:	ee6a 7a8e 	vmul.f32	s15, s21, s28
			wy = rvy / Blocksize;
 8005776:	ee2a 7a8d 	vmul.f32	s14, s21, s26
			wx = rvx / Blocksize;
 800577a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800577e:	ee17 3a90 	vmov	r3, s15
			if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[(int)wy][(int)wx] != 0) {
 8005782:	2b09      	cmp	r3, #9
			wy = rvy / Blocksize;
 8005784:	eefd 7ac7 	vcvt.s32.f32	s15, s14
			if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[(int)wy][(int)wx] != 0) {
 8005788:	f200 81db 	bhi.w	8005b42 <drawMap+0x7ca>
 800578c:	ee17 1a90 	vmov	r1, s15
 8005790:	4829      	ldr	r0, [pc, #164]	; (8005838 <drawMap+0x4c0>)
 8005792:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8005796:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800579a:	ee17 0a90 	vmov	r0, s15
 800579e:	2809      	cmp	r0, #9
 80057a0:	f200 81cf 	bhi.w	8005b42 <drawMap+0x7ca>
 80057a4:	5ccb      	ldrb	r3, [r1, r3]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 81cb 	beq.w	8005b42 <drawMap+0x7ca>
				dof = 15;
				vmt = map[(int)wy][(int)wx];
 80057ac:	ee07 3a90 	vmov	s15, r3
 80057b0:	eef8 ca67 	vcvt.f32.u32	s25, s15
				rvx += dx;
				rvy += dy;
				dof++;
			}
		}
		d1 = sqrt((px - rvx) * (px - rvx) + (py - rvy) * (py - rvy));
 80057b4:	ee7f 7a4d 	vsub.f32	s15, s30, s26
 80057b8:	ee3f 7ace 	vsub.f32	s14, s31, s28
 80057bc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80057c0:	eee7 7a07 	vfma.f32	s15, s14, s14
 80057c4:	ee17 0a90 	vmov	r0, s15
 80057c8:	f7fa fe8a 	bl	80004e0 <__aeabi_f2d>
 80057cc:	ec41 0b10 	vmov	d0, r0, r1
 80057d0:	f001 fbce 	bl	8006f70 <sqrt>
 80057d4:	ec51 0b10 	vmov	r0, r1, d0
 80057d8:	f7fb f9b2 	bl	8000b40 <__aeabi_d2f>


		//GLEJ LEVO PA DESNO
		dof = 0;
		float nTan = tanf(newAngle);
		if (newAngle >= ((3 * PI) / 2) || newAngle <= PI / 2) { //GLEDA DESNO
 80057dc:	a310      	add	r3, pc, #64	; (adr r3, 8005820 <drawMap+0x4a8>)
 80057de:	e9d3 2300 	ldrd	r2, r3, [r3]
		d1 = sqrt((px - rvx) * (px - rvx) + (py - rvy) * (py - rvy));
 80057e2:	4607      	mov	r7, r0
		if (newAngle >= ((3 * PI) / 2) || newAngle <= PI / 2) { //GLEDA DESNO
 80057e4:	4629      	mov	r1, r5
 80057e6:	4620      	mov	r0, r4
		d1 = sqrt((px - rvx) * (px - rvx) + (py - rvy) * (py - rvy));
 80057e8:	ee0c 7a10 	vmov	s24, r7
		if (newAngle >= ((3 * PI) / 2) || newAngle <= PI / 2) { //GLEDA DESNO
 80057ec:	f7fb f956 	bl	8000a9c <__aeabi_dcmpge>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	f040 834d 	bne.w	8005e90 <drawMap+0xb18>
 80057f6:	e025      	b.n	8005844 <drawMap+0x4cc>
 80057f8:	9999999a 	.word	0x9999999a
 80057fc:	3fb99999 	.word	0x3fb99999
 8005800:	f01b866e 	.word	0xf01b866e
 8005804:	401921f9 	.word	0x401921f9
 8005808:	7707c94d 	.word	0x7707c94d
 800580c:	3f91df46 	.word	0x3f91df46
 8005810:	f01b866e 	.word	0xf01b866e
 8005814:	400921f9 	.word	0x400921f9
 8005818:	eb1c432d 	.word	0xeb1c432d
 800581c:	3f1a36e2 	.word	0x3f1a36e2
 8005820:	7414a4d2 	.word	0x7414a4d2
 8005824:	4012d97b 	.word	0x4012d97b
 8005828:	20000010 	.word	0x20000010
 800582c:	2000007c 	.word	0x2000007c
 8005830:	20000078 	.word	0x20000078
 8005834:	66666667 	.word	0x66666667
 8005838:	20000014 	.word	0x20000014
 800583c:	2000000c 	.word	0x2000000c
 8005840:	3f5db3d8 	.word	0x3f5db3d8
 8005844:	a3fb      	add	r3, pc, #1004	; (adr r3, 8005c34 <drawMap+0x8bc>)
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	4620      	mov	r0, r4
 800584c:	4629      	mov	r1, r5
 800584e:	f7fb f91b 	bl	8000a88 <__aeabi_dcmple>
 8005852:	2800      	cmp	r0, #0
 8005854:	f040 831c 	bne.w	8005e90 <drawMap+0xb18>
			rhy = (px - rhx) * -nTan + py;
			dx = Blocksize;
			dy = dx * nTan;
		}
		else if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) {  //GLEDA LEVO
			rhx = (int)px - ((int)px % Blocksize) - 0.0001;
 8005858:	eefd 7aef 	vcvt.s32.f32	s15, s31
			rhy = (px - rhx) * -nTan + py;
 800585c:	eef0 da4f 	vmov.f32	s27, s30
			rhx = (int)px - ((int)px % Blocksize) - 0.0001;
 8005860:	ee17 0a90 	vmov	r0, s15
 8005864:	fb90 f3f6 	sdiv	r3, r0, r6
 8005868:	fb06 0313 	mls	r3, r6, r3, r0
 800586c:	1ac0      	subs	r0, r0, r3
 800586e:	f7fa fe25 	bl	80004bc <__aeabi_i2d>
 8005872:	a3f2      	add	r3, pc, #968	; (adr r3, 8005c3c <drawMap+0x8c4>)
 8005874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005878:	f7fa fcd2 	bl	8000220 <__aeabi_dsub>
 800587c:	f7fb f960 	bl	8000b40 <__aeabi_d2f>
 8005880:	ee0b 0a10 	vmov	s22, r0
			dx = -Blocksize;
 8005884:	4273      	negs	r3, r6
			rhy = (px - rhx) * -nTan + py;
 8005886:	ee7b 7a6f 	vsub.f32	s15, s22, s31
			dx = -Blocksize;
 800588a:	ee07 3a10 	vmov	s14, r3
			rhy = (px - rhx) * -nTan + py;
 800588e:	eeeb daa7 	vfma.f32	s27, s23, s15
			dx = -Blocksize;
 8005892:	eef8 6ac7 	vcvt.f32.s32	s13, s14
			dy = dx * nTan;
 8005896:	ee2b 6aa6 	vmul.f32	s12, s23, s13
			rhx = px;
			rhy = py;
			dof = 15;
		}

		while (dof < 15) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 800589a:	220f      	movs	r2, #15
			wx = rhx / Blocksize;
 800589c:	ee6a 7a8b 	vmul.f32	s15, s21, s22
			wy = rhy / Blocksize;
 80058a0:	ee2a 7aad 	vmul.f32	s14, s21, s27
			wx = rhx / Blocksize;
 80058a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80058a8:	ee17 3a90 	vmov	r3, s15
			if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[wy][wx] != 0) {
 80058ac:	2b09      	cmp	r3, #9
			wy = rhy / Blocksize;
 80058ae:	eefd 7ac7 	vcvt.s32.f32	s15, s14
			if (wx > -1 && wx < sizeof(map)/sizeof(map[0]) && wy > -1 && wy < sizeof(map)/sizeof(map[0]) && map[wy][wx] != 0) {
 80058b2:	f200 813c 	bhi.w	8005b2e <drawMap+0x7b6>
 80058b6:	ee17 1a90 	vmov	r1, s15
 80058ba:	48d3      	ldr	r0, [pc, #844]	; (8005c08 <drawMap+0x890>)
 80058bc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80058c0:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80058c4:	ee17 0a90 	vmov	r0, s15
 80058c8:	2809      	cmp	r0, #9
 80058ca:	f200 8130 	bhi.w	8005b2e <drawMap+0x7b6>
 80058ce:	5ccb      	ldrb	r3, [r1, r3]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 812c 	beq.w	8005b2e <drawMap+0x7b6>
				dof = 15;
				hmt = map[wy][wx];
 80058d6:	ee07 3a90 	vmov	s15, r3
 80058da:	eef8 ea67 	vcvt.f32.u32	s29, s15
				rhx += dx;
				rhy += dy;
				dof++;
			}
		}
		d2 = sqrt((px - rhx) * (px - rhx) + (py - rhy) * (py - rhy));
 80058de:	ee3f fa6d 	vsub.f32	s30, s30, s27
 80058e2:	ee7f facb 	vsub.f32	s31, s31, s22
 80058e6:	ee2f fa0f 	vmul.f32	s30, s30, s30
 80058ea:	eeaf faaf 	vfma.f32	s30, s31, s31
 80058ee:	ee1f 0a10 	vmov	r0, s30
 80058f2:	f7fa fdf5 	bl	80004e0 <__aeabi_f2d>
 80058f6:	ec41 0b10 	vmov	d0, r0, r1
 80058fa:	f001 fb39 	bl	8006f70 <sqrt>
 80058fe:	ec51 0b10 	vmov	r0, r1, d0
 8005902:	f7fb f91d 	bl	8000b40 <__aeabi_d2f>
 8005906:	ee00 0a10 	vmov	s0, r0

		//NARIŠI ZARKE IN 3D MAPO
		float shade = 1;
		//glLineWidth(2);
		if (d1 > d2) {
 800590a:	eeb4 cac0 	vcmpe.f32	s24, s0
 800590e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005912:	f300 8326 	bgt.w	8005f62 <drawMap+0xbea>
 8005916:	eef0 ea6c 	vmov.f32	s29, s25
 800591a:	eef0 da4d 	vmov.f32	s27, s26
 800591e:	eeb0 ba4e 	vmov.f32	s22, s28
			ry = rhy;
		}
		else {
			//glColor3f(255 / 255, 109 / 255, 119 / 255);
			//line(px, py, rvx, rvy);
			d = d1;
 8005922:	eeb0 0a4c 	vmov.f32	s0, s24
		float shade = 1;
 8005926:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
			rx = rvx;
			ry = rvy;
			hmt = vmt; //DA SE OBARVAJO VSE STRANI
		}
		//NARIŠI STENE
		float lineH = (Blocksize * 100) / (d * cosf(z * DEGREE)); //POPRAVI FISHEYE
 800592a:	2364      	movs	r3, #100	; 0x64
 800592c:	fb03 f606 	mul.w	r6, r3, r6
 8005930:	ee07 6a90 	vmov	s15, r6
 8005934:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005938:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float ty_step = 32.0f / (float)lineH; //ZATO DA SE TEKSTURA ENAKOMERNO PORAZDELI
		float ty_offset = 0; //ZATO DA SE TEKSTURE LEPO PORAZDELIJO
		if (lineH > height) {
 800593c:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 8005c0c <drawMap+0x894>
		float ty_step = 32.0f / (float)lineH; //ZATO DA SE TEKSTURA ENAKOMERNO PORAZDELI
 8005940:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8005c10 <drawMap+0x898>
		float lineH = (Blocksize * 100) / (d * cosf(z * DEGREE)); //POPRAVI FISHEYE
 8005944:	eec7 ba80 	vdiv.f32	s23, s15, s0
		if (lineH > height) {
 8005948:	eef4 bac7 	vcmpe.f32	s23, s14
 800594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float ty_step = 32.0f / (float)lineH; //ZATO DA SE TEKSTURA ENAKOMERNO PORAZDELI
 8005950:	eec6 caab 	vdiv.f32	s25, s13, s23
		if (lineH > height) {
 8005954:	f300 82f7 	bgt.w	8005f46 <drawMap+0xbce>
 8005958:	ed9f caae 	vldr	s24, [pc, #696]	; 8005c14 <drawMap+0x89c>
 800595c:	ed9f 8aae 	vldr	s16, [pc, #696]	; 8005c18 <drawMap+0x8a0>
 8005960:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005964:	eeab cae7 	vfms.f32	s24, s23, s15
 8005968:	ee7b 7a8c 	vadd.f32	s15, s23, s24
 800596c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005970:	ee17 ba90 	vmov	fp, s15
			ty_offset = (lineH - height) / 2.0f;
			lineH = height;
		}
		float lineOff = 50 - lineH / 2;
		float ty = ty_offset * ty_step; //+ (hmt - 1) * 32;
		float scale = (float)Blocksize / 32.0f;
 8005974:	eddf 7aa9 	vldr	s15, [pc, #676]	; 8005c1c <drawMap+0x8a4>
		float tx = 0;
		if (shade == 1) {
 8005978:	eef4 aa69 	vcmp.f32	s21, s19
 800597c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float scale = (float)Blocksize / 32.0f;
 8005980:	ee2a aa27 	vmul.f32	s20, s20, s15
		if (shade == 1) {
 8005984:	f040 829b 	bne.w	8005ebe <drawMap+0xb46>
			tx = (int)(rx / scale) % 32;
 8005988:	eecb 7a0a 	vdiv.f32	s15, s22, s20
			if (newAngle < 2 * PI) tx = 31 - tx;
 800598c:	4620      	mov	r0, r4
 800598e:	4629      	mov	r1, r5
			tx = (int)(rx / scale) % 32;
 8005990:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005994:	ee17 4a90 	vmov	r4, s15
 8005998:	4263      	negs	r3, r4
 800599a:	f003 031f 	and.w	r3, r3, #31
 800599e:	f004 041f 	and.w	r4, r4, #31
 80059a2:	bf58      	it	pl
 80059a4:	425c      	negpl	r4, r3
 80059a6:	ee07 4a90 	vmov	s15, r4
			if (newAngle < 2 * PI) tx = 31 - tx;
 80059aa:	a38d      	add	r3, pc, #564	; (adr r3, 8005be0 <drawMap+0x868>)
 80059ac:	e9d3 2300 	ldrd	r2, r3, [r3]
			tx = (int)(rx / scale) % 32;
 80059b0:	eeb8 aae7 	vcvt.f32.s32	s20, s15
			if (newAngle < 2 * PI) tx = 31 - tx;
 80059b4:	f7fb f85e 	bl	8000a74 <__aeabi_dcmplt>
 80059b8:	b118      	cbz	r0, 80059c2 <drawMap+0x64a>
		}
		else {
			tx = (int)(ry / scale) % 32;
			if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 80059ba:	eef3 7a0f 	vmov.f32	s15, #63	; 0x41f80000  31.0
 80059be:	ee37 aaca 	vsub.f32	s20, s15, s20
		}

		//glPointSize(25);
		//glBegin(GL_POINTS);
		for (int j = 0;j < lineH;j++) {
 80059c2:	eef5 bac0 	vcmpe.f32	s23, #0.0
 80059c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ca:	f340 80ca 	ble.w	8005b62 <drawMap+0x7ea>
				break;

			default:
				break;
			}
			int wallx = (int)((float)(z+30)*width/60);
 80059ce:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 80059d2:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005c20 <drawMap+0x8a8>
 80059d6:	ee79 7a27 	vadd.f32	s15, s18, s15
		for (int j = 0;j < lineH;j++) {
 80059da:	f04f 0900 	mov.w	r9, #0
			int wallx = (int)((float)(z+30)*width/60);
 80059de:	ee67 7a87 	vmul.f32	s15, s15, s14
			int wally = lineOff + j;

			wallx *= s_scale;
 80059e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80059e6:	ee17 0a90 	vmov	r0, s15
 80059ea:	f7fa fd67 	bl	80004bc <__aeabi_i2d>
 80059ee:	a37e      	add	r3, pc, #504	; (adr r3, 8005be8 <drawMap+0x870>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fdcc 	bl	8000590 <__aeabi_dmul>
 80059f8:	f7fb f87a 	bl	8000af0 <__aeabi_d2iz>
 80059fc:	eefd 7aca 	vcvt.s32.f32	s15, s20
		for (int j = 0;j < lineH;j++) {
 8005a00:	f8cd b018 	str.w	fp, [sp, #24]
 8005a04:	ee17 3a90 	vmov	r3, s15
 8005a08:	eefd 7aee 	vcvt.s32.f32	s15, s29
			wallx *= s_scale;
 8005a0c:	4682      	mov	sl, r0
 8005a0e:	ee17 8a90 	vmov	r8, s15
		for (int j = 0;j < lineH;j++) {
 8005a12:	469b      	mov	fp, r3
 8005a14:	eddf 7a80 	vldr	s15, [pc, #512]	; 8005c18 <drawMap+0x8a0>
 8005a18:	e032      	b.n	8005a80 <drawMap+0x708>
			switch ((int)hmt)
 8005a1a:	f1b8 0f01 	cmp.w	r8, #1
 8005a1e:	f000 809a 	beq.w	8005b56 <drawMap+0x7de>
 8005a22:	2400      	movs	r4, #0
 8005a24:	4627      	mov	r7, r4
 8005a26:	4625      	mov	r5, r4
			int wally = lineOff + j;
 8005a28:	ee77 7a8c 	vadd.f32	s15, s15, s24
		for (int j = 0;j < lineH;j++) {
 8005a2c:	f109 0901 	add.w	r9, r9, #1
			wallx += s_offset;

			wally *= s_scale;
 8005a30:	eefd 7ae7 	vcvt.s32.f32	s15, s15

			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
			ty += ty_step;
 8005a34:	ee38 8a2c 	vadd.f32	s16, s16, s25
			wally *= s_scale;
 8005a38:	ee17 0a90 	vmov	r0, s15
 8005a3c:	f7fa fd3e 	bl	80004bc <__aeabi_i2d>
 8005a40:	a369      	add	r3, pc, #420	; (adr r3, 8005be8 <drawMap+0x870>)
 8005a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a46:	f7fa fda3 	bl	8000590 <__aeabi_dmul>
			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8005a4a:	463a      	mov	r2, r7
			wally *= s_scale;
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460f      	mov	r7, r1
			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8005a50:	4628      	mov	r0, r5
 8005a52:	4621      	mov	r1, r4
 8005a54:	f7ff fbea 	bl	800522c <create_rgb>
			wally *= s_scale;
 8005a58:	4639      	mov	r1, r7
			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8005a5a:	b282      	uxth	r2, r0
			wally *= s_scale;
 8005a5c:	4630      	mov	r0, r6
			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8005a5e:	9201      	str	r2, [sp, #4]
			wally *= s_scale;
 8005a60:	f7fb f846 	bl	8000af0 <__aeabi_d2iz>
			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8005a64:	9a01      	ldr	r2, [sp, #4]
			wally *= s_scale;
 8005a66:	4601      	mov	r1, r0
			narisi_velik_kvadrat_stene(wallx, wally, create_rgb(red, green, blue));
 8005a68:	4650      	mov	r0, sl
 8005a6a:	f7ff fbad 	bl	80051c8 <narisi_velik_kvadrat_stene>
		for (int j = 0;j < lineH;j++) {
 8005a6e:	ee07 9a90 	vmov	s15, r9
 8005a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a76:	eef4 7aeb 	vcmpe.f32	s15, s23
 8005a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a7e:	d56e      	bpl.n	8005b5e <drawMap+0x7e6>
			int pixel = ((int)ty * 32 + (int)tx) * 3;
 8005a80:	eebd 7ac8 	vcvt.s32.f32	s14, s16
			switch ((int)hmt)
 8005a84:	f1b8 0f02 	cmp.w	r8, #2
			int pixel = ((int)ty * 32 + (int)tx) * 3;
 8005a88:	ee17 3a10 	vmov	r3, s14
 8005a8c:	eb0b 1343 	add.w	r3, fp, r3, lsl #5
 8005a90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
			switch ((int)hmt)
 8005a94:	d061      	beq.n	8005b5a <drawMap+0x7e2>
 8005a96:	f1b8 0f03 	cmp.w	r8, #3
 8005a9a:	d1be      	bne.n	8005a1a <drawMap+0x6a2>
				green = t_wood[pixel + 1] * shade;
 8005a9c:	4961      	ldr	r1, [pc, #388]	; (8005c24 <drawMap+0x8ac>)
 8005a9e:	18ca      	adds	r2, r1, r3
				red = t_wood[pixel + 0] * shade;
 8005aa0:	5ccb      	ldrb	r3, [r1, r3]
 8005aa2:	ee07 3a10 	vmov	s14, r3
				green = t_wood[pixel + 1] * shade;
 8005aa6:	7853      	ldrb	r3, [r2, #1]
 8005aa8:	ee06 3a10 	vmov	s12, r3
				blue = t_wood[pixel + 2] * shade;
 8005aac:	7893      	ldrb	r3, [r2, #2]
 8005aae:	ee06 3a90 	vmov	s13, r3
				green = t_wood[pixel + 1] * shade;
 8005ab2:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
				blue = t_wood[pixel + 2] * shade;
 8005ab6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
				red = t_wood[pixel + 0] * shade;
 8005aba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				green = t_wood[pixel + 1] * shade;
 8005abe:	ee26 6a2a 	vmul.f32	s12, s12, s21
				blue = t_wood[pixel + 2] * shade;
 8005ac2:	ee66 6aaa 	vmul.f32	s13, s13, s21
				red = t_wood[pixel + 0] * shade;
 8005ac6:	ee27 7a2a 	vmul.f32	s14, s14, s21
				green = t_wood[pixel + 1] * shade;
 8005aca:	eebd 6ac6 	vcvt.s32.f32	s12, s12
				blue = t_wood[pixel + 2] * shade;
 8005ace:	eefd 6ae6 	vcvt.s32.f32	s13, s13
				red = t_wood[pixel + 0] * shade;
 8005ad2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
				green = t_wood[pixel + 1] * shade;
 8005ad6:	ee16 4a10 	vmov	r4, s12
				blue = t_wood[pixel + 2] * shade;
 8005ada:	ee16 7a90 	vmov	r7, s13
				red = t_wood[pixel + 0] * shade;
 8005ade:	ee17 5a10 	vmov	r5, s14
				break;
 8005ae2:	e7a1      	b.n	8005a28 <drawMap+0x6b0>
		if(JOY_get_axis_position(X) < 40) angle -= 0.1;
 8005ae4:	4c50      	ldr	r4, [pc, #320]	; (8005c28 <drawMap+0x8b0>)
 8005ae6:	9402      	str	r4, [sp, #8]
 8005ae8:	6820      	ldr	r0, [r4, #0]
 8005aea:	f7fa fcf9 	bl	80004e0 <__aeabi_f2d>
 8005aee:	a340      	add	r3, pc, #256	; (adr r3, 8005bf0 <drawMap+0x878>)
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f7fa fb94 	bl	8000220 <__aeabi_dsub>
 8005af8:	f7fb f822 	bl	8000b40 <__aeabi_d2f>
 8005afc:	6020      	str	r0, [r4, #0]
		if(JOY_get_axis_position(X) > 60) angle += 0.1;
 8005afe:	2000      	movs	r0, #0
 8005b00:	f7fe ff3a 	bl	8004978 <JOY_get_axis_position>
 8005b04:	283c      	cmp	r0, #60	; 0x3c
 8005b06:	f63f ace0 	bhi.w	80054ca <drawMap+0x152>
 8005b0a:	9b02      	ldr	r3, [sp, #8]
 8005b0c:	ed93 8a00 	vldr	s16, [r3]
 8005b10:	e4e9      	b.n	80054e6 <drawMap+0x16e>
		if(JOY_get_axis_position(X) < 40) angle += 0.1;
 8005b12:	4c45      	ldr	r4, [pc, #276]	; (8005c28 <drawMap+0x8b0>)
 8005b14:	9402      	str	r4, [sp, #8]
 8005b16:	6820      	ldr	r0, [r4, #0]
 8005b18:	f7fa fce2 	bl	80004e0 <__aeabi_f2d>
 8005b1c:	a334      	add	r3, pc, #208	; (adr r3, 8005bf0 <drawMap+0x878>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fb7f 	bl	8000224 <__adddf3>
 8005b26:	f7fb f80b 	bl	8000b40 <__aeabi_d2f>
 8005b2a:	6020      	str	r0, [r4, #0]
 8005b2c:	e43a      	b.n	80053a4 <drawMap+0x2c>
		while (dof < 15) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 8005b2e:	3a01      	subs	r2, #1
				rhx += dx;
 8005b30:	ee3b ba26 	vadd.f32	s22, s22, s13
				rhy += dy;
 8005b34:	ee7d da86 	vadd.f32	s27, s27, s12
		while (dof < 15) { //PREVERI ALI SI SE ZALETU V 15 KORAKIH
 8005b38:	f47f aeb0 	bne.w	800589c <drawMap+0x524>
 8005b3c:	eddf ea36 	vldr	s29, [pc, #216]	; 8005c18 <drawMap+0x8a0>
 8005b40:	e6cd      	b.n	80058de <drawMap+0x566>
		while (dof < 15) { //PREVER ALI SE KAM ZALETI V 15 KORAKIH
 8005b42:	3a01      	subs	r2, #1
				rvx += dx;
 8005b44:	ee3e ea06 	vadd.f32	s28, s28, s12
				rvy += dy;
 8005b48:	ee3d da26 	vadd.f32	s26, s26, s13
		while (dof < 15) { //PREVER ALI SE KAM ZALETI V 15 KORAKIH
 8005b4c:	f47f ae11 	bne.w	8005772 <drawMap+0x3fa>
 8005b50:	eddf ca31 	vldr	s25, [pc, #196]	; 8005c18 <drawMap+0x8a0>
 8005b54:	e62e      	b.n	80057b4 <drawMap+0x43c>
				red = t_brickWall[pixel + 0] * shade;
 8005b56:	4935      	ldr	r1, [pc, #212]	; (8005c2c <drawMap+0x8b4>)
 8005b58:	e7a1      	b.n	8005a9e <drawMap+0x726>
				green = t_wall[pixel + 1] * shade;
 8005b5a:	4935      	ldr	r1, [pc, #212]	; (8005c30 <drawMap+0x8b8>)
 8005b5c:	e79f      	b.n	8005a9e <drawMap+0x726>
 8005b5e:	f8dd b018 	ldr.w	fp, [sp, #24]
		//glEnd();

		//NARIŠI TLA IN STROP
		//glPointSize(25);
		//glBegin(GL_POINTS);
		for (int y = lineOff + lineH;y < height;y++) {
 8005b62:	f1bb 0f63 	cmp.w	fp, #99	; 0x63
 8005b66:	f300 8177 	bgt.w	8005e58 <drawMap+0xae0>
			if (floorAngle < 0) floorAngle += 2 * PI;
			else if (floorAngle > 2 * PI) floorAngle -= 2 * PI;
			//floorAngle = cosf(floorAngle);
			//tx = px / 0.3 + cosf(newAngle) * 49 * 32 / dy / cosf(floorAngle);
			//ty = py / 0.3 + sinf(newAngle) * 49 * 32 / dy / cosf(floorAngle);
			tx = px / 0.3 + cosf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005b6a:	eeb0 0a68 	vmov.f32	s0, s17
 8005b6e:	f001 f955 	bl	8006e1c <cosf>
 8005b72:	ee10 0a10 	vmov	r0, s0
 8005b76:	f7fa fcb3 	bl	80004e0 <__aeabi_f2d>
 8005b7a:	a31f      	add	r3, pc, #124	; (adr r3, 8005bf8 <drawMap+0x880>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fd06 	bl	8000590 <__aeabi_dmul>
			ty = py / 0.3 + sinf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005b84:	eeb0 0a68 	vmov.f32	s0, s17
			tx = px / 0.3 + cosf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005b88:	ec41 0b1b 	vmov	d11, r0, r1
			ty = py / 0.3 + sinf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005b8c:	f001 f986 	bl	8006e9c <sinf>
 8005b90:	ee10 0a10 	vmov	r0, s0
 8005b94:	f7fa fca4 	bl	80004e0 <__aeabi_f2d>
 8005b98:	a317      	add	r3, pc, #92	; (adr r3, 8005bf8 <drawMap+0x880>)
 8005b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b9e:	f7fa fcf7 	bl	8000590 <__aeabi_dmul>
			int red = t_floor[pixel + 0] * 0.7;
			int green = t_floor[pixel + 1] * 0.7;
			int blue = t_floor[pixel + 2] * 0.7;
			//glColor3ub(red, green, blue);
			//glVertex2i((float)(z + 30)* width / 60, y);
			int tlax = (int)((float)(z+30)*width/60);
 8005ba2:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8005ba6:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005c20 <drawMap+0x8a8>
			float dy = y - (height / 2.0f);
 8005baa:	eddf aa1a 	vldr	s21, [pc, #104]	; 8005c14 <drawMap+0x89c>
			int tlax = (int)((float)(z+30)*width/60);
 8005bae:	ee79 7a27 	vadd.f32	s15, s18, s15
			ty = py / 0.3 + sinf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005bb2:	ec41 0b1c 	vmov	d12, r0, r1
			int tlax = (int)((float)(z+30)*width/60);
 8005bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
			int blue = t_floor[pixel + 2] * 0.7;
 8005bba:	f20f 0944 	addw	r9, pc, #68	; 0x44
 8005bbe:	e9d9 8900 	ldrd	r8, r9, [r9]
			int tlay = y;

			tlax *= s_scale;
 8005bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005bc6:	ee17 0a90 	vmov	r0, s15
 8005bca:	f7fa fc77 	bl	80004bc <__aeabi_i2d>
 8005bce:	a306      	add	r3, pc, #24	; (adr r3, 8005be8 <drawMap+0x870>)
 8005bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd4:	f7fa fcdc 	bl	8000590 <__aeabi_dmul>
 8005bd8:	f7fa ff8a 	bl	8000af0 <__aeabi_d2iz>
 8005bdc:	4682      	mov	sl, r0
 8005bde:	e11c      	b.n	8005e1a <drawMap+0xaa2>
 8005be0:	f01b866e 	.word	0xf01b866e
 8005be4:	401921f9 	.word	0x401921f9
 8005be8:	33333333 	.word	0x33333333
 8005bec:	40033333 	.word	0x40033333
 8005bf0:	9999999a 	.word	0x9999999a
 8005bf4:	3fb99999 	.word	0x3fb99999
 8005bf8:	7ae147ae 	.word	0x7ae147ae
 8005bfc:	409cde14 	.word	0x409cde14
 8005c00:	66666666 	.word	0x66666666
 8005c04:	3fe66666 	.word	0x3fe66666
 8005c08:	20000014 	.word	0x20000014
 8005c0c:	42c80000 	.word	0x42c80000
 8005c10:	42000000 	.word	0x42000000
 8005c14:	42480000 	.word	0x42480000
 8005c18:	00000000 	.word	0x00000000
 8005c1c:	3d000000 	.word	0x3d000000
 8005c20:	3fd55556 	.word	0x3fd55556
 8005c24:	080161c8 	.word	0x080161c8
 8005c28:	20000010 	.word	0x20000010
 8005c2c:	08007dc8 	.word	0x08007dc8
 8005c30:	080155c8 	.word	0x080155c8
 8005c34:	f01b866e 	.word	0xf01b866e
 8005c38:	3ff921f9 	.word	0x3ff921f9
 8005c3c:	eb1c432d 	.word	0xeb1c432d
 8005c40:	3f1a36e2 	.word	0x3f1a36e2
			else if (floorAngle > 2 * PI) floorAngle -= 2 * PI;
 8005c44:	f7fa fc4c 	bl	80004e0 <__aeabi_f2d>
 8005c48:	a3f1      	add	r3, pc, #964	; (adr r3, 8006010 <drawMap+0xc98>)
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	4604      	mov	r4, r0
 8005c50:	460d      	mov	r5, r1
 8005c52:	f7fa ff2d 	bl	8000ab0 <__aeabi_dcmpgt>
 8005c56:	b150      	cbz	r0, 8005c6e <drawMap+0x8f6>
 8005c58:	a3ed      	add	r3, pc, #948	; (adr r3, 8006010 <drawMap+0xc98>)
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4629      	mov	r1, r5
 8005c62:	f7fa fadd 	bl	8000220 <__aeabi_dsub>
 8005c66:	f7fa ff6b 	bl	8000b40 <__aeabi_d2f>
 8005c6a:	ee08 0a10 	vmov	s16, r0
			tx = px / 0.3 + cosf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005c6e:	eeb0 0a48 	vmov.f32	s0, s16
 8005c72:	f001 f8d3 	bl	8006e1c <cosf>
 8005c76:	ee1a 0a10 	vmov	r0, s20
 8005c7a:	ee10 5a10 	vmov	r5, s0
 8005c7e:	f7fa fc2f 	bl	80004e0 <__aeabi_f2d>
 8005c82:	4602      	mov	r2, r0
 8005c84:	4628      	mov	r0, r5
 8005c86:	4614      	mov	r4, r2
 8005c88:	460d      	mov	r5, r1
 8005c8a:	f7fa fc29 	bl	80004e0 <__aeabi_f2d>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4620      	mov	r0, r4
 8005c94:	4629      	mov	r1, r5
 8005c96:	f7fa fc7b 	bl	8000590 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	2000      	movs	r0, #0
 8005ca0:	49e3      	ldr	r1, [pc, #908]	; (8006030 <drawMap+0xcb8>)
 8005ca2:	f7fa fd9f 	bl	80007e4 <__aeabi_ddiv>
			ty = py / 0.3 + sinf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005ca6:	9b04      	ldr	r3, [sp, #16]
 8005ca8:	4606      	mov	r6, r0
 8005caa:	6818      	ldr	r0, [r3, #0]
 8005cac:	460f      	mov	r7, r1
 8005cae:	f7fa fc17 	bl	80004e0 <__aeabi_f2d>
 8005cb2:	a3d3      	add	r3, pc, #844	; (adr r3, 8006000 <drawMap+0xc88>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fc6a 	bl	8000590 <__aeabi_dmul>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	ec51 0b1c 	vmov	r0, r1, d12
 8005cc8:	f7fa fc62 	bl	8000590 <__aeabi_dmul>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4620      	mov	r0, r4
 8005cd2:	4629      	mov	r1, r5
 8005cd4:	f7fa faa6 	bl	8000224 <__adddf3>
 8005cd8:	f7fa ff32 	bl	8000b40 <__aeabi_d2f>
			int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 8005cdc:	ee07 0a90 	vmov	s15, r0
			tx = px / 0.3 + cosf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005ce0:	9b03      	ldr	r3, [sp, #12]
			int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 8005ce2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
			tx = px / 0.3 + cosf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005ce6:	6818      	ldr	r0, [r3, #0]
			int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 8005ce8:	ee17 5a90 	vmov	r5, s15
			tx = px / 0.3 + cosf(newAngle) * 57.735 * 32 / dy / cosf(floorAngle);
 8005cec:	f7fa fbf8 	bl	80004e0 <__aeabi_f2d>
 8005cf0:	a3c3      	add	r3, pc, #780	; (adr r3, 8006000 <drawMap+0xc88>)
 8005cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf6:	f7fa fc4b 	bl	8000590 <__aeabi_dmul>
 8005cfa:	4632      	mov	r2, r6
 8005cfc:	463b      	mov	r3, r7
 8005cfe:	4606      	mov	r6, r0
 8005d00:	460f      	mov	r7, r1
 8005d02:	ec51 0b1b 	vmov	r0, r1, d11
 8005d06:	f7fa fc43 	bl	8000590 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4630      	mov	r0, r6
 8005d10:	4639      	mov	r1, r7
 8005d12:	f7fa fa87 	bl	8000224 <__adddf3>
 8005d16:	f7fa ff13 	bl	8000b40 <__aeabi_d2f>
			int pixel = (((int)(ty) & 31) * 32 + ((int)(tx)&31)) * 3;
 8005d1a:	ee07 0a90 	vmov	s15, r0
 8005d1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d22:	f005 051f 	and.w	r5, r5, #31
 8005d26:	ee17 0a90 	vmov	r0, s15
 8005d2a:	016d      	lsls	r5, r5, #5
 8005d2c:	f000 001f 	and.w	r0, r0, #31
 8005d30:	182c      	adds	r4, r5, r0
 8005d32:	eb04 0444 	add.w	r4, r4, r4, lsl #1
			int blue = t_floor[pixel + 2] * 0.7;
 8005d36:	1ca3      	adds	r3, r4, #2
 8005d38:	4dbe      	ldr	r5, [pc, #760]	; (8006034 <drawMap+0xcbc>)
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	5ce8      	ldrb	r0, [r5, r3]
 8005d3e:	f7fa fbbd 	bl	80004bc <__aeabi_i2d>
 8005d42:	4642      	mov	r2, r8
 8005d44:	464b      	mov	r3, r9
 8005d46:	f7fa fc23 	bl	8000590 <__aeabi_dmul>
 8005d4a:	f7fa fed1 	bl	8000af0 <__aeabi_d2iz>
			int green = t_floor[pixel + 1] * 0.7;
 8005d4e:	1c67      	adds	r7, r4, #1
			int blue = t_floor[pixel + 2] * 0.7;
 8005d50:	4606      	mov	r6, r0
			int green = t_floor[pixel + 1] * 0.7;
 8005d52:	5de8      	ldrb	r0, [r5, r7]
 8005d54:	f7fa fbb2 	bl	80004bc <__aeabi_i2d>
 8005d58:	4642      	mov	r2, r8
 8005d5a:	464b      	mov	r3, r9
 8005d5c:	f7fa fc18 	bl	8000590 <__aeabi_dmul>
 8005d60:	f7fa fec6 	bl	8000af0 <__aeabi_d2iz>
			int red = t_floor[pixel + 0] * 0.7;
 8005d64:	4bb3      	ldr	r3, [pc, #716]	; (8006034 <drawMap+0xcbc>)
			int green = t_floor[pixel + 1] * 0.7;
 8005d66:	4605      	mov	r5, r0
			int red = t_floor[pixel + 0] * 0.7;
 8005d68:	5d18      	ldrb	r0, [r3, r4]
 8005d6a:	f7fa fba7 	bl	80004bc <__aeabi_i2d>
 8005d6e:	464b      	mov	r3, r9
 8005d70:	4642      	mov	r2, r8
 8005d72:	f7fa fc0d 	bl	8000590 <__aeabi_dmul>
 8005d76:	f7fa febb 	bl	8000af0 <__aeabi_d2iz>
			tlax += s_offset;

			tlay *= s_scale;

			narisi_velik_kvadrat_stene(tlax, tlay, create_rgb(red, green, blue));
 8005d7a:	4632      	mov	r2, r6
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	f7ff fa55 	bl	800522c <create_rgb>
 8005d82:	4605      	mov	r5, r0
			tlay *= s_scale;
 8005d84:	4658      	mov	r0, fp
 8005d86:	f7fa fb99 	bl	80004bc <__aeabi_i2d>
 8005d8a:	a39f      	add	r3, pc, #636	; (adr r3, 8006008 <drawMap+0xc90>)
 8005d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d90:	f7fa fbfe 	bl	8000590 <__aeabi_dmul>
 8005d94:	f7fa feac 	bl	8000af0 <__aeabi_d2iz>
			narisi_velik_kvadrat_stene(tlax, tlay, create_rgb(red, green, blue));
 8005d98:	b2ad      	uxth	r5, r5
			tlay *= s_scale;
 8005d9a:	4601      	mov	r1, r0
			narisi_velik_kvadrat_stene(tlax, tlay, create_rgb(red, green, blue));
 8005d9c:	462a      	mov	r2, r5
 8005d9e:	4650      	mov	r0, sl
 8005da0:	f7ff fa12 	bl	80051c8 <narisi_velik_kvadrat_stene>

			//NARISI STROP
			pixel = (((int)(ty) & 31) * 32 + ((int)(tx) & 31)) * 3;
			red = t_wall[pixel + 0] * 0.7;
			green = t_wall[pixel + 1] * 0.7;
			blue = t_wall[pixel + 2] * 0.7;
 8005da4:	4ea4      	ldr	r6, [pc, #656]	; (8006038 <drawMap+0xcc0>)
 8005da6:	9a01      	ldr	r2, [sp, #4]
 8005da8:	5cb0      	ldrb	r0, [r6, r2]
 8005daa:	f7fa fb87 	bl	80004bc <__aeabi_i2d>
 8005dae:	4642      	mov	r2, r8
 8005db0:	464b      	mov	r3, r9
 8005db2:	f7fa fbed 	bl	8000590 <__aeabi_dmul>
 8005db6:	f7fa fe9b 	bl	8000af0 <__aeabi_d2iz>
 8005dba:	4605      	mov	r5, r0
			green = t_wall[pixel + 1] * 0.7;
 8005dbc:	5df0      	ldrb	r0, [r6, r7]
 8005dbe:	f7fa fb7d 	bl	80004bc <__aeabi_i2d>
 8005dc2:	4642      	mov	r2, r8
 8005dc4:	464b      	mov	r3, r9
 8005dc6:	f7fa fbe3 	bl	8000590 <__aeabi_dmul>
 8005dca:	f7fa fe91 	bl	8000af0 <__aeabi_d2iz>
 8005dce:	4603      	mov	r3, r0
			red = t_wall[pixel + 0] * 0.7;
 8005dd0:	5d30      	ldrb	r0, [r6, r4]
			green = t_wall[pixel + 1] * 0.7;
 8005dd2:	461c      	mov	r4, r3
			red = t_wall[pixel + 0] * 0.7;
 8005dd4:	f7fa fb72 	bl	80004bc <__aeabi_i2d>
 8005dd8:	464b      	mov	r3, r9
 8005dda:	4642      	mov	r2, r8
 8005ddc:	f7fa fbd8 	bl	8000590 <__aeabi_dmul>
 8005de0:	f7fa fe86 	bl	8000af0 <__aeabi_d2iz>
			stropx *= s_scale;
			stropx += s_offset;

			stropy *= s_scale;

			narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 8005de4:	462a      	mov	r2, r5
 8005de6:	4621      	mov	r1, r4
 8005de8:	f7ff fa20 	bl	800522c <create_rgb>
 8005dec:	4604      	mov	r4, r0
			stropy *= s_scale;
 8005dee:	f1cb 0064 	rsb	r0, fp, #100	; 0x64
 8005df2:	f7fa fb63 	bl	80004bc <__aeabi_i2d>
 8005df6:	a384      	add	r3, pc, #528	; (adr r3, 8006008 <drawMap+0xc90>)
 8005df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfc:	f7fa fbc8 	bl	8000590 <__aeabi_dmul>
 8005e00:	f7fa fe76 	bl	8000af0 <__aeabi_d2iz>
			narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 8005e04:	b2a4      	uxth	r4, r4
			stropy *= s_scale;
 8005e06:	4601      	mov	r1, r0
		for (int y = lineOff + lineH;y < height;y++) {
 8005e08:	f10b 0b01 	add.w	fp, fp, #1
			narisi_velik_kvadrat_stene(stropx, stropy, create_rgb(red, green, blue));
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	4650      	mov	r0, sl
 8005e10:	f7ff f9da 	bl	80051c8 <narisi_velik_kvadrat_stene>
		for (int y = lineOff + lineH;y < height;y++) {
 8005e14:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 8005e18:	d01e      	beq.n	8005e58 <drawMap+0xae0>
			float floorAngle = (angle - newAngle);
 8005e1a:	9b02      	ldr	r3, [sp, #8]
 8005e1c:	ed93 8a00 	vldr	s16, [r3]
			float dy = y - (height / 2.0f);
 8005e20:	ee07 ba90 	vmov	s15, fp
			float floorAngle = (angle - newAngle);
 8005e24:	ee38 8a68 	vsub.f32	s16, s16, s17
			float dy = y - (height / 2.0f);
 8005e28:	eeb8 aae7 	vcvt.f32.s32	s20, s15
			if (floorAngle < 0) floorAngle += 2 * PI;
 8005e2c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			float dy = y - (height / 2.0f);
 8005e34:	ee3a aa6a 	vsub.f32	s20, s20, s21
			if (floorAngle < 0) floorAngle += 2 * PI;
 8005e38:	ee18 0a10 	vmov	r0, s16
 8005e3c:	f57f af02 	bpl.w	8005c44 <drawMap+0x8cc>
 8005e40:	f7fa fb4e 	bl	80004e0 <__aeabi_f2d>
 8005e44:	a372      	add	r3, pc, #456	; (adr r3, 8006010 <drawMap+0xc98>)
 8005e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4a:	f7fa f9eb 	bl	8000224 <__adddf3>
 8005e4e:	f7fa fe77 	bl	8000b40 <__aeabi_d2f>
 8005e52:	ee08 0a10 	vmov	s16, r0
 8005e56:	e70a      	b.n	8005c6e <drawMap+0x8f6>
	for (float z = -30;z < 30;z+=1) { //LOOPEJ OD - 30STOPINJ DO 30 STOPINJ
 8005e58:	9b05      	ldr	r3, [sp, #20]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	ee39 9a29 	vadd.f32	s18, s18, s19
 8005e60:	9305      	str	r3, [sp, #20]
 8005e62:	f000 808a 	beq.w	8005f7a <drawMap+0xc02>
 8005e66:	ee19 0a10 	vmov	r0, s18
 8005e6a:	f7fa fb39 	bl	80004e0 <__aeabi_f2d>
 8005e6e:	a36a      	add	r3, pc, #424	; (adr r3, 8006018 <drawMap+0xca0>)
 8005e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e74:	f7fa fb8c 	bl	8000590 <__aeabi_dmul>
 8005e78:	f7fa fe62 	bl	8000b40 <__aeabi_d2f>
 8005e7c:	ee00 0a10 	vmov	s0, r0
 8005e80:	f000 ffcc 	bl	8006e1c <cosf>
 8005e84:	9b07      	ldr	r3, [sp, #28]
 8005e86:	eeb0 8a40 	vmov.f32	s16, s0
 8005e8a:	681e      	ldr	r6, [r3, #0]
 8005e8c:	f7ff bbf9 	b.w	8005682 <drawMap+0x30a>
			rhx = (int)px - ((int)px % Blocksize) + Blocksize;
 8005e90:	eefd 7aef 	vcvt.s32.f32	s15, s31
			rhy = (px - rhx) * -nTan + py;
 8005e94:	eef0 da4f 	vmov.f32	s27, s30
			rhx = (int)px - ((int)px % Blocksize) + Blocksize;
 8005e98:	ee17 3a90 	vmov	r3, s15
 8005e9c:	fb93 f3f6 	sdiv	r3, r3, r6
 8005ea0:	fb06 6303 	mla	r3, r6, r3, r6
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eeb8 bae7 	vcvt.f32.s32	s22, s15
			dy = dx * nTan;
 8005eac:	ee2b 6a8a 	vmul.f32	s12, s23, s20
			rhy = (px - rhx) * -nTan + py;
 8005eb0:	ee7b 7a6f 	vsub.f32	s15, s22, s31
			dx = Blocksize;
 8005eb4:	eef0 6a4a 	vmov.f32	s13, s20
			rhy = (px - rhx) * -nTan + py;
 8005eb8:	eeeb daa7 	vfma.f32	s27, s23, s15
			dy = dx * nTan;
 8005ebc:	e4ed      	b.n	800589a <drawMap+0x522>
			tx = (int)(ry / scale) % 32;
 8005ebe:	eecd 7a8a 	vdiv.f32	s15, s27, s20
			if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 8005ec2:	a357      	add	r3, pc, #348	; (adr r3, 8006020 <drawMap+0xca8>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	4620      	mov	r0, r4
			tx = (int)(ry / scale) % 32;
 8005eca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ece:	ee17 6a90 	vmov	r6, s15
 8005ed2:	4271      	negs	r1, r6
 8005ed4:	f001 011f 	and.w	r1, r1, #31
 8005ed8:	f006 061f 	and.w	r6, r6, #31
 8005edc:	bf58      	it	pl
 8005ede:	424e      	negpl	r6, r1
 8005ee0:	ee07 6a90 	vmov	s15, r6
			if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 8005ee4:	4629      	mov	r1, r5
			tx = (int)(ry / scale) % 32;
 8005ee6:	eeb8 aae7 	vcvt.f32.s32	s20, s15
			if (newAngle > PI / 2 && newAngle < (3 * PI) / 2) tx = 31 - tx;
 8005eea:	f7fa fde1 	bl	8000ab0 <__aeabi_dcmpgt>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f43f ad67 	beq.w	80059c2 <drawMap+0x64a>
 8005ef4:	a34c      	add	r3, pc, #304	; (adr r3, 8006028 <drawMap+0xcb0>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	4620      	mov	r0, r4
 8005efc:	4629      	mov	r1, r5
 8005efe:	f7fa fdb9 	bl	8000a74 <__aeabi_dcmplt>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f43f ad5d 	beq.w	80059c2 <drawMap+0x64a>
 8005f08:	e557      	b.n	80059ba <drawMap+0x642>
			rvx = (py - rvy) * -aTan + px;
 8005f0a:	9b03      	ldr	r3, [sp, #12]
			rvy = (int)py - ((int)py % Blocksize) + Blocksize;
 8005f0c:	eefd 7acf 	vcvt.s32.f32	s15, s30
			rvx = (py - rvy) * -aTan + px;
 8005f10:	edd3 fa00 	vldr	s31, [r3]
			rvy = (int)py - ((int)py % Blocksize) + Blocksize;
 8005f14:	ee17 3a90 	vmov	r3, s15
 8005f18:	fb93 f3f6 	sdiv	r3, r3, r6
 8005f1c:	fb06 6303 	mla	r3, r6, r3, r6
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eeb8 dae7 	vcvt.f32.s32	s26, s15
			dy = Blocksize;
 8005f28:	ee07 6a90 	vmov	s15, r6
 8005f2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
			rvx = (py - rvy) * -aTan + px;
 8005f30:	ee7d 7a4f 	vsub.f32	s15, s26, s30
 8005f34:	eeb0 ea6f 	vmov.f32	s28, s31
 8005f38:	eea7 ea8a 	vfma.f32	s28, s15, s20
			dx = dy * aTan;
 8005f3c:	ee2a 6a26 	vmul.f32	s12, s20, s13
 8005f40:	eeb0 aa66 	vmov.f32	s20, s13
 8005f44:	e412      	b.n	800576c <drawMap+0x3f4>
			ty_offset = (lineH - height) / 2.0f;
 8005f46:	ee3b 8ac7 	vsub.f32	s16, s23, s14
 8005f4a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005f4e:	ee28 8a2c 	vmul.f32	s16, s16, s25
 8005f52:	ed9f ca3a 	vldr	s24, [pc, #232]	; 800603c <drawMap+0xcc4>
 8005f56:	ee28 8a27 	vmul.f32	s16, s16, s15
			lineH = height;
 8005f5a:	eef0 ba47 	vmov.f32	s23, s14
			ty_offset = (lineH - height) / 2.0f;
 8005f5e:	469b      	mov	fp, r3
 8005f60:	e508      	b.n	8005974 <drawMap+0x5fc>
			shade = 0.5;
 8005f62:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 8005f66:	e4e0      	b.n	800592a <drawMap+0x5b2>
		if (newAngle < 0) newAngle += 2 * PI;
 8005f68:	f7fa faba 	bl	80004e0 <__aeabi_f2d>
 8005f6c:	a328      	add	r3, pc, #160	; (adr r3, 8006010 <drawMap+0xc98>)
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa f957 	bl	8000224 <__adddf3>
 8005f76:	f7ff bbb4 	b.w	80056e2 <drawMap+0x36a>




	}
}
 8005f7a:	b009      	add	sp, #36	; 0x24
 8005f7c:	ecbd 8b10 	vpop	{d8-d15}
 8005f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (cosf(angle) < 0) fCheckX = -fCheck;
 8005f84:	eeb0 0a48 	vmov.f32	s0, s16
 8005f88:	f000 ff48 	bl	8006e1c <cosf>
 8005f8c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f94:	eeb0 0a48 	vmov.f32	s0, s16
 8005f98:	d552      	bpl.n	8006040 <drawMap+0xcc8>
 8005f9a:	f000 ff7f 	bl	8006e9c <sinf>
 8005f9e:	f06f 0504 	mvn.w	r5, #4
	else fCheckY = fCheck;
 8005fa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005faa:	bf4c      	ite	mi
 8005fac:	f06f 0604 	mvnmi.w	r6, #4
 8005fb0:	2605      	movpl	r6, #5
 8005fb2:	f7ff bab0 	b.w	8005516 <drawMap+0x19e>
		if (map[((int)py - fCheckY) / 10][(int)px / 10] == 0) py += -3 * sinf(angle);
 8005fb6:	f000 ff71 	bl	8006e9c <sinf>
 8005fba:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8005fbe:	eea0 8a27 	vfma.f32	s16, s0, s15
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	eef0 9a40 	vmov.f32	s19, s0
 8005fc8:	ed83 8a00 	vstr	s16, [r3]
 8005fcc:	f7ff bb48 	b.w	8005660 <drawMap+0x2e8>
		if (map[(int)py / 10][((int)px - fCheckX) / 10] == 0) px += -3 * cosf(angle);
 8005fd0:	9b02      	ldr	r3, [sp, #8]
 8005fd2:	edd3 9a00 	vldr	s19, [r3]
 8005fd6:	eeb0 0a69 	vmov.f32	s0, s19
 8005fda:	f000 ff1f 	bl	8006e1c <cosf>
 8005fde:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8005fe2:	eee0 8a27 	vfma.f32	s17, s0, s15
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	eeb0 9a40 	vmov.f32	s18, s0
 8005fec:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8005ff0:	edc3 8a00 	vstr	s17, [r3]
 8005ff4:	ee17 8a90 	vmov	r8, s15
 8005ff8:	f7ff bb17 	b.w	800562a <drawMap+0x2b2>
 8005ffc:	f3af 8000 	nop.w
 8006000:	aaaaaaab 	.word	0xaaaaaaab
 8006004:	400aaaaa 	.word	0x400aaaaa
 8006008:	33333333 	.word	0x33333333
 800600c:	40033333 	.word	0x40033333
 8006010:	f01b866e 	.word	0xf01b866e
 8006014:	401921f9 	.word	0x401921f9
 8006018:	7707c94d 	.word	0x7707c94d
 800601c:	3f91df46 	.word	0x3f91df46
 8006020:	f01b866e 	.word	0xf01b866e
 8006024:	3ff921f9 	.word	0x3ff921f9
 8006028:	7414a4d2 	.word	0x7414a4d2
 800602c:	4012d97b 	.word	0x4012d97b
 8006030:	3ff00000 	.word	0x3ff00000
 8006034:	080089c8 	.word	0x080089c8
 8006038:	080155c8 	.word	0x080155c8
 800603c:	00000000 	.word	0x00000000
	else fCheckX = fCheck;
 8006040:	f000 ff2c 	bl	8006e9c <sinf>
 8006044:	2505      	movs	r5, #5
 8006046:	e7ac      	b.n	8005fa2 <drawMap+0xc2a>

08006048 <TIMUT_stopwatch_set_time_mark>:
// Funkcija TIMUT_stopwatch_set_time_mark() si zabeleži trenutno
// vrednost SysTick števca in tako na nek način postavi "časovni zaznamek"
// (angl. time mark), v katerem trenutku smo z uro štoparico pričeli
// meriti čas (tj. "štopati").
void TIMUT_stopwatch_set_time_mark(stopwatch_handle_t *stopwatch)
{
 8006048:	b510      	push	{r4, lr}
 800604a:	4604      	mov	r4, r0
	stopwatch->time_mark = HAL_GetTick();
 800604c:	f7fb fcb6 	bl	80019bc <HAL_GetTick>
 8006050:	6020      	str	r0, [r4, #0]
}
 8006052:	bd10      	pop	{r4, pc}

08006054 <TIMUT_stopwatch_has_X_ms_passed>:
// Funkcija TIMUT_stopwatch_has_X_ms_passed() preveri, ali je od postavitve
// časovnega zaznamka že preteklo "x" milisekund, kjer pa je "x" vrednost
// vhodnega parametra funkcije. Funkcija vrne vrednost 1, če je že preteklo
// "x" milisekund, sicer pa vrne 0.
uint8_t TIMUT_stopwatch_has_X_ms_passed(stopwatch_handle_t *stopwatch, uint32_t x)
{
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4604      	mov	r4, r0
 8006058:	460d      	mov	r5, r1
	stopwatch->elapsed_time = HAL_GetTick() - stopwatch->time_mark;
 800605a:	f7fb fcaf 	bl	80019bc <HAL_GetTick>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	1ac0      	subs	r0, r0, r3
	else
	{
		return 0;	// pretečeni čas je manjši od "x" milisekund
	}

}
 8006062:	4285      	cmp	r5, r0
	stopwatch->elapsed_time = HAL_GetTick() - stopwatch->time_mark;
 8006064:	6060      	str	r0, [r4, #4]
}
 8006066:	bf2c      	ite	cs
 8006068:	2000      	movcs	r0, #0
 800606a:	2001      	movcc	r0, #1
 800606c:	bd38      	pop	{r3, r4, r5, pc}
 800606e:	bf00      	nop

08006070 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8006070:	b4f0      	push	{r4, r5, r6, r7}
   g->x_dim = x;
   g->y_dim = y;
   g->console.x_start = 4;
   g->console.y_start = 4;
   g->console.x_end = g->x_dim - g->console.x_start-1;
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8006072:	1f5c      	subs	r4, r3, #5
   g->x_dim = x;
 8006074:	6042      	str	r2, [r0, #4]
   g->y_dim = y;
 8006076:	6083      	str	r3, [r0, #8]
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8006078:	3a05      	subs	r2, #5
   g->console.x_pos = g->console.x_end;
   g->console.y_pos = g->console.y_end;
   g->char_h_space = 1;
   g->char_v_space = 1;
   g->font.p = NULL;
 800607a:	2300      	movs	r3, #0
   {
      g->driver[i].driver = NULL;
      g->driver[i].state = 0;
   }

   gui = g;
 800607c:	4d15      	ldr	r5, [pc, #84]	; (80060d4 <UG_Init+0x64>)
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800607e:	6342      	str	r2, [r0, #52]	; 0x34
   g->char_h_space = 1;
 8006080:	f240 1701 	movw	r7, #257	; 0x101
   g->console.x_pos = g->console.x_end;
 8006084:	6242      	str	r2, [r0, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8006086:	6384      	str	r4, [r0, #56]	; 0x38
   g->console.y_pos = g->console.y_end;
 8006088:	6284      	str	r4, [r0, #40]	; 0x28
   g->desktop_color = 0x5C5D;
 800608a:	f645 465d 	movw	r6, #23645	; 0x5c5d
   g->fore_color = C_WHITE;
 800608e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   g->char_h_space = 1;
 8006092:	f8a0 7060 	strh.w	r7, [r0, #96]	; 0x60
      g->driver[i].state = 0;
 8006096:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 800609a:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
 800609e:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
   g->console.x_start = 4;
 80060a2:	2204      	movs	r2, #4
   g->console.y_start = 4;
 80060a4:	e9c0 220b 	strd	r2, r2, [r0, #44]	; 0x2c
   g->font.char_height = 0;
 80060a8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
   g->font.end_char = 0;
 80060ac:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
   g->active_window = NULL;
 80060b0:	e9c0 3306 	strd	r3, r3, [r0, #24]
   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 80060b4:	6001      	str	r1, [r0, #0]
   g->desktop_color = 0x5C5D;
 80060b6:	66c6      	str	r6, [r0, #108]	; 0x6c
   g->fore_color = C_WHITE;
 80060b8:	6644      	str	r4, [r0, #100]	; 0x64
   gui = g;
 80060ba:	6028      	str	r0, [r5, #0]
   g->font.p = NULL;
 80060bc:	6443      	str	r3, [r0, #68]	; 0x44
   g->font.widths = NULL;
 80060be:	65c3      	str	r3, [r0, #92]	; 0x5c
   g->back_color = C_BLACK;
 80060c0:	6683      	str	r3, [r0, #104]	; 0x68
   g->last_window = NULL;
 80060c2:	6203      	str	r3, [r0, #32]
      g->driver[i].driver = NULL;
 80060c4:	6743      	str	r3, [r0, #116]	; 0x74
 80060c6:	67c3      	str	r3, [r0, #124]	; 0x7c
 80060c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   return 1;
}
 80060cc:	2001      	movs	r0, #1
 80060ce:	bcf0      	pop	{r4, r5, r6, r7}
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000120 	.word	0x20000120

080060d8 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 80060d8:	b430      	push	{r4, r5}
   gui->font = *font;
 80060da:	4605      	mov	r5, r0
 80060dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80060de:	4c05      	ldr	r4, [pc, #20]	; (80060f4 <UG_FontSelect+0x1c>)
 80060e0:	6824      	ldr	r4, [r4, #0]
 80060e2:	3444      	adds	r4, #68	; 0x44
 80060e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80060ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80060ee:	bc30      	pop	{r4, r5}
 80060f0:	4770      	bx	lr
 80060f2:	bf00      	nop
 80060f4:	20000120 	.word	0x20000120

080060f8 <UG_FillFrame>:
{
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
}

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80060f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fc:	b083      	sub	sp, #12
   UG_S16 n,m;

   if ( x2 < x1 )
 80060fe:	4282      	cmp	r2, r0
{
 8006100:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8006104:	4681      	mov	r9, r0
 8006106:	4616      	mov	r6, r2
 8006108:	468b      	mov	fp, r1
 800610a:	469a      	mov	sl, r3
   if ( x2 < x1 )
 800610c:	da01      	bge.n	8006112 <UG_FillFrame+0x1a>
 800610e:	4691      	mov	r9, r2
 8006110:	4606      	mov	r6, r0
   {
      n = x2;
      x2 = x1;
      x1 = n;
   }
   if ( y2 < y1 )
 8006112:	45da      	cmp	sl, fp
 8006114:	da02      	bge.n	800611c <UG_FillFrame+0x24>
 8006116:	465b      	mov	r3, fp
 8006118:	46d3      	mov	fp, sl
 800611a:	469a      	mov	sl, r3
      y2 = y1;
      y1 = n;
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800611c:	4f13      	ldr	r7, [pc, #76]	; (800616c <UG_FillFrame+0x74>)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f893 2080 	ldrb.w	r2, [r3, #128]	; 0x80
 8006124:	0792      	lsls	r2, r2, #30
 8006126:	d413      	bmi.n	8006150 <UG_FillFrame+0x58>
 8006128:	45b1      	cmp	r9, r6
 800612a:	dc0e      	bgt.n	800614a <UG_FillFrame+0x52>
 800612c:	3601      	adds	r6, #1
   if ( x2 < x1 )
 800612e:	464c      	mov	r4, r9

   for( m=y1; m<=y2; m++ )
   {
      for( n=x1; n<=x2; n++ )
      {
         gui->pset(n,m,c);
 8006130:	683d      	ldr	r5, [r7, #0]
 8006132:	4620      	mov	r0, r4
 8006134:	682d      	ldr	r5, [r5, #0]
 8006136:	4642      	mov	r2, r8
 8006138:	4659      	mov	r1, fp
      for( n=x1; n<=x2; n++ )
 800613a:	3401      	adds	r4, #1
         gui->pset(n,m,c);
 800613c:	47a8      	blx	r5
      for( n=x1; n<=x2; n++ )
 800613e:	42b4      	cmp	r4, r6
 8006140:	d1f6      	bne.n	8006130 <UG_FillFrame+0x38>
   for( m=y1; m<=y2; m++ )
 8006142:	f10b 0b01 	add.w	fp, fp, #1
 8006146:	45d3      	cmp	fp, sl
 8006148:	ddf1      	ble.n	800612e <UG_FillFrame+0x36>
      }
   }
}
 800614a:	b003      	add	sp, #12
 800614c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8006150:	f8cd 8000 	str.w	r8, [sp]
 8006154:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8006156:	4632      	mov	r2, r6
 8006158:	4653      	mov	r3, sl
 800615a:	4659      	mov	r1, fp
 800615c:	4648      	mov	r0, r9
 800615e:	47a0      	blx	r4
 8006160:	2800      	cmp	r0, #0
 8006162:	d0f2      	beq.n	800614a <UG_FillFrame+0x52>
   for( m=y1; m<=y2; m++ )
 8006164:	45d3      	cmp	fp, sl
 8006166:	dddf      	ble.n	8006128 <UG_FillFrame+0x30>
 8006168:	e7ef      	b.n	800614a <UG_FillFrame+0x52>
 800616a:	bf00      	nop
 800616c:	20000120 	.word	0x20000120

08006170 <UG_SetForecolor>:
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
   gui->fore_color = c;
 8006170:	4b01      	ldr	r3, [pc, #4]	; (8006178 <UG_SetForecolor+0x8>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6658      	str	r0, [r3, #100]	; 0x64
}
 8006176:	4770      	bx	lr
 8006178:	20000120 	.word	0x20000120

0800617c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
   gui->back_color = c;
 800617c:	4b01      	ldr	r3, [pc, #4]	; (8006184 <UG_SetBackcolor+0x8>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	6698      	str	r0, [r3, #104]	; 0x68
}
 8006182:	4770      	bx	lr
 8006184:	20000120 	.word	0x20000120

08006188 <_UG_PutChar>:

/* -------------------------------------------------------------------------------- */
/* -- INTERNAL FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */
void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8006188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800618c:	b08b      	sub	sp, #44	; 0x2c
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;

   switch ( bt )
 800618e:	28fc      	cmp	r0, #252	; 0xfc
{
 8006190:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8006194:	9102      	str	r1, [sp, #8]
 8006196:	9206      	str	r2, [sp, #24]
 8006198:	461f      	mov	r7, r3
   switch ( bt )
 800619a:	f200 80aa 	bhi.w	80062f2 <_UG_PutChar+0x16a>
 800619e:	28d5      	cmp	r0, #213	; 0xd5
 80061a0:	f240 809b 	bls.w	80062da <_UG_PutChar+0x152>
 80061a4:	f1a0 03d6 	sub.w	r3, r0, #214	; 0xd6
 80061a8:	2b26      	cmp	r3, #38	; 0x26
 80061aa:	f200 80a2 	bhi.w	80062f2 <_UG_PutChar+0x16a>
 80061ae:	e8df f003 	tbb	[pc, r3]
 80061b2:	a092      	.short	0xa092
 80061b4:	a0a0a0a0 	.word	0xa0a0a0a0
 80061b8:	a0a0a0a6 	.word	0xa0a0a0a6
 80061bc:	a0a0a0a0 	.word	0xa0a0a0a0
 80061c0:	a0a0a0a8 	.word	0xa0a0a0a8
 80061c4:	a0a0a0a0 	.word	0xa0a0a0a0
 80061c8:	a0a0a0a0 	.word	0xa0a0a0a0
 80061cc:	a0a0a0a0 	.word	0xa0a0a0a0
 80061d0:	a014a0a0 	.word	0xa014a0a0
 80061d4:	a0a0a0a0 	.word	0xa0a0a0a0
 80061d8:	a4          	.byte	0xa4
 80061d9:	00          	.byte	0x00
 80061da:	2494      	movs	r4, #148	; 0x94
      case 0xC4: bt = 0x8E; break; // �
      case 0xB5: bt = 0xE6; break; // �
      case 0xB0: bt = 0xF8; break; // �
   }

   if (bt < font->start_char || bt > font->end_char) return;
 80061dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d875      	bhi.n	80062d0 <_UG_PutChar+0x148>
 80061e4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061e6:	6952      	ldr	r2, [r2, #20]
 80061e8:	42a2      	cmp	r2, r4
 80061ea:	d371      	bcc.n	80062d0 <_UG_PutChar+0x148>
   
   yo = y;
   bn = font->char_width;
 80061ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80061ee:	6892      	ldr	r2, [r2, #8]
   if ( !bn ) return;
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	d06d      	beq.n	80062d0 <_UG_PutChar+0x148>
   bn >>= 3;
 80061f4:	08d1      	lsrs	r1, r2, #3
   if ( font->char_width % 8 ) bn++;
 80061f6:	0750      	lsls	r0, r2, #29
   bn >>= 3;
 80061f8:	9104      	str	r1, [sp, #16]
   if ( font->char_width % 8 ) bn++;
 80061fa:	bf1c      	itt	ne
 80061fc:	3101      	addne	r1, #1
 80061fe:	9104      	strne	r1, [sp, #16]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8006200:	9915      	ldr	r1, [sp, #84]	; 0x54
 8006202:	6989      	ldr	r1, [r1, #24]
 8006204:	2900      	cmp	r1, #0
 8006206:	f000 80cf 	beq.w	80063a8 <_UG_PutChar+0x220>
 800620a:	1ae0      	subs	r0, r4, r3
 800620c:	5c09      	ldrb	r1, [r1, r0]
 800620e:	9103      	str	r1, [sp, #12]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8006210:	f8df 9328 	ldr.w	r9, [pc, #808]	; 800653c <_UG_PutChar+0x3b4>
 8006214:	f8d9 0000 	ldr.w	r0, [r9]
 8006218:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
 800621c:	f011 0102 	ands.w	r1, r1, #2
 8006220:	d171      	bne.n	8006306 <_UG_PutChar+0x17e>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8006222:	9815      	ldr	r0, [sp, #84]	; 0x54
   yo = y;
 8006224:	f8dd b018 	ldr.w	fp, [sp, #24]
	   if (font->font_type == FONT_TYPE_1BPP)
 8006228:	7900      	ldrb	r0, [r0, #4]
 800622a:	2800      	cmp	r0, #0
 800622c:	f040 80be 	bne.w	80063ac <_UG_PutChar+0x224>
	   {
         index = (bt - font->start_char)* font->char_height * bn;
 8006230:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006232:	68d2      	ldr	r2, [r2, #12]
 8006234:	1ae4      	subs	r4, r4, r3
 8006236:	fb02 f404 	mul.w	r4, r2, r4
         for( j=0;j<font->char_height;j++ )
 800623a:	2a00      	cmp	r2, #0
 800623c:	d048      	beq.n	80062d0 <_UG_PutChar+0x148>
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d045      	beq.n	80062d0 <_UG_PutChar+0x148>
 8006244:	fb04 3203 	mla	r2, r4, r3, r3
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	9201      	str	r2, [sp, #4]
 800624c:	9006      	str	r0, [sp, #24]
 800624e:	9305      	str	r3, [sp, #20]
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	9a04      	ldr	r2, [sp, #16]
         {
           xo = x;
 8006254:	e9dd 4602 	ldrd	r4, r6, [sp, #8]
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	9307      	str	r3, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 800625c:	9300      	str	r3, [sp, #0]
           c=actual_char_width;
           for( i=0;i<bn;i++ )
           {
             b = font->p[index++];
 800625e:	9900      	ldr	r1, [sp, #0]
 8006260:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006262:	460b      	mov	r3, r1
 8006264:	6812      	ldr	r2, [r2, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	5c55      	ldrb	r5, [r2, r1]
 800626a:	9300      	str	r3, [sp, #0]
             for( k=0;(k<8) && c;k++ )
 800626c:	f104 0808 	add.w	r8, r4, #8
 8006270:	e008      	b.n	8006284 <_UG_PutChar+0xfc>
             {
               if( b & 0x01 )
               {
                  gui->pset(xo,yo,fc);
 8006272:	681b      	ldr	r3, [r3, #0]
               else
               {
                  gui->pset(xo,yo,bc);
               }
               b >>= 1;
               xo++;
 8006274:	3401      	adds	r4, #1
                  gui->pset(xo,yo,fc);
 8006276:	4798      	blx	r3
             for( k=0;(k<8) && c;k++ )
 8006278:	4544      	cmp	r4, r8
               b >>= 1;
 800627a:	ea4f 0555 	mov.w	r5, r5, lsr #1
               c--;
 800627e:	f106 36ff 	add.w	r6, r6, #4294967295
             for( k=0;(k<8) && c;k++ )
 8006282:	d014      	beq.n	80062ae <_UG_PutChar+0x126>
                  gui->pset(xo,yo,fc);
 8006284:	463a      	mov	r2, r7
 8006286:	4659      	mov	r1, fp
 8006288:	4620      	mov	r0, r4
             for( k=0;(k<8) && c;k++ )
 800628a:	b186      	cbz	r6, 80062ae <_UG_PutChar+0x126>
               if( b & 0x01 )
 800628c:	f015 0f01 	tst.w	r5, #1
                  gui->pset(xo,yo,fc);
 8006290:	f8d9 3000 	ldr.w	r3, [r9]
               if( b & 0x01 )
 8006294:	d1ed      	bne.n	8006272 <_UG_PutChar+0xea>
                  gui->pset(xo,yo,bc);
 8006296:	4620      	mov	r0, r4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4652      	mov	r2, sl
 800629c:	4659      	mov	r1, fp
               xo++;
 800629e:	3401      	adds	r4, #1
                  gui->pset(xo,yo,bc);
 80062a0:	4798      	blx	r3
             for( k=0;(k<8) && c;k++ )
 80062a2:	4544      	cmp	r4, r8
               b >>= 1;
 80062a4:	ea4f 0555 	mov.w	r5, r5, lsr #1
               c--;
 80062a8:	f106 36ff 	add.w	r6, r6, #4294967295
             for( k=0;(k<8) && c;k++ )
 80062ac:	d1ea      	bne.n	8006284 <_UG_PutChar+0xfc>
           for( i=0;i<bn;i++ )
 80062ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d1d3      	bne.n	800625e <_UG_PutChar+0xd6>
         for( j=0;j<font->char_height;j++ )
 80062b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062b8:	9a06      	ldr	r2, [sp, #24]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	9907      	ldr	r1, [sp, #28]
 80062be:	9805      	ldr	r0, [sp, #20]
 80062c0:	3201      	adds	r2, #1
 80062c2:	4401      	add	r1, r0
 80062c4:	4293      	cmp	r3, r2
 80062c6:	9206      	str	r2, [sp, #24]
             }
           }
           yo++;
 80062c8:	f10b 0b01 	add.w	fp, fp, #1
         for( j=0;j<font->char_height;j++ )
 80062cc:	9101      	str	r1, [sp, #4]
 80062ce:	d8bf      	bhi.n	8006250 <_UG_PutChar+0xc8>
            index += font->char_width - actual_char_width;
            yo++;
         }
      }
   }
}
 80062d0:	b00b      	add	sp, #44	; 0x2c
 80062d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   switch ( bt )
 80062d6:	2499      	movs	r4, #153	; 0x99
 80062d8:	e780      	b.n	80061dc <_UG_PutChar+0x54>
 80062da:	28b5      	cmp	r0, #181	; 0xb5
 80062dc:	d00b      	beq.n	80062f6 <_UG_PutChar+0x16e>
 80062de:	28c4      	cmp	r0, #196	; 0xc4
 80062e0:	bf08      	it	eq
 80062e2:	248e      	moveq	r4, #142	; 0x8e
 80062e4:	f43f af7a 	beq.w	80061dc <_UG_PutChar+0x54>
 80062e8:	28b0      	cmp	r0, #176	; 0xb0
 80062ea:	bf08      	it	eq
 80062ec:	24f8      	moveq	r4, #248	; 0xf8
 80062ee:	f43f af75 	beq.w	80061dc <_UG_PutChar+0x54>
 80062f2:	4604      	mov	r4, r0
 80062f4:	e772      	b.n	80061dc <_UG_PutChar+0x54>
 80062f6:	24e6      	movs	r4, #230	; 0xe6
 80062f8:	e770      	b.n	80061dc <_UG_PutChar+0x54>
      case 0xFC: bt = 0x81; break; // �
 80062fa:	2481      	movs	r4, #129	; 0x81
 80062fc:	e76e      	b.n	80061dc <_UG_PutChar+0x54>
      case 0xDC: bt = 0x9A; break; // �
 80062fe:	249a      	movs	r4, #154	; 0x9a
 8006300:	e76c      	b.n	80061dc <_UG_PutChar+0x54>
      case 0xE4: bt = 0x84; break; // �
 8006302:	2484      	movs	r4, #132	; 0x84
 8006304:	e76a      	b.n	80061dc <_UG_PutChar+0x54>
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006306:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006308:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	9906      	ldr	r1, [sp, #24]
 8006310:	9802      	ldr	r0, [sp, #8]
 8006312:	9e03      	ldr	r6, [sp, #12]
 8006314:	440b      	add	r3, r1
 8006316:	1e42      	subs	r2, r0, #1
 8006318:	3b01      	subs	r3, #1
 800631a:	4432      	add	r2, r6
 800631c:	47a8      	blx	r5
      if (font->font_type == FONT_TYPE_1BPP)
 800631e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006320:	791b      	ldrb	r3, [r3, #4]
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8006322:	4605      	mov	r5, r0
      if (font->font_type == FONT_TYPE_1BPP)
 8006324:	2b00      	cmp	r3, #0
 8006326:	f040 80a9 	bne.w	800647c <_UG_PutChar+0x2f4>
	      index = (bt - font->start_char)* font->char_height * bn;
 800632a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800632c:	9915      	ldr	r1, [sp, #84]	; 0x54
 800632e:	6912      	ldr	r2, [r2, #16]
 8006330:	68c9      	ldr	r1, [r1, #12]
 8006332:	1aa2      	subs	r2, r4, r2
 8006334:	fb01 f202 	mul.w	r2, r1, r2
		  for( j=0;j<font->char_height;j++ )
 8006338:	2900      	cmp	r1, #0
 800633a:	d0c9      	beq.n	80062d0 <_UG_PutChar+0x148>
 800633c:	9904      	ldr	r1, [sp, #16]
 800633e:	2900      	cmp	r1, #0
 8006340:	d0c6      	beq.n	80062d0 <_UG_PutChar+0x148>
 8006342:	fb02 1801 	mla	r8, r2, r1, r1
 8006346:	9301      	str	r3, [sp, #4]
 8006348:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 800634c:	f8cd 8000 	str.w	r8, [sp]
 8006350:	004b      	lsls	r3, r1, #1
 8006352:	9305      	str	r3, [sp, #20]
 8006354:	9b00      	ldr	r3, [sp, #0]
 8006356:	9a04      	ldr	r2, [sp, #16]
 8006358:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800635c:	1a9b      	subs	r3, r3, r2
 800635e:	9302      	str	r3, [sp, #8]
			 for( i=0;i<bn;i++ )
 8006360:	461e      	mov	r6, r3
 8006362:	465c      	mov	r4, fp
				b = font->p[index++];
 8006364:	f8d9 2000 	ldr.w	r2, [r9]
 8006368:	f1a4 0808 	sub.w	r8, r4, #8
 800636c:	f812 b006 	ldrb.w	fp, [r2, r6]
 8006370:	3601      	adds	r6, #1
					  push_pixel(fc);
 8006372:	4638      	mov	r0, r7
				for( k=0;(k<8) && c;k++ )
 8006374:	b14c      	cbz	r4, 800638a <_UG_PutChar+0x202>
				   if( b & 0x01 )
 8006376:	f01b 0f01 	tst.w	fp, #1
					  push_pixel(bc);
 800637a:	bf08      	it	eq
 800637c:	4650      	moveq	r0, sl
				   c--;
 800637e:	3c01      	subs	r4, #1
					  push_pixel(bc);
 8006380:	47a8      	blx	r5
				for( k=0;(k<8) && c;k++ )
 8006382:	4544      	cmp	r4, r8
				   b >>= 1;
 8006384:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
				for( k=0;(k<8) && c;k++ )
 8006388:	d1f3      	bne.n	8006372 <_UG_PutChar+0x1ea>
			 for( i=0;i<bn;i++ )
 800638a:	9b00      	ldr	r3, [sp, #0]
 800638c:	42b3      	cmp	r3, r6
 800638e:	d1e9      	bne.n	8006364 <_UG_PutChar+0x1dc>
		  for( j=0;j<font->char_height;j++ )
 8006390:	9a01      	ldr	r2, [sp, #4]
 8006392:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8006396:	9902      	ldr	r1, [sp, #8]
 8006398:	9805      	ldr	r0, [sp, #20]
 800639a:	3201      	adds	r2, #1
 800639c:	4401      	add	r1, r0
 800639e:	4293      	cmp	r3, r2
 80063a0:	9201      	str	r2, [sp, #4]
 80063a2:	9100      	str	r1, [sp, #0]
 80063a4:	d8d6      	bhi.n	8006354 <_UG_PutChar+0x1cc>
 80063a6:	e793      	b.n	80062d0 <_UG_PutChar+0x148>
 80063a8:	9203      	str	r2, [sp, #12]
 80063aa:	e731      	b.n	8006210 <_UG_PutChar+0x88>
      else if (font->font_type == FONT_TYPE_8BPP)
 80063ac:	2801      	cmp	r0, #1
 80063ae:	d18f      	bne.n	80062d0 <_UG_PutChar+0x148>
         index = (bt - font->start_char)* font->char_height * font->char_width;
 80063b0:	9815      	ldr	r0, [sp, #84]	; 0x54
 80063b2:	68c0      	ldr	r0, [r0, #12]
 80063b4:	1ae4      	subs	r4, r4, r3
 80063b6:	fb02 f200 	mul.w	r2, r2, r0
 80063ba:	fb04 f302 	mul.w	r3, r4, r2
 80063be:	9307      	str	r3, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 80063c0:	2800      	cmp	r0, #0
 80063c2:	d085      	beq.n	80062d0 <_UG_PutChar+0x148>
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d082      	beq.n	80062d0 <_UG_PutChar+0x148>
 80063ca:	9b02      	ldr	r3, [sp, #8]
 80063cc:	9108      	str	r1, [sp, #32]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	9309      	str	r3, [sp, #36]	; 0x24
 80063d2:	f407 037f 	and.w	r3, r7, #16711680	; 0xff0000
 80063d6:	fa5f f887 	uxtb.w	r8, r7
 80063da:	fa5f f68a 	uxtb.w	r6, sl
 80063de:	9300      	str	r3, [sp, #0]
 80063e0:	f40a 4b7f 	and.w	fp, sl, #65280	; 0xff00
 80063e4:	f40a 037f 	and.w	r3, sl, #16711680	; 0xff0000
 80063e8:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	f407 447f 	and.w	r4, r7, #65280	; 0xff00
 80063f2:	f8cd 8014 	str.w	r8, [sp, #20]
            for( i=0;i<actual_char_width;i++ )
 80063f6:	9b06      	ldr	r3, [sp, #24]
 80063f8:	9a08      	ldr	r2, [sp, #32]
 80063fa:	1899      	adds	r1, r3, r2
 80063fc:	9b03      	ldr	r3, [sp, #12]
               gui->pset(xo,yo,color);
 80063fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006400:	4618      	mov	r0, r3
 8006402:	9b07      	ldr	r3, [sp, #28]
 8006404:	1ad7      	subs	r7, r2, r3
 8006406:	eb00 0803 	add.w	r8, r0, r3
         for( j=0;j<font->char_height;j++ )
 800640a:	461d      	mov	r5, r3
               gui->pset(xo,yo,color);
 800640c:	9704      	str	r7, [sp, #16]
               b = font->p[index++];
 800640e:	f8da 2000 	ldr.w	r2, [sl]
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006412:	9f01      	ldr	r7, [sp, #4]
               b = font->p[index++];
 8006414:	f812 e005 	ldrb.w	lr, [r2, r5]
               gui->pset(xo,yo,color);
 8006418:	f8d9 3000 	ldr.w	r3, [r9]
 800641c:	9102      	str	r1, [sp, #8]
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800641e:	f5ce 7280 	rsb	r2, lr, #256	; 0x100
                       ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 8006422:	fb0b fc02 	mul.w	ip, fp, r2
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006426:	fb06 f002 	mul.w	r0, r6, r2
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 800642a:	fb07 f202 	mul.w	r2, r7, r2
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800642e:	9f05      	ldr	r7, [sp, #20]
               gui->pset(xo,yo,color);
 8006430:	681b      	ldr	r3, [r3, #0]
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006432:	fb07 000e 	mla	r0, r7, lr, r0
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006436:	9f00      	ldr	r7, [sp, #0]
                       ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 8006438:	fb04 cc0e 	mla	ip, r4, lr, ip
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 800643c:	fb07 220e 	mla	r2, r7, lr, r2
                       ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 8006440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006444:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006448:	f3c0 2007 	ubfx	r0, r0, #8, #8
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 800644c:	0a12      	lsrs	r2, r2, #8
               color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800644e:	ea40 000c 	orr.w	r0, r0, ip
                       ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006452:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
               gui->pset(xo,yo,color);
 8006456:	4302      	orrs	r2, r0
 8006458:	9804      	ldr	r0, [sp, #16]
               b = font->p[index++];
 800645a:	3501      	adds	r5, #1
               gui->pset(xo,yo,color);
 800645c:	4428      	add	r0, r5
 800645e:	4798      	blx	r3
            for( i=0;i<actual_char_width;i++ )
 8006460:	4545      	cmp	r5, r8
 8006462:	9902      	ldr	r1, [sp, #8]
 8006464:	d1d3      	bne.n	800640e <_UG_PutChar+0x286>
         for( j=0;j<font->char_height;j++ )
 8006466:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800646a:	9908      	ldr	r1, [sp, #32]
            index += font->char_width - actual_char_width;
 800646c:	9807      	ldr	r0, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 800646e:	3101      	adds	r1, #1
            index += font->char_width - actual_char_width;
 8006470:	4410      	add	r0, r2
         for( j=0;j<font->char_height;j++ )
 8006472:	428b      	cmp	r3, r1
 8006474:	9108      	str	r1, [sp, #32]
            index += font->char_width - actual_char_width;
 8006476:	9007      	str	r0, [sp, #28]
         for( j=0;j<font->char_height;j++ )
 8006478:	d8bd      	bhi.n	80063f6 <_UG_PutChar+0x26e>
 800647a:	e729      	b.n	80062d0 <_UG_PutChar+0x148>
	  else if (font->font_type == FONT_TYPE_8BPP)
 800647c:	2b01      	cmp	r3, #1
 800647e:	f47f af27 	bne.w	80062d0 <_UG_PutChar+0x148>
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8006482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006484:	e9d3 2102 	ldrd	r2, r1, [r3, #8]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	fb02 f201 	mul.w	r2, r2, r1
 800648e:	1ae3      	subs	r3, r4, r3
 8006490:	fb02 f903 	mul.w	r9, r2, r3
		   for( j=0;j<font->char_height;j++ )
 8006494:	2900      	cmp	r1, #0
 8006496:	f43f af1b 	beq.w	80062d0 <_UG_PutChar+0x148>
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f43f af17 	beq.w	80062d0 <_UG_PutChar+0x148>
 80064a2:	2300      	movs	r3, #0
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	f407 037f 	and.w	r3, r7, #16711680	; 0xff0000
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	f40a 037f 	and.w	r3, sl, #16711680	; 0xff0000
 80064b0:	e9cd 3901 	strd	r3, r9, [sp, #4]
 80064b4:	f8dd 9054 	ldr.w	r9, [sp, #84]	; 0x54
 80064b8:	fa5f f887 	uxtb.w	r8, r7
 80064bc:	fa5f f68a 	uxtb.w	r6, sl
 80064c0:	f407 447f 	and.w	r4, r7, #65280	; 0xff00
 80064c4:	f40a 4b7f 	and.w	fp, sl, #65280	; 0xff00
			  for( i=0;i<actual_char_width;i++ )
 80064c8:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
		  for( j=0;j<font->char_height;j++ )
 80064cc:	469a      	mov	sl, r3
 80064ce:	18d7      	adds	r7, r2, r3
 80064d0:	4623      	mov	r3, r4
 80064d2:	4654      	mov	r4, sl
 80064d4:	46ca      	mov	sl, r9
 80064d6:	4699      	mov	r9, r3
				 b = font->p[index++];
 80064d8:	f8da 0000 	ldr.w	r0, [sl]
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 80064dc:	9a01      	ldr	r2, [sp, #4]
				 b = font->p[index++];
 80064de:	f810 e004 	ldrb.w	lr, [r0, r4]
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 80064e2:	f5ce 7380 	rsb	r3, lr, #256	; 0x100
				         ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 80064e6:	fb0b fc03 	mul.w	ip, fp, r3
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 80064ea:	fb06 f003 	mul.w	r0, r6, r3
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 80064ee:	fb02 f303 	mul.w	r3, r2, r3
 80064f2:	9a00      	ldr	r2, [sp, #0]
				         ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 80064f4:	fb09 cc0e 	mla	ip, r9, lr, ip
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 80064f8:	fb08 000e 	mla	r0, r8, lr, r0
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 80064fc:	fb02 330e 	mla	r3, r2, lr, r3
				         ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     // Green
 8006500:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8006504:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 8006508:	f3c0 2007 	ubfx	r0, r0, #8, #8
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 800650c:	0a1b      	lsrs	r3, r3, #8
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF)        |     // Blue
 800650e:	ea40 000c 	orr.w	r0, r0, ip
				         ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); // Red
 8006512:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
				 b = font->p[index++];
 8006516:	3401      	adds	r4, #1
				 push_pixel(color);
 8006518:	4318      	orrs	r0, r3
 800651a:	47a8      	blx	r5
			  for( i=0;i<actual_char_width;i++ )
 800651c:	42bc      	cmp	r4, r7
 800651e:	d1db      	bne.n	80064d8 <_UG_PutChar+0x350>
		   for( j=0;j<font->char_height;j++ )
 8006520:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 8006524:	9904      	ldr	r1, [sp, #16]
			  index += font->char_width - actual_char_width;
 8006526:	9802      	ldr	r0, [sp, #8]
		   for( j=0;j<font->char_height;j++ )
 8006528:	3101      	adds	r1, #1
			  index += font->char_width - actual_char_width;
 800652a:	4410      	add	r0, r2
		   for( j=0;j<font->char_height;j++ )
 800652c:	428b      	cmp	r3, r1
 800652e:	464c      	mov	r4, r9
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	46d1      	mov	r9, sl
			  index += font->char_width - actual_char_width;
 8006534:	9002      	str	r0, [sp, #8]
		   for( j=0;j<font->char_height;j++ )
 8006536:	d8c7      	bhi.n	80064c8 <_UG_PutChar+0x340>
 8006538:	e6ca      	b.n	80062d0 <_UG_PutChar+0x148>
 800653a:	bf00      	nop
 800653c:	20000120 	.word	0x20000120

08006540 <UG_PutChar>:
{
 8006540:	b530      	push	{r4, r5, lr}
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8006542:	4c05      	ldr	r4, [pc, #20]	; (8006558 <UG_PutChar+0x18>)
{
 8006544:	b083      	sub	sp, #12
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8006546:	6824      	ldr	r4, [r4, #0]
{
 8006548:	9d06      	ldr	r5, [sp, #24]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 800654a:	9500      	str	r5, [sp, #0]
 800654c:	3444      	adds	r4, #68	; 0x44
 800654e:	9401      	str	r4, [sp, #4]
 8006550:	f7ff fe1a 	bl	8006188 <_UG_PutChar>
}
 8006554:	b003      	add	sp, #12
 8006556:	bd30      	pop	{r4, r5, pc}
 8006558:	20000120 	.word	0x20000120

0800655c <UG_DriverRegister>:
/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800655c:	2802      	cmp	r0, #2
 800655e:	d807      	bhi.n	8006570 <UG_DriverRegister+0x14>

   gui->driver[type].driver = driver;
 8006560:	4b04      	ldr	r3, [pc, #16]	; (8006574 <UG_DriverRegister+0x18>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8006568:	2303      	movs	r3, #3
   gui->driver[type].driver = driver;
 800656a:	6741      	str	r1, [r0, #116]	; 0x74
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 800656c:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20000120 	.word	0x20000120

08006578 <UG_DriverEnable>:

void UG_DriverEnable( UG_U8 type )
{
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8006578:	2802      	cmp	r0, #2
 800657a:	d80b      	bhi.n	8006594 <UG_DriverEnable+0x1c>
   if ( gui->driver[type].state & DRIVER_REGISTERED )
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <UG_DriverEnable+0x20>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8006584:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 8006588:	07da      	lsls	r2, r3, #31
   {
      gui->driver[type].state |= DRIVER_ENABLED;
 800658a:	bf44      	itt	mi
 800658c:	f043 0302 	orrmi.w	r3, r3, #2
 8006590:	f880 3078 	strbmi.w	r3, [r0, #120]	; 0x78
   }
}
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000120 	.word	0x20000120

0800659c <__errno>:
 800659c:	4b01      	ldr	r3, [pc, #4]	; (80065a4 <__errno+0x8>)
 800659e:	6818      	ldr	r0, [r3, #0]
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	20000080 	.word	0x20000080

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4d0d      	ldr	r5, [pc, #52]	; (80065e0 <__libc_init_array+0x38>)
 80065ac:	4c0d      	ldr	r4, [pc, #52]	; (80065e4 <__libc_init_array+0x3c>)
 80065ae:	1b64      	subs	r4, r4, r5
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	2600      	movs	r6, #0
 80065b4:	42a6      	cmp	r6, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4d0b      	ldr	r5, [pc, #44]	; (80065e8 <__libc_init_array+0x40>)
 80065ba:	4c0c      	ldr	r4, [pc, #48]	; (80065ec <__libc_init_array+0x44>)
 80065bc:	f001 fbcc 	bl	8007d58 <_init>
 80065c0:	1b64      	subs	r4, r4, r5
 80065c2:	10a4      	asrs	r4, r4, #2
 80065c4:	2600      	movs	r6, #0
 80065c6:	42a6      	cmp	r6, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80065d0:	4798      	blx	r3
 80065d2:	3601      	adds	r6, #1
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80065da:	4798      	blx	r3
 80065dc:	3601      	adds	r6, #1
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	08017e18 	.word	0x08017e18
 80065e4:	08017e18 	.word	0x08017e18
 80065e8:	08017e18 	.word	0x08017e18
 80065ec:	08017e1c 	.word	0x08017e1c

080065f0 <memset>:
 80065f0:	4402      	add	r2, r0
 80065f2:	4603      	mov	r3, r0
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d100      	bne.n	80065fa <memset+0xa>
 80065f8:	4770      	bx	lr
 80065fa:	f803 1b01 	strb.w	r1, [r3], #1
 80065fe:	e7f9      	b.n	80065f4 <memset+0x4>

08006600 <setvbuf>:
 8006600:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006604:	461d      	mov	r5, r3
 8006606:	4b5d      	ldr	r3, [pc, #372]	; (800677c <setvbuf+0x17c>)
 8006608:	681f      	ldr	r7, [r3, #0]
 800660a:	4604      	mov	r4, r0
 800660c:	460e      	mov	r6, r1
 800660e:	4690      	mov	r8, r2
 8006610:	b127      	cbz	r7, 800661c <setvbuf+0x1c>
 8006612:	69bb      	ldr	r3, [r7, #24]
 8006614:	b913      	cbnz	r3, 800661c <setvbuf+0x1c>
 8006616:	4638      	mov	r0, r7
 8006618:	f000 f9d2 	bl	80069c0 <__sinit>
 800661c:	4b58      	ldr	r3, [pc, #352]	; (8006780 <setvbuf+0x180>)
 800661e:	429c      	cmp	r4, r3
 8006620:	d167      	bne.n	80066f2 <setvbuf+0xf2>
 8006622:	687c      	ldr	r4, [r7, #4]
 8006624:	f1b8 0f02 	cmp.w	r8, #2
 8006628:	d006      	beq.n	8006638 <setvbuf+0x38>
 800662a:	f1b8 0f01 	cmp.w	r8, #1
 800662e:	f200 809f 	bhi.w	8006770 <setvbuf+0x170>
 8006632:	2d00      	cmp	r5, #0
 8006634:	f2c0 809c 	blt.w	8006770 <setvbuf+0x170>
 8006638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800663a:	07db      	lsls	r3, r3, #31
 800663c:	d405      	bmi.n	800664a <setvbuf+0x4a>
 800663e:	89a3      	ldrh	r3, [r4, #12]
 8006640:	0598      	lsls	r0, r3, #22
 8006642:	d402      	bmi.n	800664a <setvbuf+0x4a>
 8006644:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006646:	f000 fa59 	bl	8006afc <__retarget_lock_acquire_recursive>
 800664a:	4621      	mov	r1, r4
 800664c:	4638      	mov	r0, r7
 800664e:	f000 f923 	bl	8006898 <_fflush_r>
 8006652:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006654:	b141      	cbz	r1, 8006668 <setvbuf+0x68>
 8006656:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800665a:	4299      	cmp	r1, r3
 800665c:	d002      	beq.n	8006664 <setvbuf+0x64>
 800665e:	4638      	mov	r0, r7
 8006660:	f000 fa7a 	bl	8006b58 <_free_r>
 8006664:	2300      	movs	r3, #0
 8006666:	6363      	str	r3, [r4, #52]	; 0x34
 8006668:	2300      	movs	r3, #0
 800666a:	61a3      	str	r3, [r4, #24]
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	89a3      	ldrh	r3, [r4, #12]
 8006670:	0619      	lsls	r1, r3, #24
 8006672:	d503      	bpl.n	800667c <setvbuf+0x7c>
 8006674:	6921      	ldr	r1, [r4, #16]
 8006676:	4638      	mov	r0, r7
 8006678:	f000 fa6e 	bl	8006b58 <_free_r>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	f1b8 0f02 	cmp.w	r8, #2
 800668a:	81a3      	strh	r3, [r4, #12]
 800668c:	d06c      	beq.n	8006768 <setvbuf+0x168>
 800668e:	ab01      	add	r3, sp, #4
 8006690:	466a      	mov	r2, sp
 8006692:	4621      	mov	r1, r4
 8006694:	4638      	mov	r0, r7
 8006696:	f000 fa33 	bl	8006b00 <__swhatbuf_r>
 800669a:	89a3      	ldrh	r3, [r4, #12]
 800669c:	4318      	orrs	r0, r3
 800669e:	81a0      	strh	r0, [r4, #12]
 80066a0:	2d00      	cmp	r5, #0
 80066a2:	d130      	bne.n	8006706 <setvbuf+0x106>
 80066a4:	9d00      	ldr	r5, [sp, #0]
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 fa4e 	bl	8006b48 <malloc>
 80066ac:	4606      	mov	r6, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d155      	bne.n	800675e <setvbuf+0x15e>
 80066b2:	f8dd 9000 	ldr.w	r9, [sp]
 80066b6:	45a9      	cmp	r9, r5
 80066b8:	d14a      	bne.n	8006750 <setvbuf+0x150>
 80066ba:	f04f 35ff 	mov.w	r5, #4294967295
 80066be:	2200      	movs	r2, #0
 80066c0:	60a2      	str	r2, [r4, #8]
 80066c2:	f104 0247 	add.w	r2, r4, #71	; 0x47
 80066c6:	6022      	str	r2, [r4, #0]
 80066c8:	6122      	str	r2, [r4, #16]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066d0:	6162      	str	r2, [r4, #20]
 80066d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066d4:	f043 0302 	orr.w	r3, r3, #2
 80066d8:	07d2      	lsls	r2, r2, #31
 80066da:	81a3      	strh	r3, [r4, #12]
 80066dc:	d405      	bmi.n	80066ea <setvbuf+0xea>
 80066de:	f413 7f00 	tst.w	r3, #512	; 0x200
 80066e2:	d102      	bne.n	80066ea <setvbuf+0xea>
 80066e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066e6:	f000 fa0a 	bl	8006afe <__retarget_lock_release_recursive>
 80066ea:	4628      	mov	r0, r5
 80066ec:	b003      	add	sp, #12
 80066ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80066f2:	4b24      	ldr	r3, [pc, #144]	; (8006784 <setvbuf+0x184>)
 80066f4:	429c      	cmp	r4, r3
 80066f6:	d101      	bne.n	80066fc <setvbuf+0xfc>
 80066f8:	68bc      	ldr	r4, [r7, #8]
 80066fa:	e793      	b.n	8006624 <setvbuf+0x24>
 80066fc:	4b22      	ldr	r3, [pc, #136]	; (8006788 <setvbuf+0x188>)
 80066fe:	429c      	cmp	r4, r3
 8006700:	bf08      	it	eq
 8006702:	68fc      	ldreq	r4, [r7, #12]
 8006704:	e78e      	b.n	8006624 <setvbuf+0x24>
 8006706:	2e00      	cmp	r6, #0
 8006708:	d0cd      	beq.n	80066a6 <setvbuf+0xa6>
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	b913      	cbnz	r3, 8006714 <setvbuf+0x114>
 800670e:	4638      	mov	r0, r7
 8006710:	f000 f956 	bl	80069c0 <__sinit>
 8006714:	f1b8 0f01 	cmp.w	r8, #1
 8006718:	bf08      	it	eq
 800671a:	89a3      	ldrheq	r3, [r4, #12]
 800671c:	6026      	str	r6, [r4, #0]
 800671e:	bf04      	itt	eq
 8006720:	f043 0301 	orreq.w	r3, r3, #1
 8006724:	81a3      	strheq	r3, [r4, #12]
 8006726:	89a2      	ldrh	r2, [r4, #12]
 8006728:	f012 0308 	ands.w	r3, r2, #8
 800672c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006730:	d01c      	beq.n	800676c <setvbuf+0x16c>
 8006732:	07d3      	lsls	r3, r2, #31
 8006734:	bf41      	itttt	mi
 8006736:	2300      	movmi	r3, #0
 8006738:	426d      	negmi	r5, r5
 800673a:	60a3      	strmi	r3, [r4, #8]
 800673c:	61a5      	strmi	r5, [r4, #24]
 800673e:	bf58      	it	pl
 8006740:	60a5      	strpl	r5, [r4, #8]
 8006742:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8006744:	f015 0501 	ands.w	r5, r5, #1
 8006748:	d115      	bne.n	8006776 <setvbuf+0x176>
 800674a:	f412 7f00 	tst.w	r2, #512	; 0x200
 800674e:	e7c8      	b.n	80066e2 <setvbuf+0xe2>
 8006750:	4648      	mov	r0, r9
 8006752:	f000 f9f9 	bl	8006b48 <malloc>
 8006756:	4606      	mov	r6, r0
 8006758:	2800      	cmp	r0, #0
 800675a:	d0ae      	beq.n	80066ba <setvbuf+0xba>
 800675c:	464d      	mov	r5, r9
 800675e:	89a3      	ldrh	r3, [r4, #12]
 8006760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006764:	81a3      	strh	r3, [r4, #12]
 8006766:	e7d0      	b.n	800670a <setvbuf+0x10a>
 8006768:	2500      	movs	r5, #0
 800676a:	e7a8      	b.n	80066be <setvbuf+0xbe>
 800676c:	60a3      	str	r3, [r4, #8]
 800676e:	e7e8      	b.n	8006742 <setvbuf+0x142>
 8006770:	f04f 35ff 	mov.w	r5, #4294967295
 8006774:	e7b9      	b.n	80066ea <setvbuf+0xea>
 8006776:	2500      	movs	r5, #0
 8006778:	e7b7      	b.n	80066ea <setvbuf+0xea>
 800677a:	bf00      	nop
 800677c:	20000080 	.word	0x20000080
 8006780:	08017a08 	.word	0x08017a08
 8006784:	08017a28 	.word	0x08017a28
 8006788:	080179e8 	.word	0x080179e8

0800678c <__sflush_r>:
 800678c:	898a      	ldrh	r2, [r1, #12]
 800678e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006792:	4605      	mov	r5, r0
 8006794:	0710      	lsls	r0, r2, #28
 8006796:	460c      	mov	r4, r1
 8006798:	d458      	bmi.n	800684c <__sflush_r+0xc0>
 800679a:	684b      	ldr	r3, [r1, #4]
 800679c:	2b00      	cmp	r3, #0
 800679e:	dc05      	bgt.n	80067ac <__sflush_r+0x20>
 80067a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	dc02      	bgt.n	80067ac <__sflush_r+0x20>
 80067a6:	2000      	movs	r0, #0
 80067a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	d0f9      	beq.n	80067a6 <__sflush_r+0x1a>
 80067b2:	2300      	movs	r3, #0
 80067b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067b8:	682f      	ldr	r7, [r5, #0]
 80067ba:	602b      	str	r3, [r5, #0]
 80067bc:	d032      	beq.n	8006824 <__sflush_r+0x98>
 80067be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067c0:	89a3      	ldrh	r3, [r4, #12]
 80067c2:	075a      	lsls	r2, r3, #29
 80067c4:	d505      	bpl.n	80067d2 <__sflush_r+0x46>
 80067c6:	6863      	ldr	r3, [r4, #4]
 80067c8:	1ac0      	subs	r0, r0, r3
 80067ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067cc:	b10b      	cbz	r3, 80067d2 <__sflush_r+0x46>
 80067ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d0:	1ac0      	subs	r0, r0, r3
 80067d2:	2300      	movs	r3, #0
 80067d4:	4602      	mov	r2, r0
 80067d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d8:	6a21      	ldr	r1, [r4, #32]
 80067da:	4628      	mov	r0, r5
 80067dc:	47b0      	blx	r6
 80067de:	1c43      	adds	r3, r0, #1
 80067e0:	89a3      	ldrh	r3, [r4, #12]
 80067e2:	d106      	bne.n	80067f2 <__sflush_r+0x66>
 80067e4:	6829      	ldr	r1, [r5, #0]
 80067e6:	291d      	cmp	r1, #29
 80067e8:	d82c      	bhi.n	8006844 <__sflush_r+0xb8>
 80067ea:	4a2a      	ldr	r2, [pc, #168]	; (8006894 <__sflush_r+0x108>)
 80067ec:	40ca      	lsrs	r2, r1
 80067ee:	07d6      	lsls	r6, r2, #31
 80067f0:	d528      	bpl.n	8006844 <__sflush_r+0xb8>
 80067f2:	2200      	movs	r2, #0
 80067f4:	6062      	str	r2, [r4, #4]
 80067f6:	04d9      	lsls	r1, r3, #19
 80067f8:	6922      	ldr	r2, [r4, #16]
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	d504      	bpl.n	8006808 <__sflush_r+0x7c>
 80067fe:	1c42      	adds	r2, r0, #1
 8006800:	d101      	bne.n	8006806 <__sflush_r+0x7a>
 8006802:	682b      	ldr	r3, [r5, #0]
 8006804:	b903      	cbnz	r3, 8006808 <__sflush_r+0x7c>
 8006806:	6560      	str	r0, [r4, #84]	; 0x54
 8006808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800680a:	602f      	str	r7, [r5, #0]
 800680c:	2900      	cmp	r1, #0
 800680e:	d0ca      	beq.n	80067a6 <__sflush_r+0x1a>
 8006810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006814:	4299      	cmp	r1, r3
 8006816:	d002      	beq.n	800681e <__sflush_r+0x92>
 8006818:	4628      	mov	r0, r5
 800681a:	f000 f99d 	bl	8006b58 <_free_r>
 800681e:	2000      	movs	r0, #0
 8006820:	6360      	str	r0, [r4, #52]	; 0x34
 8006822:	e7c1      	b.n	80067a8 <__sflush_r+0x1c>
 8006824:	6a21      	ldr	r1, [r4, #32]
 8006826:	2301      	movs	r3, #1
 8006828:	4628      	mov	r0, r5
 800682a:	47b0      	blx	r6
 800682c:	1c41      	adds	r1, r0, #1
 800682e:	d1c7      	bne.n	80067c0 <__sflush_r+0x34>
 8006830:	682b      	ldr	r3, [r5, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0c4      	beq.n	80067c0 <__sflush_r+0x34>
 8006836:	2b1d      	cmp	r3, #29
 8006838:	d001      	beq.n	800683e <__sflush_r+0xb2>
 800683a:	2b16      	cmp	r3, #22
 800683c:	d101      	bne.n	8006842 <__sflush_r+0xb6>
 800683e:	602f      	str	r7, [r5, #0]
 8006840:	e7b1      	b.n	80067a6 <__sflush_r+0x1a>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006848:	81a3      	strh	r3, [r4, #12]
 800684a:	e7ad      	b.n	80067a8 <__sflush_r+0x1c>
 800684c:	690f      	ldr	r7, [r1, #16]
 800684e:	2f00      	cmp	r7, #0
 8006850:	d0a9      	beq.n	80067a6 <__sflush_r+0x1a>
 8006852:	0793      	lsls	r3, r2, #30
 8006854:	680e      	ldr	r6, [r1, #0]
 8006856:	bf08      	it	eq
 8006858:	694b      	ldreq	r3, [r1, #20]
 800685a:	600f      	str	r7, [r1, #0]
 800685c:	bf18      	it	ne
 800685e:	2300      	movne	r3, #0
 8006860:	eba6 0807 	sub.w	r8, r6, r7
 8006864:	608b      	str	r3, [r1, #8]
 8006866:	f1b8 0f00 	cmp.w	r8, #0
 800686a:	dd9c      	ble.n	80067a6 <__sflush_r+0x1a>
 800686c:	6a21      	ldr	r1, [r4, #32]
 800686e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006870:	4643      	mov	r3, r8
 8006872:	463a      	mov	r2, r7
 8006874:	4628      	mov	r0, r5
 8006876:	47b0      	blx	r6
 8006878:	2800      	cmp	r0, #0
 800687a:	dc06      	bgt.n	800688a <__sflush_r+0xfe>
 800687c:	89a3      	ldrh	r3, [r4, #12]
 800687e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006882:	81a3      	strh	r3, [r4, #12]
 8006884:	f04f 30ff 	mov.w	r0, #4294967295
 8006888:	e78e      	b.n	80067a8 <__sflush_r+0x1c>
 800688a:	4407      	add	r7, r0
 800688c:	eba8 0800 	sub.w	r8, r8, r0
 8006890:	e7e9      	b.n	8006866 <__sflush_r+0xda>
 8006892:	bf00      	nop
 8006894:	20400001 	.word	0x20400001

08006898 <_fflush_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	4605      	mov	r5, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	b913      	cbnz	r3, 80068a8 <_fflush_r+0x10>
 80068a2:	2500      	movs	r5, #0
 80068a4:	4628      	mov	r0, r5
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	b118      	cbz	r0, 80068b2 <_fflush_r+0x1a>
 80068aa:	6983      	ldr	r3, [r0, #24]
 80068ac:	b90b      	cbnz	r3, 80068b2 <_fflush_r+0x1a>
 80068ae:	f000 f887 	bl	80069c0 <__sinit>
 80068b2:	4b14      	ldr	r3, [pc, #80]	; (8006904 <_fflush_r+0x6c>)
 80068b4:	429c      	cmp	r4, r3
 80068b6:	d11b      	bne.n	80068f0 <_fflush_r+0x58>
 80068b8:	686c      	ldr	r4, [r5, #4]
 80068ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ef      	beq.n	80068a2 <_fflush_r+0xa>
 80068c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068c4:	07d0      	lsls	r0, r2, #31
 80068c6:	d404      	bmi.n	80068d2 <_fflush_r+0x3a>
 80068c8:	0599      	lsls	r1, r3, #22
 80068ca:	d402      	bmi.n	80068d2 <_fflush_r+0x3a>
 80068cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ce:	f000 f915 	bl	8006afc <__retarget_lock_acquire_recursive>
 80068d2:	4628      	mov	r0, r5
 80068d4:	4621      	mov	r1, r4
 80068d6:	f7ff ff59 	bl	800678c <__sflush_r>
 80068da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068dc:	07da      	lsls	r2, r3, #31
 80068de:	4605      	mov	r5, r0
 80068e0:	d4e0      	bmi.n	80068a4 <_fflush_r+0xc>
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	059b      	lsls	r3, r3, #22
 80068e6:	d4dd      	bmi.n	80068a4 <_fflush_r+0xc>
 80068e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068ea:	f000 f908 	bl	8006afe <__retarget_lock_release_recursive>
 80068ee:	e7d9      	b.n	80068a4 <_fflush_r+0xc>
 80068f0:	4b05      	ldr	r3, [pc, #20]	; (8006908 <_fflush_r+0x70>)
 80068f2:	429c      	cmp	r4, r3
 80068f4:	d101      	bne.n	80068fa <_fflush_r+0x62>
 80068f6:	68ac      	ldr	r4, [r5, #8]
 80068f8:	e7df      	b.n	80068ba <_fflush_r+0x22>
 80068fa:	4b04      	ldr	r3, [pc, #16]	; (800690c <_fflush_r+0x74>)
 80068fc:	429c      	cmp	r4, r3
 80068fe:	bf08      	it	eq
 8006900:	68ec      	ldreq	r4, [r5, #12]
 8006902:	e7da      	b.n	80068ba <_fflush_r+0x22>
 8006904:	08017a08 	.word	0x08017a08
 8006908:	08017a28 	.word	0x08017a28
 800690c:	080179e8 	.word	0x080179e8

08006910 <std>:
 8006910:	2300      	movs	r3, #0
 8006912:	b510      	push	{r4, lr}
 8006914:	4604      	mov	r4, r0
 8006916:	e9c0 3300 	strd	r3, r3, [r0]
 800691a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800691e:	6083      	str	r3, [r0, #8]
 8006920:	8181      	strh	r1, [r0, #12]
 8006922:	6643      	str	r3, [r0, #100]	; 0x64
 8006924:	81c2      	strh	r2, [r0, #14]
 8006926:	6183      	str	r3, [r0, #24]
 8006928:	4619      	mov	r1, r3
 800692a:	2208      	movs	r2, #8
 800692c:	305c      	adds	r0, #92	; 0x5c
 800692e:	f7ff fe5f 	bl	80065f0 <memset>
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <std+0x38>)
 8006934:	6263      	str	r3, [r4, #36]	; 0x24
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <std+0x3c>)
 8006938:	62a3      	str	r3, [r4, #40]	; 0x28
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <std+0x40>)
 800693c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <std+0x44>)
 8006940:	6224      	str	r4, [r4, #32]
 8006942:	6323      	str	r3, [r4, #48]	; 0x30
 8006944:	bd10      	pop	{r4, pc}
 8006946:	bf00      	nop
 8006948:	08006ccd 	.word	0x08006ccd
 800694c:	08006cef 	.word	0x08006cef
 8006950:	08006d27 	.word	0x08006d27
 8006954:	08006d4b 	.word	0x08006d4b

08006958 <_cleanup_r>:
 8006958:	4901      	ldr	r1, [pc, #4]	; (8006960 <_cleanup_r+0x8>)
 800695a:	f000 b8af 	b.w	8006abc <_fwalk_reent>
 800695e:	bf00      	nop
 8006960:	08006899 	.word	0x08006899

08006964 <__sfmoreglue>:
 8006964:	b570      	push	{r4, r5, r6, lr}
 8006966:	1e4a      	subs	r2, r1, #1
 8006968:	2568      	movs	r5, #104	; 0x68
 800696a:	4355      	muls	r5, r2
 800696c:	460e      	mov	r6, r1
 800696e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006972:	f000 f941 	bl	8006bf8 <_malloc_r>
 8006976:	4604      	mov	r4, r0
 8006978:	b140      	cbz	r0, 800698c <__sfmoreglue+0x28>
 800697a:	2100      	movs	r1, #0
 800697c:	e9c0 1600 	strd	r1, r6, [r0]
 8006980:	300c      	adds	r0, #12
 8006982:	60a0      	str	r0, [r4, #8]
 8006984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006988:	f7ff fe32 	bl	80065f0 <memset>
 800698c:	4620      	mov	r0, r4
 800698e:	bd70      	pop	{r4, r5, r6, pc}

08006990 <__sfp_lock_acquire>:
 8006990:	4801      	ldr	r0, [pc, #4]	; (8006998 <__sfp_lock_acquire+0x8>)
 8006992:	f000 b8b3 	b.w	8006afc <__retarget_lock_acquire_recursive>
 8006996:	bf00      	nop
 8006998:	2001cbcc 	.word	0x2001cbcc

0800699c <__sfp_lock_release>:
 800699c:	4801      	ldr	r0, [pc, #4]	; (80069a4 <__sfp_lock_release+0x8>)
 800699e:	f000 b8ae 	b.w	8006afe <__retarget_lock_release_recursive>
 80069a2:	bf00      	nop
 80069a4:	2001cbcc 	.word	0x2001cbcc

080069a8 <__sinit_lock_acquire>:
 80069a8:	4801      	ldr	r0, [pc, #4]	; (80069b0 <__sinit_lock_acquire+0x8>)
 80069aa:	f000 b8a7 	b.w	8006afc <__retarget_lock_acquire_recursive>
 80069ae:	bf00      	nop
 80069b0:	2001cbc7 	.word	0x2001cbc7

080069b4 <__sinit_lock_release>:
 80069b4:	4801      	ldr	r0, [pc, #4]	; (80069bc <__sinit_lock_release+0x8>)
 80069b6:	f000 b8a2 	b.w	8006afe <__retarget_lock_release_recursive>
 80069ba:	bf00      	nop
 80069bc:	2001cbc7 	.word	0x2001cbc7

080069c0 <__sinit>:
 80069c0:	b510      	push	{r4, lr}
 80069c2:	4604      	mov	r4, r0
 80069c4:	f7ff fff0 	bl	80069a8 <__sinit_lock_acquire>
 80069c8:	69a3      	ldr	r3, [r4, #24]
 80069ca:	b11b      	cbz	r3, 80069d4 <__sinit+0x14>
 80069cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069d0:	f7ff bff0 	b.w	80069b4 <__sinit_lock_release>
 80069d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80069d8:	6523      	str	r3, [r4, #80]	; 0x50
 80069da:	4b13      	ldr	r3, [pc, #76]	; (8006a28 <__sinit+0x68>)
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <__sinit+0x6c>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	bf04      	itt	eq
 80069e6:	2301      	moveq	r3, #1
 80069e8:	61a3      	streq	r3, [r4, #24]
 80069ea:	4620      	mov	r0, r4
 80069ec:	f000 f820 	bl	8006a30 <__sfp>
 80069f0:	6060      	str	r0, [r4, #4]
 80069f2:	4620      	mov	r0, r4
 80069f4:	f000 f81c 	bl	8006a30 <__sfp>
 80069f8:	60a0      	str	r0, [r4, #8]
 80069fa:	4620      	mov	r0, r4
 80069fc:	f000 f818 	bl	8006a30 <__sfp>
 8006a00:	2200      	movs	r2, #0
 8006a02:	60e0      	str	r0, [r4, #12]
 8006a04:	2104      	movs	r1, #4
 8006a06:	6860      	ldr	r0, [r4, #4]
 8006a08:	f7ff ff82 	bl	8006910 <std>
 8006a0c:	68a0      	ldr	r0, [r4, #8]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	2109      	movs	r1, #9
 8006a12:	f7ff ff7d 	bl	8006910 <std>
 8006a16:	68e0      	ldr	r0, [r4, #12]
 8006a18:	2202      	movs	r2, #2
 8006a1a:	2112      	movs	r1, #18
 8006a1c:	f7ff ff78 	bl	8006910 <std>
 8006a20:	2301      	movs	r3, #1
 8006a22:	61a3      	str	r3, [r4, #24]
 8006a24:	e7d2      	b.n	80069cc <__sinit+0xc>
 8006a26:	bf00      	nop
 8006a28:	080179e4 	.word	0x080179e4
 8006a2c:	08006959 	.word	0x08006959

08006a30 <__sfp>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	4607      	mov	r7, r0
 8006a34:	f7ff ffac 	bl	8006990 <__sfp_lock_acquire>
 8006a38:	4b1e      	ldr	r3, [pc, #120]	; (8006ab4 <__sfp+0x84>)
 8006a3a:	681e      	ldr	r6, [r3, #0]
 8006a3c:	69b3      	ldr	r3, [r6, #24]
 8006a3e:	b913      	cbnz	r3, 8006a46 <__sfp+0x16>
 8006a40:	4630      	mov	r0, r6
 8006a42:	f7ff ffbd 	bl	80069c0 <__sinit>
 8006a46:	3648      	adds	r6, #72	; 0x48
 8006a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a4c:	3b01      	subs	r3, #1
 8006a4e:	d503      	bpl.n	8006a58 <__sfp+0x28>
 8006a50:	6833      	ldr	r3, [r6, #0]
 8006a52:	b30b      	cbz	r3, 8006a98 <__sfp+0x68>
 8006a54:	6836      	ldr	r6, [r6, #0]
 8006a56:	e7f7      	b.n	8006a48 <__sfp+0x18>
 8006a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a5c:	b9d5      	cbnz	r5, 8006a94 <__sfp+0x64>
 8006a5e:	4b16      	ldr	r3, [pc, #88]	; (8006ab8 <__sfp+0x88>)
 8006a60:	60e3      	str	r3, [r4, #12]
 8006a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a66:	6665      	str	r5, [r4, #100]	; 0x64
 8006a68:	f000 f847 	bl	8006afa <__retarget_lock_init_recursive>
 8006a6c:	f7ff ff96 	bl	800699c <__sfp_lock_release>
 8006a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a78:	6025      	str	r5, [r4, #0]
 8006a7a:	61a5      	str	r5, [r4, #24]
 8006a7c:	2208      	movs	r2, #8
 8006a7e:	4629      	mov	r1, r5
 8006a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a84:	f7ff fdb4 	bl	80065f0 <memset>
 8006a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a90:	4620      	mov	r0, r4
 8006a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a94:	3468      	adds	r4, #104	; 0x68
 8006a96:	e7d9      	b.n	8006a4c <__sfp+0x1c>
 8006a98:	2104      	movs	r1, #4
 8006a9a:	4638      	mov	r0, r7
 8006a9c:	f7ff ff62 	bl	8006964 <__sfmoreglue>
 8006aa0:	4604      	mov	r4, r0
 8006aa2:	6030      	str	r0, [r6, #0]
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	d1d5      	bne.n	8006a54 <__sfp+0x24>
 8006aa8:	f7ff ff78 	bl	800699c <__sfp_lock_release>
 8006aac:	230c      	movs	r3, #12
 8006aae:	603b      	str	r3, [r7, #0]
 8006ab0:	e7ee      	b.n	8006a90 <__sfp+0x60>
 8006ab2:	bf00      	nop
 8006ab4:	080179e4 	.word	0x080179e4
 8006ab8:	ffff0001 	.word	0xffff0001

08006abc <_fwalk_reent>:
 8006abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ac0:	4606      	mov	r6, r0
 8006ac2:	4688      	mov	r8, r1
 8006ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ac8:	2700      	movs	r7, #0
 8006aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ace:	f1b9 0901 	subs.w	r9, r9, #1
 8006ad2:	d505      	bpl.n	8006ae0 <_fwalk_reent+0x24>
 8006ad4:	6824      	ldr	r4, [r4, #0]
 8006ad6:	2c00      	cmp	r4, #0
 8006ad8:	d1f7      	bne.n	8006aca <_fwalk_reent+0xe>
 8006ada:	4638      	mov	r0, r7
 8006adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ae0:	89ab      	ldrh	r3, [r5, #12]
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d907      	bls.n	8006af6 <_fwalk_reent+0x3a>
 8006ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006aea:	3301      	adds	r3, #1
 8006aec:	d003      	beq.n	8006af6 <_fwalk_reent+0x3a>
 8006aee:	4629      	mov	r1, r5
 8006af0:	4630      	mov	r0, r6
 8006af2:	47c0      	blx	r8
 8006af4:	4307      	orrs	r7, r0
 8006af6:	3568      	adds	r5, #104	; 0x68
 8006af8:	e7e9      	b.n	8006ace <_fwalk_reent+0x12>

08006afa <__retarget_lock_init_recursive>:
 8006afa:	4770      	bx	lr

08006afc <__retarget_lock_acquire_recursive>:
 8006afc:	4770      	bx	lr

08006afe <__retarget_lock_release_recursive>:
 8006afe:	4770      	bx	lr

08006b00 <__swhatbuf_r>:
 8006b00:	b570      	push	{r4, r5, r6, lr}
 8006b02:	460e      	mov	r6, r1
 8006b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b08:	2900      	cmp	r1, #0
 8006b0a:	b096      	sub	sp, #88	; 0x58
 8006b0c:	4614      	mov	r4, r2
 8006b0e:	461d      	mov	r5, r3
 8006b10:	da07      	bge.n	8006b22 <__swhatbuf_r+0x22>
 8006b12:	2300      	movs	r3, #0
 8006b14:	602b      	str	r3, [r5, #0]
 8006b16:	89b3      	ldrh	r3, [r6, #12]
 8006b18:	061a      	lsls	r2, r3, #24
 8006b1a:	d410      	bmi.n	8006b3e <__swhatbuf_r+0x3e>
 8006b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b20:	e00e      	b.n	8006b40 <__swhatbuf_r+0x40>
 8006b22:	466a      	mov	r2, sp
 8006b24:	f000 f938 	bl	8006d98 <_fstat_r>
 8006b28:	2800      	cmp	r0, #0
 8006b2a:	dbf2      	blt.n	8006b12 <__swhatbuf_r+0x12>
 8006b2c:	9a01      	ldr	r2, [sp, #4]
 8006b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b36:	425a      	negs	r2, r3
 8006b38:	415a      	adcs	r2, r3
 8006b3a:	602a      	str	r2, [r5, #0]
 8006b3c:	e7ee      	b.n	8006b1c <__swhatbuf_r+0x1c>
 8006b3e:	2340      	movs	r3, #64	; 0x40
 8006b40:	2000      	movs	r0, #0
 8006b42:	6023      	str	r3, [r4, #0]
 8006b44:	b016      	add	sp, #88	; 0x58
 8006b46:	bd70      	pop	{r4, r5, r6, pc}

08006b48 <malloc>:
 8006b48:	4b02      	ldr	r3, [pc, #8]	; (8006b54 <malloc+0xc>)
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	6818      	ldr	r0, [r3, #0]
 8006b4e:	f000 b853 	b.w	8006bf8 <_malloc_r>
 8006b52:	bf00      	nop
 8006b54:	20000080 	.word	0x20000080

08006b58 <_free_r>:
 8006b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d048      	beq.n	8006bf0 <_free_r+0x98>
 8006b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b62:	9001      	str	r0, [sp, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f1a1 0404 	sub.w	r4, r1, #4
 8006b6a:	bfb8      	it	lt
 8006b6c:	18e4      	addlt	r4, r4, r3
 8006b6e:	f000 f937 	bl	8006de0 <__malloc_lock>
 8006b72:	4a20      	ldr	r2, [pc, #128]	; (8006bf4 <_free_r+0x9c>)
 8006b74:	9801      	ldr	r0, [sp, #4]
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	4615      	mov	r5, r2
 8006b7a:	b933      	cbnz	r3, 8006b8a <_free_r+0x32>
 8006b7c:	6063      	str	r3, [r4, #4]
 8006b7e:	6014      	str	r4, [r2, #0]
 8006b80:	b003      	add	sp, #12
 8006b82:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b86:	f000 b931 	b.w	8006dec <__malloc_unlock>
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	d90b      	bls.n	8006ba6 <_free_r+0x4e>
 8006b8e:	6821      	ldr	r1, [r4, #0]
 8006b90:	1862      	adds	r2, r4, r1
 8006b92:	4293      	cmp	r3, r2
 8006b94:	bf04      	itt	eq
 8006b96:	681a      	ldreq	r2, [r3, #0]
 8006b98:	685b      	ldreq	r3, [r3, #4]
 8006b9a:	6063      	str	r3, [r4, #4]
 8006b9c:	bf04      	itt	eq
 8006b9e:	1852      	addeq	r2, r2, r1
 8006ba0:	6022      	streq	r2, [r4, #0]
 8006ba2:	602c      	str	r4, [r5, #0]
 8006ba4:	e7ec      	b.n	8006b80 <_free_r+0x28>
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	b10b      	cbz	r3, 8006bb0 <_free_r+0x58>
 8006bac:	42a3      	cmp	r3, r4
 8006bae:	d9fa      	bls.n	8006ba6 <_free_r+0x4e>
 8006bb0:	6811      	ldr	r1, [r2, #0]
 8006bb2:	1855      	adds	r5, r2, r1
 8006bb4:	42a5      	cmp	r5, r4
 8006bb6:	d10b      	bne.n	8006bd0 <_free_r+0x78>
 8006bb8:	6824      	ldr	r4, [r4, #0]
 8006bba:	4421      	add	r1, r4
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	42a3      	cmp	r3, r4
 8006bc0:	6011      	str	r1, [r2, #0]
 8006bc2:	d1dd      	bne.n	8006b80 <_free_r+0x28>
 8006bc4:	681c      	ldr	r4, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	6053      	str	r3, [r2, #4]
 8006bca:	4421      	add	r1, r4
 8006bcc:	6011      	str	r1, [r2, #0]
 8006bce:	e7d7      	b.n	8006b80 <_free_r+0x28>
 8006bd0:	d902      	bls.n	8006bd8 <_free_r+0x80>
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	6003      	str	r3, [r0, #0]
 8006bd6:	e7d3      	b.n	8006b80 <_free_r+0x28>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	428b      	cmp	r3, r1
 8006bde:	bf04      	itt	eq
 8006be0:	6819      	ldreq	r1, [r3, #0]
 8006be2:	685b      	ldreq	r3, [r3, #4]
 8006be4:	6063      	str	r3, [r4, #4]
 8006be6:	bf04      	itt	eq
 8006be8:	1949      	addeq	r1, r1, r5
 8006bea:	6021      	streq	r1, [r4, #0]
 8006bec:	6054      	str	r4, [r2, #4]
 8006bee:	e7c7      	b.n	8006b80 <_free_r+0x28>
 8006bf0:	b003      	add	sp, #12
 8006bf2:	bd30      	pop	{r4, r5, pc}
 8006bf4:	20000124 	.word	0x20000124

08006bf8 <_malloc_r>:
 8006bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfa:	1ccd      	adds	r5, r1, #3
 8006bfc:	f025 0503 	bic.w	r5, r5, #3
 8006c00:	3508      	adds	r5, #8
 8006c02:	2d0c      	cmp	r5, #12
 8006c04:	bf38      	it	cc
 8006c06:	250c      	movcc	r5, #12
 8006c08:	2d00      	cmp	r5, #0
 8006c0a:	4606      	mov	r6, r0
 8006c0c:	db01      	blt.n	8006c12 <_malloc_r+0x1a>
 8006c0e:	42a9      	cmp	r1, r5
 8006c10:	d903      	bls.n	8006c1a <_malloc_r+0x22>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	2000      	movs	r0, #0
 8006c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c1a:	f000 f8e1 	bl	8006de0 <__malloc_lock>
 8006c1e:	4921      	ldr	r1, [pc, #132]	; (8006ca4 <_malloc_r+0xac>)
 8006c20:	680a      	ldr	r2, [r1, #0]
 8006c22:	4614      	mov	r4, r2
 8006c24:	b99c      	cbnz	r4, 8006c4e <_malloc_r+0x56>
 8006c26:	4f20      	ldr	r7, [pc, #128]	; (8006ca8 <_malloc_r+0xb0>)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	b923      	cbnz	r3, 8006c36 <_malloc_r+0x3e>
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	4630      	mov	r0, r6
 8006c30:	f000 f83c 	bl	8006cac <_sbrk_r>
 8006c34:	6038      	str	r0, [r7, #0]
 8006c36:	4629      	mov	r1, r5
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f000 f837 	bl	8006cac <_sbrk_r>
 8006c3e:	1c43      	adds	r3, r0, #1
 8006c40:	d123      	bne.n	8006c8a <_malloc_r+0x92>
 8006c42:	230c      	movs	r3, #12
 8006c44:	6033      	str	r3, [r6, #0]
 8006c46:	4630      	mov	r0, r6
 8006c48:	f000 f8d0 	bl	8006dec <__malloc_unlock>
 8006c4c:	e7e3      	b.n	8006c16 <_malloc_r+0x1e>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	1b5b      	subs	r3, r3, r5
 8006c52:	d417      	bmi.n	8006c84 <_malloc_r+0x8c>
 8006c54:	2b0b      	cmp	r3, #11
 8006c56:	d903      	bls.n	8006c60 <_malloc_r+0x68>
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	441c      	add	r4, r3
 8006c5c:	6025      	str	r5, [r4, #0]
 8006c5e:	e004      	b.n	8006c6a <_malloc_r+0x72>
 8006c60:	6863      	ldr	r3, [r4, #4]
 8006c62:	42a2      	cmp	r2, r4
 8006c64:	bf0c      	ite	eq
 8006c66:	600b      	streq	r3, [r1, #0]
 8006c68:	6053      	strne	r3, [r2, #4]
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f000 f8be 	bl	8006dec <__malloc_unlock>
 8006c70:	f104 000b 	add.w	r0, r4, #11
 8006c74:	1d23      	adds	r3, r4, #4
 8006c76:	f020 0007 	bic.w	r0, r0, #7
 8006c7a:	1ac2      	subs	r2, r0, r3
 8006c7c:	d0cc      	beq.n	8006c18 <_malloc_r+0x20>
 8006c7e:	1a1b      	subs	r3, r3, r0
 8006c80:	50a3      	str	r3, [r4, r2]
 8006c82:	e7c9      	b.n	8006c18 <_malloc_r+0x20>
 8006c84:	4622      	mov	r2, r4
 8006c86:	6864      	ldr	r4, [r4, #4]
 8006c88:	e7cc      	b.n	8006c24 <_malloc_r+0x2c>
 8006c8a:	1cc4      	adds	r4, r0, #3
 8006c8c:	f024 0403 	bic.w	r4, r4, #3
 8006c90:	42a0      	cmp	r0, r4
 8006c92:	d0e3      	beq.n	8006c5c <_malloc_r+0x64>
 8006c94:	1a21      	subs	r1, r4, r0
 8006c96:	4630      	mov	r0, r6
 8006c98:	f000 f808 	bl	8006cac <_sbrk_r>
 8006c9c:	3001      	adds	r0, #1
 8006c9e:	d1dd      	bne.n	8006c5c <_malloc_r+0x64>
 8006ca0:	e7cf      	b.n	8006c42 <_malloc_r+0x4a>
 8006ca2:	bf00      	nop
 8006ca4:	20000124 	.word	0x20000124
 8006ca8:	20000128 	.word	0x20000128

08006cac <_sbrk_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d06      	ldr	r5, [pc, #24]	; (8006cc8 <_sbrk_r+0x1c>)
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	4604      	mov	r4, r0
 8006cb4:	4608      	mov	r0, r1
 8006cb6:	602b      	str	r3, [r5, #0]
 8006cb8:	f7fa fde8 	bl	800188c <_sbrk>
 8006cbc:	1c43      	adds	r3, r0, #1
 8006cbe:	d102      	bne.n	8006cc6 <_sbrk_r+0x1a>
 8006cc0:	682b      	ldr	r3, [r5, #0]
 8006cc2:	b103      	cbz	r3, 8006cc6 <_sbrk_r+0x1a>
 8006cc4:	6023      	str	r3, [r4, #0]
 8006cc6:	bd38      	pop	{r3, r4, r5, pc}
 8006cc8:	2001cbd0 	.word	0x2001cbd0

08006ccc <__sread>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	460c      	mov	r4, r1
 8006cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cd4:	f000 f890 	bl	8006df8 <_read_r>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	bfab      	itete	ge
 8006cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cde:	89a3      	ldrhlt	r3, [r4, #12]
 8006ce0:	181b      	addge	r3, r3, r0
 8006ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006ce6:	bfac      	ite	ge
 8006ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cea:	81a3      	strhlt	r3, [r4, #12]
 8006cec:	bd10      	pop	{r4, pc}

08006cee <__swrite>:
 8006cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	898b      	ldrh	r3, [r1, #12]
 8006cf6:	05db      	lsls	r3, r3, #23
 8006cf8:	4605      	mov	r5, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4616      	mov	r6, r2
 8006cfe:	d505      	bpl.n	8006d0c <__swrite+0x1e>
 8006d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d04:	2302      	movs	r3, #2
 8006d06:	2200      	movs	r2, #0
 8006d08:	f000 f858 	bl	8006dbc <_lseek_r>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	4632      	mov	r2, r6
 8006d1a:	463b      	mov	r3, r7
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d22:	f000 b817 	b.w	8006d54 <_write_r>

08006d26 <__sseek>:
 8006d26:	b510      	push	{r4, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d2e:	f000 f845 	bl	8006dbc <_lseek_r>
 8006d32:	1c43      	adds	r3, r0, #1
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	bf15      	itete	ne
 8006d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d42:	81a3      	strheq	r3, [r4, #12]
 8006d44:	bf18      	it	ne
 8006d46:	81a3      	strhne	r3, [r4, #12]
 8006d48:	bd10      	pop	{r4, pc}

08006d4a <__sclose>:
 8006d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d4e:	f000 b813 	b.w	8006d78 <_close_r>
	...

08006d54 <_write_r>:
 8006d54:	b538      	push	{r3, r4, r5, lr}
 8006d56:	4d07      	ldr	r5, [pc, #28]	; (8006d74 <_write_r+0x20>)
 8006d58:	4604      	mov	r4, r0
 8006d5a:	4608      	mov	r0, r1
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	2200      	movs	r2, #0
 8006d60:	602a      	str	r2, [r5, #0]
 8006d62:	461a      	mov	r2, r3
 8006d64:	f7fd fd4c 	bl	8004800 <_write>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_write_r+0x1e>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_write_r+0x1e>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	2001cbd0 	.word	0x2001cbd0

08006d78 <_close_r>:
 8006d78:	b538      	push	{r3, r4, r5, lr}
 8006d7a:	4d06      	ldr	r5, [pc, #24]	; (8006d94 <_close_r+0x1c>)
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	4604      	mov	r4, r0
 8006d80:	4608      	mov	r0, r1
 8006d82:	602b      	str	r3, [r5, #0]
 8006d84:	f7fa fd76 	bl	8001874 <_close>
 8006d88:	1c43      	adds	r3, r0, #1
 8006d8a:	d102      	bne.n	8006d92 <_close_r+0x1a>
 8006d8c:	682b      	ldr	r3, [r5, #0]
 8006d8e:	b103      	cbz	r3, 8006d92 <_close_r+0x1a>
 8006d90:	6023      	str	r3, [r4, #0]
 8006d92:	bd38      	pop	{r3, r4, r5, pc}
 8006d94:	2001cbd0 	.word	0x2001cbd0

08006d98 <_fstat_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	; (8006db8 <_fstat_r+0x20>)
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	f7fa fd69 	bl	800187c <_fstat>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d102      	bne.n	8006db4 <_fstat_r+0x1c>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	b103      	cbz	r3, 8006db4 <_fstat_r+0x1c>
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	bf00      	nop
 8006db8:	2001cbd0 	.word	0x2001cbd0

08006dbc <_lseek_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d07      	ldr	r5, [pc, #28]	; (8006ddc <_lseek_r+0x20>)
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	602a      	str	r2, [r5, #0]
 8006dca:	461a      	mov	r2, r3
 8006dcc:	f7fa fd5c 	bl	8001888 <_lseek>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_lseek_r+0x1e>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_lseek_r+0x1e>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	2001cbd0 	.word	0x2001cbd0

08006de0 <__malloc_lock>:
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <__malloc_lock+0x8>)
 8006de2:	f7ff be8b 	b.w	8006afc <__retarget_lock_acquire_recursive>
 8006de6:	bf00      	nop
 8006de8:	2001cbc8 	.word	0x2001cbc8

08006dec <__malloc_unlock>:
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <__malloc_unlock+0x8>)
 8006dee:	f7ff be86 	b.w	8006afe <__retarget_lock_release_recursive>
 8006df2:	bf00      	nop
 8006df4:	2001cbc8 	.word	0x2001cbc8

08006df8 <_read_r>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	4d07      	ldr	r5, [pc, #28]	; (8006e18 <_read_r+0x20>)
 8006dfc:	4604      	mov	r4, r0
 8006dfe:	4608      	mov	r0, r1
 8006e00:	4611      	mov	r1, r2
 8006e02:	2200      	movs	r2, #0
 8006e04:	602a      	str	r2, [r5, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f7fa fd26 	bl	8001858 <_read>
 8006e0c:	1c43      	adds	r3, r0, #1
 8006e0e:	d102      	bne.n	8006e16 <_read_r+0x1e>
 8006e10:	682b      	ldr	r3, [r5, #0]
 8006e12:	b103      	cbz	r3, 8006e16 <_read_r+0x1e>
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	bd38      	pop	{r3, r4, r5, pc}
 8006e18:	2001cbd0 	.word	0x2001cbd0

08006e1c <cosf>:
 8006e1c:	ee10 3a10 	vmov	r3, s0
 8006e20:	b507      	push	{r0, r1, r2, lr}
 8006e22:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <cosf+0x78>)
 8006e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	dc04      	bgt.n	8006e36 <cosf+0x1a>
 8006e2c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8006e98 <cosf+0x7c>
 8006e30:	f000 fac2 	bl	80073b8 <__kernel_cosf>
 8006e34:	e004      	b.n	8006e40 <cosf+0x24>
 8006e36:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006e3a:	db04      	blt.n	8006e46 <cosf+0x2a>
 8006e3c:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006e40:	b003      	add	sp, #12
 8006e42:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e46:	4668      	mov	r0, sp
 8006e48:	f000 f97a 	bl	8007140 <__ieee754_rem_pio2f>
 8006e4c:	f000 0003 	and.w	r0, r0, #3
 8006e50:	2801      	cmp	r0, #1
 8006e52:	d007      	beq.n	8006e64 <cosf+0x48>
 8006e54:	2802      	cmp	r0, #2
 8006e56:	d00e      	beq.n	8006e76 <cosf+0x5a>
 8006e58:	b9a0      	cbnz	r0, 8006e84 <cosf+0x68>
 8006e5a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e5e:	ed9d 0a00 	vldr	s0, [sp]
 8006e62:	e7e5      	b.n	8006e30 <cosf+0x14>
 8006e64:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e68:	ed9d 0a00 	vldr	s0, [sp]
 8006e6c:	f000 fd8e 	bl	800798c <__kernel_sinf>
 8006e70:	eeb1 0a40 	vneg.f32	s0, s0
 8006e74:	e7e4      	b.n	8006e40 <cosf+0x24>
 8006e76:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e7a:	ed9d 0a00 	vldr	s0, [sp]
 8006e7e:	f000 fa9b 	bl	80073b8 <__kernel_cosf>
 8006e82:	e7f5      	b.n	8006e70 <cosf+0x54>
 8006e84:	eddd 0a01 	vldr	s1, [sp, #4]
 8006e88:	ed9d 0a00 	vldr	s0, [sp]
 8006e8c:	2001      	movs	r0, #1
 8006e8e:	f000 fd7d 	bl	800798c <__kernel_sinf>
 8006e92:	e7d5      	b.n	8006e40 <cosf+0x24>
 8006e94:	3f490fd8 	.word	0x3f490fd8
 8006e98:	00000000 	.word	0x00000000

08006e9c <sinf>:
 8006e9c:	ee10 3a10 	vmov	r3, s0
 8006ea0:	b507      	push	{r0, r1, r2, lr}
 8006ea2:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <sinf+0x7c>)
 8006ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	dc05      	bgt.n	8006eb8 <sinf+0x1c>
 8006eac:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8006f1c <sinf+0x80>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f000 fd6b 	bl	800798c <__kernel_sinf>
 8006eb6:	e004      	b.n	8006ec2 <sinf+0x26>
 8006eb8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006ebc:	db04      	blt.n	8006ec8 <sinf+0x2c>
 8006ebe:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006ec2:	b003      	add	sp, #12
 8006ec4:	f85d fb04 	ldr.w	pc, [sp], #4
 8006ec8:	4668      	mov	r0, sp
 8006eca:	f000 f939 	bl	8007140 <__ieee754_rem_pio2f>
 8006ece:	f000 0003 	and.w	r0, r0, #3
 8006ed2:	2801      	cmp	r0, #1
 8006ed4:	d008      	beq.n	8006ee8 <sinf+0x4c>
 8006ed6:	2802      	cmp	r0, #2
 8006ed8:	d00d      	beq.n	8006ef6 <sinf+0x5a>
 8006eda:	b9b0      	cbnz	r0, 8006f0a <sinf+0x6e>
 8006edc:	eddd 0a01 	vldr	s1, [sp, #4]
 8006ee0:	ed9d 0a00 	vldr	s0, [sp]
 8006ee4:	2001      	movs	r0, #1
 8006ee6:	e7e4      	b.n	8006eb2 <sinf+0x16>
 8006ee8:	eddd 0a01 	vldr	s1, [sp, #4]
 8006eec:	ed9d 0a00 	vldr	s0, [sp]
 8006ef0:	f000 fa62 	bl	80073b8 <__kernel_cosf>
 8006ef4:	e7e5      	b.n	8006ec2 <sinf+0x26>
 8006ef6:	eddd 0a01 	vldr	s1, [sp, #4]
 8006efa:	ed9d 0a00 	vldr	s0, [sp]
 8006efe:	2001      	movs	r0, #1
 8006f00:	f000 fd44 	bl	800798c <__kernel_sinf>
 8006f04:	eeb1 0a40 	vneg.f32	s0, s0
 8006f08:	e7db      	b.n	8006ec2 <sinf+0x26>
 8006f0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f0e:	ed9d 0a00 	vldr	s0, [sp]
 8006f12:	f000 fa51 	bl	80073b8 <__kernel_cosf>
 8006f16:	e7f5      	b.n	8006f04 <sinf+0x68>
 8006f18:	3f490fd8 	.word	0x3f490fd8
 8006f1c:	00000000 	.word	0x00000000

08006f20 <tanf>:
 8006f20:	ee10 3a10 	vmov	r3, s0
 8006f24:	b507      	push	{r0, r1, r2, lr}
 8006f26:	4a10      	ldr	r2, [pc, #64]	; (8006f68 <tanf+0x48>)
 8006f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	dc05      	bgt.n	8006f3c <tanf+0x1c>
 8006f30:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8006f6c <tanf+0x4c>
 8006f34:	2001      	movs	r0, #1
 8006f36:	f000 fd71 	bl	8007a1c <__kernel_tanf>
 8006f3a:	e004      	b.n	8006f46 <tanf+0x26>
 8006f3c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006f40:	db04      	blt.n	8006f4c <tanf+0x2c>
 8006f42:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006f46:	b003      	add	sp, #12
 8006f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8006f4c:	4668      	mov	r0, sp
 8006f4e:	f000 f8f7 	bl	8007140 <__ieee754_rem_pio2f>
 8006f52:	0040      	lsls	r0, r0, #1
 8006f54:	f000 0002 	and.w	r0, r0, #2
 8006f58:	eddd 0a01 	vldr	s1, [sp, #4]
 8006f5c:	ed9d 0a00 	vldr	s0, [sp]
 8006f60:	f1c0 0001 	rsb	r0, r0, #1
 8006f64:	e7e7      	b.n	8006f36 <tanf+0x16>
 8006f66:	bf00      	nop
 8006f68:	3f490fda 	.word	0x3f490fda
 8006f6c:	00000000 	.word	0x00000000

08006f70 <sqrt>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	ed2d 8b02 	vpush	{d8}
 8006f76:	ec55 4b10 	vmov	r4, r5, d0
 8006f7a:	f000 f82d 	bl	8006fd8 <__ieee754_sqrt>
 8006f7e:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <sqrt+0x64>)
 8006f80:	eeb0 8a40 	vmov.f32	s16, s0
 8006f84:	eef0 8a60 	vmov.f32	s17, s1
 8006f88:	f993 3000 	ldrsb.w	r3, [r3]
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	d019      	beq.n	8006fc4 <sqrt+0x54>
 8006f90:	4622      	mov	r2, r4
 8006f92:	462b      	mov	r3, r5
 8006f94:	4620      	mov	r0, r4
 8006f96:	4629      	mov	r1, r5
 8006f98:	f7f9 fd94 	bl	8000ac4 <__aeabi_dcmpun>
 8006f9c:	b990      	cbnz	r0, 8006fc4 <sqrt+0x54>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	4620      	mov	r0, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	f7f9 fd65 	bl	8000a74 <__aeabi_dcmplt>
 8006faa:	b158      	cbz	r0, 8006fc4 <sqrt+0x54>
 8006fac:	f7ff faf6 	bl	800659c <__errno>
 8006fb0:	2321      	movs	r3, #33	; 0x21
 8006fb2:	6003      	str	r3, [r0, #0]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	f7f9 fc12 	bl	80007e4 <__aeabi_ddiv>
 8006fc0:	ec41 0b18 	vmov	d8, r0, r1
 8006fc4:	eeb0 0a48 	vmov.f32	s0, s16
 8006fc8:	eef0 0a68 	vmov.f32	s1, s17
 8006fcc:	ecbd 8b02 	vpop	{d8}
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	bf00      	nop
 8006fd4:	200000e4 	.word	0x200000e4

08006fd8 <__ieee754_sqrt>:
 8006fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fdc:	ec55 4b10 	vmov	r4, r5, d0
 8006fe0:	4e56      	ldr	r6, [pc, #344]	; (800713c <__ieee754_sqrt+0x164>)
 8006fe2:	43ae      	bics	r6, r5
 8006fe4:	ee10 0a10 	vmov	r0, s0
 8006fe8:	ee10 3a10 	vmov	r3, s0
 8006fec:	4629      	mov	r1, r5
 8006fee:	462a      	mov	r2, r5
 8006ff0:	d110      	bne.n	8007014 <__ieee754_sqrt+0x3c>
 8006ff2:	ee10 2a10 	vmov	r2, s0
 8006ff6:	462b      	mov	r3, r5
 8006ff8:	f7f9 faca 	bl	8000590 <__aeabi_dmul>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	4620      	mov	r0, r4
 8007002:	4629      	mov	r1, r5
 8007004:	f7f9 f90e 	bl	8000224 <__adddf3>
 8007008:	4604      	mov	r4, r0
 800700a:	460d      	mov	r5, r1
 800700c:	ec45 4b10 	vmov	d0, r4, r5
 8007010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007014:	2d00      	cmp	r5, #0
 8007016:	dc10      	bgt.n	800703a <__ieee754_sqrt+0x62>
 8007018:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800701c:	4330      	orrs	r0, r6
 800701e:	d0f5      	beq.n	800700c <__ieee754_sqrt+0x34>
 8007020:	b15d      	cbz	r5, 800703a <__ieee754_sqrt+0x62>
 8007022:	ee10 2a10 	vmov	r2, s0
 8007026:	462b      	mov	r3, r5
 8007028:	ee10 0a10 	vmov	r0, s0
 800702c:	f7f9 f8f8 	bl	8000220 <__aeabi_dsub>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	f7f9 fbd6 	bl	80007e4 <__aeabi_ddiv>
 8007038:	e7e6      	b.n	8007008 <__ieee754_sqrt+0x30>
 800703a:	1509      	asrs	r1, r1, #20
 800703c:	d076      	beq.n	800712c <__ieee754_sqrt+0x154>
 800703e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007042:	07ce      	lsls	r6, r1, #31
 8007044:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007048:	bf5e      	ittt	pl
 800704a:	0fda      	lsrpl	r2, r3, #31
 800704c:	005b      	lslpl	r3, r3, #1
 800704e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007052:	0fda      	lsrs	r2, r3, #31
 8007054:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007058:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800705c:	2000      	movs	r0, #0
 800705e:	106d      	asrs	r5, r5, #1
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	f04f 0e16 	mov.w	lr, #22
 8007066:	4684      	mov	ip, r0
 8007068:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800706c:	eb0c 0401 	add.w	r4, ip, r1
 8007070:	4294      	cmp	r4, r2
 8007072:	bfde      	ittt	le
 8007074:	1b12      	suble	r2, r2, r4
 8007076:	eb04 0c01 	addle.w	ip, r4, r1
 800707a:	1840      	addle	r0, r0, r1
 800707c:	0052      	lsls	r2, r2, #1
 800707e:	f1be 0e01 	subs.w	lr, lr, #1
 8007082:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007086:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800708a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800708e:	d1ed      	bne.n	800706c <__ieee754_sqrt+0x94>
 8007090:	4671      	mov	r1, lr
 8007092:	2720      	movs	r7, #32
 8007094:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007098:	4562      	cmp	r2, ip
 800709a:	eb04 060e 	add.w	r6, r4, lr
 800709e:	dc02      	bgt.n	80070a6 <__ieee754_sqrt+0xce>
 80070a0:	d113      	bne.n	80070ca <__ieee754_sqrt+0xf2>
 80070a2:	429e      	cmp	r6, r3
 80070a4:	d811      	bhi.n	80070ca <__ieee754_sqrt+0xf2>
 80070a6:	2e00      	cmp	r6, #0
 80070a8:	eb06 0e04 	add.w	lr, r6, r4
 80070ac:	da43      	bge.n	8007136 <__ieee754_sqrt+0x15e>
 80070ae:	f1be 0f00 	cmp.w	lr, #0
 80070b2:	db40      	blt.n	8007136 <__ieee754_sqrt+0x15e>
 80070b4:	f10c 0801 	add.w	r8, ip, #1
 80070b8:	eba2 020c 	sub.w	r2, r2, ip
 80070bc:	429e      	cmp	r6, r3
 80070be:	bf88      	it	hi
 80070c0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80070c4:	1b9b      	subs	r3, r3, r6
 80070c6:	4421      	add	r1, r4
 80070c8:	46c4      	mov	ip, r8
 80070ca:	0052      	lsls	r2, r2, #1
 80070cc:	3f01      	subs	r7, #1
 80070ce:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80070d2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80070d6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070da:	d1dd      	bne.n	8007098 <__ieee754_sqrt+0xc0>
 80070dc:	4313      	orrs	r3, r2
 80070de:	d006      	beq.n	80070ee <__ieee754_sqrt+0x116>
 80070e0:	1c4c      	adds	r4, r1, #1
 80070e2:	bf13      	iteet	ne
 80070e4:	3101      	addne	r1, #1
 80070e6:	3001      	addeq	r0, #1
 80070e8:	4639      	moveq	r1, r7
 80070ea:	f021 0101 	bicne.w	r1, r1, #1
 80070ee:	1043      	asrs	r3, r0, #1
 80070f0:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80070f4:	0849      	lsrs	r1, r1, #1
 80070f6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80070fa:	07c2      	lsls	r2, r0, #31
 80070fc:	bf48      	it	mi
 80070fe:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007102:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007106:	460c      	mov	r4, r1
 8007108:	463d      	mov	r5, r7
 800710a:	e77f      	b.n	800700c <__ieee754_sqrt+0x34>
 800710c:	0ada      	lsrs	r2, r3, #11
 800710e:	3815      	subs	r0, #21
 8007110:	055b      	lsls	r3, r3, #21
 8007112:	2a00      	cmp	r2, #0
 8007114:	d0fa      	beq.n	800710c <__ieee754_sqrt+0x134>
 8007116:	02d7      	lsls	r7, r2, #11
 8007118:	d50a      	bpl.n	8007130 <__ieee754_sqrt+0x158>
 800711a:	f1c1 0420 	rsb	r4, r1, #32
 800711e:	fa23 f404 	lsr.w	r4, r3, r4
 8007122:	1e4d      	subs	r5, r1, #1
 8007124:	408b      	lsls	r3, r1
 8007126:	4322      	orrs	r2, r4
 8007128:	1b41      	subs	r1, r0, r5
 800712a:	e788      	b.n	800703e <__ieee754_sqrt+0x66>
 800712c:	4608      	mov	r0, r1
 800712e:	e7f0      	b.n	8007112 <__ieee754_sqrt+0x13a>
 8007130:	0052      	lsls	r2, r2, #1
 8007132:	3101      	adds	r1, #1
 8007134:	e7ef      	b.n	8007116 <__ieee754_sqrt+0x13e>
 8007136:	46e0      	mov	r8, ip
 8007138:	e7be      	b.n	80070b8 <__ieee754_sqrt+0xe0>
 800713a:	bf00      	nop
 800713c:	7ff00000 	.word	0x7ff00000

08007140 <__ieee754_rem_pio2f>:
 8007140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007142:	ee10 6a10 	vmov	r6, s0
 8007146:	4b8e      	ldr	r3, [pc, #568]	; (8007380 <__ieee754_rem_pio2f+0x240>)
 8007148:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800714c:	429d      	cmp	r5, r3
 800714e:	b087      	sub	sp, #28
 8007150:	eef0 7a40 	vmov.f32	s15, s0
 8007154:	4604      	mov	r4, r0
 8007156:	dc05      	bgt.n	8007164 <__ieee754_rem_pio2f+0x24>
 8007158:	2300      	movs	r3, #0
 800715a:	ed80 0a00 	vstr	s0, [r0]
 800715e:	6043      	str	r3, [r0, #4]
 8007160:	2000      	movs	r0, #0
 8007162:	e01a      	b.n	800719a <__ieee754_rem_pio2f+0x5a>
 8007164:	4b87      	ldr	r3, [pc, #540]	; (8007384 <__ieee754_rem_pio2f+0x244>)
 8007166:	429d      	cmp	r5, r3
 8007168:	dc46      	bgt.n	80071f8 <__ieee754_rem_pio2f+0xb8>
 800716a:	2e00      	cmp	r6, #0
 800716c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8007388 <__ieee754_rem_pio2f+0x248>
 8007170:	4b86      	ldr	r3, [pc, #536]	; (800738c <__ieee754_rem_pio2f+0x24c>)
 8007172:	f025 050f 	bic.w	r5, r5, #15
 8007176:	dd1f      	ble.n	80071b8 <__ieee754_rem_pio2f+0x78>
 8007178:	429d      	cmp	r5, r3
 800717a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800717e:	d00e      	beq.n	800719e <__ieee754_rem_pio2f+0x5e>
 8007180:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8007390 <__ieee754_rem_pio2f+0x250>
 8007184:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8007188:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800718c:	ed80 0a00 	vstr	s0, [r0]
 8007190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007194:	2001      	movs	r0, #1
 8007196:	edc4 7a01 	vstr	s15, [r4, #4]
 800719a:	b007      	add	sp, #28
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800719e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8007394 <__ieee754_rem_pio2f+0x254>
 80071a2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8007398 <__ieee754_rem_pio2f+0x258>
 80071a6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071aa:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80071ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071b2:	edc0 6a00 	vstr	s13, [r0]
 80071b6:	e7eb      	b.n	8007190 <__ieee754_rem_pio2f+0x50>
 80071b8:	429d      	cmp	r5, r3
 80071ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80071be:	d00e      	beq.n	80071de <__ieee754_rem_pio2f+0x9e>
 80071c0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8007390 <__ieee754_rem_pio2f+0x250>
 80071c4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80071c8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80071cc:	ed80 0a00 	vstr	s0, [r0]
 80071d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80071d4:	f04f 30ff 	mov.w	r0, #4294967295
 80071d8:	edc4 7a01 	vstr	s15, [r4, #4]
 80071dc:	e7dd      	b.n	800719a <__ieee754_rem_pio2f+0x5a>
 80071de:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8007394 <__ieee754_rem_pio2f+0x254>
 80071e2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8007398 <__ieee754_rem_pio2f+0x258>
 80071e6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80071ea:	ee77 6a87 	vadd.f32	s13, s15, s14
 80071ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80071f2:	edc0 6a00 	vstr	s13, [r0]
 80071f6:	e7eb      	b.n	80071d0 <__ieee754_rem_pio2f+0x90>
 80071f8:	4b68      	ldr	r3, [pc, #416]	; (800739c <__ieee754_rem_pio2f+0x25c>)
 80071fa:	429d      	cmp	r5, r3
 80071fc:	dc72      	bgt.n	80072e4 <__ieee754_rem_pio2f+0x1a4>
 80071fe:	f000 fcef 	bl	8007be0 <fabsf>
 8007202:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80073a0 <__ieee754_rem_pio2f+0x260>
 8007206:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800720a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800720e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007216:	ee17 0a90 	vmov	r0, s15
 800721a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8007388 <__ieee754_rem_pio2f+0x248>
 800721e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8007222:	281f      	cmp	r0, #31
 8007224:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8007390 <__ieee754_rem_pio2f+0x250>
 8007228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800722c:	eeb1 6a47 	vneg.f32	s12, s14
 8007230:	ee70 6a67 	vsub.f32	s13, s0, s15
 8007234:	ee16 2a90 	vmov	r2, s13
 8007238:	dc1c      	bgt.n	8007274 <__ieee754_rem_pio2f+0x134>
 800723a:	495a      	ldr	r1, [pc, #360]	; (80073a4 <__ieee754_rem_pio2f+0x264>)
 800723c:	1e47      	subs	r7, r0, #1
 800723e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8007242:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8007246:	428b      	cmp	r3, r1
 8007248:	d014      	beq.n	8007274 <__ieee754_rem_pio2f+0x134>
 800724a:	6022      	str	r2, [r4, #0]
 800724c:	ed94 7a00 	vldr	s14, [r4]
 8007250:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007254:	2e00      	cmp	r6, #0
 8007256:	ee30 0a67 	vsub.f32	s0, s0, s15
 800725a:	ed84 0a01 	vstr	s0, [r4, #4]
 800725e:	da9c      	bge.n	800719a <__ieee754_rem_pio2f+0x5a>
 8007260:	eeb1 7a47 	vneg.f32	s14, s14
 8007264:	eeb1 0a40 	vneg.f32	s0, s0
 8007268:	ed84 7a00 	vstr	s14, [r4]
 800726c:	ed84 0a01 	vstr	s0, [r4, #4]
 8007270:	4240      	negs	r0, r0
 8007272:	e792      	b.n	800719a <__ieee754_rem_pio2f+0x5a>
 8007274:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8007278:	15eb      	asrs	r3, r5, #23
 800727a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800727e:	2d08      	cmp	r5, #8
 8007280:	dde3      	ble.n	800724a <__ieee754_rem_pio2f+0x10a>
 8007282:	eddf 7a44 	vldr	s15, [pc, #272]	; 8007394 <__ieee754_rem_pio2f+0x254>
 8007286:	eef0 6a40 	vmov.f32	s13, s0
 800728a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800728e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007292:	eea6 0a27 	vfma.f32	s0, s12, s15
 8007296:	eddf 7a40 	vldr	s15, [pc, #256]	; 8007398 <__ieee754_rem_pio2f+0x258>
 800729a:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800729e:	ee76 5ac0 	vsub.f32	s11, s13, s0
 80072a2:	eef0 7a40 	vmov.f32	s15, s0
 80072a6:	ee15 2a90 	vmov	r2, s11
 80072aa:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80072ae:	1a5b      	subs	r3, r3, r1
 80072b0:	2b19      	cmp	r3, #25
 80072b2:	dc04      	bgt.n	80072be <__ieee754_rem_pio2f+0x17e>
 80072b4:	edc4 5a00 	vstr	s11, [r4]
 80072b8:	eeb0 0a66 	vmov.f32	s0, s13
 80072bc:	e7c6      	b.n	800724c <__ieee754_rem_pio2f+0x10c>
 80072be:	eddf 5a3a 	vldr	s11, [pc, #232]	; 80073a8 <__ieee754_rem_pio2f+0x268>
 80072c2:	eeb0 0a66 	vmov.f32	s0, s13
 80072c6:	eea6 0a25 	vfma.f32	s0, s12, s11
 80072ca:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80072ce:	eddf 6a37 	vldr	s13, [pc, #220]	; 80073ac <__ieee754_rem_pio2f+0x26c>
 80072d2:	eee6 7a25 	vfma.f32	s15, s12, s11
 80072d6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80072da:	ee30 7a67 	vsub.f32	s14, s0, s15
 80072de:	ed84 7a00 	vstr	s14, [r4]
 80072e2:	e7b3      	b.n	800724c <__ieee754_rem_pio2f+0x10c>
 80072e4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80072e8:	db06      	blt.n	80072f8 <__ieee754_rem_pio2f+0x1b8>
 80072ea:	ee70 7a40 	vsub.f32	s15, s0, s0
 80072ee:	edc0 7a01 	vstr	s15, [r0, #4]
 80072f2:	edc0 7a00 	vstr	s15, [r0]
 80072f6:	e733      	b.n	8007160 <__ieee754_rem_pio2f+0x20>
 80072f8:	15ea      	asrs	r2, r5, #23
 80072fa:	3a86      	subs	r2, #134	; 0x86
 80072fc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8007300:	ee07 3a90 	vmov	s15, r3
 8007304:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007308:	eddf 6a29 	vldr	s13, [pc, #164]	; 80073b0 <__ieee754_rem_pio2f+0x270>
 800730c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007310:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007314:	ed8d 7a03 	vstr	s14, [sp, #12]
 8007318:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800731c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007320:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8007324:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007328:	ed8d 7a04 	vstr	s14, [sp, #16]
 800732c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007330:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007338:	edcd 7a05 	vstr	s15, [sp, #20]
 800733c:	d11e      	bne.n	800737c <__ieee754_rem_pio2f+0x23c>
 800733e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8007342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007346:	bf14      	ite	ne
 8007348:	2302      	movne	r3, #2
 800734a:	2301      	moveq	r3, #1
 800734c:	4919      	ldr	r1, [pc, #100]	; (80073b4 <__ieee754_rem_pio2f+0x274>)
 800734e:	9101      	str	r1, [sp, #4]
 8007350:	2102      	movs	r1, #2
 8007352:	9100      	str	r1, [sp, #0]
 8007354:	a803      	add	r0, sp, #12
 8007356:	4621      	mov	r1, r4
 8007358:	f000 f88e 	bl	8007478 <__kernel_rem_pio2f>
 800735c:	2e00      	cmp	r6, #0
 800735e:	f6bf af1c 	bge.w	800719a <__ieee754_rem_pio2f+0x5a>
 8007362:	edd4 7a00 	vldr	s15, [r4]
 8007366:	eef1 7a67 	vneg.f32	s15, s15
 800736a:	edc4 7a00 	vstr	s15, [r4]
 800736e:	edd4 7a01 	vldr	s15, [r4, #4]
 8007372:	eef1 7a67 	vneg.f32	s15, s15
 8007376:	edc4 7a01 	vstr	s15, [r4, #4]
 800737a:	e779      	b.n	8007270 <__ieee754_rem_pio2f+0x130>
 800737c:	2303      	movs	r3, #3
 800737e:	e7e5      	b.n	800734c <__ieee754_rem_pio2f+0x20c>
 8007380:	3f490fd8 	.word	0x3f490fd8
 8007384:	4016cbe3 	.word	0x4016cbe3
 8007388:	3fc90f80 	.word	0x3fc90f80
 800738c:	3fc90fd0 	.word	0x3fc90fd0
 8007390:	37354443 	.word	0x37354443
 8007394:	37354400 	.word	0x37354400
 8007398:	2e85a308 	.word	0x2e85a308
 800739c:	43490f80 	.word	0x43490f80
 80073a0:	3f22f984 	.word	0x3f22f984
 80073a4:	08017a48 	.word	0x08017a48
 80073a8:	2e85a300 	.word	0x2e85a300
 80073ac:	248d3132 	.word	0x248d3132
 80073b0:	43800000 	.word	0x43800000
 80073b4:	08017ac8 	.word	0x08017ac8

080073b8 <__kernel_cosf>:
 80073b8:	ee10 3a10 	vmov	r3, s0
 80073bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80073c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80073c4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80073c8:	da05      	bge.n	80073d6 <__kernel_cosf+0x1e>
 80073ca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80073ce:	ee17 2a90 	vmov	r2, s15
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	d03d      	beq.n	8007452 <__kernel_cosf+0x9a>
 80073d6:	ee60 5a00 	vmul.f32	s11, s0, s0
 80073da:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007458 <__kernel_cosf+0xa0>
 80073de:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800745c <__kernel_cosf+0xa4>
 80073e2:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8007460 <__kernel_cosf+0xa8>
 80073e6:	4a1f      	ldr	r2, [pc, #124]	; (8007464 <__kernel_cosf+0xac>)
 80073e8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80073ec:	4293      	cmp	r3, r2
 80073ee:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8007468 <__kernel_cosf+0xb0>
 80073f2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80073f6:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800746c <__kernel_cosf+0xb4>
 80073fa:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80073fe:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8007470 <__kernel_cosf+0xb8>
 8007402:	eee7 7a25 	vfma.f32	s15, s14, s11
 8007406:	eeb0 7a66 	vmov.f32	s14, s13
 800740a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800740e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8007412:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8007416:	ee67 6a25 	vmul.f32	s13, s14, s11
 800741a:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800741e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007422:	dc04      	bgt.n	800742e <__kernel_cosf+0x76>
 8007424:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8007428:	ee36 0a47 	vsub.f32	s0, s12, s14
 800742c:	4770      	bx	lr
 800742e:	4a11      	ldr	r2, [pc, #68]	; (8007474 <__kernel_cosf+0xbc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	bfda      	itte	le
 8007434:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8007438:	ee06 3a90 	vmovle	s13, r3
 800743c:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8007440:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007444:	ee36 0a66 	vsub.f32	s0, s12, s13
 8007448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800744c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007450:	4770      	bx	lr
 8007452:	eeb0 0a46 	vmov.f32	s0, s12
 8007456:	4770      	bx	lr
 8007458:	ad47d74e 	.word	0xad47d74e
 800745c:	310f74f6 	.word	0x310f74f6
 8007460:	3d2aaaab 	.word	0x3d2aaaab
 8007464:	3e999999 	.word	0x3e999999
 8007468:	b493f27c 	.word	0xb493f27c
 800746c:	37d00d01 	.word	0x37d00d01
 8007470:	bab60b61 	.word	0xbab60b61
 8007474:	3f480000 	.word	0x3f480000

08007478 <__kernel_rem_pio2f>:
 8007478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800747c:	ed2d 8b04 	vpush	{d8-d9}
 8007480:	b0d7      	sub	sp, #348	; 0x15c
 8007482:	4616      	mov	r6, r2
 8007484:	4698      	mov	r8, r3
 8007486:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8007488:	4bbb      	ldr	r3, [pc, #748]	; (8007778 <__kernel_rem_pio2f+0x300>)
 800748a:	9001      	str	r0, [sp, #4]
 800748c:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 8007490:	1d33      	adds	r3, r6, #4
 8007492:	460d      	mov	r5, r1
 8007494:	f108 39ff 	add.w	r9, r8, #4294967295
 8007498:	db29      	blt.n	80074ee <__kernel_rem_pio2f+0x76>
 800749a:	1ef1      	subs	r1, r6, #3
 800749c:	bf48      	it	mi
 800749e:	1d31      	addmi	r1, r6, #4
 80074a0:	10c9      	asrs	r1, r1, #3
 80074a2:	1c4c      	adds	r4, r1, #1
 80074a4:	00e3      	lsls	r3, r4, #3
 80074a6:	9302      	str	r3, [sp, #8]
 80074a8:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80074aa:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8007788 <__kernel_rem_pio2f+0x310>
 80074ae:	eba1 0009 	sub.w	r0, r1, r9
 80074b2:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 80074b6:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80074ba:	eb07 0c09 	add.w	ip, r7, r9
 80074be:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 80074c2:	2300      	movs	r3, #0
 80074c4:	4563      	cmp	r3, ip
 80074c6:	dd14      	ble.n	80074f2 <__kernel_rem_pio2f+0x7a>
 80074c8:	ab1a      	add	r3, sp, #104	; 0x68
 80074ca:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 80074ce:	46cc      	mov	ip, r9
 80074d0:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 80074d4:	f1c8 0b01 	rsb	fp, r8, #1
 80074d8:	eb0b 020c 	add.w	r2, fp, ip
 80074dc:	4297      	cmp	r7, r2
 80074de:	db27      	blt.n	8007530 <__kernel_rem_pio2f+0xb8>
 80074e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80074e4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8007788 <__kernel_rem_pio2f+0x310>
 80074e8:	4618      	mov	r0, r3
 80074ea:	2200      	movs	r2, #0
 80074ec:	e016      	b.n	800751c <__kernel_rem_pio2f+0xa4>
 80074ee:	2100      	movs	r1, #0
 80074f0:	e7d7      	b.n	80074a2 <__kernel_rem_pio2f+0x2a>
 80074f2:	42d8      	cmn	r0, r3
 80074f4:	bf5d      	ittte	pl
 80074f6:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 80074fa:	ee07 2a90 	vmovpl	s15, r2
 80074fe:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8007502:	eef0 7a47 	vmovmi.f32	s15, s14
 8007506:	ecea 7a01 	vstmia	sl!, {s15}
 800750a:	3301      	adds	r3, #1
 800750c:	e7da      	b.n	80074c4 <__kernel_rem_pio2f+0x4c>
 800750e:	ecfe 6a01 	vldmia	lr!, {s13}
 8007512:	ed90 7a00 	vldr	s14, [r0]
 8007516:	eee6 7a87 	vfma.f32	s15, s13, s14
 800751a:	3201      	adds	r2, #1
 800751c:	454a      	cmp	r2, r9
 800751e:	f1a0 0004 	sub.w	r0, r0, #4
 8007522:	ddf4      	ble.n	800750e <__kernel_rem_pio2f+0x96>
 8007524:	ecea 7a01 	vstmia	sl!, {s15}
 8007528:	3304      	adds	r3, #4
 800752a:	f10c 0c01 	add.w	ip, ip, #1
 800752e:	e7d3      	b.n	80074d8 <__kernel_rem_pio2f+0x60>
 8007530:	ab06      	add	r3, sp, #24
 8007532:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 8007536:	9304      	str	r3, [sp, #16]
 8007538:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800753a:	eddf 8a92 	vldr	s17, [pc, #584]	; 8007784 <__kernel_rem_pio2f+0x30c>
 800753e:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8007780 <__kernel_rem_pio2f+0x308>
 8007542:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007546:	9303      	str	r3, [sp, #12]
 8007548:	46ba      	mov	sl, r7
 800754a:	ab56      	add	r3, sp, #344	; 0x158
 800754c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8007550:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8007554:	ab06      	add	r3, sp, #24
 8007556:	4618      	mov	r0, r3
 8007558:	4652      	mov	r2, sl
 800755a:	2a00      	cmp	r2, #0
 800755c:	dc51      	bgt.n	8007602 <__kernel_rem_pio2f+0x18a>
 800755e:	4620      	mov	r0, r4
 8007560:	9305      	str	r3, [sp, #20]
 8007562:	f000 fb87 	bl	8007c74 <scalbnf>
 8007566:	eeb0 8a40 	vmov.f32	s16, s0
 800756a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800756e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8007572:	f000 fb3d 	bl	8007bf0 <floorf>
 8007576:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800757a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800757e:	2c00      	cmp	r4, #0
 8007580:	9b05      	ldr	r3, [sp, #20]
 8007582:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8007586:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800758a:	edcd 7a00 	vstr	s15, [sp]
 800758e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007592:	dd4b      	ble.n	800762c <__kernel_rem_pio2f+0x1b4>
 8007594:	f10a 3cff 	add.w	ip, sl, #4294967295
 8007598:	aa06      	add	r2, sp, #24
 800759a:	f1c4 0e08 	rsb	lr, r4, #8
 800759e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80075a2:	ee17 1a90 	vmov	r1, s15
 80075a6:	fa42 f00e 	asr.w	r0, r2, lr
 80075aa:	4401      	add	r1, r0
 80075ac:	9100      	str	r1, [sp, #0]
 80075ae:	fa00 f00e 	lsl.w	r0, r0, lr
 80075b2:	a906      	add	r1, sp, #24
 80075b4:	1a12      	subs	r2, r2, r0
 80075b6:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80075ba:	f1c4 0007 	rsb	r0, r4, #7
 80075be:	fa42 fb00 	asr.w	fp, r2, r0
 80075c2:	f1bb 0f00 	cmp.w	fp, #0
 80075c6:	dd43      	ble.n	8007650 <__kernel_rem_pio2f+0x1d8>
 80075c8:	9a00      	ldr	r2, [sp, #0]
 80075ca:	f04f 0e00 	mov.w	lr, #0
 80075ce:	3201      	adds	r2, #1
 80075d0:	9200      	str	r2, [sp, #0]
 80075d2:	4670      	mov	r0, lr
 80075d4:	45f2      	cmp	sl, lr
 80075d6:	dc6c      	bgt.n	80076b2 <__kernel_rem_pio2f+0x23a>
 80075d8:	2c00      	cmp	r4, #0
 80075da:	dd04      	ble.n	80075e6 <__kernel_rem_pio2f+0x16e>
 80075dc:	2c01      	cmp	r4, #1
 80075de:	d079      	beq.n	80076d4 <__kernel_rem_pio2f+0x25c>
 80075e0:	2c02      	cmp	r4, #2
 80075e2:	f000 8082 	beq.w	80076ea <__kernel_rem_pio2f+0x272>
 80075e6:	f1bb 0f02 	cmp.w	fp, #2
 80075ea:	d131      	bne.n	8007650 <__kernel_rem_pio2f+0x1d8>
 80075ec:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80075f0:	ee30 8a48 	vsub.f32	s16, s0, s16
 80075f4:	b360      	cbz	r0, 8007650 <__kernel_rem_pio2f+0x1d8>
 80075f6:	4620      	mov	r0, r4
 80075f8:	f000 fb3c 	bl	8007c74 <scalbnf>
 80075fc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8007600:	e026      	b.n	8007650 <__kernel_rem_pio2f+0x1d8>
 8007602:	ee60 7a28 	vmul.f32	s15, s0, s17
 8007606:	3a01      	subs	r2, #1
 8007608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800760c:	a942      	add	r1, sp, #264	; 0x108
 800760e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007612:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8007616:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800761a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800761e:	eca0 0a01 	vstmia	r0!, {s0}
 8007622:	ed9c 0a00 	vldr	s0, [ip]
 8007626:	ee37 0a80 	vadd.f32	s0, s15, s0
 800762a:	e796      	b.n	800755a <__kernel_rem_pio2f+0xe2>
 800762c:	d107      	bne.n	800763e <__kernel_rem_pio2f+0x1c6>
 800762e:	f10a 32ff 	add.w	r2, sl, #4294967295
 8007632:	a906      	add	r1, sp, #24
 8007634:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007638:	ea4f 2b22 	mov.w	fp, r2, asr #8
 800763c:	e7c1      	b.n	80075c2 <__kernel_rem_pio2f+0x14a>
 800763e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007642:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8007646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800764a:	da2f      	bge.n	80076ac <__kernel_rem_pio2f+0x234>
 800764c:	f04f 0b00 	mov.w	fp, #0
 8007650:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007658:	f040 8098 	bne.w	800778c <__kernel_rem_pio2f+0x314>
 800765c:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007660:	469c      	mov	ip, r3
 8007662:	2200      	movs	r2, #0
 8007664:	45bc      	cmp	ip, r7
 8007666:	da48      	bge.n	80076fa <__kernel_rem_pio2f+0x282>
 8007668:	2a00      	cmp	r2, #0
 800766a:	d05f      	beq.n	800772c <__kernel_rem_pio2f+0x2b4>
 800766c:	aa06      	add	r2, sp, #24
 800766e:	3c08      	subs	r4, #8
 8007670:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8007674:	2900      	cmp	r1, #0
 8007676:	d07d      	beq.n	8007774 <__kernel_rem_pio2f+0x2fc>
 8007678:	4620      	mov	r0, r4
 800767a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800767e:	9301      	str	r3, [sp, #4]
 8007680:	f000 faf8 	bl	8007c74 <scalbnf>
 8007684:	9b01      	ldr	r3, [sp, #4]
 8007686:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8007784 <__kernel_rem_pio2f+0x30c>
 800768a:	4619      	mov	r1, r3
 800768c:	2900      	cmp	r1, #0
 800768e:	f280 80af 	bge.w	80077f0 <__kernel_rem_pio2f+0x378>
 8007692:	4618      	mov	r0, r3
 8007694:	2400      	movs	r4, #0
 8007696:	2800      	cmp	r0, #0
 8007698:	f2c0 80d0 	blt.w	800783c <__kernel_rem_pio2f+0x3c4>
 800769c:	a942      	add	r1, sp, #264	; 0x108
 800769e:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 80076a2:	4a36      	ldr	r2, [pc, #216]	; (800777c <__kernel_rem_pio2f+0x304>)
 80076a4:	eddf 7a38 	vldr	s15, [pc, #224]	; 8007788 <__kernel_rem_pio2f+0x310>
 80076a8:	2100      	movs	r1, #0
 80076aa:	e0bb      	b.n	8007824 <__kernel_rem_pio2f+0x3ac>
 80076ac:	f04f 0b02 	mov.w	fp, #2
 80076b0:	e78a      	b.n	80075c8 <__kernel_rem_pio2f+0x150>
 80076b2:	681a      	ldr	r2, [r3, #0]
 80076b4:	b948      	cbnz	r0, 80076ca <__kernel_rem_pio2f+0x252>
 80076b6:	b11a      	cbz	r2, 80076c0 <__kernel_rem_pio2f+0x248>
 80076b8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80076bc:	601a      	str	r2, [r3, #0]
 80076be:	2201      	movs	r2, #1
 80076c0:	f10e 0e01 	add.w	lr, lr, #1
 80076c4:	3304      	adds	r3, #4
 80076c6:	4610      	mov	r0, r2
 80076c8:	e784      	b.n	80075d4 <__kernel_rem_pio2f+0x15c>
 80076ca:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	4602      	mov	r2, r0
 80076d2:	e7f5      	b.n	80076c0 <__kernel_rem_pio2f+0x248>
 80076d4:	f10a 3cff 	add.w	ip, sl, #4294967295
 80076d8:	ab06      	add	r3, sp, #24
 80076da:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80076de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e2:	aa06      	add	r2, sp, #24
 80076e4:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 80076e8:	e77d      	b.n	80075e6 <__kernel_rem_pio2f+0x16e>
 80076ea:	f10a 3cff 	add.w	ip, sl, #4294967295
 80076ee:	ab06      	add	r3, sp, #24
 80076f0:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80076f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f8:	e7f3      	b.n	80076e2 <__kernel_rem_pio2f+0x26a>
 80076fa:	a906      	add	r1, sp, #24
 80076fc:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8007700:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007704:	4302      	orrs	r2, r0
 8007706:	e7ad      	b.n	8007664 <__kernel_rem_pio2f+0x1ec>
 8007708:	3001      	adds	r0, #1
 800770a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800770e:	2a00      	cmp	r2, #0
 8007710:	d0fa      	beq.n	8007708 <__kernel_rem_pio2f+0x290>
 8007712:	a91a      	add	r1, sp, #104	; 0x68
 8007714:	eb0a 0208 	add.w	r2, sl, r8
 8007718:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800771c:	f10a 0301 	add.w	r3, sl, #1
 8007720:	eb0a 0100 	add.w	r1, sl, r0
 8007724:	4299      	cmp	r1, r3
 8007726:	da04      	bge.n	8007732 <__kernel_rem_pio2f+0x2ba>
 8007728:	468a      	mov	sl, r1
 800772a:	e70e      	b.n	800754a <__kernel_rem_pio2f+0xd2>
 800772c:	9b04      	ldr	r3, [sp, #16]
 800772e:	2001      	movs	r0, #1
 8007730:	e7eb      	b.n	800770a <__kernel_rem_pio2f+0x292>
 8007732:	9803      	ldr	r0, [sp, #12]
 8007734:	f8dd c004 	ldr.w	ip, [sp, #4]
 8007738:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800773c:	9000      	str	r0, [sp, #0]
 800773e:	ee07 0a90 	vmov	s15, r0
 8007742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007746:	2000      	movs	r0, #0
 8007748:	ece2 7a01 	vstmia	r2!, {s15}
 800774c:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007788 <__kernel_rem_pio2f+0x310>
 8007750:	4696      	mov	lr, r2
 8007752:	4548      	cmp	r0, r9
 8007754:	dd06      	ble.n	8007764 <__kernel_rem_pio2f+0x2ec>
 8007756:	a842      	add	r0, sp, #264	; 0x108
 8007758:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800775c:	edc0 7a00 	vstr	s15, [r0]
 8007760:	3301      	adds	r3, #1
 8007762:	e7df      	b.n	8007724 <__kernel_rem_pio2f+0x2ac>
 8007764:	ecfc 6a01 	vldmia	ip!, {s13}
 8007768:	ed3e 7a01 	vldmdb	lr!, {s14}
 800776c:	3001      	adds	r0, #1
 800776e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007772:	e7ee      	b.n	8007752 <__kernel_rem_pio2f+0x2da>
 8007774:	3b01      	subs	r3, #1
 8007776:	e779      	b.n	800766c <__kernel_rem_pio2f+0x1f4>
 8007778:	08017e0c 	.word	0x08017e0c
 800777c:	08017de0 	.word	0x08017de0
 8007780:	43800000 	.word	0x43800000
 8007784:	3b800000 	.word	0x3b800000
 8007788:	00000000 	.word	0x00000000
 800778c:	9b02      	ldr	r3, [sp, #8]
 800778e:	eeb0 0a48 	vmov.f32	s0, s16
 8007792:	1b98      	subs	r0, r3, r6
 8007794:	f000 fa6e 	bl	8007c74 <scalbnf>
 8007798:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8007780 <__kernel_rem_pio2f+0x308>
 800779c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80077a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a4:	db1b      	blt.n	80077de <__kernel_rem_pio2f+0x366>
 80077a6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8007784 <__kernel_rem_pio2f+0x30c>
 80077aa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80077ae:	aa06      	add	r2, sp, #24
 80077b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077b4:	a906      	add	r1, sp, #24
 80077b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80077ba:	3408      	adds	r4, #8
 80077bc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80077c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077c4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80077c8:	ee10 3a10 	vmov	r3, s0
 80077cc:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80077d0:	ee17 2a90 	vmov	r2, s15
 80077d4:	f10a 0301 	add.w	r3, sl, #1
 80077d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80077dc:	e74c      	b.n	8007678 <__kernel_rem_pio2f+0x200>
 80077de:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80077e2:	aa06      	add	r2, sp, #24
 80077e4:	ee10 3a10 	vmov	r3, s0
 80077e8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 80077ec:	4653      	mov	r3, sl
 80077ee:	e743      	b.n	8007678 <__kernel_rem_pio2f+0x200>
 80077f0:	aa42      	add	r2, sp, #264	; 0x108
 80077f2:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80077f6:	aa06      	add	r2, sp, #24
 80077f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80077fc:	9201      	str	r2, [sp, #4]
 80077fe:	ee07 2a90 	vmov	s15, r2
 8007802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007806:	3901      	subs	r1, #1
 8007808:	ee67 7a80 	vmul.f32	s15, s15, s0
 800780c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8007810:	edc0 7a00 	vstr	s15, [r0]
 8007814:	e73a      	b.n	800768c <__kernel_rem_pio2f+0x214>
 8007816:	ecf2 6a01 	vldmia	r2!, {s13}
 800781a:	ecb6 7a01 	vldmia	r6!, {s14}
 800781e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007822:	3101      	adds	r1, #1
 8007824:	42b9      	cmp	r1, r7
 8007826:	dc01      	bgt.n	800782c <__kernel_rem_pio2f+0x3b4>
 8007828:	428c      	cmp	r4, r1
 800782a:	daf4      	bge.n	8007816 <__kernel_rem_pio2f+0x39e>
 800782c:	aa56      	add	r2, sp, #344	; 0x158
 800782e:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007832:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8007836:	3801      	subs	r0, #1
 8007838:	3401      	adds	r4, #1
 800783a:	e72c      	b.n	8007696 <__kernel_rem_pio2f+0x21e>
 800783c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800783e:	2a02      	cmp	r2, #2
 8007840:	dc0a      	bgt.n	8007858 <__kernel_rem_pio2f+0x3e0>
 8007842:	2a00      	cmp	r2, #0
 8007844:	dc61      	bgt.n	800790a <__kernel_rem_pio2f+0x492>
 8007846:	d03c      	beq.n	80078c2 <__kernel_rem_pio2f+0x44a>
 8007848:	9b00      	ldr	r3, [sp, #0]
 800784a:	f003 0007 	and.w	r0, r3, #7
 800784e:	b057      	add	sp, #348	; 0x15c
 8007850:	ecbd 8b04 	vpop	{d8-d9}
 8007854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007858:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800785a:	2a03      	cmp	r2, #3
 800785c:	d1f4      	bne.n	8007848 <__kernel_rem_pio2f+0x3d0>
 800785e:	aa2e      	add	r2, sp, #184	; 0xb8
 8007860:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8007864:	4608      	mov	r0, r1
 8007866:	461c      	mov	r4, r3
 8007868:	2c00      	cmp	r4, #0
 800786a:	f1a0 0004 	sub.w	r0, r0, #4
 800786e:	dc59      	bgt.n	8007924 <__kernel_rem_pio2f+0x4ac>
 8007870:	4618      	mov	r0, r3
 8007872:	2801      	cmp	r0, #1
 8007874:	f1a1 0104 	sub.w	r1, r1, #4
 8007878:	dc64      	bgt.n	8007944 <__kernel_rem_pio2f+0x4cc>
 800787a:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8007788 <__kernel_rem_pio2f+0x310>
 800787e:	2b01      	cmp	r3, #1
 8007880:	dc70      	bgt.n	8007964 <__kernel_rem_pio2f+0x4ec>
 8007882:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8007886:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800788a:	f1bb 0f00 	cmp.w	fp, #0
 800788e:	d172      	bne.n	8007976 <__kernel_rem_pio2f+0x4fe>
 8007890:	edc5 6a00 	vstr	s13, [r5]
 8007894:	ed85 7a01 	vstr	s14, [r5, #4]
 8007898:	edc5 7a02 	vstr	s15, [r5, #8]
 800789c:	e7d4      	b.n	8007848 <__kernel_rem_pio2f+0x3d0>
 800789e:	aa2e      	add	r2, sp, #184	; 0xb8
 80078a0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 80078a4:	ed91 7a00 	vldr	s14, [r1]
 80078a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078ac:	3b01      	subs	r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	daf5      	bge.n	800789e <__kernel_rem_pio2f+0x426>
 80078b2:	f1bb 0f00 	cmp.w	fp, #0
 80078b6:	d001      	beq.n	80078bc <__kernel_rem_pio2f+0x444>
 80078b8:	eef1 7a67 	vneg.f32	s15, s15
 80078bc:	edc5 7a00 	vstr	s15, [r5]
 80078c0:	e7c2      	b.n	8007848 <__kernel_rem_pio2f+0x3d0>
 80078c2:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8007788 <__kernel_rem_pio2f+0x310>
 80078c6:	e7f2      	b.n	80078ae <__kernel_rem_pio2f+0x436>
 80078c8:	aa2e      	add	r2, sp, #184	; 0xb8
 80078ca:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 80078ce:	edd0 7a00 	vldr	s15, [r0]
 80078d2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078d6:	3901      	subs	r1, #1
 80078d8:	2900      	cmp	r1, #0
 80078da:	daf5      	bge.n	80078c8 <__kernel_rem_pio2f+0x450>
 80078dc:	f1bb 0f00 	cmp.w	fp, #0
 80078e0:	d017      	beq.n	8007912 <__kernel_rem_pio2f+0x49a>
 80078e2:	eef1 7a47 	vneg.f32	s15, s14
 80078e6:	edc5 7a00 	vstr	s15, [r5]
 80078ea:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80078ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80078f2:	a82f      	add	r0, sp, #188	; 0xbc
 80078f4:	2101      	movs	r1, #1
 80078f6:	428b      	cmp	r3, r1
 80078f8:	da0e      	bge.n	8007918 <__kernel_rem_pio2f+0x4a0>
 80078fa:	f1bb 0f00 	cmp.w	fp, #0
 80078fe:	d001      	beq.n	8007904 <__kernel_rem_pio2f+0x48c>
 8007900:	eef1 7a67 	vneg.f32	s15, s15
 8007904:	edc5 7a01 	vstr	s15, [r5, #4]
 8007908:	e79e      	b.n	8007848 <__kernel_rem_pio2f+0x3d0>
 800790a:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8007788 <__kernel_rem_pio2f+0x310>
 800790e:	4619      	mov	r1, r3
 8007910:	e7e2      	b.n	80078d8 <__kernel_rem_pio2f+0x460>
 8007912:	eef0 7a47 	vmov.f32	s15, s14
 8007916:	e7e6      	b.n	80078e6 <__kernel_rem_pio2f+0x46e>
 8007918:	ecb0 7a01 	vldmia	r0!, {s14}
 800791c:	3101      	adds	r1, #1
 800791e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007922:	e7e8      	b.n	80078f6 <__kernel_rem_pio2f+0x47e>
 8007924:	edd0 7a00 	vldr	s15, [r0]
 8007928:	edd0 6a01 	vldr	s13, [r0, #4]
 800792c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007930:	3c01      	subs	r4, #1
 8007932:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007936:	ed80 7a00 	vstr	s14, [r0]
 800793a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800793e:	edc0 7a01 	vstr	s15, [r0, #4]
 8007942:	e791      	b.n	8007868 <__kernel_rem_pio2f+0x3f0>
 8007944:	edd1 7a00 	vldr	s15, [r1]
 8007948:	edd1 6a01 	vldr	s13, [r1, #4]
 800794c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007950:	3801      	subs	r0, #1
 8007952:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007956:	ed81 7a00 	vstr	s14, [r1]
 800795a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795e:	edc1 7a01 	vstr	s15, [r1, #4]
 8007962:	e786      	b.n	8007872 <__kernel_rem_pio2f+0x3fa>
 8007964:	aa2e      	add	r2, sp, #184	; 0xb8
 8007966:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 800796a:	ed91 7a00 	vldr	s14, [r1]
 800796e:	3b01      	subs	r3, #1
 8007970:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007974:	e783      	b.n	800787e <__kernel_rem_pio2f+0x406>
 8007976:	eef1 6a66 	vneg.f32	s13, s13
 800797a:	eeb1 7a47 	vneg.f32	s14, s14
 800797e:	edc5 6a00 	vstr	s13, [r5]
 8007982:	ed85 7a01 	vstr	s14, [r5, #4]
 8007986:	eef1 7a67 	vneg.f32	s15, s15
 800798a:	e785      	b.n	8007898 <__kernel_rem_pio2f+0x420>

0800798c <__kernel_sinf>:
 800798c:	ee10 3a10 	vmov	r3, s0
 8007990:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007994:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8007998:	da04      	bge.n	80079a4 <__kernel_sinf+0x18>
 800799a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800799e:	ee17 3a90 	vmov	r3, s15
 80079a2:	b35b      	cbz	r3, 80079fc <__kernel_sinf+0x70>
 80079a4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80079a8:	eddf 7a15 	vldr	s15, [pc, #84]	; 8007a00 <__kernel_sinf+0x74>
 80079ac:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8007a04 <__kernel_sinf+0x78>
 80079b0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80079b4:	eddf 7a14 	vldr	s15, [pc, #80]	; 8007a08 <__kernel_sinf+0x7c>
 80079b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80079bc:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8007a0c <__kernel_sinf+0x80>
 80079c0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80079c4:	eddf 7a12 	vldr	s15, [pc, #72]	; 8007a10 <__kernel_sinf+0x84>
 80079c8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80079cc:	eee6 7a07 	vfma.f32	s15, s12, s14
 80079d0:	b930      	cbnz	r0, 80079e0 <__kernel_sinf+0x54>
 80079d2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8007a14 <__kernel_sinf+0x88>
 80079d6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80079da:	eea6 0a26 	vfma.f32	s0, s12, s13
 80079de:	4770      	bx	lr
 80079e0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80079e4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80079e8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80079ec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80079f0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8007a18 <__kernel_sinf+0x8c>
 80079f4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80079f8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	2f2ec9d3 	.word	0x2f2ec9d3
 8007a04:	b2d72f34 	.word	0xb2d72f34
 8007a08:	3638ef1b 	.word	0x3638ef1b
 8007a0c:	b9500d01 	.word	0xb9500d01
 8007a10:	3c088889 	.word	0x3c088889
 8007a14:	be2aaaab 	.word	0xbe2aaaab
 8007a18:	3e2aaaab 	.word	0x3e2aaaab

08007a1c <__kernel_tanf>:
 8007a1c:	b508      	push	{r3, lr}
 8007a1e:	ee10 3a10 	vmov	r3, s0
 8007a22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a26:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 8007a2a:	eef0 7a40 	vmov.f32	s15, s0
 8007a2e:	da17      	bge.n	8007a60 <__kernel_tanf+0x44>
 8007a30:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8007a34:	ee17 1a10 	vmov	r1, s14
 8007a38:	bb41      	cbnz	r1, 8007a8c <__kernel_tanf+0x70>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	4313      	orrs	r3, r2
 8007a3e:	d108      	bne.n	8007a52 <__kernel_tanf+0x36>
 8007a40:	f000 f8ce 	bl	8007be0 <fabsf>
 8007a44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a48:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a50:	bd08      	pop	{r3, pc}
 8007a52:	2801      	cmp	r0, #1
 8007a54:	d0fa      	beq.n	8007a4c <__kernel_tanf+0x30>
 8007a56:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007a5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007a5e:	e7f5      	b.n	8007a4c <__kernel_tanf+0x30>
 8007a60:	494d      	ldr	r1, [pc, #308]	; (8007b98 <__kernel_tanf+0x17c>)
 8007a62:	428a      	cmp	r2, r1
 8007a64:	db12      	blt.n	8007a8c <__kernel_tanf+0x70>
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfb8      	it	lt
 8007a6a:	eef1 7a40 	vneglt.f32	s15, s0
 8007a6e:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8007b9c <__kernel_tanf+0x180>
 8007a72:	ee70 7a67 	vsub.f32	s15, s0, s15
 8007a76:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8007ba0 <__kernel_tanf+0x184>
 8007a7a:	bfb8      	it	lt
 8007a7c:	eef1 0a60 	vneglt.f32	s1, s1
 8007a80:	ee70 0a60 	vsub.f32	s1, s0, s1
 8007a84:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8007a88:	eddf 0a46 	vldr	s1, [pc, #280]	; 8007ba4 <__kernel_tanf+0x188>
 8007a8c:	eddf 5a46 	vldr	s11, [pc, #280]	; 8007ba8 <__kernel_tanf+0x18c>
 8007a90:	ed9f 6a46 	vldr	s12, [pc, #280]	; 8007bac <__kernel_tanf+0x190>
 8007a94:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8007bb0 <__kernel_tanf+0x194>
 8007a98:	493f      	ldr	r1, [pc, #252]	; (8007b98 <__kernel_tanf+0x17c>)
 8007a9a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007a9e:	428a      	cmp	r2, r1
 8007aa0:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007aa4:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007aa8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007bb4 <__kernel_tanf+0x198>
 8007aac:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007ab0:	ed9f 6a41 	vldr	s12, [pc, #260]	; 8007bb8 <__kernel_tanf+0x19c>
 8007ab4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007ab8:	eddf 5a40 	vldr	s11, [pc, #256]	; 8007bbc <__kernel_tanf+0x1a0>
 8007abc:	eee6 5a07 	vfma.f32	s11, s12, s14
 8007ac0:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8007bc0 <__kernel_tanf+0x1a4>
 8007ac4:	eea5 6a87 	vfma.f32	s12, s11, s14
 8007ac8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8007bc4 <__kernel_tanf+0x1a8>
 8007acc:	eee7 5a05 	vfma.f32	s11, s14, s10
 8007ad0:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007bc8 <__kernel_tanf+0x1ac>
 8007ad4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007ad8:	eddf 5a3c 	vldr	s11, [pc, #240]	; 8007bcc <__kernel_tanf+0x1b0>
 8007adc:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007ae0:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8007bd0 <__kernel_tanf+0x1b4>
 8007ae4:	eea5 5a87 	vfma.f32	s10, s11, s14
 8007ae8:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8007bd4 <__kernel_tanf+0x1b8>
 8007aec:	eee5 5a07 	vfma.f32	s11, s10, s14
 8007af0:	eeb0 7a65 	vmov.f32	s14, s11
 8007af4:	eea7 6a26 	vfma.f32	s12, s14, s13
 8007af8:	ee67 5aa6 	vmul.f32	s11, s15, s13
 8007afc:	eeb0 7a46 	vmov.f32	s14, s12
 8007b00:	eeb0 6a60 	vmov.f32	s12, s1
 8007b04:	eea7 6a25 	vfma.f32	s12, s14, s11
 8007b08:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007bd8 <__kernel_tanf+0x1bc>
 8007b0c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8007b10:	eee5 0a87 	vfma.f32	s1, s11, s14
 8007b14:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8007b18:	db1d      	blt.n	8007b56 <__kernel_tanf+0x13a>
 8007b1a:	ee06 0a90 	vmov	s13, r0
 8007b1e:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 8007b22:	ee27 6a07 	vmul.f32	s12, s14, s14
 8007b26:	ee37 7a00 	vadd.f32	s14, s14, s0
 8007b2a:	179b      	asrs	r3, r3, #30
 8007b2c:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8007b30:	f003 0302 	and.w	r3, r3, #2
 8007b34:	f1c3 0301 	rsb	r3, r3, #1
 8007b38:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007b3c:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007b40:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007b44:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8007b48:	ee07 3a90 	vmov	s15, r3
 8007b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007b50:	ee67 7a80 	vmul.f32	s15, s15, s0
 8007b54:	e77a      	b.n	8007a4c <__kernel_tanf+0x30>
 8007b56:	2801      	cmp	r0, #1
 8007b58:	d01b      	beq.n	8007b92 <__kernel_tanf+0x176>
 8007b5a:	4b20      	ldr	r3, [pc, #128]	; (8007bdc <__kernel_tanf+0x1c0>)
 8007b5c:	ee17 2a10 	vmov	r2, s14
 8007b60:	401a      	ands	r2, r3
 8007b62:	ee06 2a10 	vmov	s12, r2
 8007b66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8007b6a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8007b6e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8007b72:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b7a:	ee16 2a90 	vmov	r2, s13
 8007b7e:	4013      	ands	r3, r2
 8007b80:	ee07 3a90 	vmov	s15, r3
 8007b84:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007b88:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8007b8c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8007b90:	e75c      	b.n	8007a4c <__kernel_tanf+0x30>
 8007b92:	eef0 7a47 	vmov.f32	s15, s14
 8007b96:	e759      	b.n	8007a4c <__kernel_tanf+0x30>
 8007b98:	3f2ca140 	.word	0x3f2ca140
 8007b9c:	3f490fda 	.word	0x3f490fda
 8007ba0:	33222168 	.word	0x33222168
 8007ba4:	00000000 	.word	0x00000000
 8007ba8:	b79bae5f 	.word	0xb79bae5f
 8007bac:	38a3f445 	.word	0x38a3f445
 8007bb0:	37d95384 	.word	0x37d95384
 8007bb4:	3a1a26c8 	.word	0x3a1a26c8
 8007bb8:	3b6b6916 	.word	0x3b6b6916
 8007bbc:	3cb327a4 	.word	0x3cb327a4
 8007bc0:	3e088889 	.word	0x3e088889
 8007bc4:	3895c07a 	.word	0x3895c07a
 8007bc8:	398137b9 	.word	0x398137b9
 8007bcc:	3abede48 	.word	0x3abede48
 8007bd0:	3c11371f 	.word	0x3c11371f
 8007bd4:	3d5d0dd1 	.word	0x3d5d0dd1
 8007bd8:	3eaaaaab 	.word	0x3eaaaaab
 8007bdc:	fffff000 	.word	0xfffff000

08007be0 <fabsf>:
 8007be0:	ee10 3a10 	vmov	r3, s0
 8007be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007be8:	ee00 3a10 	vmov	s0, r3
 8007bec:	4770      	bx	lr
	...

08007bf0 <floorf>:
 8007bf0:	ee10 3a10 	vmov	r3, s0
 8007bf4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007bf8:	3a7f      	subs	r2, #127	; 0x7f
 8007bfa:	2a16      	cmp	r2, #22
 8007bfc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007c00:	dc2a      	bgt.n	8007c58 <floorf+0x68>
 8007c02:	2a00      	cmp	r2, #0
 8007c04:	da11      	bge.n	8007c2a <floorf+0x3a>
 8007c06:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007c68 <floorf+0x78>
 8007c0a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c0e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c16:	dd05      	ble.n	8007c24 <floorf+0x34>
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	da23      	bge.n	8007c64 <floorf+0x74>
 8007c1c:	4a13      	ldr	r2, [pc, #76]	; (8007c6c <floorf+0x7c>)
 8007c1e:	2900      	cmp	r1, #0
 8007c20:	bf18      	it	ne
 8007c22:	4613      	movne	r3, r2
 8007c24:	ee00 3a10 	vmov	s0, r3
 8007c28:	4770      	bx	lr
 8007c2a:	4911      	ldr	r1, [pc, #68]	; (8007c70 <floorf+0x80>)
 8007c2c:	4111      	asrs	r1, r2
 8007c2e:	420b      	tst	r3, r1
 8007c30:	d0fa      	beq.n	8007c28 <floorf+0x38>
 8007c32:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007c68 <floorf+0x78>
 8007c36:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007c3a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c42:	ddef      	ble.n	8007c24 <floorf+0x34>
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	bfbe      	ittt	lt
 8007c48:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007c4c:	fa40 f202 	asrlt.w	r2, r0, r2
 8007c50:	189b      	addlt	r3, r3, r2
 8007c52:	ea23 0301 	bic.w	r3, r3, r1
 8007c56:	e7e5      	b.n	8007c24 <floorf+0x34>
 8007c58:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007c5c:	d3e4      	bcc.n	8007c28 <floorf+0x38>
 8007c5e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c62:	4770      	bx	lr
 8007c64:	2300      	movs	r3, #0
 8007c66:	e7dd      	b.n	8007c24 <floorf+0x34>
 8007c68:	7149f2ca 	.word	0x7149f2ca
 8007c6c:	bf800000 	.word	0xbf800000
 8007c70:	007fffff 	.word	0x007fffff

08007c74 <scalbnf>:
 8007c74:	ee10 3a10 	vmov	r3, s0
 8007c78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007c7c:	d025      	beq.n	8007cca <scalbnf+0x56>
 8007c7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8007c82:	d302      	bcc.n	8007c8a <scalbnf+0x16>
 8007c84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007c88:	4770      	bx	lr
 8007c8a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8007c8e:	d122      	bne.n	8007cd6 <scalbnf+0x62>
 8007c90:	4b2a      	ldr	r3, [pc, #168]	; (8007d3c <scalbnf+0xc8>)
 8007c92:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8007d40 <scalbnf+0xcc>
 8007c96:	4298      	cmp	r0, r3
 8007c98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007c9c:	db16      	blt.n	8007ccc <scalbnf+0x58>
 8007c9e:	ee10 3a10 	vmov	r3, s0
 8007ca2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007ca6:	3a19      	subs	r2, #25
 8007ca8:	4402      	add	r2, r0
 8007caa:	2afe      	cmp	r2, #254	; 0xfe
 8007cac:	dd15      	ble.n	8007cda <scalbnf+0x66>
 8007cae:	ee10 3a10 	vmov	r3, s0
 8007cb2:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007d44 <scalbnf+0xd0>
 8007cb6:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007d48 <scalbnf+0xd4>
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	eeb0 7a67 	vmov.f32	s14, s15
 8007cc0:	bfb8      	it	lt
 8007cc2:	eef0 7a66 	vmovlt.f32	s15, s13
 8007cc6:	ee27 0a27 	vmul.f32	s0, s14, s15
 8007cca:	4770      	bx	lr
 8007ccc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007d4c <scalbnf+0xd8>
 8007cd0:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007cd4:	4770      	bx	lr
 8007cd6:	0dd2      	lsrs	r2, r2, #23
 8007cd8:	e7e6      	b.n	8007ca8 <scalbnf+0x34>
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	dd06      	ble.n	8007cec <scalbnf+0x78>
 8007cde:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ce2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007ce6:	ee00 3a10 	vmov	s0, r3
 8007cea:	4770      	bx	lr
 8007cec:	f112 0f16 	cmn.w	r2, #22
 8007cf0:	da1a      	bge.n	8007d28 <scalbnf+0xb4>
 8007cf2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007cf6:	4298      	cmp	r0, r3
 8007cf8:	ee10 3a10 	vmov	r3, s0
 8007cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d00:	dd0a      	ble.n	8007d18 <scalbnf+0xa4>
 8007d02:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007d44 <scalbnf+0xd0>
 8007d06:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007d48 <scalbnf+0xd4>
 8007d0a:	eef0 7a40 	vmov.f32	s15, s0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	bf18      	it	ne
 8007d12:	eeb0 0a47 	vmovne.f32	s0, s14
 8007d16:	e7db      	b.n	8007cd0 <scalbnf+0x5c>
 8007d18:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007d4c <scalbnf+0xd8>
 8007d1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8007d50 <scalbnf+0xdc>
 8007d20:	eef0 7a40 	vmov.f32	s15, s0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	e7f3      	b.n	8007d10 <scalbnf+0x9c>
 8007d28:	3219      	adds	r2, #25
 8007d2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d2e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007d32:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d54 <scalbnf+0xe0>
 8007d36:	ee07 3a10 	vmov	s14, r3
 8007d3a:	e7c4      	b.n	8007cc6 <scalbnf+0x52>
 8007d3c:	ffff3cb0 	.word	0xffff3cb0
 8007d40:	4c000000 	.word	0x4c000000
 8007d44:	7149f2ca 	.word	0x7149f2ca
 8007d48:	f149f2ca 	.word	0xf149f2ca
 8007d4c:	0da24260 	.word	0x0da24260
 8007d50:	8da24260 	.word	0x8da24260
 8007d54:	33000000 	.word	0x33000000

08007d58 <_init>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	bf00      	nop
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr

08007d64 <_fini>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr
